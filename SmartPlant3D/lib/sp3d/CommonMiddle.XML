<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonMiddle</name>
    </assembly>
    <members>
        <member name="T:Ingr.SP3D.Common.Middle.HierarchiesRoot">
            <summary>
            Class definition for the HierarchiesRoot object. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.BusinessObject">
            <summary>
            BusinessObject is the base implementation class that wrappers all SP3D Business Objects. It provides a set of 
            property and attribute access methods, as well as an underlying mechanism that manages the lifetime of 
            the BusinessObject. This involves the use of a public class and a private inner class (PrivateBusinessObject) that 
            actually accesses the COM BusinessObject.
            
            <para>This file contains support for getting and removing notes from Businessobjects.</para>O
            </summary>
            <summary>
            BusinessObject is the base implementation class that wraps all SmartPlant 3D business objects. It provides a set of 
            property and attribute access methods, as well as an underlying mechanism that manages the lifetime of 
            the BusinessObject. This involves the use of a public class and a private inner class (PrivateBusinessObject) that 
            actually accesses the COM BusinessObject.
            </summary>
            <summary>
            BusinessObject is the base implementation class that wrappers all SP3D business objects. It provides a set of 
            property and attribute access methods, as well as an underlying mechanism that manages the lifetime of 
            the BO. This involves the use of a public class and a private inner class (PrivateBusinessObject) that 
            actually accesses the COM BO.
            
            This file contains property access methods.
            </summary>
            <summary>
            BusinessObject is the base implementation class that wrappers all SP3D Business Objects. It provides a set of 
            property and atribute access methods, as well as an underlying mechanism that manages the lifetime of 
            the BO. This involves the use of a public class, and a private inner class (PrivateBusinessObject) that 
            actually accesses the COM BO.
            
            Thie code in this file deals with the Relatinship aspects of BusinessObject
            </summary>
             <summary>
             BusinessObject is the base implementation class that wrappers all SP3D business objects. It provides a set of 
             property and attribute access methods, as well as an underlying mechanism that manages the lifetime of 
             the BO. This involves the use of a public class and a private inner class (PrivateBusinessObject) that 
             actually accesses the COM BO.
             </summary>
             <example> This is an example for BusinessObject class methods and properties.
             <code>
             Public Class BusinessObject
               Public Sub New()
            
               'Getting the TransactionManager service from MiddleServiceProvider.
                Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                'Started creation of Equipment business object.
                Dim oEqp1 As Equipment
                oEqp1 = New Equipment("PUMP 001A-E", Nothing) 'Null system indicates equipment is created under project root. 
            
                'Getting ILocalCoordinateSystem interface and setting the position of equipment.
                'Setting the position of the equipment. 
                Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEqp1, ILocalCoordinateSystem)
                Dim oPos As New Position()
                oPos.X = 3
                oPos.Y = 3
                oPos.Z = 3
                'Setting the position of the equipment.
                oEqpCS.Origin = oPos
            
                'How to access properties on a BusinessObject.
            
                'Getting the database ID of the equipment BusinessObject.
                Dim sEqp1DatabaseID As String
                sEqp1DatabaseID = oEqp1.DatabaseID
            
                'Getting the database connection from the BusinessObject.
                Dim oEqp1DBConnection As SP3DConnection
                oEqp1DBConnection = oEqp1.DBConnection
            
                'Getting the class info from the BusinessObject. 
                Dim m_oEqp1ClassInfo As ClassInformation
                m_oEqp1ClassInfo = oEqp1.ClassInfo
            
                'Getting the ToString property from the BusinessObject. 
                Dim sNameIdentity As String = ""
                sNameIdentity = oEqp1.ToString()
            
                'Getting the user class info of the BusinessObject.
                Dim m_oEqp1UserClassInfo As ClassInformation
                m_oEqp1UserClassInfo = oEqp1.UserClassInfo
            
                'Getting hash code of the BusinessObject.
                Dim sHashCode As Integer
                sHashCode = oEqp1.GetHashCode()
            
                'Checking whether a BusinessObject is a proxy.
                Dim bIsProxy As Boolean
                bIsProxy = oEqp1.IsProxy
            
                'Checking whether a BusinessObject supports an interface using SupportsInterface method.
                'In this case, checking whether an Equipment object supports IJDObject interface.
                Dim bObjSupportsInterface As Boolean
                bObjSupportsInterface = oEqp1.SupportsInterface("IJDObject")
            
                'Checking the BOC type of the BusinessObject using BOCName.
                Dim strBOCName As String = m_oEqp1ClassInfo.BOC.Name
                Dim bIsTypeOfBOC As Boolean = False
                bIsTypeOfBOC = oEqp1.IsTypeOfBOC(strBOCName)
            
                'Checking the BOC type of the BusinessObject using BOCInfo.
                Dim oBOCInfo As BOCInformation
                oBOCInfo = m_oEqp1ClassInfo.BOC
                Dim bIsTypeSameAsBOCInfo As Boolean = False
                bIsTypeSameAsBOCInfo = oEqp1.IsTypeOfBOC(oBOCInfo)
             
                'Getting the object ID of the BusinessObject. 
                Dim sEqp1ObjectID As String = ""
                sEqp1ObjectID = oEqp1.ObjectID
            
                'Using != and == operators on BusinessObject.
                Dim oEqp2 As Equipment = Nothing
                oEqp2 = New Equipment("PUMP 001A-E", Nothing) 'Null system indicates equipment is created under project. root. 
            
                Dim oEqp2CS As ILocalCoordinateSystem = DirectCast(oEqp2, ILocalCoordinateSystem)
                Dim oOriginPos As New Position()
                oOriginPos.X = 3
                oOriginPos.Y = 3
                oOriginPos.Z = 3
                oEqp2CS.Origin = oOriginPos
            
                'Comparing whether two BusinessObjects are equal using Equals method.
                If oEqp1.Equals(oEqp2) Then
                    'The Two equipment Objects are Equal.
                End If
            
                'Comparing whether two BusinessObjects are equal using '=' operator.
                If oEqp1 = oEqp2 Then
                    'The Two equipment objects are equal.
                End If
            
                'LogResults("Getting the reference of the same Equipment BusinessObject") 
                Dim oEqp1Copy As Equipment = oEqp1
            
                'Checking whether two BusinessObjects are not equal.
                If oEqp1Copy <![CDATA[<>]]> oEqp1 Then
                    'The Two BusinessObjects are not equal.
                End If
            
                'Getting the access control ID of the BusinessObject.
                Dim AccessControl As AccessControlIDs
                AccessControl = oEqp1.AccessControl
            
                'Getting the approval status of the BusinessObject.
                Dim ApprovalStatus As ApprovalStatusIDs
                ApprovalStatus = oEqp1.ApprovalStatus
            
                'Getting the permission group of the BusinessObject.
                Dim oPermissionGroup As PermissionGroup
                oPermissionGroup = oEqp1.PermissionGroup
            
                'Deleting a BusinessObject.
                'Deleting an Equipment BusinessObject.
                oEqp2.Delete()
            
                'Getting the notes on a BusinessObject.
                Dim oEqp1Notes As ReadOnlyCollection(Of Note)
                oEqp1Notes = oEqp1.Notes
            
                'Getting the relationships on BusinessObject.
                Dim oRelationshipsCol As ReadOnlyCollection(Of RelationCollection)
                oRelationshipsCol = oEqp1.Relationships
            
                'Setting a property on a BusinessObject using an interface and the property name.
                'Setting the ShaftDiameter value on a IJUAShaftDimensions Interface of Equipment BusinessObject.
                oEqp1.SetPropertyValue(0.2, "IJUAShaftDimensions", "ShaftDiameter")
            
                'Getting a property on a BusinessObject using an interface and the property name.
                'Getting the shaft diameter value on a IJUAShaftDimensions interface of equipment BusinessObject.
                Dim dblShaftDia As Double
                Dim oShaftDiaPropValue1 As PropertyValue = oEqp1.GetPropertyValue("IJUAShaftDimensions", "ShaftDiameter")
                Dim oShaftDiaPropertyValuedbl As PropertyValueDouble = DirectCast(oShaftDiaPropValue1, PropertyValueDouble)
                dblShaftDia = CDbl(oShaftDiaPropertyValuedbl.PropValue)
            
                'Setting a property on a BusinessObject using property information.
                Dim dblShaftLen As Double
                Dim oShaftLengthPropValue As PropertyValue = oEqp1.GetPropertyValue("IJUAShaftDimensions", "ShaftLength")
                Dim oShaftLenPropInfo As PropertyInformation = oShaftLengthPropValue.PropertyInfo
                Dim dShaftLength As Double = 0.5
                'Setting the shaft length value on an equipment BusinessObject using shaft length property information.
                oEqp1.SetPropertyValue(dShaftLength, oShaftLenPropInfo)
            
                'Getting a property on a BusinessObject using property information.
                oShaftLengthPropValue = oEqp1.GetPropertyValue(oShaftLenPropInfo)
                Dim oShaftLenPropertyValuedbl As PropertyValueDouble = DirectCast(oShaftLengthPropValue, PropertyValueDouble)
                dblShaftLen = CDbl(oShaftLenPropertyValuedbl.PropValue)
            
                'Getting a relationship collection using relation name and role name.
                Dim m_oEqp1DistribPortsRelCol As RelationCollection = oEqp1.GetRelationship("DistribPorts", "DistribPort")
            
                'Getting a relationship collection using relationship info and role name. 
                Dim RelInfo As RelationshipInformation
                Dim strNameSpace As String = "CMNSCH"
                ' Namespace can't be null so pass "" 
                Dim strRelationshipName As String = "DistribPorts"
                Dim strRoleName As String = "DistribPart"
                RelInfo = oEqp1.DBConnection.MetadataMgr.GetRelationshipInfo(strRelationshipName, strNameSpace)
            
                Dim m_oEqp1DistribPortsRelationCol As RelationCollection
                m_oEqp1DistribPortsRelationCol = oEqp1.GetRelationship(RelInfo, strRoleName)
            
                'Creating a note on equipment BusinessObject.
                Dim oNote As New Note(oEqp1)
                oTransactionMgr.Commit("Create Note from CommonMiddle SOMBusinessObject ATP")
            
                'Setting a string type property on BusinessObject using an interface name and property name. 
                'Setting the name property on the IJGeneralNote interface.
                oNote.SetPropertyValue("CommonMiddleTestEqp.SOMEquip01", "IJGeneralNote", "Name")
                'Setting the Text property on the IJGeneralNote Interface.
                oNote.SetPropertyValue("PUMP 001A-E", "IJGeneralNote", "Text")
            
                'Setting a boolean property on BusinessObject using an interface name and property name. 
                Dim bIsDimensioned As Boolean = False
                oNote.SetPropertyValue(bIsDimensioned, "IJGeneralNote", "Dimensioned")
            
                'Getting a boolean property on BusinessObject using interface name and property name. 
                Dim oNoteDimensionedPropValue As PropertyValue = oNote.GetPropertyValue("IJGeneralNote", "Dimensioned")
                Dim oNoteDimensionedPropertyValueBool As PropertyValueBoolean = DirectCast(oNoteDimensionedPropValue, PropertyValueBoolean)
                Dim bIsNoteDimensioned As Boolean = CBool(oNoteDimensionedPropertyValueBool.PropValue)
            
                'Setting a boolean property on BusinessObject using property information. 
                Dim bIsDimension As Boolean
                bIsDimension = True
                Dim oNoteDimensionedPropInfo As PropertyInformation = oNoteDimensionedPropValue.PropertyInfo
                oNote.SetPropertyValue(bIsDimensioned, oNoteDimensionedPropInfo)
            
                'Getting a boolean property on BusinessObject using property information. 
                Dim oNoteDimensionPropValue As PropertyValue
                Dim oNoteDimensionPropInfo As PropertyInformation = oNoteDimensionedPropValue.PropertyInfo
                oNoteDimensionPropValue = oNote.GetPropertyValue(oNoteDimensionPropInfo)
                oNoteDimensionedPropertyValueBool = DirectCast(oNoteDimensionPropValue, PropertyValueBoolean)
                bIsNoteDimensioned = CBool(oNoteDimensionedPropertyValueBool.PropValue)
            
                'Setting a codelist value property on BusinessObject using an interface name and property name.
                'Getting MetadataManager.
                Dim oMetadataMgr As MetadataManager = oNote.DBConnection.MetadataMgr
                Dim strCodeListName As String = "General"
                Dim strCodeListTableName As String = "NotePurpose"
                strNameSpace = "CMNSCH"
                'Getting codelist information of note purpose from MetadataManager.
                Dim CodeListInfo As CodelistInformation = oMetadataMgr.GetCodelistInfo(strCodeListTableName, strNameSpace)
                Dim oCodeListGeneral As CodelistItem = CodeListInfo.GetCodelistItem(strCodeListName)
                oNote.SetPropertyValue(oCodeListGeneral, "IJGeneralNote", "Purpose")
            
            
                'Getting a codelist value property on BusinessObject using an interface name and property name.
                Dim oNotePurPosePropValue As PropertyValue = oNote.GetPropertyValue("IJGeneralNote", "Purpose")
                Dim oNotePurPosePropValueCodeList As PropertyValueCodelist = DirectCast(oNotePurPosePropValue, PropertyValueCodelist)
                Dim iNotePurposeVal As Integer = CInt(oNotePurPosePropValueCodeList.PropValue)
               
                'Setting a codelist value property on BusinessObject using property information.
                Dim oNotePurPosePropInfo As PropertyInformation = oNotePurPosePropValue.PropertyInfo
                strCodeListName = "Design"
                Dim oCodeListDesign As CodelistItem = CodeListInfo.GetCodelistItem(strCodeListName)
                oNote.SetPropertyValue(oCodeListDesign, oNotePurPosePropInfo)
            
                'Getting a codelist value property on BusinessObject using property information.
                oNotePurPosePropValue = oNote.GetPropertyValue(oNotePurPosePropInfo)
                oNotePurPosePropValueCodeList = DirectCast(oNotePurPosePropValue, PropertyValueCodelist)
                iNotePurposeVal = CInt(oNotePurPosePropValueCodeList.PropValue)
               
                'Removing a note on BusinessObject.
                oEqp1.RemoveNote(oNote)
            
                'Removing all notes on BusinessObject.
                oEqp1.RemoveAllNotes()
            
                'Getting all properties on BusinessObject.
                Dim oPropertyInfo As ReadOnlyCollection(Of PropertyValue)
                oPropertyInfo = oEqp1.GetAllProperties()
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveNote(Ingr.SP3D.Common.Middle.Note)">
            <summary>
            Removes the relationship to the given Note object.
            </summary>
            <param name="oNoteToRemove">The note to be removed.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveAllNotes">
            <summary>
            Removes all notes related to this object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.DoesClsidSupportInterface(System.String,System.String)">
            <summary>
            Gets a value indicating if the class with the specified clsid supports the interface.
            </summary>
            <param name="sClsid">ClassId.</param>
            <param name="sInterfaceName">Interface name.</param>
            <returns>True if class of the specified clsid supports interface; otherwise false.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetPrivateBO">
            <summary>
            Protected access to the private wrapper.
            </summary>
            <returns>The private COM object wrapper as PrivateBusinessObject.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.OnSupportsInterface(System.String)">
            <summary>
            Called to determine if derived class supports an interface through DynamicQI. 
            This is called only if the class supports IJSupportsDynamicInteface in meta-data.
            </summary>
            <param name="strInterfaceName">Interface name.</param>
            <returns>True if object supports interface; otherwise False.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPersistentPrivateBO(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Object)">
            <summary>
            Sets a persistent PrivateBusinessObject for a persistent COM object. 
            The persistent PrivateBusinessObject is added to its .NET connection cache.
            </summary>
            <param name="oConnection">Connection as SP3DConnection.</param>
            <param name="oPersistentComObject">Persistent COM object as System.object.</param>
            <exception cref="T:System.ArgumentNullException">oConnection is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPersistentCOMBOAlreadyExistsException">Persistent COM BusinessObject already exists.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetTransientPrivateBO(System.Object)">
            <summary>
            Sets a transient PrivateBusinessObject for a transient COM object. 
            PrivateBusinessObject is not added to .NET connection cache.
            </summary>
            <param name="oTransientComObject">Transient COM object as System.object.</param>
            <exception cref="T:System.ArgumentNullException">oTransientComObject is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnTransientCOMBOAlreadyExistsException">Transient Com BusinessObject already exists.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnTransientPrivateBOAlreadyExistsException">Transient PrivateBO already exists.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIPersistGetClassIdException">Failed to get ClassId from IPersist interface.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.ToString">
            <summary>
            Gets the name for NamedItem objects; otherwise ObjectID or "unnamed object".
            </summary>
            <returns>System.string</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SupportsInterface(System.String)">
            <summary>
            Tests whether the object supports the indicated COM interface.
            </summary>
            <param name="strInterfaceName">Name of the interface to be tested as System.string.</param>
            <returns>System.bool.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.IsTypeOfBOC(System.String)">
            <summary>
            Returns true if this business object is of the indicated BOC type.
            </summary>
            <param name="strBOCName">Name of the BOC.</param>
            <returns>System.bool.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.IsTypeOfBOC(Ingr.SP3D.Common.Middle.Services.BOCInformation)">
            <summary>
            Returns true if this business object is of the indicated BOC type.
            </summary>
            <param name="oBOCInfo">BOCInformation reference.</param>
            <returns>System.bool.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.Delete">
            <summary>
            Deletes an object from the database. The object is deleted when the transaction is committed. 
            <para>BusinessObject should not be used after a transaction is committed; however, 
            BusinessObject can be used if the transaction is aborted.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">The object is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnBusinessObjectDeleteException">Failed to delete business object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.Equals(System.Object)">
            <summary>
            Determines whether the specified business object is equal to the current business object.
            </summary>
            <param name="obj">Object to test as System.object.</param>
            <returns>True if the passed in BusinessObject is equal to this BusinessObject.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetHashCode">
            <summary>
            Returns a hash code for the current business object.
            </summary>
            <returns>A hash code for the current BusinessObject.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.op_Equality(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Tests the equality of two business objects.
            </summary>
            <param name="oBOBase1">First object to test as BusinessObject.</param>
            <param name="oBOBase2">Second object to test as BusinessObject.</param>
            <returns>True if two BusinessObjects are equal.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.op_Inequality(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Tests the inequality of two business objects.
            </summary>
            <param name="oBOBase1">First object to test as BusinessObject.</param>
            <param name="oBOBase2">Second object to test as BusinessObject.</param>
            <returns>True if two BusinessObjects are not equal.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetPropertyValue(System.String,System.String)">
            <summary>
            Returns the value for the indicated property.
            </summary>
            <param name="sInterfaceName">Interface to which the property belongs.</param>
            <param name="sPropertyName">Name of the property.</param>
            <returns>Property value object for the passed in interface name and property name.</returns>
            <exception cref="T:System.ArgumentException">Raised if an argument is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotAccessSQLorMetadataException">Raised if SQL or metadata cannot be accessed.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised if getting the attribute fails.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyValueException">Raised if the property is invalid.</exception>
            <exception cref="T:System.ArgumentException">Raised if an argument is empty.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetPropertyValue(Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Returns the value for the indicated property.
            </summary>
            <param name="oPropertyInfo">Property info that describes the property in question.</param>
            <returns>Property value object for the passed in property information.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when oPropertyInfo is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotAccessSQLorMetadataException">Raised if cannot access SQL or metadata.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised if fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyValueException">Raised if property is invalid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetAllProperties">
            <summary>
            Collection of all property values for this object.
            </summary>
            <returns>ReadOnlyCollection of property values for this business object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised if there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(Ingr.SP3D.Common.Middle.PropertyValue)">
            <summary>
            Sets the value of the indicated property.
            </summary>
            <param name="oPropertyValue">New value.</param>
            <exception cref="T:System.ArgumentNullException">Raised if the argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyTypeException">Raised if the property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised if there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.String,System.String,System.String)">
            <summary>
            Sets the string value or the formatted string value of the indicated property.
            </summary>
            <param name="sValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property.</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is a null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute name from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnUOMParseUnitException">Raised when fail to parse the formatted string.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.String,Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the string value or the formatted string value of the indicated property.
            </summary>
            <param name="sValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to get property.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnProxyWriteFailException">Raised when fail to write proxy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnUOMParseUnitException">Raised when fail to parse the formatted string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Sets the int value of the indicated property.
            </summary>
            <param name="iValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property.</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is a null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Int32},Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the int value on the property if the property type is PTInteger. If the property type is
            PTCodelist, sets the codelist value on the property. For codelist type, the value needs to be within
            the codelist range.
            </summary>
            <param name="iValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the data type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get the attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set the property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Int16},System.String,System.String)">
            <summary>
            Sets the Int16 value of the indicated property.
            </summary>
            <param name="iValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property.</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is a null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Int16},Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the int value of the indicated property.
            </summary>
            <param name="iValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Sets the double value of the indicated property.
            </summary>
            <param name="dValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property.</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is a null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Double},Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the double value of the indicated property.
            </summary>
            <param name="dValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Single},System.String,System.String)">
            <summary>
            Sets the float value of the indicated property.
            </summary>
            <param name="fValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property.</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Single},Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the float value of the indicated property.
            </summary>
            <param name="fValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Sets the boolean value of the indicated property.
            </summary>
            <param name="bValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.Boolean},Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the boolean value of the indicated property.
            </summary>
            <param name="bValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(Ingr.SP3D.Common.Middle.Services.CodelistItem,System.String,System.String)">
            <summary>
            Sets the codelist value of the indicated property.
            </summary>
            <param name="iValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property.</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is a null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(Ingr.SP3D.Common.Middle.Services.CodelistItem,Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the codelist value of the indicated property.
            </summary>
            <param name="iValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the data type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Sets the DateTime value of the indicated property.
            </summary>
            <param name="oValue">Value to set.</param>
            <param name="sInterfaceName">Interface containing the property.</param>
            <param name="sPropertyName">Property name.</param>
            <exception cref="T:System.ArgumentException">Raised when interface name or property name is null string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">Raised when class info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised when interface name is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised when property info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get attribute name from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.SetPropertyValue(System.Nullable{System.DateTime},Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Sets the strDateTimeing value of the indicated property.
            </summary>
            <param name="oValue">Value to set.</param>
            <param name="oPropInfo">Property descriptor that identifies the property.</param>
            <exception cref="T:System.ArgumentNullException">Raised when property information is passed in as null.</exception>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">Raised when fail to get the attribute from COM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">Raised when fail to set the property value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Raised when there is no object for the moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetAttribute(Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Private method to return IJDAttribute given the Property Information.
            </summary>
            <returns>IJDAttibute object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetPropValue(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Boolean)">
            <summary>
            Private method to get PropertyValue.
            This method is first called from BO.GetPropertyValue and BO.GetAllProperties with bValid = true.
            In case of CmnInvalidPropertyValueException, this method is called again from BO.GetAllProperties with
            bValid = false. In this case, create a nullable PropertyValue object and set PropertyValue.Valid = false.
            </summary>
            <param name="oPropertyInfo">PropertyInformation object.</param>
            <param name="bValid">Whether the property is valid or not.</param>
            <returns>PropertyValue object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.CheckSetValueValidState(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.SP3DPropType)">
            <summary>
            Checks to make sure the object can be written and that arguments are valid.
            </summary>
            <param name="oPropInfo">The PropertyInfo for the property to be set.</param>
            <param name="iPropType">Property type: string, double, etc.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised when the argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnProxyWriteFailException">Raised when fail to write the proxy.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetPropertiesFromInterfaces(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.PropertyValue}@,Ingr.SP3D.Common.Middle.ReadOnlyDictionary{Ingr.SP3D.Common.Middle.Services.InterfaceInformation}@)">
            <summary>
            Gets a collection of PropertyValue objects for interfaces.
            </summary>
            <param name="oPropValueCollection">Reference to System.Collections.ObjectModel.Collection of PropertyValue objects.</param>
            <param name="oInterfaceInformationCol">Reference to Ingr.SP3D.Common.Middle.ReadOnlyDictionary of InterfaceInformation objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetPropInfoFromNames(System.String,System.String)">
            <summary>
            Checks for non-null interface and property name, and obtains corresponding Propinfo.
            </summary>
            <param name="sInterfaceName">string</param>
            <param name="sPropertyName">string</param>
            <returns>PropertyInformation descriptor for this interface/property names</returns>
            <exception cref="T:System.ArgumentNullException">Raised if the argument is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetPropInfo(System.String,System.String)">
            <summary>
            Private method to get PropertyInfo with an interface name and property name.
            If this object is a Proxy, uses the MetadataMgr to obtain a PropertyInfo, otherwise
            checks to see if Interface is supported on this object
            Raise exceptions if InterfaceInfo or PropertyInfo is not available.
            </summary>
            <param name="strInterfaceName">Interface Name.</param>
            <param name="strPropertyName">Property Name.</param>
            <returns>Property information corresponding to the passed in interface name and property name.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">Raised if interface info is not available.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">Raised if property info is not available.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetProxySourceClsid(PROXYLib.IJDProxy)">
            <summary>
            Gets clsid of source object for proxy.
            </summary>
            <param name="oIJDProxy">Proxy object as ProxyLib.IJDProxy.</param>
            <returns>proxy source clsid as System.string.</returns>
            <exception cref="T:System.ArgumentNullException">oIJProxy is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoProxySourceObjectException">Failed to bind proxy source.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIPersistGetClassIdException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetUserCLSID(IMSEntitySupport.IJDObject)">
            <summary>
            This method returns the UserCLSID of a BusinessObject.
            </summary>
            <param name="oIJDObject">IJDObject.</param>
            <returns>UserCLSID if it is a UserType.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetRelationship(System.String,System.String)">
            <summary>
            Returns via a RelationCollection the list of objects in the indicated role on the indicated relationship.
            </summary>
            <param name="strRelationshipName">Name of the relationship.</param>
            <param name="strRoleName">Name of the role whose objects are returned.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.String)">
            <summary>
            Returns a RelationCollection of objects in the specified role and relationship.
            </summary>
            <param name="oRelationshipInfo">Relationship information.</param>
            <param name="strRoleName">Role name.</param>
            <returns>RelationCollection.</returns>
            <exception cref="T:System.ArgumentNullException">oRelationshipInfo cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">strRoleName cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnRoleNameException">Rolename does not match the origin or destination rolenames of relationship.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination)">
            <summary>
            Private method to get the collection of objects on the indicated side of the indicated relationship.
            </summary>
            <param name="oRelationshipInfo">Relationship info object that defines the target relationship.</param>
            <param name="iOrigOrSide">Specifies which side objects are returned from.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetRelationCollFromColHelper(System.Object@)">
            <summary>
             Private method to get RelationCollection from COM CollectionHelper object.
            </summary>
            <param name="colHelperObj"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(System.String,System.String,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds the object to relationship on the indicated side.
            ## Need to move these to BOP - not sure how to make it work once we move BOP in another assembly 
            as most of the SOM cllasses won't be available there e.g. metadatamgr,relationshipInfo, BusinessObject etc.
            </summary>
            <param name="strRelationshipName">Relationship name of the target relationship.</param>
            <param name="strRoleName">Role (side) to which the object is added.</param>
            <param name="boBase">Object to be added.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.GetRelationInfoandSidefromRelnNameRoleName(System.String,System.String,Ingr.SP3D.Common.Middle.Services.RelationshipInformation@,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination@)">
            <summary>
             Get RelationshipInfo and Side from the supplied RelationshipName and RoleName.
            </summary>
            <param name="strRelationshipName">Relationship name.</param>
            <param name="strRoleName">Role name.</param>
            <param name="RelInfo">Relationship information.</param>
            <param name="iOrigOrdest"></param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnRoleNameException">Rolename does not match the origin or destination rolenames of relationship.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(System.String,System.String,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Adds a collection of objects to a relationship on the indicated side.
            </summary>
            <param name="strRelationshipName">Relationship name of the target relationship.</param>
            <param name="strRoleName">Role (side) to which the objects are to be added.</param>
            <param name="oBOColl">Objects to be added.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds the object to relationship on the indicated side.
            </summary>
            <param name="oRelationshipInfo">Relationship info object that defines the target relationship.</param>
            <param name="iOrigOrDest">Specifies which side object is added to.</param>
            <param name="boBase">Object to be added.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Adds a collection of objects to a relationship on the indicated side.
            </summary>
            <param name="oRelationshipInfo">Relationship info object that defines the target relationship.</param>
            <param name="iOrigOrDest">Specifies which side objects are added to.</param>
            <param name="oBOColl">Objects to be added.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(System.String,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds the object at a specified index on the Origin side of an ordered relationship.
            We don't need a Rolename for this as it should only be added towards Origin side on a sequenced relationship.
            </summary>
            <param name="strRelationshipName">Relationship name of the target relationship.</param>
            <param name="iIndex">Index at which the object is added.</param>
            <param name="boBase">Object to be added.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds the object at a specified index on the Origin side of an ordered relationship.
            </summary>
            <param name="oRelationshipInfo">Relationship info object that defines the target relationship.</param>
            <param name="iIndex">Index at which the object is added.</param>
            <param name="boBase">Object to be added.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
             exposed as internal to allow test code / other service to use it for modifying 
            relationship.
            </summary>
            <param name="oRelationshipInfo"></param>
            <param name="iIndex"></param>
            <param name="boBase"></param>
            <returns></returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException"></exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipInsertFailedException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(System.String,System.String,System.String,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            
            </summary>
            <param name="strRelationshipName"></param>
            <param name="strRoleName"></param>
            <param name="sLinkName"></param>
            <param name="boBase"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,System.String,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            
            </summary>
            <param name="oRelationshipInfo"></param>
            <param name="iOrigOrDest"></param>
            <param name="sLinkName"></param>
            <param name="boBase"></param>
            <returns></returns>
            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.AddToRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,System.String,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
             exposed as internal to allow test code / other service to use it for modifying 
            relationship.
            </summary>
            <param name="oRelationshipInfo"></param>
            <param name="iOrigOrDest"></param>
            <param name="sLinkName"></param>
            <param name="boBase"></param>
            <returns></returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException"></exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnObjectsNotWithinSameDBException"></exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipAddfailedException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveFromRelationship(System.String,System.String,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Returns number of objects left in relationship.
            </summary>
            <param name="strRelationshipName">Name of the relationship</param>
            <param name="strRoleName">Name of the role</param>
            <param name="boBase">Object to remove</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveFromRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes the object and returns number of objects left in relationship.
            </summary>
            <param name="oRelationshipInfo">Relationship descriptor.</param>
            <param name="iOrigOrDest">Which side to remove from.</param>
            <param name="boBase">Object to remove</param>
            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveFromRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            
            </summary>
            <param name="oRelationshipInfo"></param>
            <param name="iOrigOrDest"></param>
            <param name="boBase"></param>
            <returns></returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveFromRelationship(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.Int32)">
            <summary>
            Removes the object at the specifiec index of the origin side and returns number of objects left in relationship.
            </summary>
            <param name="oRelationshipInfo">Relationship descriptor</param>
            <param name="iIndex">Index at which removal takes place.</param>
            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveFromRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.Int32)">
            <summary>
            RemoveFromRelationshipInternal.
            </summary>
            <param name="oRelationshipInfo">RelationshipInformation.</param>
            <param name="iIndex">Index.</param>
            <returns>int.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException"></exception> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.RemoveFromRelationship(System.String,System.Int32)">
            <summary>
            Removes the object at the specifiec index of the origin side and returns number of objects left in relationship.
            </summary>
            <param name="strRelationshipName">Relationship name</param>
            <param name="iIndex">Index at which removal takes place.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Internal constructor; creating BusinessObject is only possible within SOM.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObject.#ctor">
            <summary>
            Internal, protected constructor to allow BusinessObject to be created. Allows creation of derived class objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.Notes">
            <summary>
            This property returns all notes that are related to this object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.PrivateBO">
            <summary>
            Internal access to the private wrapper.
            </summary>
            <returns>PrivateBusinessObject</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.COMBO">
            <summary>
            Returns a COM business object if PrivateBusinessObject is available; otherwise returns null.
            This COMBO reference is valid until a transaction commit or abort occurs.
            </summary>
            <returns>COM business object as System.object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.DatabaseID">
            <summary>
            Gets the read-only database ID for this BusinessObject.
            </summary>
            <returns>DatabaseID as System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.DBConnection">
            <summary>
            Gets the read-only database connection for this business object. Together with the database ID, this uniquely identifies the BusinessObject.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.SP3DConnection.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.ClassInfo">
            <summary>
            Gets the read-only access to the class info for this object.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.ClassInformation.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.UserClassInfo">
            <summary>
            Gets the read-only access to the user class info for this object. If the business object is not a user class, 
            it will return a null value.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.ClassInformation.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetUserClassInfoException">Failed to get the user class information for this business object.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.IsProxy">
            <summary>
            Returns True if this business object is a proxy; otherwise returns False.
            </summary>
            <returns>System.bool.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.ObjectID">
            <summary>
            Gets the object ID.
            </summary>
            <returns>System.string</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.ObjectIDForQuery">
            <summary>
            Gets the object ID that can be used in direct database queries. 
            <para>Format for MSSQL: "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"</para>
            <para>Format for Oracle: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.PermissionGroup">
            <summary>
            The permission group object to which this business object belongs.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.PermissionGroup</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetPermissionGroupException">Failed to get the permission group on the business object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetPermissionGroupException">Failed to set the permission group on the business object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPermissionGroupNotInConnectionException">The passed in permission group object does not belong to the connection. Failed to set the permission group.</exception>        
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.AccessControl">
            <summary>
            Gets the read-only access level for this object.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.AccessControlIDs.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.ApprovalStatus">
            <summary>
            Gets or sets approval status for this business object.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.ApprovalStatusIDs.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.ApprovalReason">
            <summary>
            Gets or sets approval reason for this business object.
            </summary>
            <returns>ApprovalReason as int</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnGetApprovalReasonException">Failed to get approval reason from the business object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetApprovalReasonException">Failed to set approval reason on the business object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.HyperLink">
            <summary>
            Gets the HyperLink object associated with this business object.
            </summary>
            <returns>HyperLink object</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObject.Relationships">
            <summary>
            Collection of RelationCollections corresponding to all relationships with which this object is currently involved
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipEnumerationFailedException"></exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISystem">
            <summary>
            Interface ISystem definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISystem.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds the specified object as a child to parent object.
            </summary>
            <param name="oChild">ISystemChild object.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISystem.SystemChildren">
            <summary>
            Returns the collection of system children of the parent object. An empty list is returned if there are
            no children for the parent object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IAssembly">
            <summary>
            Interface IAssembly definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IAssembly.AddAssemblyChild(Ingr.SP3D.Common.Middle.IAssemblyChild)">
            <summary>
            Adds the specified object as a child to parent object.
            </summary>
            <param name="oChild">IAssemblyChild object.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IAssembly.AssemblyChildren">
            <summary>
            Gets the collection of assembly children objects of the parent object. An empty list is returned if there are
            no children for the parent object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISpaceParent">
            <summary>
            Interface ISpaceParent definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISpaceParent.AddSpaceChild(Ingr.SP3D.Common.Middle.ISpaceChild)">
            <summary>
            Adds the specified object as a child to parent object.
            </summary>
            <param name="oChild">ISpaceChild object.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISpaceParent.SpaceChildren">
            <summary>
            Returns the collection of space children of the parent object. An empty list is returned if there are
            no children for the parent object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IWBSParent">
            <summary>
            Interface IWBSParent definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSParent.AddWBSChild(Ingr.SP3D.Common.Middle.IWBSChild)">
            <summary>
            Adds the specified child object to the parent.
            </summary>
            <param name="oChild">IWBSChild object.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSParent.WBSChildren">
            <summary>
            Returns a collection of IWBSChild items that are children of the parent object.  
            An empty collection will be returned if there are no children.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IAllowableSpecs">
            <summary>
            Interface IAllowableSpecs is used to manipulate the specifications assigned to
            a system.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IAllowableSpecs.AddAllowableSpec(Ingr.SP3D.Common.Middle.SpecificationBase)">
            <summary>
            Adds the specified specification object to the set of allowable specs for the system.
            </summary>
            <param name="oSpecification">SpecificationBase object.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IAllowableSpecs.RemoveAllowableSpec(Ingr.SP3D.Common.Middle.SpecificationBase)">
            <summary>
            Removes the specification object from the set of allowable specs for the system.
            </summary>
            <param name="oSpecification">SpecificationBase object.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSpecRelationshipException">The specification object is not related to the system.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IAllowableSpecs.ReplaceAllowableSpecs(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.SpecificationBase})">
            <summary>
            Removes all existing allowable specifications and adds the new set of specifications to the system.
            </summary>
            <param name="oSpecifications">ReadOnlyCollection of SpecificationBase objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IAllowableSpecs.ResetToParentSpecs">
            <summary>
            Resets the assigned specifications to the current object to match the assignment of the parent system object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IAllowableSpecs.AllowableSpecs">
            <summary>
            Gets the read-only collection of allowable specifications for the system.
            </summary>
            <returns>ReadOnlyCollection of SpecificationBase objects.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IAnalysisParent">
            <summary>
            Interface to be implemented by entities which group sets of analysis data.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IAnalysisParent.AddAnalysisChild(Ingr.SP3D.Common.Middle.IAnalysisChild)">
            <summary>
            Adds an analysis child object to this parent.
            </summary>
            <param name="analysisChild">The analysis child.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IAnalysisParent.AnalysisChildren">
            <summary>
            Returns collection of AnalysisChildren objects.
            </summary>
            <value>The analysis children.</value>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds an ISystemChild object as a system hierarchy child.
            </summary>
            <param name="oChild">ISystemChild</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException">
            Failed to add the system hierarchy child.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.AddAssemblyChild(Ingr.SP3D.Common.Middle.IAssemblyChild)">
            <summary>
            Adds the specified object as a child to parent object.
            </summary>
            <param name="oChild">IAssemblyChild</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.AddSpaceChild(Ingr.SP3D.Common.Middle.ISpaceChild)">
            <summary>
            Adds the specified object as a child to parent object. Not implemented in this release.
            </summary>
            <param name="oChild">ISpaceChild</param>
            <exception cref="T:System.ArgumentNullException">Raised if oChild is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.AddWBSChild(Ingr.SP3D.Common.Middle.IWBSChild)">
            <summary>
            Adds the specified child object to the parent.
            </summary>
            <param name="oChild">IWBSChild</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.AddAllowableSpec(Ingr.SP3D.Common.Middle.SpecificationBase)">
            <summary>
            Adds a specification to the collection of specifications assigned
            to a system.
            </summary>
            <param name="oSpecification">The system as BusinessObject to be added.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.RemoveAllowableSpec(Ingr.SP3D.Common.Middle.SpecificationBase)">
            <summary>
            Removes a specification from the collection of specifications assigned
            to a system.
            </summary>
            <param name="oSpecification">The specification as BusinessObject to be removed.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.ReplaceAllowableSpecs(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.SpecificationBase})">
            <summary>
            Replaces the collection of specifications assigned to a system.
            </summary>
            <param name="oSpecifications">Collection of new specifications to be
            assigned to the system.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.ResetToParentSpecs">
            <summary>
            Resets the collection of specifications assigned to a system with
            the same collection assigned to the parent system.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchiesRoot.AddAnalysisChild(Ingr.SP3D.Common.Middle.IAnalysisChild)">
            <summary>
            Adds the specified object as a child to the parent object.
            </summary>
            <param name="child">Child analysis object.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IAnalysisParent interface is not supported by given business object.</exception>
            <exception cref="T:System.ArgumentNullException">Raised when a null argument is passed in.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when the base object does not implement a valid analysis hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Raised when the child passed in is not of the appropriate type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Raised when the user has no access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddAnalysisChildException">Raised when there was failure to add a analysis hierarchy child.</exception>
            <example>This is an example of the AddAnalysisChild method.
            <code>
            'assign proper analysis parent and child object.
            Dim analysisChild As IAnalysisChild = Nothing
            Dim analysisParent As IAnalysisParent = Nothing
            
            analysisParent.AddAnalysisChild(analysisChild)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchiesRoot.SystemChildren">
            <summary>
            Returns a collection of the system hierarchy children.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemChildrenException">
            Failed to get system hierarchy children.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchiesRoot.AssemblyChildren">
            <summary>
            Returns the collection of IAssemblyChild objects of the parent object. An empty list is returned if there are
            no children for the parent object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchiesRoot.SpaceChildren">
            <summary>
            Returns the collection of ISpaceChild objects of the parent object. An empty list is returned if there are
            no children for the parent object. Not implemented in this release.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchiesRoot.WBSChildren">
            <summary>
            Returns a collection of IWBSChild items that are children of the parent object.  
            An empty collection is returned if there are no children.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchiesRoot.AllowableSpecs">
            <summary>
            Gets the collection of specifications assigned to a system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchiesRoot.AnalysisHelperObj">
            <summary>
            Read-only property to get AnalysisHierarchyHelper object.  
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IAnalysisParent interface is not supported by given business object.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchiesRoot.AnalysisChildren">
            <summary>
            Returns the collection of analysis children of the parent object. 
            An empty collection will be returned if there are no children for the parent object.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IAnalysisParent interface is not supported by given business object.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when the base object does not implement valid analysis hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisChildrenException">Raised when failed to get the analysis hierarchy children.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IBSplineSurface">
            <summary>
            Default interface for BSplineSurfaces.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.GetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position@,System.Double@)">
            <summary>
            Gets a particular pole weight at index.
            </summary>
            <param name="index">Integer</param>
            <param name="Pole">Position</param>
            <param name="dWeight">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.SetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Sets a particular pole weight at index.
            </summary>
            <param name="index">Integer</param>
            <param name="Pole">Position</param>
            <param name="dWeight">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.GetUKnot(System.Int32,System.Double@)">
            <summary>
            Gets a particular u knot at index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.GetVKnot(System.Int32,System.Double@)">
            <summary>
            Gets a particular v knot at index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.SetUKnot(System.Int32,System.Double)">
            <summary>
            Sets a particular u knot at index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.SetVKnot(System.Int32,System.Double)">
            <summary>
            Sets a particular v-knot at index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.GetPolesWeightsKnots(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{System.Double}@,System.Collections.ObjectModel.Collection{System.Double}@,System.Collections.ObjectModel.Collection{System.Double}@)">
            <summary>
            Gets basic information about this B-spline surface.
            </summary>
            <param name="iUOrder">U-order</param>
            <param name="iVOrder">V-order</param>
            <param name="iUNumPoles">Number of poles in U.</param>
            <param name="iVNumPoles">Number of poles in V.</param>
            <param name="colPoles">Poles - always order according to U-direction, then V-direction.</param>
            <param name="colWeights">Weights, if rational.</param>
            <param name="colUKnots">U knots.</param>
            <param name="colVKnots">V knots.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary.
            </summary>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.AddNaturalBoundary">
            <summary>
            Adds the natural boundary.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.RemoveBoundary(System.Int32)">
            <summary>
            Removes a boundary at "index".
            </summary>
            <param name="index">int</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.RemoveAllBoundaries">
            <summary>
            Removes all boundaries.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets a boundary at index.
            </summary>
            <param name="index">Integer</param>
            <param name="oCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets a boundary at index.
            </summary>
            <param name="index">Integer</param>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineSurface.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.NumPoles">
            <summary>
            Gets the total number of poles.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.UNumPoles">
            <summary>
            Gets the number of poles in U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.VNumPoles">
            <summary>
             Gets the number of poles in V.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.UOrder">
            <summary>
            Gets the order in U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.VOrder">
            <summary>
            Gets the order in V.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.UKnotCount">
            <summary>
            Gets the number of knots in U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.VKnotCount">
            <summary>
            Gets the number of knots in V.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.IsRational">
            <summary>
            Gets whether the surface is rational or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.UParamEdge">
            <summary>
            Checks this B-spline surface's edge along U.
            <para>0 | DEGENERATE_UNKNOWN</para>
            <para>1 | DEGENERATE_NONE</para>
            <para>2 | DEGENERATE_LOW</para>
            <para>3 | DEGENERATE_HIGH</para>
            <para>4 | DEGENERATE_BOTH</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.VParamEdge">
            <summary>
            Checks this B-spline surface's edge along V.
            <para>0 | DEGENERATE_UNKNOWN</para>
            <para>1 | DEGENERATE_NONE</para>
            <para>2 | DEGENERATE_LOW</para>
            <para>3 | DEGENERATE_HIGH</para>
            <para>4 | DEGENERATE_BOTH</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.BoundaryCount">
            <summary>
            Gets the number of 3d boundaries.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineSurface.BoundaryCount2d">
            <summary>
            Gets the number of 2d boundaries, which should match the number of 3d.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.BSplineSurface3d">
             <summary>
             Class definition for BSplineSurface3d.
             </summary>
             <example> This is an example for BSplineSurface3d methods and properties.
             <code> 
             Public Class BSplineSurface3d
               Public Sub New()
            
                 Dim vVec As New Vector(1, 1, 1)
                 Dim pZero As New Position(0, 0, 0)
                 Dim oP2 As New Position(0.2929, 0.7071, 0)
                 Dim colPoles As New Collection(Of Position)()
                 Dim colWeights As New Collection(Of Double)()
            
                 Dim I As Integer
                 For I = 0 To 19
                     colWeights.Add(1)
                 Next
                 'Set the collection of weights to 1.0 very basic. 
            
                 'Set the knot values for each direction. 
                 Dim colUKnots As New Collection(Of Double)()
                 colUKnots.Add(0)
                 colUKnots.Add(0)
                 colUKnots.Add(0)
                 colUKnots.Add(0.5)
                 colUKnots.Add(1)
                 colUKnots.Add(1)
                 colUKnots.Add(1)
            
                 Dim colVKnots As New Collection(Of Double)()
                 colVKnots.Add(0)
                 colVKnots.Add(0)
                 colVKnots.Add(0)
                 colVKnots.Add(0.3)
                 colVKnots.Add(0.6)
                 colVKnots.Add(1)
                 colVKnots.Add(1)
                 colVKnots.Add(1)
            
                 'Number of poles in the U and V direction. 
                 Dim iUNumPoles As Integer = 4
                 Dim iVNumPoles As Integer = 5
            
                 Dim dKnot As Double = 0
                 Dim iVNumPoints As Integer = 5
                 Dim colUNumPoints As New Collection(Of Integer)()
                 Dim iNum As Integer = 4
                 'Assigning the same number of points to go through each curve along the surface. 
                 colUNumPoints.Add(iNum)
                 colUNumPoints.Add(iNum)
                 colUNumPoints.Add(iNum)
                 colUNumPoints.Add(iNum)
                 colUNumPoints.Add(iNum)
            
                 'Define the positions for either the poles on the surface or the points the surface must go through.  
                 Dim colPoints As New Collection(Of Position)()
                 Dim pPnt As Position
                 pPnt = New Position(0, 0, 0)
                 colPoints.Add(New Position(0, 0, 0))
                 colPoints.Add(New Position(1, 1, 0))
                 colPoints.Add(New Position(2, 0, 0))
                 colPoints.Add(New Position(3, 1, 0))
            
                 'Same curve, but elevated. 
                 colPoints.Add(New Position(0, 0, 1))
                 colPoints.Add(New Position(1, 1, 1))
                 colPoints.Add(New Position(2, 0, 1))
                 colPoints.Add(New Position(3, 1, 1))
            
                 'Same shaped curve, but moved along the Y-axis. 
                 colPoints.Add(New Position(0, 2, 1))
                 colPoints.Add(New Position(1, 3, 1))
                 colPoints.Add(New Position(2, 2, 1))
                 colPoints.Add(New Position(3, 3, 1))
            
                 'Same shaped curve, but moved back down along the Z-axis. 
                 colPoints.Add(New Position(0, 2, 0))
                 colPoints.Add(New Position(1, 3, 0))
                 colPoints.Add(New Position(2, 2, 0))
                 colPoints.Add(New Position(3, 3, 0))
            
                 'Same shaped curve, but moved out along the Y-axis. 
                 pPnt = New Position(0, 4, 0)
                 colPoints.Add(pPnt)
                 pPnt = New Position(1, 5, 0)
                 colPoints.Add(pPnt)
                 pPnt = New Position(2, 4, 0)
                 colPoints.Add(pPnt)
                 pPnt = New Position(3, 5, 0)
                 colPoints.Add(pPnt)
            
                 'Set the U and V order for the surface. 
                 Dim iUOrder As Integer = 3, iVOrder As Integer = 3
                 'Set the closed form for the U and V to be open. 
                 Dim iUClosedForm As Integer = 1, iVClosedForm As Integer = 1
            
                 iUNumPoles = 4
            
                 Dim oBSplineSurface As New BSplineSurface3d(iUNumPoles, iVNumPoints, iUOrder, iVOrder, colPoints, colWeights, _
                 colUKnots, colVKnots, False, False, False)
                 If oBSplineSurface Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d.")
            
                 End If
            
                 Dim oConn As SP3DConnection
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 Dim oBSplineSurface1 As New BSplineSurface3d(oConn, iUNumPoles, iVNumPoints, iUOrder, iVOrder, colPoints, _
                 colWeights, colUKnots, colVKnots, False, False, False)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d.")
            
                 Else
                     oBSplineSurface1.Delete()
                     oBSplineSurface1 = Nothing
                 End If
            
                 oBSplineSurface1 = New BSplineSurface3d(iUNumPoles, iVNumPoints, iUOrder, iVOrder, colPoints, colUKnots, _
                 colVKnots, False, False, False)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d.")
            
                 Else
                     oBSplineSurface1.Delete()
                     oBSplineSurface1 = Nothing
                 End If
            
                 oBSplineSurface1 = New BSplineSurface3d(oConn, iUNumPoles, iVNumPoints, iUOrder, iVOrder, colPoints, _
                 colUKnots, colVKnots, False, False, False)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d.")
            
                 Else
                     oBSplineSurface1.Delete()
                     oBSplineSurface1 = Nothing
                 End If
            
                 oBSplineSurface1 = New BSplineSurface3d(oBSplineSurface)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d(BSplineSurface3d).")
            
                 Else
                     oBSplineSurface1.Delete()
                     oBSplineSurface1 = Nothing
                 End If
            
                 oBSplineSurface1 = New BSplineSurface3d(iVNumPoints, colUNumPoints, colPoints, iUOrder, iVOrder, iUClosedForm, _
                 iVClosedForm)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d(BSplineSurface3d).")
            
                 Else
                     oBSplineSurface1.Delete()
                     oBSplineSurface1 = Nothing
                 End If
            
                 oBSplineSurface1 = New BSplineSurface3d(oConn, iVNumPoints, colUNumPoints, colPoints, iUOrder, iVOrder, _
                 iUClosedForm, iVClosedForm)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d(BSplineSurface3d).")
            
                 Else
                     oBSplineSurface1.Delete()
                     oBSplineSurface1 = Nothing
                 End If
            
                 oBSplineSurface1 = New BSplineSurface3d(iVNumPoints, colUNumPoints, colPoints, iUOrder, iVOrder, False, _
                 False, 1, 1)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d(BSplineSurface3d).")
            
                 Else
                     oBSplineSurface1.Delete()
                     oBSplineSurface1 = Nothing
                 End If
            
                 oBSplineSurface1 = New BSplineSurface3d(oConn, iVNumPoints, colUNumPoints, colPoints, iUOrder, iVOrder, _
                 False, False, 1, 1)
                 If oBSplineSurface1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineSurface3d(BSplineSurface3d).")
            
                 End If
            
                 'Get the boundary count. 
                 If oBSplineSurface.BoundaryCount <![CDATA[<>]]> 0 Then
                     SOMUtils.LogResults("BSplineSurface boundary count failed.")
            
                 End If
            
                 'Get the boundary count 2d.
                 If oBSplineSurface.BoundaryCount2d <![CDATA[<>]]> 0 Then
                     SOMUtils.LogResults("BSplineSurface boundary2d count failed.")
            
                 End If
            
                 'Get whether rational or not.
                 If oBSplineSurface.IsRational <![CDATA[<>]]> True Then
                     SOMUtils.LogResults("BSplineSurface is rational failed.")
            
                 End If
            
                 'Get the number of poles.
                 If oBSplineSurface.NumPoles <![CDATA[<>]]> 20 Then
                     SOMUtils.LogResults("BSplineSurface is POLE count failed.")
            
                 End If
            
                 'Get the range.
                 Dim rRNG As New RangeBox(oP2, oP2)
                 rRNG = oBSplineSurface.Range
                 If SOMUtils.AreTheyEqual(rRNG.Low, rRNG.High) Then
                     SOMUtils.LogResults("BSplineSurface range failed.")
            
                 End If
            
                 'Get the U knot count.
                 If oBSplineSurface.UKnotCount <![CDATA[<>]]> 7 Then
                     SOMUtils.LogResults("BSplineSurface U knot count failed.")
            
                 End If
            
                 'Get the U number of poles.
                 If oBSplineSurface.UNumPoles <![CDATA[<>]]> 4 Then
                     SOMUtils.LogResults("BSplineSurface U number poles count failed.")
            
                 End If
            
                 'Get the U-order.
                 If oBSplineSurface.UOrder <![CDATA[<>]]> 3 Then
                     SOMUtils.LogResults("BSplineSurface uorder failed.")
            
                 End If
            
                 'Get the U parameter edge.
                 If oBSplineSurface.UParamEdge <![CDATA[<>]]> 1 Then
                     SOMUtils.LogResults("BSplineSurface u param edge failed.")
            
                 End If
            
                 'Get the V-knot count.
                 If oBSplineSurface.VKnotCount <![CDATA[<>]]> 8 Then
                     SOMUtils.LogResults("BSplineSurface V knot count failed.")
            
                 End If
            
            
                 'Get the V number of poles.
                 If oBSplineSurface.VNumPoles <![CDATA[<>]]> 5 Then
                     SOMUtils.LogResults("BSplineSurface V number poles count failed.")
            
                 End If
            
                 'Get the V-order.
                 If oBSplineSurface.VOrder <![CDATA[<>]]> 3 Then
                     SOMUtils.LogResults("BSplineSurface v-order failed.")
            
                 End If
            
                 'Get the V parameter edge.
                 If oBSplineSurface.VParamEdge <![CDATA[<>]]> 1 Then
                     SOMUtils.LogResults("BSplineSurface v param edge failed.")
            
                 End If
            
                 'Get the poles, weights, and knots.
                 oBSplineSurface.GetPolesWeightsKnots(iUOrder, iVOrder, iUNumPoles, iVNumPoles, colPoles, colWeights, _
                 colUKnots, colVKnots)
                 If iUOrder <![CDATA[<>]]> 3 OrElse iVOrder <![CDATA[<>]]> 3 OrElse iUNumPoles <![CDATA[<>]]> 4 OrElse iVNumPoles <![CDATA[<>]]> 5 OrElse colUKnots(3) <![CDATA[<>]]> 0.5 Then
                     SOMUtils.LogResults("Failed GetPolesWeightsKnots.")
            
                 End If
            
                 'Get the poles and weights.
                 Dim dWeight As Double
                 oBSplineSurface1.GetPoleWt(1, pPnt, dWeight)
                 If Not SOMUtils.AreTheyEqual(pPnt, pZero) OrElse Not SOMUtils.AreTheyEqual(dWeight, 0) OrElse oBSplineSurface1.IsRational = True Then
                     SOMUtils.LogResults("Failed GetPoleWt.")
            
                 End If
            
                 'Get the U-knot value.
                 oBSplineSurface1.GetUKnot(3, dKnot)
                 If dKnot <![CDATA[<>]]> 0 Then
                     SOMUtils.LogResults("Failed to get Uknot value.")
            
                 End If
            
                 'Get the V-knot value.
                 oBSplineSurface.GetVKnot(4, dKnot)
                 If dKnot <![CDATA[<>]]> 0.3 Then
                     SOMUtils.LogResults("Failed to get Vknot value.")
            
                 End If
            
                 'Remove the boundaries.
                 oBSplineSurface1.AddNaturalBoundary()
                 oBSplineSurface1.RemoveAllBoundaries()
                 If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 0 Then
                     SOMUtils.LogResults("Failed to remove all boundaries.")
            
                 Else
                     'Add a natural boundary.
                     oBSplineSurface1.AddNaturalBoundary()
                     If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 1 Then
                         SOMUtils.LogResults("Failed to add natural boundary.")
            
                     End If
                 End If
            
                 'Remove a boundary.
                 oBSplineSurface1.RemoveBoundary(1)
                 If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 0 Then
                     SOMUtils.LogResults("Failed to remove boundary.")
            
                 Else
                     'Set by surface.
                     oBSplineSurface1.[Set](oBSplineSurface)
                     If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 0 Then
                         SOMUtils.LogResults("Failed to set by surface.")
            
                     End If
                 End If
            
                 'Add a natural boundary to the surface, get the boundary curve from the surface, 
                 'remove the boundary, and then add it back in.
                 oBSplineSurface1.AddNaturalBoundary()
                 Dim colCS As New Collection(Of ComplexString3d)()
                 oBSplineSurface1.GetBoundaries(colCS)
                 If colCS.Count = 0 Then
                     SOMUtils.LogResults("Failed to get boundaries.")
            
                 End If
            
                 'Get the boundary from the surface. 
                 Dim cBDRY As ComplexString3d = Nothing
                 oBSplineSurface1.GetBoundary(1, cBDRY)
                 If cBDRY Is Nothing Then
                     SOMUtils.LogResults("Failed to get boundary.")
            
                 Else
                     'Remove all boundaries.
                     oBSplineSurface1.RemoveAllBoundaries()
                     If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 0 Then
                         SOMUtils.LogResults("Failed to remove all boundaries.")
            
                     Else
                         'Add a boundary
                         oBSplineSurface1.AddBoundary(cBDRY)
                         If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 1 Then
                             SOMUtils.LogResults("Failed to add a boundary.")
            
                         Else
                            
                             oBSplineSurface1.RemoveAllBoundaries()
                             oBSplineSurface1.SetBoundaries(colCS)
            
                             If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 1 Then
                                 SOMUtils.LogResults("Failed to remove all boundaries.")
            
                             Else
                                 'Set the boundary to the curve extracted from the surface earlier. 
                                 oBSplineSurface1.SetBoundary(1, cBDRY)
            
                                 If oBSplineSurface1.BoundaryCount <![CDATA[<>]]> 1 Then
                                     SOMUtils.LogResults("Failed to SetBoundary.")
            
                                 End If
            
                             End If
                         End If
                     End If
                 End If
            
                 oBSplineSurface1.DefineByFitSurface(iVNumPoints, colUNumPoints, colPoints, iUOrder, iVOrder, iUClosedForm, _
                 iVClosedForm)
                 If oBSplineSurface1.NumPoles <![CDATA[<>]]> 42 Then
                     SOMUtils.LogResults("Failed to DefineByFitSurface.")
                 End If
            
                 oBSplineSurface1.DefineByLeastSquareFitSurface(iVNumPoints, colUNumPoints, colPoints, iUOrder, iVOrder, False, _
                 False, 1, 1)
                 If oBSplineSurface1.NumPoles <![CDATA[<>]]> 9 Then
                     SOMUtils.LogResults("Failed to DefineByLeastSquareFitSurface.")
                 End If
            
                 oBSplineSurface1.DefineByParameters(iUNumPoles, iVNumPoles, iUOrder, iVOrder, colPoles, colWeights, _
                 colUKnots, colVKnots, False, False, False)
                 If oBSplineSurface1.NumPoles <![CDATA[<>]]> 20 Then
                     SOMUtils.LogResults("Failed to DefineByParameters.")
                 End If
            
                 'Get the pole and weight from the first pole and change it.
                 'It must be a rational surface to do this. 
                 oBSplineSurface.GetPoleWt(1, pPnt, dWeight)
                 oBSplineSurface.SetPoleWt(1, pPnt, 0.5)
                 oBSplineSurface.GetPoleWt(1, pPnt, dWeight)
            
                 If Not SOMUtils.AreTheyEqual(dWeight, 0.5) Then
                     SOMUtils.LogResults("Failed to set the weight.")
                 End If
            
                 oBSplineSurface.GetUKnot(4, dKnot)
                 oBSplineSurface.SetUKnot(4, 0.8)
                 oBSplineSurface.GetUKnot(4, dKnot)
                 If Not SOMUtils.AreTheyEqual(dKnot, 0.8) Then
                     SOMUtils.LogResults("Failed to set the Uknot.")
                 End If
            
                 oBSplineSurface.GetVKnot(4, dKnot)
                 oBSplineSurface.SetVKnot(4, 0.5)
                 oBSplineSurface.GetVKnot(4, dKnot)
                 If Not SOMUtils.AreTheyEqual(dKnot, 0.5) Then
                     SOMUtils.LogResults("Failed to set the Vknot.")
                 End If
            
                 'Perform transformation. 
                 Dim mMat4 As New Matrix4X4()
                 mMat4.SetIdentity()
                 vVec = New Vector(1, 1, 1)
                 mMat4.Translate(vVec)
                 oBSplineSurface.Transform(mMat4)
                 'Get the start point and check that it is still 0,0,0. 
                 Dim pPole As New Position(0, 0, 0)
                 oBSplineSurface.GetPoleWt(1, pPole, dWeight)
                 If SOMUtils.AreTheyEqual(pPole, pZero) Then
                     SOMUtils.LogResults("BSplineSurface transform failed.")
                 End If
            
                 'Set the BSplineSurface.
                 If oBSplineSurface1 Is Nothing Then
                     oBSplineSurface1 = New BSplineSurface3d(oBSplineSurface)
                 End If
                 oBSplineSurface1.[Set](oBSplineSurface)
                 If oBSplineSurface1.IsRational <![CDATA[<>]]> True Then
                     SOMUtils.LogResults("BSplineSurface set failed.")
                 Else
                     oBSplineSurface1.Delete()
                 End If
            
                 'Delete the BSplineSurface. 
                 oBSplineSurface.Delete()
                 oBSplineSurface1.Delete()
                 oBSplineSurface1 = Nothing
            
                 oBSplineSurface = Nothing
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Surface3d">
            <summary>
            Class definition for Surface3d.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Geometry3d">
            <summary>
            Class definition for Geometry3d.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ITransform">
            <summary>
            Interface ITransform definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITransform.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the object given a delta matrix.
            </summary>
            <param name="oT4X4">Matrix4X4 object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IRange">
            <summary>
            Interface IRange definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRange.Range">
            <summary>
            Gets the range of physical aspect of an object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Geometry3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for creating a Geom3d from an internal PBO returned from query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Geometry3d.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Geometry3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Virtual Transform definition.  Implementation is not done here.  For example, implementation
            for math objects are in the individual geometries(arc, line....).
            </summary>
            <param name="oT4X4"></param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Geometry3d.Range">
            <summary>
            Virtual Range definition.  Implementation is not done here.  For example, implementation
            for math objects are in the individual geometries(arc, line....).
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISurface">
            <summary>
            Interface for surfaces.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Tests whether the input point is on the surface.
            </summary>
            <param name="posPosition">Position</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.ScopeNormal(Ingr.SP3D.Common.Middle.SurfaceScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Gets the scope and normal of the surface.
            </summary>
            <param name="eScope">SurfaceScopeType enumerator.</param>
            <param name="vecNormal">Vector normal.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a point on the surface along vector from given point.
            </summary>
            <param name="pos">Position in which to project to curve.</param>
            <param name="vecProj">Vector to project along. Optional argument, if null,
                                  then the function projects along vector normal to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds a point on the surface along normal vector from given point.
            </summary>
            <param name="pos">Position to project to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.OutwardNormalAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds the outward normal at a given point.
            </summary>
            <param name="pos">Position to find outward normal at.</param>
            <returns>Vector - outward normal.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and a point.
            </summary>
            <param name="oPoint3d">Point3d object.</param>
            <param name="dMinDist">Minimum distance as a double.</param>
            <param name="posSrc">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and a curve.
            </summary>
            <param name="oInCurve">ICurve object.</param>
            <param name="dMinDist">Minimum distance as a double.</param>
            <param name="posSrc">Position</param>
            <param name="posIn">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and another surface.
            </summary>
            <param name="oInSurf">ISurface object.</param>
            <param name="dMinDist">Minimum distance as a double.</param>
            <param name="posSrc">Position</param>
            <param name="posIn">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this surface and a curve.
            </summary>
            <param name="oInCurve">ICurve object.</param>
            <param name="colCurves">Collection of business objects, which will either be curves or points.</param>
            <param name="eCode">GeometryIntersectionType enumerator.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this surface and another surface.
            </summary>
            <param name="oInSurf">ISurface object.</param>
            <param name="colCurves">Collection of Curve objects.</param>
            <param name="eCode">GeometryIntersectionType enumerator.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.Centroid(Ingr.SP3D.Common.Middle.Line3d,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Finds the centroid of this surface.
            </summary>
            <param name="oLine">Line3d object.</param>
            <param name="colCentroids">Collection of Position objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.LocatedCentroids(Ingr.SP3D.Common.Middle.Line3d)">
            <summary>
            Finds the Centroid of the surface.  If Projection, will break into faces and given line will locate
            nearest Centroid.
            </summary>
            <param name="oLine">Line input for locating the nearest Centroid.</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.Centroids">
            <summary>
            Finds the Centroid of the surface.  If a Projection surface it will break into faces and return separate
            Centroids.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISurface.Centroid">
            <summary>
            Finds the centroid of a given surface.
            </summary>
            <returns>The position of the centroid.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISurface.uForm">
            <summary>
            Gets the closure of the surface in U-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISurface.vForm">
            <summary>
            Gets the closure of the surface in V-direction.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for creating a Surface3d from an internal PBO returned from query. 
            </summary>
            <param name="oPBO">PrivateBusinessOjbect</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether the input point is on the surface.
            </summary>
            <param name="pos">Point as position.</param>
            <returns>Boolean - if True, the point is on the surface; If False, the point is not on the surface.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.ScopeNormal(Ingr.SP3D.Common.Middle.SurfaceScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Determines the planarity of the surface and normal.
            </summary>
            <param name="eScope">SurfaceScopeType defining the planarity of the surface.</param>
            <param name="vecNormal">Normal vector, if the surface is planar.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a point on the surface along vector from given point.
            </summary>
            <param name="pos">Position to project to curve.</param>
            <param name="vecProj">Vector to project along. Optional argument, if null,
                                  then the function projects along vector normal to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds a point on the surface along normal vector from the given point.
            </summary>
            <param name="pos">Position in which to project to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.OutwardNormalAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds the outward normal at a given point.
            </summary>
            <param name="pos">Position in which to find the outward normal.</param>
            <returns>Vector - outward normal.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and an input point.
            </summary>
            <param name="oPoint3d">Input point.</param>
            <param name="dMinDist">Output minimum distance.</param>
            <param name="posSrc">Point at minimum distance on this surface.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and an input curve.
            </summary>
            <param name="oInCurve">Input curve.</param>
            <param name="dMinDist">Output minimum distance.</param>
            <param name="posSrc">Point at minimum distance on this surface.</param>
            <param name="posIn">Point at minimum distance on input curve.</param>
            <exception cref="T:System.ArgumentNullException">oInCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and an input surface.
            </summary>
            <param name="oInSurf">Input surface.</param>
            <param name="dMinDist">Output minimum distance.</param>
            <param name="posSrc">Point at minimum distance on this surface.</param>
            <param name="posIn">Point at minimum distance on input surface.</param>
            <exception cref="T:System.ArgumentNullException">oInSurf cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Intersects this surface and an input curve.
            </summary>
            <param name="oInCurve">Input curve.</param>
            <param name="colCurves">Output collection of curves.  
                                    Note that this could be a collection of Points3d objects.</param>
            <param name="eIntCode">GeometryIntersectionType describing type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">oInCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Intersects this surface and input surface.
            </summary>
            <param name="oInSurf">Input surface.</param>
            <param name="colCurves">Output collection of curves.  
                                    Note that this could be a collection of Points3d objects.</param>
            <param name="eIntCode">GeometryIntersectionType describing type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">oInSurf cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.Centroid(Ingr.SP3D.Common.Middle.Line3d,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Finds one or more centroids of this surface.
            </summary>
            <param name="oLine">Optional. If given, it helps locate which centroid to 
            return.</param>
            <param name="colCentroids">Multiple centroids are returned only when a
            projection can be broken.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.LocatedCentroids(Ingr.SP3D.Common.Middle.Line3d)">
            <summary>
            Finds the Centroids of the surface faces.  Surface will be broken into separate surface/faces and input line will 
            locate which faces are desired to have Centroid returned.  If more than one face is located, then Centroids will 
            be ordered wrt face which is closest to line root point.  Note: that only Projection surface is working for this method.
            </summary>
            <param name="oLine">Line input for locating the nearest Centroid.</param>
            <returns>Centroid positions which are located with input line.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.Centroids">
            <summary>
            Finds the Centoid(s) of the surface.
            </summary>
            <returns>All centroid positions.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.Centroid">
            <summary>
            Finds the Centroid of the surface.
            </summary>
            <returns>Centroid of the whole surface.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Surface3d.ComCurveType(IngrGeom3D.IJCurve,Ingr.SP3D.Common.Middle.GeometryType@)">
            <summary>
            Converts a COM object to .NET Curve3d object.
            </summary>
            <param name="comIJCurve">IJCurve</param>
            <param name="eCurveType">GeometryType</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Surface3d.uForm">
            <summary>
            Gets the closure of the surface in U-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Surface3d.vForm">
            <summary>
            Gets the closure of the surface in V-direction.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create BSplineSurface3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.BSplineSurface3d)">
            <summary>
            Constructor used to copy an existing BSplineSurface3d.
            </summary>
            <param name="oBSplineSurface">A BSplineSurface3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oBSplineCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor to create a persistent rational B-spline surface given input parameters.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iUNumPoles">Number of poles in U.</param>
            <param name="iVNumPoles">Number of poles in V.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="colPoles">Poles (unweighted).</param>
            <param name="colWeights">Weights</param>
            <param name="colUKnots">Knots in U.</param>
            <param name="colVKnots">Knots in V.</param>
            <param name="bUPeriodic">Whether periodic in U.</param>
            <param name="bVPeriodic">Whether periodic in V.</param>
            <param name="bReverseN">Whether to reverse the outward normal or not.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colWeights cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUKnots cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colVKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumPoles*VNumPoles not equal to number of poles input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumPoles*VNumPoles not equal to number of weights input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">VNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor to create a transient rational B-spline surface given input parameters.
            </summary>
            <param name="iUNumPoles">Number of poles in U.</param>
            <param name="iVNumPoles">Number of poles in V.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="colPoles">Poles( unweighted).</param>
            <param name="colWeights">Weights</param>
            <param name="colUKnots">Knots in U.</param>
            <param name="colVKnots">Knots in V.</param>
            <param name="bUPeriodic">Whether periodic in U.</param>
            <param name="bVPeriodic">Whether periodic in V.</param>
            <param name="bReverseN">Whether to reverse the outward normal or not.</param>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colWeights cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUKnots cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colVKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumPoles*VNumPoles not equal to number of poles input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumPoles*VNumPoles not equal to number of weights input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">VNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor to create a persistent non-rational B-spline surface given input parameters.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iUNumPoles">Number of poles in U.</param>
            <param name="iVNumPoles">Number of poles in V.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="colPoles">Poles</param>
            <param name="colUKnots">Knots in U.</param>
            <param name="colVKnots">Knots in V.</param>
            <param name="bUPeriodic">Whether periodic in U.</param>
            <param name="bVPeriodic">Whether periodic in V.</param>
            <param name="bReverseN">Whether to reverse the outward normal or not.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUKnots cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colVKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumPoles*VNumPoles not equal to number of poles input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">VNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor to create a transient non-rational B-spline surface given input parameters.
            </summary>
            <param name="iUNumPoles">Number of poles in U.</param>
            <param name="iVNumPoles">Number of poles in V.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="colPoles">Poles</param>
            <param name="colUKnots">Knots in U.</param>
            <param name="colVKnots">Knots in V.</param>
            <param name="bUPeriodic">Whether periodic in U.</param>
            <param name="bVPeriodic">Whether periodic in V.</param>
            <param name="bReverseN">Whether to reverse the outward normal or not.</param>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUKnots cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colVKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumPoles*VNumPoles not equal to number of poles input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">UNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">VNumKnots not equal to number of knots input.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor to create a persistent, direct-fitted, B-spline surface.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iVNumPoints">Number of points to fit in the V-direction.</param>
            <param name="colUNumPoints">Array of number of points to fit in U-direction.
             This is an array because each row of points can have a different number in them.</param>
            <param name="colPoints">Points array.</param>
            <param name="iUOrder">Order in U to fit.</param>
            <param name="iVOrder">Order in V to fit.</param>
            <param name="iUClosedForm">Closed form setting in U.</param>
            <param name="iVClosedForm">Closed form setting in V.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUNumPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Sum of UNumPoints != number of points in the collection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByFitSurface exception.</exception>
            <remarks>Note: The points are ordered in U-direction, then V-direction (which is same as poles).
            The order for U and V, must be &gt;=2 and number of points to fit must &gt;= order.</remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(System.Int32,System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor to create a transient, direct-fitted, B-spline surface.
            </summary>
            <param name="iVNumPoints">Number of points to fit in V-direction.</param>
            <param name="colUNumPoints">Array of number of points to fit in U-direction.
             This is an array because each row of points can have a different number in them.</param>
            <param name="colPoints">Points array.</param>
            <param name="iUOrder">Order in U to fit.</param>
            <param name="iVOrder">Order in V to fit.</param>
            <param name="iUClosedForm">Closed form setting in U.</param>
            <param name="iVClosedForm">Closed form setting in V.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUNumPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Sum of UNumPoints != number of points in collection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByFitSurface exception.</exception>
            <remarks>Note: The points are ordered in U-direction, then V-direction (same as poles).
            The order for U and V, must be &gt;=2 and number of points to fit must &gt;= order.</remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructor to create a persistent least square-fitted, B-spline surface.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iVNumPoints">Number of points to fit in V-direction.</param>
            <param name="colUNumPoints">Array of number of points in U-direction.
             So, user can input a different number of points in each row.</param>
            <param name="colPoints">Points to least square fit.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="bUPeriodic">Whether periodic in U is desired.</param>
            <param name="bVPeriodic">Whether periodic in V is desired.</param>
            <param name="iUNSeg">Number of segments to fit in U.</param>
            <param name="iVNSeg">Number of segments to fit in V.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUNumPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Sum of UNumPoints != number of points in collection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByFitSurface exception.</exception>
            <remarks>Note: For a direct fit, Nseg = NumPoints - 1, so Nseg must be less= NumPoints-1.</remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(System.Int32,System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructor to create a transient least square-fitted, B-spline surface.
            </summary>
            <param name="iVNumPoints">Number of points to fit in V-direction.</param>
            <param name="colUNumPoints">Array of number of points in uUdirection.
             So, user can input a different number of points in each row.</param>
            <param name="colPoints">Points to least square fit.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="bUPeriodic">Whether periodic in U is desired.</param>
            <param name="bVPeriodic">Whether periodic in V is desired.</param>
            <param name="iUNSeg">Number of segments to fit in U.</param>
            <param name="iVNSeg">Number of segments to fit in V.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUNumPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Sum of UNumPoints != number of points in collection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Com CreateByFitSurface exception.</exception>
            <remarks>Note: For a direct fit, Nseg = NumPoints - 1, so Nseg must be less= NumPoints-1.</remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.ISurface)">
            <summary>
            Constructs a persistent BSplineSurface for another given surface object.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="inSurf">ISurface object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.#ctor(Ingr.SP3D.Common.Middle.ISurface)">
            <summary>
            Constructs a transient BSplineSurface for another given surface object.
            </summary>
            <param name="inSurf"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.Set(Ingr.SP3D.Common.Middle.BSplineSurface3d)">
            <summary>
            Sets this B-spline surface equal to an existing B-spline surface.
            </summary>
            <param name="oBSplineSurface3d">Existing BSplineSurface3d.</param>
            <exception cref="T:System.ArgumentNullException">oBSplineSurface3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.DefineByParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Redefines the B-spline surface given input parameters.
            </summary>
            <param name="iUNumPoles">Number of poles in U.</param>
            <param name="iVNumPoles">Number of poles in V.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="colPoles">Poles (unweighted if rational).</param>
            <param name="colWeights">Weights if rational</param>
            <param name="colUKnots">Knots in U.</param>
            <param name="colVKnots">Knots in V.</param>
            <param name="bUPeriodic">Whether periodic in U.</param>
            <param name="bVPeriodic">Whether periodic in V.</param>
            <param name="bReverseN">Whether to reverse the outward normal or not.</param>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUKnots cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colVKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">iUNumPoles * iVNumPoles != number of poles in collection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Weights are input and iUNumPoles * iVNumPoles != number of weights in collection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input iUNumPoles + iUOrder != iNumUKnotsn.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input iVNumPoles + iVOrder != iNumVKnots.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.DefineByFitSurface(System.Int32,System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Redefines the B-spline surface by a new direct-fitted, B-spline surface.
            </summary>
            <param name="iVNumPoints">Number of points to fit in V-direction.</param>
            <param name="colUNumPoints">Array of number of points to fit in U-direction.
             This is an array because each row of points can have a different number in them.</param>
            <param name="colPoints">Points array.</param>
            <param name="iUOrder">Order in U to fit.</param>
            <param name="iVOrder">Order in V to fit.</param>
            <param name="iUClosedForm">Closed form setting in U.</param>
            <param name="iVClosedForm">Closed form setting in V.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUNumPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Sum of UNumPoints != input number of points.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByFitSurface exception.</exception>
            <remarks>Note: The points are ordered in U-direction, then V-direction (same as poles).
            The order for U and V, must be &gt;=2 and number of points to fit must &gt;= order.</remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.DefineByLeastSquareFitSurface(System.Int32,System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Redefines a B-spline surface by a new least square-fitted, B-spline surface.
            </summary>
            <param name="iVNumPoints">Number of points to fit in V-direction.</param>
            <param name="colUNumPoints">Array of number of points in U-direction.
             So, user can input a different number of points in each row.</param>
            <param name="colPoints">Points to least square fit.</param>
            <param name="iUOrder">Order in U.</param>
            <param name="iVOrder">Order in V.</param>
            <param name="bUPeriodic">Whether periodic in U is desired.</param>
            <param name="bVPeriodic">Whether periodic in V is desired.</param>
            <param name="iUNSeg">Number of segments to fit in U.</param>
            <param name="iVNSeg">Number of segments to fit in V.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colUNumPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Sum of UNumPoints != input number of points.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByLeastSquareFitSurface exception.</exception>
            <remarks>Note: For a direct fit, Nseg = NumPoints - 1, so Nseg must be less= NumPoints-1.</remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.GetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position@,System.Double@)">
            <summary>
            Gets the pole and weight (if rational) at given index.
            </summary>
            <param name="index">Integer</param>
            <param name="Pole">Position</param>
            <param name="dWeight">Weight as a double.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.SetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Sets the pole and weight (if rational) at given index.
            </summary>
            <param name="index">Integer</param>
            <param name="Pole">Position</param>
            <param name="dWeight">Weight as a double.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.GetUKnot(System.Int32,System.Double@)">
            <summary>
            Gets the U-knot value at given index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">Knot as a double.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.GetVKnot(System.Int32,System.Double@)">
            <summary>
            Gets the V-knot value at given index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">Knot as a double.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.SetUKnot(System.Int32,System.Double)">
            <summary>
            Sets the U-knot value at given index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">Knot as a double.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.SetVKnot(System.Int32,System.Double)">
            <summary>
            Sets the V-knot value at given index.
            </summary>
            <param name="index">Integer</param>
            <param name="dKnot">Knot as a double.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.GetPolesWeightsKnots(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{System.Double}@,System.Collections.ObjectModel.Collection{System.Double}@,System.Collections.ObjectModel.Collection{System.Double}@)">
            <summary>
            Gets basic information about this B-spline surface.
            </summary>
            <param name="iUOrder">U-order</param>
            <param name="iVOrder">V-order</param>
            <param name="iUNumPoles">Number of poles in U.</param>
            <param name="iVNumPoles">Number of poles in V.</param>
            <param name="colPoles">Poles - always order according to U-direction, then V-direction.</param>
            <param name="colWeights">Weights, if rational.</param>
            <param name="colUKnots">U knots.</param>
            <param name="colVKnots">V knots.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the B-spline surface.
            </summary>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.AddNaturalBoundary">
            <summary>
            Adds the natural boundary.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.RemoveBoundary(System.Int32)">
            <summary>
            Removes the boundary.
            </summary>
            <param name="i">Integer</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the B-spline surface.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at index.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="i">Integer</param>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries.
            This will remove any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:System.ArgumentNullException">colCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this B-spline surface by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.ConvertPositionArray(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Array@)">
            <summary>
            Private routine to convert routine a collection of positions to System array.
            </summary>
            <param name="colPts">Collection of Position objects.</param>
            <param name="arPoints">System.Array</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.ConvertDoubleArray(System.Collections.ObjectModel.Collection{System.Double},System.Array@)">
            <summary>
            Private method to convert a collection of doubles to a system array.
            </summary>
            <param name="colDouble">Collection of doubles.</param>
            <param name="arDouble">System.Array</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.ConvertArrayDouble(System.Array,System.Collections.ObjectModel.Collection{System.Double}@)">
            <summary>
            Private routine to convert system array of doubles to a collection of doubles.
            </summary>
            <param name="arDouble">System.Array</param>
            <param name="colDouble">Collection of doubles.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.ConvertArrayPosition(System.Array,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Private routine to convert a system array of points to a collection of positions.
            </summary>
            <param name="arPoints">System.Array</param>
            <param name="colPosition">Collection of Position objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineSurface3d.ConvertIntArrayDouble(System.Collections.ObjectModel.Collection{System.Int32},System.Array@)">
            <summary>
            Private routine to convert a collection of ints to a system array of doubles.
            </summary>
            <param name="colInt">Collection of ints.</param>
            <param name="arDouble">System.Array</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.UOrder">
            <summary>
            Gets this B-spline surface's order in U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.VOrder">
            <summary>
            Gets this B-spline surface's order in V.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.NumPoles">
            <summary>
            Gets this B-spline surface's total number of poles.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.UNumPoles">
            <summary>
            Gets this B-spline surface's number of poles in U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.VNumPoles">
            <summary>
            Gets this B-spline surface's number of poles in V.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.UKnotCount">
            <summary>
            Gets this B-spline surface's number of knots in U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.VKnotCount">
            <summary>
            Gets this B-spline surface's number of knots in V.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.IsRational">
            <summary>
            Checks whether this B-spline surface is rational.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.UParamEdge">
            <summary>
            Checks this B-spline surface's edge along U.
            <para>0 | DEGENERATE_UNKNOWN</para>
            <para>1 | DEGENERATE_NONE</para>
            <para>2 | DEGENERATE_LOW</para>
            <para>3 | DEGENERATE_HIGH</para>
            <para>4 | DEGENERATE_BOTH</para>
            </summary>  
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.VParamEdge">
            <summary>
            Checks this B-spline surface's edge along V.
            <para>0 | DEGENERATE_UNKNOWN</para>
            <para>1 | DEGENERATE_NONE</para>
            <para>2 | DEGENERATE_LOW</para>
            <para>3 | DEGENERATE_HIGH</para>
            <para>4 | DEGENERATE_BOTH</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.BoundaryCount">
            <summary>
            Returns the number of boundaries.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.BoundaryCount2d">
            <summary>
            Returns the number of boundaries in 2d.
            The number of boundaries in 2d must match the number in 3d.
            <para>Also, note that you must have 2d boundaries if there are 3d boundaries.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineSurface3d.Range">
            <summary>
            Finds the range box of this B-spline surface.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PlaneDefinitionType">
            <summary>
            The enumerators used to create the plane definition object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PlaneDefinitionType.Coincident">
            <summary>
            Coincident plane type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PlaneDefinitionType.Offset">
            <summary>
            Plane by offset.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PlaneDefinitionType.Angle">
            <summary>
            Plane by angle.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PlaneDefinitionType.NormalToPlaneAndPoint">
            <summary>
            Normal to plane and point.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PlaneDefinitionType.ThreePointsPlane">
            <summary>
            Plane by three points.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PlaneDefinitionType.NormalToPlaneAndVector">
            <summary>
            Normal to plane and vector.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PlaneDefinition">
            <summary>
            PlaneDefinition class definition. 
            As a data-holder class, it provides the ability to create planes with variety of creation methods.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Public constructor for the PlaneDefinition class for the coincident construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or a planar surface.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for coincident construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim coordinateSystem As New CoordinateSystem(connection, CoordinateSystem.CoordinateSystemType.Grids)
            Dim gridElAxis As New GridAxis(coordinateSystem, AxisType.Z) 
            Dim elevationPlane As New GridElevationPlane(0, gridElAxis)
            Dim planeDefinition As New PlaneDefinition(elevationPlane)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,System.Double)">
            <summary>
            Public constructor for the PlaneDefinition class for offset from plane construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or a planar surface.</param>
            <param name="offset">Offset value.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for offset from plane construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim coordinateSystem As New CoordinateSystem(connection, CoordinateSystem.CoordinateSystemType.Grids)
            Dim gridElAxis As New GridAxis(coordinateSystem, AxisType.Z) 
            Dim elevationPlane As New GridElevationPlane(0, gridElAxis)
            Dim offset As Double = 30.0
            Dim planeDefinition As New PlaneDefinition(elevationPlane, offset)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d,System.Double)">
            <summary>
            Public constructor for the PlaneDefinition class for the angle construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or a planar surface.</param>
            <param name="angle">Angle to rotate.</param>
            <param name="rotationAxisStartPoint">Start point for the rotation axis.</param>
            <param name="rotationAxisEndPoint">End point for the rotation axis.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for the angle construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim coordinateSystem As New CoordinateSystem(connection, CoordinateSystem.CoordinateSystemType.Grids)
            Dim gridElAxis As New GridAxis(coordinateSystem, AxisType.Z) 
            Dim elevationPlane As New GridElevationPlane(0, gridElAxis)
            Dim angle As Double = Math.PI / 4
            Dim rotationAxisStartPoint As New Point3d(connection, 50.0, 50.0, 90.0)
            Dim rotationAxisEndPoint As New Point3d(connection, 50.0, 0.0, 90.0)
            Dim planeDefinition As New PlaneDefinition(elevationPlane, rotationAxisStartPoint, rotationAxisEndPoint, angle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.IPort,System.Double)">
            <summary>
            Public constructor for the PlaneDefinition class for the angle construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or a planar surface.</param>
            <param name="angle">Angle to rotate.</param>
            <param name="port">Port for axis of rotation.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for the angle construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim coordinateSystem As New CoordinateSystem(connection, CoordinateSystem.CoordinateSystemType.Grids)
            Dim gridElAxis As New GridAxis(coordinateSystem, AxisType.Z) 
            Dim elevationPlane As New GridElevationPlane(0, gridElAxis)
            Dim angle As Double = Math.PI / 4
            Dim port As IPort
            Dim planeDefinition As New PlaneDefinition(elevationPlane, port, angle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(Ingr.SP3D.Common.Middle.IPort,Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Public constructor for the PlaneDefinition class for the normal to plane and point construction type.
            </summary>
            <param name="port">Edge port of an existing entity.</param>
            <param name="point">Point on the plane.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for the normal to plane and point construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim point As New Point3d(connection, 1.0, 1.0, 0.0)
            Dim port As IPort
            Dim planeDefinition As New PlaneDefinition(port, point)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Public constructor for the PlaneDefinition class for the normal to plane and point construction type.
            </summary>
            <param name="normalPoint1">Point1 defining the normal.</param>
            <param name="normalPoint2">Point2 defining the normal.</param>
            <param name="pointOnPlane">Point on the plane.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for the normal to plane and point construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim normalPoint1 As New Point3d(connection, 0, 0, 0)
            Dim normalPoint2 As New Point3d(connection, 0, 0, 1)
            Dim pointOnPlane As New Point3d(connection, 50.0, 0.0, 90.0)
            Dim planeDefinition As New PlaneDefinition(normalPoint1, normalPoint2, pointOnPlane)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Point3d})">
            <summary>
            Public constructor for the PlaneDefinition class for the three points plane construction type.
            </summary>
            <param name="planeCreationPoints">Collection of three points on plane.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for the three points plane construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim pointOnPlane1 As New Point3d(connection, 0.0, 0.0, 30.0)
            Dim pointOnPlane2 As New Point3d(connection, 50.0, 0.0, 60.0)
            Dim pointOnPlane3 As New Point3d(connection, 0.0, 50.0, 30.0)
            Dim points As New Collection(Of Point3d)()
            points.Add(pointOnPlane1)
            points.Add(pointOnPlane2)
            points.Add(pointOnPlane3)
            Dim planeDefinition As New PlaneDefinition(points)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Public constructor for the PlaneDefinition class for the normal to plane and vector construction type.
            </summary>
            <param name="point1">First point for the vector.</param>
            <param name="point2">Second point for the vector.</param>
            <param name="planeOrSurface">Plane or surface for the plane creation.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>This is an example of the PlaneDefinition constructor for normal to plane and vector construction type.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim gridElAxis As New GridAxis(coordinateSystem, AxisType.Z) 
            Dim elevationPlane As New GridElevationPlane(0, gridElAxis)
            Dim point1 As New Point3d(connection, 1.0, 1.0, 0.0)
            Dim point2 As New Point3d(connection, 5.0, 2.0, 0.0)
            Dim planeDefinition As New PlaneDefinition(elevationPlane, point1, point2)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(Ingr.SP3D.Common.Middle.BusinessObject@)">
            <summary>
            Gets the inputs for the plane constructed by the coincident construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim planeOrSurface As BusinessObject = Nothing
            planeDefinition.GetInputs(planeOrSurface)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(Ingr.SP3D.Common.Middle.BusinessObject@,System.Double@)">
            <summary>
            Gets the inputs for the plane constructed by the offset from plane construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <param name="offset">Offset from the plane.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim planeOrSurface As BusinessObject = Nothing
            Dim offset As Double
            planeDefinition.GetInputs(planeOrSurface, offset)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(Ingr.SP3D.Common.Middle.BusinessObject@,Ingr.SP3D.Common.Middle.Point3d@,Ingr.SP3D.Common.Middle.Point3d@,System.Double@)">
            <summary>
            Gets the inputs for the plane constructed by the angle construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <param name="rotationAxisStartPoint">Start point for the rotation axis.</param>
            <param name="rotationAxisEndPoint">End point for the rotation axis.</param>
            <param name="angle">Double value for the angle.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim planeOrSurface As BusinessObject = Nothing
            Dim angle As Double
            Dim rotationAxisStartPoint As Point3d = Nothing
            Dim rotationAxisEndPoint As Point3d = Nothing
            planeDefinition.GetInputs(planeOrSurface, rotationAxisStartPoint, rotationAxisEndPoint, angle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(Ingr.SP3D.Common.Middle.BusinessObject@,Ingr.SP3D.Common.Middle.IPort@,System.Double@)">
            <summary>
            Gets the inputs for the plane constructed by the angle construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <param name="port">Port for axis of rotation.</param>
            <param name="angle">Double value for angle.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim planeOrSurface As BusinessObject = Nothing
            Dim angle As Double
            Dim port As IPort = Nothing
            planeDefinition.GetInputs(planeOrSurface, port, angle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(Ingr.SP3D.Common.Middle.IPort@,Ingr.SP3D.Common.Middle.Point3d@)">
            <summary>
            Gets the inputs for the plane constructed by the normal to plane and point construction type.
            </summary>
            <param name="port">Edge port used to define the normal for the plane.</param>
            <param name="point">Point on the plane.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim point As Point3d = Nothing
            Dim port As IPort = Nothing
            planeDefinition.GetInputs(port, point)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(Ingr.SP3D.Common.Middle.Point3d@,Ingr.SP3D.Common.Middle.Point3d@,Ingr.SP3D.Common.Middle.Point3d@)">
            <summary>
            Gets the inputs for the plane constructed by the normal to plane and point construction type.
            </summary>
            <param name="normalPoint1">Point1 defining the normal of the plane.</param>
            <param name="normalPoint2">Point2 defining the normal of the plane.</param>
            <param name="pointOnPlane">Point on the plane.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim normalPoint1 As Point3d = Nothing
            Dim normalPoint2 As Point3d = Nothing
            Dim pointOnPlane As Point3d = Nothing
            planeDefinition.GetInputs(normalPoint1, normalPoint2, pointOnPlane)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Point3d}@)">
            <summary>
             Gets the inputs for the plane constructed by the three points plane construction type.
            </summary>
            <param name="planeCreationPoints">Points on the plane.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim points As Collection(Of Point3d)
            planeDefinition.GetInputs(points)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.GetInputs(Ingr.SP3D.Common.Middle.BusinessObject@,Ingr.SP3D.Common.Middle.Point3d@,Ingr.SP3D.Common.Middle.Point3d@)">
            <summary>
             Gets the inputs for the plane constructed by the normal to plane and vector construction type.
            </summary>
            <param name="point1">Point for the vector.</param>
            <param name="point2">Point for the vector.</param>
            <param name="planeOrSurface">Plane or surface used to create the plane.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">Invalid call of overloaded GetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded GetInputs method.
            <code>
            Dim planeOrSurface As BusinessObject = Nothing
            Dim point1 As Point3d = Nothing
            Dim point2 As Point3d = Nothing
            planeDefinition.GetInputs(planeOrSurface, point1, point2)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Sets the inputs for the plane constructed by the coincident construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim gridElevationPlane As New GridElevationPlane(0, oZAxis)
            planeDefinition.SetInputs(gridElevationPlane)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(Ingr.SP3D.Common.Middle.BusinessObject,System.Double)">
            <summary>
            Sets the inputs for the plane constructed by the offset from plane construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <param name="offset">Double value for offset.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim offset As Double = 30.0
            Dim gridElevationPlane As New GridElevationPlane(0, oZAxis)
            planeDefinition.SetInputs(gridElevationPlane, offset)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d,System.Double)">
            <summary>
            Sets the inputs for the plane constructed by the angle construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <param name="angle">Double value for angle.</param>
            <param name="rotationAxisStartPoint">Start point for the rotation axis.</param>
            <param name="rotationAxisEndPoint">End point for the rotation axis.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim gridElevationPlane As New GridElevationPlane(0, oZAxis)
            Dim angle As Double = Math.PI / 4
            Dim rotationAxisStartPoint As New Point3d(connection, 50.0, 50.0, 90.0)
            Dim rotationAxisEndPoint As New Point3d(connection, 50.0, 0.0, 90.0)
            planeDefinition.SetInputs(gridElevationPlane, rotationAxisStartPoint, rotationAxisEndPoint, angle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.IPort,System.Double)">
            <summary>
            Sets the inputs for the plane constructed by the angle construction type.
            </summary>
            <param name="planeOrSurface">Reference plane or planar surface used to create the plane.</param>
            <param name="angle">Double value for offset.</param>
            <param name="port">Port for axis of rotation.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type..</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim gridElevationPlane As New GridElevationPlane(0, oZAxis)
            Dim angle As Double = Math.PI / 4
            Dim port As IPort
            planeDefinition.SetInputs(gridElevationPlane, port, angle)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(Ingr.SP3D.Common.Middle.IPort,Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Sets the inputs for the plane constructed by the normal to plane and point construction type.
            </summary>
            <param name="port">Edge port used to determine the normal to the plane.</param>
            <param name="point">Point on the plane.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim point As New Point3d(connection, 0, 0, 0)
            Dim port As IPort
            planeDefinition.SetInputs(normalPoint1, point)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Sets the inputs for the plane constructed by the normal to plane and point construction type.
            </summary>
            <param name="normalPoint1">Point1 defining the normal of the plane.</param>
            <param name="normalPoint2">Point2 defining the normal of the plane.</param>
            <param name="pointOnPlane">Point on the plane.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type..</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim normalPoint1 As New Point3d(connection, 0, 0, 0)
            Dim normalPoint2 As New Point3d(connection, 0, 0, 1)
            Dim pointOnPlane As New Point3d(connection, 50.0, 0.0, 90.0)
            planeDefinition.SetInputs(normalPoint1, normalPoint2, pointOnPlane)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Point3d})">
            <summary>
            Sets the inputs for the plane constructed by the three points plane construction type.
            </summary>
            <param name="planeCreationPoints">Points on the plane.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim point1 As New Point3d(connection, 0.0, 0.0, 30.0)
            Dim point2 As New Point3d(connection, 50.0, 0.0, 60.0)
            Dim point3 As New Point3d(connection, 0.0, 50.0, 30.0)
            Dim points As New Collection(Of Point3d)()
            points.Add(point1)
            points.Add(point2)
            points.Add(point3)
            planeDefinition.SetInputs(points)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneDefinition.SetInputs(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Point3d,Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Sets the inputs for the plane constructed by the normal to plane and vector construction type.
            </summary>
            <param name="point1">Point for the vector.</param>
            <param name="point2">Point for the vector.</param>
            <param name="planeOrSurface">Plane or surface for the plane creation.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Failed because of an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">Invalid call of overloaded SetInputs method for respective PlaneDefinition type.</exception>
            <example>Example code for using the overloaded SetInputs method.
            <code>
            Dim plant As Model = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel 
            Dim connection As SP3DConnection = DirectCast(plant, SP3DConnection)
            Dim gridElAxis As New GridAxis(coordinateSystem, AxisType.Z) 
            Dim elevationPlane As New GridElevationPlane(0, gridElAxis)
            Dim point1 As New Point3d(connection, 1.0, 1.0, 0.0)
            Dim point2 As New Point3d(connection, 5.0, 2.0, 0.0)
            planeDefinition.SetInputs(elevationPlane, point1, point2)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PlaneDefinition.Type">
            <summary>
            Gets the plane construction type of the plane definition object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException">
            <summary>
            Exception raised when invalid call of GetInputs overloaded method for respective PlaneDefinition type is made.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CmnException">
            <summary>
            This is the base CommonApp Exception class. All the other exceptions will be derived off of this exception.
            It has two overloaded constructors.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.String)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile.
            </summary>
            <param name="message">A string value that will be set as the message to be logged.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.Int32,System.String)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile.
            </summary>
            <param name="nID">A integer value that will be set as the message to be logged.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile.
            </summary>
            <param name="iID">A integer value that will be set as the message to be logged.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sResourceName">Resource name to attach to and from which to retrieve the string.</param>
            <param name="sAssemblyName">The assembly name to look under for the resource file.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor initializes a new instance of the CmnException class with serialized data.
            </summary>
            <param name="info">SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile. 
            This constructor will also set the inner exception, such that StackTrace source can be logged.
            </summary>
            <param name="message">A string value that will be set as the message to be logged.</param>
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile, and it sets 
             the inner exception, such that StackTrace source can be logged.
            </summary>
            <param name="message">A string value that will be set as the message to be logged.</param>
            <param name="inner">Exception that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile, 
            sets the inner exception, such that StackTrace source can be logged, and
            sets the HResult.
            </summary>
            <param name="message">A string value that will be set as the message to be logged.</param>
            <param name="inner">Exception that will be set as an inner exception.</param>
            <param name="iHResult">An integer value that will be set as HResult.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.String,System.Int32)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile, and 
            sets the HResult.
            </summary>
            <param name="message">A string value that will be set as the message to be logged.</param>
            <param name="iHResult">An integer value that will be set as HResult.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            This constructor sets the passed in parameter as the message to be logged in a logfile, 
            and sets the inner exception, such that StackTrace source can be logged.
            </summary>
            <param name="iID">An integer value that will be set as the message to be logged.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="inner">Exception that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.Int32,System.String,System.String,System.String,System.Exception)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile, and 
            sets the inner exception, such that StackTrace source can be logged.
            </summary>
            <param name="iID">An integer value that will be set as the message to be logged.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sResourceName">Resource name from which to attach and retrieve the string.</param>
            <param name="sAssemblyName">The assembly name to look under for the resource file.</param>
            <param name="inner">Exception that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile, and 
            sets the inner exception, such that StackTrace source can be logged.
            </summary>
            <param name="iID">A Resource ID value that will be set as the message to be logged.</param>
            <param name="sDefaultStr">Default string to return if not from resource file.</param>
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CmnException.#ctor(System.Int32,System.String,System.String,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile, and 
            sets the inner exception, such that StackTrace source can be logged.
            </summary>
            <param name="iID">A resource ID value that will be set as the message to be logged.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sResourceName">Resource name to attach to and from which to retrieve the string.</param>
            <param name="sAssemblyName">The assembly name to look under for the resource file.</param>
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.GetPlaneInputsException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="defaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException">
            <summary>
            Exception raised when invalid call of SetInputs overloaded method for respective PlaneDefinition type is made.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SetPlaneInputsException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="defaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SymbolVersionAttribute">
             <summary>
             SymbolVersionAttribute class defined on a CustomSymbolDefinition class is used to
             specify the version number of a symbol. The version should be specified as a string
             in the format of #.#.#.#.
             </summary>
             <example>
             This is an example of using SymbolVersionAttribute which declares the version
             number of the symbol as "1.1.0.0".
             <code>
             
             <![CDATA[<]]>SymbolVersion("1.1.0.0")<![CDATA[>]]> _
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 ' Custom symbol definition code
            
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolVersionAttribute.#ctor(System.String)">
            <summary>
            Constructor for the version attribute
            </summary>
            <param name="version">Argument version string in the format of #.#.#.#</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SymbolVersionAttribute.Version">
            <summary>
            Returns the version number.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AssemblyHierarchyHelper">
            <summary>
            Conglomerated by the .NET BusinessObject to implement the assembly hierarchy membership.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IAssemblyChild">
            <summary>
            Interface IAssemblyChild definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IAssemblyChild.AssemblyParent">
            <summary>
            Gets or sets the assembly parent to the child object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AssemblyHierarchyHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor used by conglomerating .NET BusinessObject.
            </summary>
            <param name="oWrapper">The parent .NET BusinessObject.</param>
            <exception cref="T:System.ArgumentNullException">oWrapper is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">Business Object does not support IJMfgParent or IJMfgChild.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AssemblyHierarchyHelper.AddAssemblyChild(Ingr.SP3D.Common.Middle.IAssemblyChild)">
            <summary>
            Adds the specified object as a child to the parent object.
            </summary>
            <param name="oChild">IAssemblyChild as the child object.</param>
            <exception cref="T:System.ArgumentNullException">oChild is null.</exception>
            <exception cref="T:System.InvalidOperationException">The base object does not implement valid assembly hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddAssemblyChildException">Failed to add the assembly hierarchy child.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AssemblyHierarchyHelper.AssemblyChildren">
            <summary>
            Gets the collection of IAssemblyChild objects of the parent object. An empty list is returned if there are
            no children for the parent object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The base object does not implement valid assembly hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyChildrenException">Failed to get the assembly hierarchy children.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AssemblyHierarchyHelper.AssemblyParent">
            <summary>
            Gets or sets the assembly parent to the child object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The base object does not implement valid assembly hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyParentException">Failed to return the assembly hierarchy parent.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToSetAssemblyParentException">Failed to set the assembly hierarchy parent of a business object.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyChildrenException">
            <summary>
            Failed to get the assembly hierarchy children.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyChildrenException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetAssemblyChildrenException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyChildrenException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetAssemblyChildrenException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddAssemblyChildException">
            <summary>
            Failed to add a assembly hierarchy child.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddAssemblyChildException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToAddAssemblyChildException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddAssemblyChildException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToAddAssemblyChildException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyParentException">
            <summary>
            Failed to return the assembly hierarchy parent of a business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyParentException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetAssemblyParentException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAssemblyParentException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetAssemblyParentException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToSetAssemblyParentException">
            <summary>
            Failed to set the assembly hierarchy parent of a business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToSetAssemblyParentException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToSetAssemblyParentException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToSetAssemblyParentException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToSetAssemblyParentException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CurveFormType">
            <summary>
            Enumerated constants for whether the curve is closed or open.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveFormType.Unknown">
            <summary>
            Form is unknown.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveFormType.Open">
            <summary>
            Curve is open.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveFormType.Closed">
            <summary>
            Curve is closed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveFormType.ClosedWithTangent">
            <summary>
            Curve is closed with tangency.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveFormType.ClosedWithCurvature">
            <summary>
            Curve is closed with curvature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveFormType.ClosedWithTorsion">
            <summary>
            Curve is closed with torsion.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveFormType.ClosedPeriodic">
            <summary>
            Curve is closed and periodic.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CurveScopeType">
            <summary>
            Enumerated constants to indicate the planarity of the curve.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveScopeType.Unknown">
            <summary>
            Curve scope is unknown.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveScopeType.Planar">
            <summary>
            Curve is planar.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveScopeType.Colinear">
            <summary>
            Curve is colinear.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveScopeType.Degenerate">
            <summary>
            Curve is degenerate (point).
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CurveScopeType.NonPlanar">
            <summary>
            Curve is not planar.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.GeometryIntersectionType">
            <summary>
            Enumerated constants to aid in which type of intersection is returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryIntersectionType.Unknown">
            <summary>
            Intersection is unknown.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryIntersectionType.NoSolution">
            <summary>
            There is no solution.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryIntersectionType.Coincident">
            <summary>
            Intersecting geometries are coincident.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryIntersectionType.Parallel">
            <summary>
            Geometries are parallel.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.GeometryType">
            <summary>
            Constants defining types of curves and surfaces.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Line3d">
            <summary>
            Geometry is a line.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.LineString3d">
            <summary>
            Geometry is a line string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.ComplexString3d">
            <summary>
            Geometry is a complex string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Plane3d">
            <summary>
            Geometry is a plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Ellipse3d">
            <summary>
            Geometry is an ellipse.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Arc3d">
            <summary>
            Geometry is an arc.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Circle3d">
            <summary>
            Geometry is a circle.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.EllipticalArc3d">
            <summary>
            Geometry is an elliptical arc.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Cone3d">
            <summary>
            Geometry is a cone.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.BspSurface3d">
            <summary>
            Geometry is a b-spline surface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Geom3dTYPE_Boundaries3d">
            <summary>
            Geometry is a set of 3d boundaries.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.BspCurve3d">
            <summary>
            Geometry is a b-spline curve.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Sphere3d">
            <summary>
            Geometry is a sphere.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Torus3d">
            <summary>
            Geometry is a torus.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Projection3d">
            <summary>
            Geometry is a projection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Revolution3d">
            <summary>
            Geometry is a revolution.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Ruled3d">
            <summary>
            Geometry is a ruled surface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.Point3d">
            <summary>
            Geometry is a point.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.GeometryType.PolyMesh3d">
            <summary>
            Geometry is a polymesh.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CatenaryCurveOptions">
            <summary>
            Options for determining how the input value will be used in creating the catenary curve.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CatenaryCurveOptions.MiddleSag">
            <summary>
            Curve is created using input middle sag value.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CatenaryCurveOptions.ClearanceHeight">
            <summary>
            Curve is created using input clearance height value.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CatenaryCurveOptions.CurveLength">
            <summary>
            Curve is created using input cable length value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ICurve">
            <summary>
            Interface for curve objects.
            </summary>
            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.ScopeNormal(Ingr.SP3D.Common.Middle.CurveScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Gets the scope and normal of the curve.
            </summary>
            <param name="eScope">CurveScopeType enumerator.</param>
            <param name="vecNormal">Vector normal.</param>
            <remarks>
            <list type="table">
               <listheader>
                   <term>CurveScopeType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>Unknown = 0</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>Planar = 1</term>
                   <description>Normal returned, if curve is closed; then this is an oriented normal.</description>
               </item>
               <item>
                   <term>Colinear = 2</term>
                   <description>A normal returned.</description>
               </item>
               <item>
                   <term>Degenerate = 3</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>NonPlanar = 4</term>
                   <description>Least squares normal returned.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.AreaCentroidMomentsOfInertia(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Finds the center, area, moments of inertia, and principle axes of a closed planar curve.
            </summary>
            <param name="dArea">Area of the curve.</param>
            <param name="posCentroid">Centroid of the curve.</param>
            <param name="dInteriaX">Moment of inertia to centroidal X-axis.</param>
            <param name="dInertiaY">Moment of inertia to centroidal Y-axis.</param>
            <param name="dInertiaXY">Product of inertia (zero if it is symmetrical).</param>
            <param name="dMajorPrncplInertia">Principle moment of inertia to major axis.</param>
            <param name="dMinorPrncplInertia">Principle moment of inertia to minor axis.</param>
            <param name="dPolarInertia">Polar moment of inertia to the normal.</param>
            <param name="MjIAxis">Major principle axis.</param>
            <param name="MnIAxis">Minor principle axis.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.EndPoints(Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Gets the end points of this curve.
            </summary>
            <param name="posStart">Start position.</param>
            <param name="posEnd">End position.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether the input point is on the curve.
            </summary>
            <param name="pos">Position</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.PointAtDistanceAlong(Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Finds a point along a curve at a given distance from the given 
            start point on the curve. If the given point does not lie on the curve, 
            it is along normal to curve (minimum distance). 
            </summary>
            <param name="posStart">Position to start from.</param>
            <param name="dist">Distance along.</param>
            <returns>Position - point at given distance.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.PointAtDistanceAlong(System.Double)">
            <summary>
            Finds a point along a curve at a given distance from 
            the start of curve.
            </summary>
            <param name="dist">Distance along.</param>
            <returns>Position - point at given distance.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a point on the curve along given vector from given point.
            </summary>
            <param name="pos">Position in which to project to curve.</param>
            <param name="vecProj">Vector to project along. Optional argument, if null,
                                  then the function projects along vector normal to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds a point normal to the curve from given point.
            </summary>
            <param name="pos">Position in which to project to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.TangentAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds the tangent at a given point.
            </summary>
            <param name="pos">Position in which to find the tangent.</param>
            <returns>Vector: tangent vector.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this curve and a point.
            </summary>
            <param name="oPoint3d">Point3d object.</param>
            <param name="dDist">Distance as a double.</param>
            <param name="posSrcPos">Position of the point.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this curve and another curve.
            </summary>
            <param name="oInCurve">ICurve object.</param>
            <param name="dDist">Distance as a double.</param>
            <param name="posSrcPos">Position</param>
            <param name="posInPos">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this curve and a surface.
            </summary>
            <param name="oInSurf">ISurface object.</param>
            <param name="dDist">Distance as a double.</param>
            <param name="posSrcPos">Position</param>
            <param name="posInPos">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this curve and another curve.
            </summary>
            <param name="oInCurve">ICurve object.</param>
            <param name="colPos">Collection of Position objects.</param>
            <param name="colOverlaps">Collection of Position objects.</param>
            <param name="eIntersectCode">GeometryIntersectionType enumerator.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this curve and a surface.
            </summary>
            <param name="oInSurf">ISurface object.</param>
            <param name="colCurves">Collection of business objects, which will either be curves or points.</param>
            <param name="eIntersectCode">GeometryIntersectionType enumerator.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.SelfIntersect(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Finds the self intersections of this curve.
            </summary>
            <param name="colIntPos">Collection of Position objects.</param>
            <param name="colOverlapPos">Collection of Position objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICurve.CentroidInertiaForWire(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Compute length, centroid, moments of inertia, and principle axes of an open or
            closed thin wire.
            </summary>
            <param name="dLength">Length of the wire.</param>
            <param name="posCentroid">Centroid of the curve.</param>
            <param name="dInteriaX">Moment of inertia to centroidal X-axis.</param>
            <param name="dInertiaY">Moment of inertia to centroidal Y-axis.</param>
            <param name="dInertiaZ">Moment of inertia to centroidal Z-axis.</param>
            <param name="dPrncplInertiaU">Principle moment of inertia to uDir.</param>
            <param name="dPrncplInertiaV">Principle moment of inertia to vDir.</param>
            <param name="dPrncplInertiaN">Principle moment of inertia to nDir.</param>
            <param name="AxisU">Major principle axis.</param>
            <param name="AxisV">Minor principle axis.</param>
            <param name="AxisN">Minor principle axis.</param>
            
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is the example of CentroidInertiaForWire method.
            <code>
            Dim dLength, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertia, dPolarInertiaN As Double
            Dim oCentroid As Position
            Dim oMjIAxis, oMnIAxis, oNIAxis As Vector
            oCurve.CentroidInertiaForWire(dLength, oCentroid, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertiaN, dPolarInertia, oMjIAxis, oMnIAxis, oNAxis)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICurve.Length">
            <summary>
            Gets the length of the curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICurve.Area">
            <summary>
            Gets the area of the curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICurve.Form">
            <summary>
            Gets the form (closure) of the curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICurve.Scope">
            <summary>
            Gets the scope of the curve (planarity).
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICurve.Centroid">
            <summary>
            Gets the centroid of the curve.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Curve3d">
            <summary>
            Class definition for Curve3d.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for creating a Curve3d from an internal PBO returned from query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.ScopeNormal(Ingr.SP3D.Common.Middle.CurveScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Finds the planarity and the normal for this curve.
            </summary>
            <param name="eScope">Enumerator which shows the planarity of the curve.</param>
            <param name="vecNormal">The normal vector of the curve.</param>
            <remarks>
            <list type="table">
               <listheader>
                   <term>CurveScopeType</term>
                   <description>Description</description>
               </listheader>
               <item>
                   <term>Unknown = 0</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>Planar = 1</term>
                   <description>Normal returned, if curve is closed; then this is an oriented normal.</description>
               </item>
               <item>
                   <term>Colinear = 2</term>
                   <description>A normal returned.</description>
               </item>
               <item>
                   <term>Degenerate = 3</term>
                   <description>No normal returned.</description>
               </item>
               <item>
                   <term>NonPlanar = 4</term>
                   <description>Least squares normal returned.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.AreaCentroidMomentsOfInertia(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Finds the center, area, moments of inertia, and principle axes of a closed planar curve.
            </summary>
            <param name="dArea">Area of the curve.</param>
            <param name="posCentroid">Centroid of the curve.</param>
            <param name="dInteriaX">Moment of inertia to centroidal X-axis.</param>
            <param name="dInertiaY">Moment of inertia to centroidal Y-axis.</param>
            <param name="dInertiaXY">Product of inertia (zero, if it is symmetrical).</param>
            <param name="dMajorPrncplInertia">Principle moment of inertia to major axis.</param>
            <param name="dMinorPrncplInertia">Principle moment of inertia to minor axis.</param>
            <param name="dPolarInertia">Polar moment of inertia to the normal.</param>
            <param name="MjIAxis">Major principle axis.</param>
            <param name="MnIAxis">Minor principle axis.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.CentroidInertiaForWire(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Compute length, centroid, moments of inertia, and principle axes of an open or
            closed thin wire.
            </summary>
            <param name="dLength">Length of the wire.</param>
            <param name="posCentroid">Centroid of the curve.</param>
            <param name="dInteriaX">Moment of inertia to centroidal X-axis.</param>
            <param name="dInertiaY">Moment of inertia to centroidal Y-axis.</param>
            <param name="dInertiaZ">Moment of inertia to centroidal Z-axis.</param>
            <param name="dPrncplInertiaU">Principle moment of inertia to uDir.</param>
            <param name="dPrncplInertiaV">Principle moment of inertia to vDir.</param>
            <param name="dPrncplInertiaN">Principle moment of inertia to nDir.</param>
            <param name="AxisU">Major principle axis.</param>
            <param name="AxisV">Minor principle axis.</param>
            <param name="AxisN">Minor principle axis.</param>
            
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is the example of CentroidInertiaForWire method.
            <code>
            Dim dLength, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertia, dPolarInertiaN As Double
            Dim oCentroid As Position
            Dim oMjIAxis, oMnIAxis, oNIAxis As Vector
            oCurve.CentroidInertiaForWire(dLength, oCentroid, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertiaN, dPolarInertia, oMjIAxis, oMnIAxis, oNAxis)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.EndPoints(Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the end points of the curve.
            </summary>
            <param name="posStart">Starting position.</param>
            <param name="posEnd">Ending position.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether a given point is on the curve.
            </summary>
            <param name="pos">Point to determine whether on this curve.</param>
            <returns>If True, the point is on the curve; if False, the point is not on the curve.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.PointAtDistanceAlong(Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Finds a point along a curve at a given distance from the given 
            start point on the curve. If the given point does not lie on the curve, 
            it is along normal to curve (minimum distance). 
            </summary>
            <param name="posStart">Position to start from.</param>
            <param name="dist">Distance along.</param>
            <returns>Position - point at given distance.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.PointAtDistanceAlong(System.Double)">
            <summary>
            Finds a point along a curve at a given distance from 
            the start of the curve.
            </summary>
            <param name="dist">Distance along.</param>
            <returns>Position - point at given distance.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a point on the curve along the given vector from given point.
            </summary>
            <param name="pos">Position to project to curve.</param>
            <param name="vecProj">Vector to project along. Optional argument, if null,
                                  then the function projects along vector normal to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds a point on the curve along the given vector from the given point.
            </summary>
            <param name="pos">Position to project to curve.</param>
            <returns>Position - projected point.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.TangentAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds the tangent at a given point.
            </summary>
            <param name="pos">Position in which to find the tangent.</param>
            <returns>Vector - tangent vector.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Determines the distance between this curve and the input point.
            </summary>
            <param name="oPoint3d">Input point.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this curve at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oPoint3d cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Determines the distance between this curve and the input curve.
            </summary>
            <param name="oInCurve">Input curve.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this curve at minimum distance.</param>
            <param name="posInPos">Point on input curve at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oInCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            This method determines the distance between this curve and the input surface.
            </summary>
            <param name="oInSurf">Input surface.</param>
            <param name="dDist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this curve at minimum distance.</param>
            <param name="posInPos">Point on input surface at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">oInSurf cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this curve and another curve.
            </summary>
            <param name="oInCurve">Input curve.</param>
            <param name="colIntPos">Output collection of intersection points.</param>
            <param name="colOverlapPos">Output collection of overlap points.</param>
            <param name="eIntersectCode">Enumerator describing the type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">oInCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Finds the intersection between this curve and a surface.
            </summary>
            <param name="oInObj">ISurface object.</param>
            <param name="colCurves">Collection of intersection curves, which will be either curves or points.</param>
            <param name="eIntersectCode">GeometryIntersectionType enumerator values.</param>
            <exception cref="T:System.ArgumentNullException">oInObj cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.SelfIntersect(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Finds the self-intersections and overlaps of this curve.
            </summary>
            <param name="colIntPos">Intersection points.</param>
            <param name="colOverlapPos">Overlap points.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Curve3d.ConvertArrayPosition(System.Array,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Converts a System.Array to a collection of Position objects.
            </summary>
            <param name="arPoints">System.Array</param>
            <param name="colPosition">Collection of Position objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Curve3d.Length">
            <summary>
            Finds the length of this curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Curve3d.Area">
            <summary>
            Finds the area of this curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Curve3d.Form">
            <summary>
            Finds the closure of this curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Curve3d.Scope">
            <summary>
            Finds the planarity of this curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Curve3d.Centroid">
            <summary>
            Finds the centroid of this curve.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SurfaceScopeType">
            <summary>
            Enumerated values describing surface planarity.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SurfaceScopeType.Unknown">
            <summary>
            Surface scope unknown.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SurfaceScopeType.Planar">
            <summary>
            Surface is planar.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SurfaceScopeType.NonPlanar">
            <summary>
            Surface is non-planar.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMathCannotCreateGeometryException">
            <summary>
            Common exception used for math when COM geometry cannot be created. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMathCannotCreateGeometryException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMathCannotCreateGeometryException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMathCannotCreateGeometryException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">
            <summary>
            Math exception used when COM geometry cannot be created. 
            This is always called in the math constructors.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">
            <summary>
            Math exception used when the defining of math geometries have a problem. 
            In other words, it is used when there's an error in any of the DefineBy methods.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException.#ctor(System.Int32,System.String,System.ArgumentException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COM ArgumentException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The ArgumentException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">
            <summary>
            Math exception used when the IngrGeom3D.GeometryFactory has an error.
            This is always called in the math constructors.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException.#ctor(System.Int32,System.String,System.ArgumentException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COM ArgumentException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The ArgumentException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">
            <summary>
            Math exception used when the input arguments are invalid or when input arguments cause an
            exception when calling the COM methods or properties.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException.#ctor(System.Int32,System.String,System.ArgumentException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COM ArgumentException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The ArgumentException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IArc">
            <summary>
            Interface definition for IArc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.Circumference">
            <summary>
            Gets the circumference.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.Center">
            <summary>
            Gets or sets the center.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.MajorAxis">
            <summary>
            Gets or sets the major axis of "this" arc.
            Note: This is the UNIT vector.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IArc.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Arc3d">
             <summary>
             Arc3d Class. 
             </summary>
             <example>This is an example for Arc3d class methods and properties.
             <code>
             Public Class Arc3d
               Public Sub New()
            
                 Dim oArc As Arc3d = Nothing
                 'Create a 1m radius, 90 deg arc rotating about 1,0,0. 
                 Dim vZero As New Vector(0, 0, 0)
                 Dim pZero As New Position(0, 0, 0)
                 Dim pTwo As New Position(2, 2, 2)
                 Dim oP1 As New Position(0, 0, 0)
                 Dim oP2 As New Position(0.2929, 0.7071, 0)
                 Dim oP3 As New Position(1, 1, 0)
            
                 oArc = New Arc3d(oP1, oP2, oP3)
                 If oArc Is Nothing Then
                     SOMUtils.LogResults("Failed to create an Arc3d.")
                 End If
            
                 'Define the center.
                 Dim pPOS As New Position(0, 0, 0)
                 'Get the center. 
                 pPOS = oArc.Center
                 If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                     SOMUtils.LogResults("Arc center not returned.")
                 End If
                 Dim pPOS1 As New Position(0, 0, 0)
                 'Set the center. 
                 oArc.Center = pPOS1
                 If SOMUtils.AreTheyEqual(oArc.Center, pZero) Then
                     oArc.Center = pPOS
                 Else
                     SOMUtils.LogResults("Arc center not returned.")
                 End If
            
                 'Define the circumference.
                 Dim dDBL As Double = 0
                 'Get the circumference. 
                 dDBL = oArc.Circumference
                 If dDBL = 0 Then
                     SOMUtils.LogResults("Arc circumference failed.")
                 End If
            
                 'Define the endpoint.
                 pPOS = pTwo
                 'Get the endpoint. 
                 pPOS = oArc.EndPoint
                 If SOMUtils.AreTheyEqual(pPOS, pTwo) Then
                     SOMUtils.LogResults("Arc endpoint failed.")
                 End If
                 pPOS1 = New Position(1.7071, 0.7071, 0)
                 'Set the endpoint. 
                 oArc.EndPoint = pPOS1
                 If SOMUtils.AreTheyEqual(oArc.EndPoint, pPOS1) Then
                     'Reset to the original.
                     oArc.EndPoint = pPOS
                 Else
                     SOMUtils.LogResults("Arc center not returned.")
                 End If
            
                 'Define the major axis.
                 Dim vVEC As New Vector(0, 0, 0)
                 'Get the major axis. 
                 vVEC = oArc.MajorAxis
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("Arc endpoint failed.")
                 End If
                 Dim vVEC1 As New Vector(0, 1, 0)
                 'Set the major axis. 
                 oArc.MajorAxis = vVEC1
                 If SOMUtils.AreTheyEqual(oArc.MajorAxis, vVEC1) Then
                     'Reset to the original. 
                     oArc.MajorAxis = vVEC
                 Else
                     SOMUtils.LogResults("Setting the arc major axis failed.")
                 End If
            
                 'Define the normal.
                 vVEC = New Vector(0, 0, 0)
                 'Get the normal. 
                 vVEC = oArc.Normal
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("Arc normal failed.")
                 End If
                 vVEC1 = New Vector(0, 0, 1)
                 'Set the normal. 
                 oArc.Normal = vVEC1
                 If SOMUtils.AreTheyEqual(oArc.Normal, vVEC1) Then
                     'Reset to the original. 
                     oArc.Normal = vVEC
                 Else
                     SOMUtils.LogResults("Setting arc normal failed.")
                 End If
            
                 'Define the radius.
                 dDBL = 0
                 'Get the radius. 
                 dDBL = oArc.Radius
                 If SOMUtils.AreTheyEqual(dDBL, 0) Then
                     SOMUtils.LogResults("Arc radius failed.")
                 End If
                 'Set the radius. 
                 oArc.Radius = 1.5
                 If SOMUtils.AreTheyEqual(oArc.Radius, 1.5) Then
                     'Reset the radius. 
                     oArc.Radius = dDBL
                 Else
                     SOMUtils.LogResults("Setting the arc radius failed.")
                 End If
            
                 'Define the range.
                 Dim rRNG As New RangeBox(oP2, oP2)
                 rRNG = oArc.Range
                 If SOMUtils.AreTheyEqual(rRNG.Low, rRNG.High) Then
                     SOMUtils.LogResults("Arc range failed.")
                 End If
            
                 'Define the start angle.
                 dDBL = 1
                 'Get the start angle. 
                 dDBL = oArc.StartAngle
                 If SOMUtils.AreTheyEqual(dDBL, 1) Then
                     SOMUtils.LogResults("Arc start angle failed.")
                 End If
                 'Set the start angle. 
                 oArc.StartAngle = 0.5
                 If SOMUtils.AreTheyEqual(oArc.StartAngle, 0.5) Then
                     'Reset to the original. 
                     oArc.StartAngle = dDBL
                 Else
                     SOMUtils.LogResults("Setting the arc start angle failed.")
                 End If
            
                 'Define the start point.
                 pPOS = pTwo
                 'Get the start point. 
                 pPOS = oArc.StartPoint
                 If SOMUtils.AreTheyEqual(pPOS, pTwo) Then
                     SOMUtils.LogResults("Getting arc start point failed.")
                 End If
                 pPOS1 = New Position(0.2929, 0.7071, 0)
                 'Set the start point. 
                 oArc.StartPoint = pPOS1
                 If SOMUtils.AreTheyEqual(oArc.StartPoint, pPOS1) Then
                     'Reset to the original. 
                     oArc.StartPoint = pPOS
                 Else
                     SOMUtils.LogResults("Setting arc start point failed.")
                 End If
            
                 'Define the sweep angle.
                 dDBL = 0
                 'Get the sweep angle. 
                 dDBL = oArc.SweepAngle
                 If SOMUtils.AreTheyEqual(dDBL, 0) Then
                     SOMUtils.LogResults("Arc sweep angle failed.")
                 End If
                 'Set the sweep angle. 
                 oArc.SweepAngle = 0.5
                 If SOMUtils.AreTheyEqual(oArc.SweepAngle, 0.5) Then
                     'Reset to the original. 
                     oArc.SweepAngle = dDBL
                 Else
                     SOMUtils.LogResults("Arc sweep angle failed.")
                 End If
            
                 'Define the transform. 
                 Dim mMat4 As New Matrix4X4()
                 mMat4.SetIdentity()
                 vVEC = New Vector(1, 1, 1)
                 mMat4.Translate(vVEC)
                 oArc.Transform(mMat4)
                 'Get the start point and check whether it is 0,0,0. 
                 pPOS = pTwo
                 pPOS = oArc.StartPoint
                 If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                     SOMUtils.LogResults("Arc transform failed.")
                 End If
            
                 'Define by three points. 
                 oP1.[Set](0, 0, 1)
                 oP2.[Set](1, 1, 1)
                 oP3.[Set](2, 0, 1)
                 oArc.DefineBy3Points(oP1, oP2, oP3)
                 If Not SOMUtils.AreTheyEqual(oArc.StartPoint, oP1) OrElse Not SOMUtils.AreTheyEqual(oArc.EndPoint, oP3) Then
                     SOMUtils.LogResults("Arc start, middle, and end failed.")
                 End If
            
                 'Define by center, normal, start, end.
                 oP1.[Set](1, 0, 2)
                 oP2.[Set](0, 0, 2)
                 oP3.[Set](2, 0, 2)
                 vVEC = New Vector(0, 0, 1)
                 oArc.DefineByCtrNormStartEnd(oP1, vVEC, oP2, oP3)
                 If Not SOMUtils.AreTheyEqual(oArc.StartPoint, oP2) OrElse Not SOMUtils.AreTheyEqual(oArc.EndPoint, oP3) Then
                     SOMUtils.LogResults("Arc center, norm, start, and end failed.")
                 End If
            
                 'Set the arc.
                 oP1.[Set](1, 0, 0)
                 oP2.[Set](0, 0, 0)
                 oP3.[Set](2, 0, 0)
                 Dim oArc1 As New Arc3d(oP1, vVEC, oP2, oP3)
                 oArc1.[Set](oArc)
                 If Not SOMUtils.AreTheyEqual(oArc.StartPoint, oArc1.StartPoint) OrElse Not SOMUtils.AreTheyEqual(oArc.EndPoint, oArc1.EndPoint) Then
                     SOMUtils.LogResults("Arc set failed.")
                 Else
                     oArc1.Delete()
                 End If
            
                 'Arc constructors. 
                 oArc1 = New Arc3d(oArc)
                 If Not SOMUtils.AreTheyEqual(oArc1.Center, oArc.Center) OrElse Not SOMUtils.AreTheyEqual(oArc1.StartPoint, oArc.StartPoint) Then
                     SOMUtils.LogResults("Construct arc from arc failed.")
                 Else
                     oArc1.Delete()
                 End If
            
                 oP1.[Set](1, 0, 0)
                 oP2.[Set](0, 0, 0)
                 oP3.[Set](2, 0, 0)
                 oArc1 = New Arc3d(oP1, vVEC, oP2, oP3)
                 If Not SOMUtils.AreTheyEqual(oArc1.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oArc1.StartPoint, pZero) Then
                     SOMUtils.LogResults("Construct arc by center, norm, start, and end failed.")
                 Else
                     oArc1.Delete()
                 End If
            
                 oP1.[Set](1, 0, 1)
                 oP2.[Set](0, 0, 1)
                 oP3.[Set](2, 0, 1)
                 Dim oConn As SP3DConnection
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 oArc1 = New Arc3d(oConn, oP1, vVEC, oP2, oP3)
                 If Not SOMUtils.AreTheyEqual(oArc1.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oArc1.StartPoint, oP2) Then
                     SOMUtils.LogResults("Construct arc by connection, center, norm, start, and end failed.")
                 Else
                     oArc1.Delete()
                 End If
            
                 oP1.[Set](0, 0, 1)
                 oP2.[Set](0.2929, 0.7071, 1)
                 oP3.[Set](1, 1, 1)
                 oArc1 = New Arc3d(oConn, oP1, oP2, oP3)
                 If Not SOMUtils.AreTheyEqual(oArc1.StartPoint, oP1) OrElse Not SOMUtils.AreTheyEqual(oArc1.Radius, 1) Then
                     SOMUtils.LogResults("Construct arc by connection, start, mid, and end failed.")
                 Else
                     oArc1.Delete()
                 End If
            
                 'Delete original arc. 
                 oArc.Delete()
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Arc3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.#ctor(Ingr.SP3D.Common.Middle.Arc3d)">
            <summary>
            Constructor used to copy an existing Arcd3d.
            </summary>
            <param name="oArc">Arc3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oArc cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCtrNormStartEnd exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructs a persistent circular Arc3d by the following input.
            </summary>
            <param name="oConnection">SP3D connection.</param>
            <param name="posStart">The starting point of the arc.</param>
            <param name="posMid">A point in the middle of the arc.</param>
            <param name="posEnd">The ending point of the arc.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posMid cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy3Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructs a transient circular Arc3d by the following input.
            </summary>
            <param name="posStart">The starting point of the arc.</param>
            <param name="posMid">A point in the middle of the arc.</param>
            <param name="posEnd">The ending point of the arc.</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posMid cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy3Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructs a persistent circular arc given the following data.
            </summary>
            <param name="oConnectionection">SP3D connection.</param>
            <param name="posCenter">The center of the arc.</param>
            <param name="vecNorm">Normal of the arc, which indicates which way the arc sweeps.
                                  This argument is optional, and if not given the arc will sweep
                                  in the direction of the smallest arc.</param>
            <param name="posStart">The starting point of the arc.</param>
            <param name="posEnd">The ending point of the arc.</param>
            <exception cref="T:System.ArgumentNullException">oConnectionection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterStartEnd exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructs a transient circular arc given the following data.
            </summary>
            <param name="posCenter">The center of the arc.</param>
            <param name="vecNorm">Normal of the arc, which indicates which way the arc sweeps.
                                  This argument is optional, and if not given the arc will sweep
                                  in the direction of the smallest arc.</param>
            <param name="posStart">The starting point of the arc.</param>
            <param name="posEnd">The ending point of the arc.</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterStartEnd exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.Set(Ingr.SP3D.Common.Middle.Arc3d)">
            <summary>
            Sets "this" arc equal to an existing arc.
            </summary>
            <param name="oArc3d">Existing Arc3d</param>
            <exception cref="T:System.ArgumentNullException">oArc3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.DefineBy3Points(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Redefines "this" arc by 3 points.
            </summary>
            <param name="posStart">Starting point.</param>
            <param name="posMid">Mid point.</param> 
            <param name="posEnd">Ending point.</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posMid cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.DefineByCtrNormStartEnd(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Redefines the arc given a center, start, and end position.
            The input normal is optional.  
            <para>Note that if the normal is not input, then the smallest arc between (start-center)
            and (end-center) will be returned.</para>
            </summary>
            <param name="posCenter">Center of the arc.</param>
            <param name="vecNorm">Normal of the arc, which indicates which way the arc sweeps.
                                  This argument is optional, and if not given the arc will sweep
                                  in the direction of the smallest arc.</param>
            <param name="posStart">Start position of the arc.</param>
            <param name="posEnd">End position of the arc.</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByCtrNormStartEnd exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Arc3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms "this" arc by given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.Circumference">
            <summary>
            Gets or sets whether "this" arc is infinite.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.Center">
            <summary>
            Gets or sets the center of the arc.
            </summary>
            Notes: no try/catch needed because no errors from COM
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.StartPoint">
            <summary>
            Gets or sets the start point of the arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.EndPoint">
            <summary>
            Gets or sets the end point of the arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.Normal">
            <summary>
            Gets or sets the normal vector.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.MajorAxis">
            <summary>
            Gets or sets the major axis of "this" arc.
            Note: This is the UNIT vector.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.Radius">
            <summary>
            Gets or sets the radius of "this" arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.StartAngle">
            <summary>
            Gets or sets the starting angle of "this" arc.
            Starting angle is measured from the major axis vector.
            </summary>
            Notes: COM method doesn't have error conditions, so no try/catch
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
            Notes: COM method doesn't have error conditions, so no try/catch
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Arc3d.Range">
            <summary>
            Finds the range box of "this" arc.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent">
            <summary>
            This class is used to define the filter definition for persistent filters.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterDefinition">
            <summary>
            The filter definition object is used to programatically build up the definition string by iteratively applying simple methods and properties.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterDefinition.m_CompoundHierFilter">
            <summary>
            PCompoundFilter, required by System, Assembly, Analysis, and Space.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterDefinition.m_oPropFilter">
            <summary>
            PPropertiesFilter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterDefinition.m_oRefPlaneFilter">
            <summary>
            PRefPlanesFilter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterDefinition.m_oTheFilter">
            <summary>
            back pointer to the Filter object
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddObjectType(Ingr.SP3D.Common.Middle.Services.BOCInformation)">
            <summary>
            Adds the specified BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
            <param name="oBOCNode">BOCInformation that will be used to create an object type filter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddObjectType(System.String)">
            <summary>
            Adds the specified BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
            <param name="strBOCNodePath">BOCNodePath that will be used to create an object type filter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricObjectType">
            <summary>
            Adds a parametric BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWhereProperty(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyComparisonOperators)">
            <summary>
            Adds a PropertyValue criteria to the FilterDefinition.
            </summary>
            <param name="oPropValue">PropertyValue that will be used to define a property filter.</param>
            <param name="iOperator">PropertyComparisonOperators that will be used to define a property filter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWhereProperty(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyComparisonOperators,Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.String)">
            <summary>
            Adds a related object PropertyValue criteria to the FilterDefinition.
            </summary>
            <param name="oPropValue">PropertyValue that will be used to define a property filter.</param>
            <param name="iOperator">PropertyComparisonOperators that will be used to define a property filter.</param>
            <param name="RelationshipInfo">RelationshipInformation that will be used to define a property filter.</param>
            <param name="sRoleName">String value specifying the relationship role name.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWhereProperty(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyComparisonOperators,Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.OriginOrDestination)">
            <summary>
            Adds a related object PropertyValue criteria to the FilterDefinition.
            </summary>
            <param name="oPropValue">PropertyValue that will be used to define a property filter.</param>
            <param name="iOperator">PropertyComparisonOperators that will be used to define a property filter.</param>
            <param name="RelationshipInfo">RelationshipInformation that will be used to define a property filter.</param>
            <param name="iOorD">OriginOrDestination specifying the origin or the destination side of the RelationshipInformation. </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWhereProperty(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyComparisonOperators,Ingr.SP3D.Common.Middle.Services.EdgeInformation,Ingr.SP3D.Common.Middle.OriginOrDestination)">
            <summary>
            Adds a related object PropertyValue criteria to the FilterDefinition.
            </summary>
            <param name="oPropValue">PropertyValue that will be used to define a property filter.</param>
            <param name="iOperator">PropertyComparisonOperators that will be used to define a property filter.</param>
            <param name="oEdgeInfo">EdgeInformation that will be used to define a property filter.</param>
            <param name="iOorD">OriginOrDestination specifying the origin or the destination side of the RelationshipInformation. </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWherePropertyInRange(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.RangeValueComparisonOperators)">
            <summary>
            Adds a related object PropertyValue by range criteria to the FilterDefinition.
            </summary>
            <param name="oPropLowValue">PropertyValue specifying low value.</param>
            <param name="oPropHighValue">PropertyValue specifying high value.</param>
            <param name="iBetween">RangeValueComparisonOperators specifying a between or not-between value.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWherePropertyInRange(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.RangeValueComparisonOperators,Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.String)">
            <summary>
            Adds a related object PropertyValue by range criteria to the FilterDefinition.
            </summary>
            <param name="oPropLowValue">PropertyValue specifying low value.</param>
            <param name="oPropHighValue">PropertyValue specifying high value.</param>
            <param name="iBetween">RangeValueComparisonOperators specifying a between or not-between value.</param>
            <param name="RelationshipInfo">RelationshipInformation that will be used to create a property filter.</param>
            <param name="sRoleName">String value specifying the role name.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWherePropertyInRange(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.RangeValueComparisonOperators,Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.OriginOrDestination)">
            <summary>
            Adds a related object PropertyValue by range criteria to the FilterDefinition.
            </summary>
            <param name="oPropLowValue">PropertyValue specifying low value.</param>
            <param name="oPropHighValue">PropertyValue specifying high value.</param>
            <param name="iBetween">RangeValueComparisonOperators specifying a between or not-between value.</param>
            <param name="RelationshipInfo">RelationshipInformation that will be used to create a property filter.</param>
            <param name="iOorD">OriginOrDestination specifying the origin or the destination side of the RelationshipInformation. </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddWherePropertyInRange(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.RangeValueComparisonOperators,Ingr.SP3D.Common.Middle.Services.EdgeInformation,Ingr.SP3D.Common.Middle.OriginOrDestination)">
            <summary>
            Adds a related object PropertyValue by range criteria to the FilterDefinition.
            </summary>
            <param name="oPropLowValue">PropertyValue specifying low value.</param>
            <param name="oPropHighValue">PropertyValue specifying high value.</param>
            <param name="iBetween">RangeValueComparisonOperators specifying  between or not-between value.</param>
            <param name="oEdgeInfo">EdgeInformation that will be used to define a property filter.</param>
            <param name="iOorD">OriginOrDestination specifying the origin or the destination side of the RelationshipInformation. </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricWhereProperty(Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Adds a parametric property value criteria to the FilterDefinition.
            </summary>
            <param name="oPropertyInfo">PropertyInformation  that will be used to define a property filter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricWhereProperty(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.String)">
            <summary>
            Adds a parametric, related object PropertyValue criteria to the FilterDefinition.
            </summary>
            <param name="oPropertyInfo">PropertyInformation that will be used to define a property filter.</param>
            <param name="RelationshipInfo">RelationshipInformation that will be used to create a property filter.</param>
            <param name="sRoleName">String value specifying the role name.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricWhereProperty(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.OriginOrDestination)">
            <summary>
            Adds a parametric, related object PropertyValue criteria to the FilterDefinition.
            </summary>
            <param name="oPropertyInfo">PropertyInformation that will be used to define a property filter.</param>
            <param name="RelationshipInfo">RelationshipInformation that will be used to create a property filter.</param>
            <param name="iOorD">OriginOrDestination specifying the origin or the destination side of the RelationshipInformation. </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricWhereProperty(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.EdgeInformation,Ingr.SP3D.Common.Middle.OriginOrDestination)">
            <summary>
            Adds a parametric, related object PropertyValue criteria to the FilterDefinition.
            </summary>
            <param name="oPropertyInfo">PropertyInformation that will be used to define a property filter.</param>
            <param name="oEdgeInfo">EdgeInformation that will be used to define a property filter.</param>
            <param name="iOorD">OriginOrDestination specifying the origin or the destination side of the RelationshipInformation. </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the property to the filter definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two properties are not matched with each other.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddHierarchy(Ingr.SP3D.Common.Middle.HierarchyTypes,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject},System.Boolean)">
            <summary>
            Adds the specified hierarchy criteria (HierarchyTypes and BusinessObjects collection) to the FilterDefinition.
            </summary>
            <param name="eHierType">HierarchyTypes can be System, Assembly, WBS, Analysis, Space, PermissionGroup, Volume_NamedSpace.</param>
            <param name="objCol">
            This is the collection of BusinessObject that will be included in the filter definition. 
            These objects will be screened by a set of interfaces: 
            System: IJSystem, IJSystemChild. 
            PermissionGroup: IJPermissionGroup and IJFolder.
            </param>
            <param name="bIncludeNested">Boolean value that indicates whether or not to include the nested objects in the filter definition.</param>
            <remarks>
            If the filter is a catalog filter, this method will be equivalant to AddParametricHierarchy. 
            Any business objects specified as filter inputs will be ignored.
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricHierarchy(Ingr.SP3D.Common.Middle.HierarchyTypes,System.Boolean)">
            <summary>
            Adds a parametric hierarchy criteria with specified hierarchy type to the FilterDefinition.
            </summary>
            <param name="eHierType">HierarchyTypes can be System, Assembly, WBS, Analysis, Space, PermissionGroup, Volume_NamedSpace.</param>
            <param name="bIncludeNested">Boolean value that indicates whether or not to include the nested objects in the filter definition.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddVolumeByRefPlanes(Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane)">
            <summary>
            Adds Volume criteria to the FilterDefinition by reference planes.
            </summary>
            <param name="oRefplaneTop">Reference plane top.</param>
            <param name="oRefPlaneBottom">Reference plane bottom.</param>
            <param name="oRefPlaneFront">Reference plane front.</param>
            <param name="oRefPlaneBack">Reference plane back.</param>
            <param name="oRefPlaneLeft">Reference plane left.</param>
            <param name="oRefPlaneRight">Reference plane right.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricVolumeByRefPlanes">
            <summary>
            Adds a parametric Volume criteria to the FilterDefinition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddForeignReference">
            <summary>
            Adds a References root to the FilterDefinition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddForeignReference(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Adds the specified References criteria to the FilterDefinition.
            </summary>
            <param name="oReferenceFileNames">Collection of reference files that will be included in the filter definition.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddReference(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Adds the specified References criteria to the FilterDefinition.
            </summary>
            <param name="ReferenceObjects">Collection of BusinessObjects that will be included in the filter definition.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinition.AddParametricForeignReference">
            <summary>
            Adds a parametric References criteria to the FilterDefinition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterDefinition.MatchAllProperties">
            <summary>
            This property controls whether the Filter matches ANY or ALL of the PropertyValue criteria.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.#ctor(Ingr.SP3D.Common.Middle.Filter)">
            <summary>
            Intialize a FilterDefiniton for a persistent filter
            </summary>
            <param name="oFilter"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddObjectType(Ingr.SP3D.Common.Middle.Services.BOCInformation)">
            <summary>
            Adds the specified BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
            <param name="oBOCNode">BOCInformation that will be used to create an object type filter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterInvalidBOCException">The BOC node or node path does not exist or is in invalid format.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddObjTypeException">Cannot add ObjType to Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddObjectType(System.String)">
            <summary>
            Adds the specified BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
            <param name="strBOCNodePath">BOCNodePath that will be used to create an object type filter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterInvalidBOCException">The BOC node or node path does not exist or is in invalid format.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddObjTypeException">Cannot add ObjType to Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddParametricObjectType">
            <summary>
            Adds a parametric BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterInvalidBOCException">The BOC node or node path does not exist or is in invalid format.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddObjTypeException">Cannot add ObjType to Filter Definition.</exception>     
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddWherePropertyWithAllParameters(System.String,System.String,GSCADMiddleFilters.PropertyComparisonOperator,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This is an internal method called by all persistent PropertyFilter. 
            </summary>
            <param name="IID"></param>
            <param name="PropertyName"></param>
            <param name="iOperator"></param>
            <param name="PropVal1"></param>
            <param name="PropVal2"></param>
            <param name="RelGUIDArray"></param>
            <param name="RelOrgFlagArray"></param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the Property to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddWherePropertyWithAllParametersParametric(System.String,System.String,Ingr.SP3D.Common.Middle.Services.SP3DPropType,System.Object,System.Object)">
            <summary>
            This is an internal method called by all persistent PropertyFilter. 
            </summary>
            <param name="IID"></param>
            <param name="PropertyName"></param>
            <param name="ePropertyType"></param>
            <param name="RelGUIDArray"></param>
            <param name="RelOrgFlagArray"></param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">Cannot retrieve metadata items such as IID, GDI, RelationGUID, EdgeGUID.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">The Property is not valid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">Cannot add the Property to the Filter Definition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">Two Properties are not matched with each.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddHierarchy(Ingr.SP3D.Common.Middle.HierarchyTypes,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject},System.Boolean)">
            <summary>
            Adds the specified hierarchy criteria (HierarchyTypes and BusinessObjects collection) to the FilterDefinition.
            </summary>
            <param name="eHierType">HierarchyTypes can be System, Assembly, WBS, Analysis, Space, PermissionGroup, Volume_NamedSpace.</param>
            <param name="objCol">
            This is the collection of BusinessObject that will be included in the filter definition. 
            These objects will be screened by a set of interfaces: 
            System: IJSystem, IJSystemChild. 
            PermissionGroup: IJPermissionGroup and IJFolder.
            </param>
            <param name="bIncludeNested">Boolean value that indicates whether or not to include the nested objects in the filter definition.</param>
            <remarks>
            If the filter is a catalog filter, this method will be equivalant to AddParametricHierarchy. 
            Any business objects specified as filter inputs will be ignored.
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddParametricHierarchy(Ingr.SP3D.Common.Middle.HierarchyTypes,System.Boolean)">
            <summary>
            Adds a parametric hierarchy criteria with specified hierarchy type to the FilterDefinition.
            </summary>
            <param name="iType">HierarchyTypes can be System, Assembly, WBS, Analysis, Space, PermissionGroup, Volume_NamedSpace.</param>
            <param name="bIncludeNested">Bool value that indicates whether to include or not include the nested objects in the filter definition.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddHierObjectsException">Cannot add the hierarchy objects to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddVolumeByRefPlanes(Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane)">
            <summary>
            Adds Volume criteria to the FilterDefinition by reference planes.
            </summary>
            <param name="oRefplaneTop">Reference plane top.</param>
            <param name="oRefPlaneBottom">Reference plane bottom.</param>
            <param name="oRefPlaneFront">Reference plane front.</param>
            <param name="oRefPlaneBack">Reference plane back.</param>
            <param name="oRefPlaneLeft">Reference plane left.</param>
            <param name="oRefPlaneRight">Reference plane right.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddRefPlanesException">Cannot add the Reference Planes to the Filter Definition.</exception>
            <exception cref="T:System.ArgumentException">At least one reference plane must be passed in.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddParametricVolumeByRefPlanes">
            <summary>
            Adds a parametric Volume criteria to the FilterDefinition by reference planes.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddRefPlanesException">Cannot add the Reference Planes to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddForeignReference">
            <summary>
            Adds a References root to the FilterDefinition.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddForeignReferenceException">Cannot add the References to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddForeignReference(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Adds the specified References criteria to the FilterDefinition.
            </summary>
            <param name="oReferenceFileNames">Collection of reference files that will be included in the filter definition.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddForeignReferenceException">Cannot add the References to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddReference(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Adds the specified References criteria to the FilterDefinition.
            </summary>
            <param name="ReferenceObjects">Collection of BusinessObjects that will be included in the filter definition.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddForeignReferenceException">Cannot add the References to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionPersistent.AddParametricForeignReference">
            <summary>
            Adds a parametric References criteria to the FilterDefinition.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddForeignReferenceException">Cannot add the References to the Filter Definition.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper">
            <summary>
            SymbolGeometryHelper is a helper class used for creating basic geometry (shapes) for use in equipment and route symbols,
            so that the user can easily create equipment or route symbols.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.#ctor">
            <summary>
            Default public constructor, in which to use this helper for construction of geometries.
            </summary>
            <example>This example explains how to create the SymbolGeometryHelper object.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateBox(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double)">
            <summary>
            Creates a box, which is a BusinessObject with rectangular cross section and projection. The length of the box is in the
            primary direction of the symbol coordinate system, depth in the secondary direction, and width in the normal direction.          
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dLength">Length of the box.</param>        
            <param name="dDepth">Depth of the box.</param>
            <param name="dWidth">Width of the box.</param>
            <returns>BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to an invalid argument.</exception>
            <example>This example demonstrates the creation of a box.
            <code>
            'Create SymbolGeometryHelper object to create a box.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create a box with dLength 3 meters, dDepth 1 meter, dWidth 2 meters.
            oGeomHelper.CreateBox(oConnection, 3, 2,1)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateCone(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double)">
            <summary>
            Creates a cone given both the radii and height of the cone. Height of the cone will be 
            in the direction of the primary axis of the symbol coordinate system.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dBaseRadius">Base radius of the cone.</param>
            <param name="dTopRadius">Top radius of the cone.</param>
            <param name="dHeight">Height of the cone.</param>
            <returns>Cone3d object.</returns>
            <example>This example demonstrates the creation of a cone.
            <code>
            'Create SymbolGeometryHelper object to create cone.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create cone with dBaseRadius 3 meters, dTopRadius 2 meters, and dHeight 1 meter.
            oGeomHelper.CreateCone(oConnection, 3, 2,1)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateCylinder(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double)">
            <summary>
            Creates a cylinder with radius and length. Length is the direction of the primary vector.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius">Radius of the cylinder to be created.</param>
            <param name="dLength">Length of the cylinder to be created.</param>
            <returns>Projection3d object.</returns>
            <example>This example demonstrates the creation of a cylinder.
            <code>
            'Create SymbolGeometryHelper object to create cylinder.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create cylinder with dRadius 0.5 meters, dLength 1 meter.
            oGeomHelper.CreateCylinder(oConnection, 0.5, 1)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateArc(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double)">
            <summary>
            Creates an arc for a given radius and angle.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius">Radius of the arc.</param>
            <param name="dAngle">Angle of the arc.</param>
            <returns>Arc3d object.</returns>    
            <example>This example demonstrates the creation of an arc.
            <code>
            'Create SymbolGeometryHelper object to create an arc.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create arc with dRadius 1 meter, dAngle 45 degrees.
            oGeomHelper.CreateArc(oConnection, 1, System.Math.PI / 4)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateLineString(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.Generic.List{Ingr.SP3D.Common.Middle.Position},System.Boolean)">
            <summary>
            Creates an open or closed linestring.
            <para>Note: SymbolGeometryHelper coordinate system is not used for this construction. The linestring 
            gets created from the positions list that is supplied, and it is independent of the location 
            of the SymbolGeometryHelper coordinate system.</para>
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="oPosList">List of position objects.</param>
            <param name="bClosed">Boolean to create a closed or open linestring.</param>
            <returns>LineString3d object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to an invalid argument.</exception>
            <example>This example demonstrates the creation of a linestring.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            Dim val As Double
            'Create list of positions to create a linestring.        
            val = 0
            Dim oPos1 As New Position(val + 3, val, val)
            Dim oPos2 As New Position(val + 3.5, val, val)
            Dim oPos3 As New Position(val + 3.5, val, val + 2.0)
            Dim oPosList1 As New List(Of Position)()
            oPosList1.Add(oPos1)
            oPosList1.Add(oPos2)
            oPosList1.Add(oPos3)
            'Create a closed linestring with list of continuous points.
            oGeomHelper.CreateLineString(oConnection, oPosList1, True)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateComplexString(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.Generic.List{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Creates a complex string for a given list of curves.
            <para>Note: SymbolGeometryHelper coordinate system is not used for this construction. 
            The complex string gets created from the positions list that is supplied. It is independent 
            of the location of the symbol definition coordinate system.</para>
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="oCurves">Curves from which the complex string needs to be created.</param>
            <returns>ComplexString3d object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to an invalid argument.</exception>
            <example>This example demonstrates the creation of a complex string.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing        
            'Create list of BusinessObjects to create a complex string.        
            Dim oStartPos As New Position(0, 0, 0)
            Dim oEndPos As New Position(4, 0, 0)
            Dim oMidPos As New Position(6, 2, 0)
            Dim oArcEndPos As New Position(4, 4, 0)
            'Create Line3d and Arc3d.
            Dim oLine As New Line3d(oStartPos, oEndPos)
            Dim oArc As New Arc3d(oEndPos, oMidPos, oArcEndPos)
            Dim oCol As New List(Of BusinessObject)
            'Add created line and arc to list.
            oCol.Add(oLine)
            oCol.Add(oArc)
            'Create a ComplexString3d.
            oGeomHelper.CreateComplexString(oConnection, oCol)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateSphere(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double)">
            <summary>
            Creates a sphere for a given radius.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius">Radius of the sphere.</param>
            <returns>Sphere3d object.</returns>     
            <example>This example demonstrates the creation of a sphere.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create sphere with dRadius 1 meter.
            oGeomHelper.CreateSphere(oConnection, 1)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateCircularTorus(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double)">
            <summary>
            Creates a partial or full torus. Axis of the torus is in the direction of the primary vector. 
            For the partial torus, start of the torus occurs from a point on secondary axis in the plane of secondary and tertiary axes.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dMaxRadius">Maximum radius of the circular torus. </param>
            <param name="dMinRadius">Minimum radius of the circular torus.</param>
            <param name="dSweepAngle">Sweep angle of the circular torus.</param>
            <returns>Revolution3d object.</returns>   
            <example>This example demonstrates the creation of a circular torus.
            <code>
            'Create SymbolGeometryHelper object to create arc.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing 
            'Create circular torus with outer radius 3.0, inner radius 2.0, dSweepAngle 180 degrees.
            oGeomHelper.CreateCircularTorus(oConnection, 3, 2, System.Math.PI)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateEllipse(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double)">
            <summary>
            Creates an Ellipse3d or EllipticalArc3d object based on the sweep angle.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="dMajorRadius">Major radius of the ellipse or elliptical arc.</param>
            <param name="dMinorRadius">Minor radius of the ellipse or elliptical arc.</param>
            <param name="dSweepAngle">Sweep angle of the ellipse or elliptical arc.</param>
            <returns>BusinessObject of type Ellipse3d Or Elliptical3d.</returns>
            <example>This example demonstrates the creation of an ellipse.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create EllipticalArc3d with major radius 3.0, minor radius 2.0, sweep angle 180 degrees.
            oGeomHelper.CreateEllipse(oConnection, 3, 2, System.Math.PI)
            'Create Ellipse3d with dMajorRadius 3.0, dMinorRadius 2.0, dSweepAngle 360 degrees.
            oGeomHelper.CreateEllipse(oConnection, 3, 2, 2 * System.Math.PI)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateEccentricCone(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an eccentric cone where offset defined is eccentricity measured in the direction of 
            secondary axis. Height of the cone is measured in the direction of primary axis.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dBaseRadius">Base radius of the eccentric cone.</param>
            <param name="dTopRadius">Top radius of the eccentric cone.</param>
            <param name="dHeight">Height of the eccentric cone.</param>
            <param name="dOffset">Offset of the eccentric cone.</param>
            <returns>Ruled3d object.</returns> 
            <example>This example demonstrates the creation of an eccentric cone.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create eccentric cone with dBaseRadius 1.5, dTopradius 1.0, dHeight 2.0, dOffset 0.5.
            oGeomHelper.CreateEccentricCone(oConnection,1.5,1.0,2.0,0.5)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreatePlaneWithHoles(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.Generic.List{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Creates a plane with a defined boundary. First object in the list (circle or linestring) is 
            used as the outer boundary, and the second object onwards in the list is used for creating holes 
            in the plane. 
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="oBoundaries">List of ComplexString3d objects.</param>
            <returns>Plane3d object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised if an invalid argument.</exception>
            <example>This example demonstrates the creation of a plane with holes.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection 
            Dim oConnection As SP3DConnection = Nothing
            
            'Create a ComplexString3d which defines a plane.
            Dim Pos(0 To 5) As Position
            'Define plane end points. 
            Pos.SetValue(New Position(0, 0, 0), 0)
            Pos.SetValue(New Position(4, 0, 0), 1)
            Pos.SetValue(New Position(4, 4, 0), 2)
            Pos.SetValue(New Position(0, 4, 0), 3)
            Dim oBoundCurveColl As New Collection(Of ICurve)
            Dim oLine1 As New Line3d(Pos(0), Pos(1))
            oBoundCurveColl.Add(oLine1)
            Dim oLine2 As New Line3d(Pos(1), Pos(2))
            oBoundCurveColl.Add(oLine2)
            Dim oLine3 As New Line3d(Pos(2), Pos(3))
            oBoundCurveColl.Add(oLine3)
            Dim oLine4 As New Line3d(Pos(3), Pos(0))
            oBoundCurveColl.Add(oLine4)
            'Create ComplexString3d using curves. 
            Dim oPlaneComplex As New ComplexString3d(oBoundCurveColl)
            
            'Create circular hole at centre of square. 
            Dim oNormal As New Vector(0.0, 0.0, 1.0)
            Pos.SetValue(New Position(2, 2, 0), 4)
            Dim oCircle As New Circle3d(Pos(4), oNormal, 0.25)
            oBoundCurveColl = New Collection(Of ICurve)
            oBoundCurveColl.Add(oCircle)
            'Create Complexstring3d using circle. 
            Dim oHoleComplex As New ComplexString3d(oBoundCurveColl)
            'Create a list of ComplexString3d objects. 
            Dim oBoundaries As New List(Of ComplexString3d)()
            oBoundaries.Add(oPlaneComplex)
            oBoundaries.Add(oHoleComplex)
            'Create plane with holes. It considers first complex string as plane remaining as holes. 
            Dim oPlane As Plane3d = oGeomHelper.CreatePlaneWithHoles(oConnection, oBoundaries)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateSurfaceofRevolution(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.BusinessObject,System.Double)">
            <summary>
            Creates a surface of revolution, given a cross section. The cross section can be a linestring or complex string. The location of the cross section 
            with respect to the symbol coordinate system primary axis will be the radius of revolution. 
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="oCrossection">Cross section of the surface.</param>
            <param name="dSweepAngle">Sweep angle of the revolution.</param>
            <returns>Revolution3d object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument.</exception>
            <example>This example demonstrates the creation of surface of revolution.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            
            Dim Pos(0 To 3) As Position
            Pos.SetValue(New Position(0, 0, 0), 0)
            Pos.SetValue(New Position(4, 0, 0), 1)
            Pos.SetValue(New Position(2, 4, 0), 2)
            
            'Create a triangular cross section (Linestring).
            Dim oPointCol As New Collection(Of Position)
            oPointCol.Add(Pos(0))
            oPointCol.Add(Pos(1))
            oPointCol.Add(Pos(2))
            oPointCol.Add(Pos(0))
            'Create transient linestring.
            Dim oLineString As New LineString3d(oPointCol)
            
            'Create surface of revolution with oLineString.
            oGeomHelper.CreateSurfaceofRevolution(oConnection, oLineString, System.Math.PI)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateSphericalDish(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double)">
            <summary>
            Creates a spherical dish with revolution axis as the primary axis. 
            Radius is the sphere radius, and height is the height of the spherical dish.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius">Sphere radius of the spherical dish.</param>
            <param name="dHeight">Height of the spherical dish.</param>
            <returns>Revolution3d object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Height of the dish is not a positive value or is greater than the sphere diameter.</exception>
            <example>The example demonstrates the creation of a spherical dish.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing 
            'Define Revolution3d object.
            Dim oRevolution3d As Revolution3d = Nothing
            'Call CreateSphericalDish method to create a spherical dish with radius 3 meters and height 1 meter.
            oRevolution3d = oGeomHelper.CreateSphericalDish(oConnection, 3, 1)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateSphericalDish(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ShortOrLongOption)">
            <summary>
            Creates a spherical dish with revolution axis being the primary axis.         
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius">Sphere radius of the spherical dish.</param>
            <param name="dFlatSideDiameter">Flat side diameter of the sphere.</param>
            <param name="eOption">Option to specify long or short side option.</param>
            <returns>Revolution3d object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Flat side diameter of the dish is not a positive value or is greater than twice the maximum radius.</exception>
            <example>The example demonstrates the creation of a spherical dish.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection. 
            Dim oConnection As SP3DConnection = Nothing
            'Define Revolution3d object. 
            Dim oRevolution3d As Revolution3d = Nothing
            'Call CreateSphericalDish method to create a spherical dish with radius 3 meters and with flat side diameter 5 meters with long option.
            oRevolution3d = oGeomHelper.CreateSphericalDish(oConnection, 3, 5, SymbolGeometryHelper.ShortOrLongOption.Long)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateEllipticalDish(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double)">
            <summary>
            Creates an elliptical dish with revolution axis being the primary axis.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius1">Major radius of the ellipse.</param>
            <param name="dRadius2">Minor radius of the ellipse.</param>
            <param name="dHeight">Height of the elliptical dish.</param>
            <returns>Revolution3d object</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Height of the dish is not a positive value or is greater than the twice of minimum radius.</exception>
            <example>The example demonstrates the creation of an elliptical dish.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing 
            'Define Revolution3d object.
            Dim oRevolution3d As Revolution3d = Nothing
            'Call CreateEllipticalDish method to create an elliptical dish with maximum radius 5 meters, minimum radius 3 meters, height 1 meter.
            oRevolution3d = oGeomHelper.CreateEllipticalDish(oConnection, 5, 3, 1)
            </code> 
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateEllipticalDish(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double,Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ShortOrLongOption)">
            <summary>
            Creates an elliptical dish with revolution axis being the primary axis.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius1">Major radius of the ellipse.</param>
            <param name="dRadius2">Minor radius of the ellipse.</param>
            <param name="dFlatSideDiameter">Flat side diameter of the ellipse.</param>
            <param name="eOption">Option to specify long ot short side option.</param>
            <returns>Revolution3d object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Flat side diameter of the dish is not a positive value or is greater than twice the maximum radius.</exception>
            <example>The example demonstrates the creation of an elliptical dish.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing 
            'Define Revolution3d object.
            Dim oRevolution3d As Revolution3d = Nothing
            'Call CreateEllipticalDish method to create an elliptical dish with maximum radius 5 meters and minimum radius 3 meters, FlatSideDiameter 3 meters, ShortOrLongOption as Long.
            oRevolution3d = oGeomHelper.CreateEllipticalDish(oConnection, 5, 3, 3,SymbolGeometryHelper.ShortOrLongOption.Long)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateNEdgePyramid(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.Generic.List{Ingr.SP3D.Common.Middle.Position},System.Double,System.Double,System.Boolean)">
            <summary>
            Creates an N-edge pyramid (pyramid, triangular pyramid, rectangular pyramid, etc.). Direction of the primary axis 
            is chosen as the direction of sweep. 
            <para>Note: Define the vertices in the global XY plane only.</para>
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="oVertices">List of vertices with which the pyramid must be constructed.</param>
            <param name="dTotallength">Total length; i.e, the height of the pyramid.</param>
            <param name="dFrustumLength">Frustum length; i.e, the height of the truncated pyramid.</param>
            <param name="bCappedEnds">Boolen to specify whether ends are capped or not.</param>
            <returns>BusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised if there are no vertices.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised if an invalid argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised if an invalid argument; the given vertices are not in global XY plane.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CrossSectionNotPlanarException">Raised if the list of vertices passed are not planar.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.VerticesAreSelfIntersectingException">Raised if the given list of vertices are self-intersecting.</exception>
            <example>This example demonstrates the creation of an N-edge pyramid.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Define list of vertices of the pyramid base.
            Dim oPos(0 To 3) As Position
            oPos(0) = New Position(-2, -1, 0)
            oPos(1) = New Position(2, -1, 0)
            oPos(2) = New Position(2, 1, 0)
            oPos(3) = New Position(-2, 1, 0)
            Dim oVertices As New List(Of Position)
            Dim i As Integer
            For i = 0 To 3
            oVertices.Add(oPos(i))
            Next i
            'Call CreateNEdgePyramid to create a rectangular truncated pyramid, with the given list of vertices, total length, and frustum length.
            oGeomHelper.CreateNEdgePyramid(oConnection, oVertices, 5, 3, True)         
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateNEdgePrismaticTorus(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.Generic.List{Ingr.SP3D.Common.Middle.Position},System.Double,System.Double)">
             <summary>
             Creates a torus of a polygon cross section. The cross section definition should be completed with a list of positions. 
             Sweep angle is measured from secondary vector in an anti-clockwise direction.
             <para>Note: Vertices must be defined in the global XY plane.</para>
             </summary>
             <param name="oConnection">SP3DConnection object.</param>
             <param name="oVertices">List of position objects.</param>
             <param name="dRadius">Radius of sweep.</param>
             <param name="dSweepAngle">Angle of revolution.</param>
             <returns>Revolution3d object.</returns>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid oVertices.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument; the given vertices are not in the global XY plane.</exception>
             <example>This example shows how to create an N-edge prismatic torus.
             <code>
             'Create SymbolGeometryHelper object.
             Dim oGeomHelper As New SymbolGeometryHelper()
             'Define SP3DConnection.
             Dim oConnection As SP3DConnection = Nothing
             Dim oActivePoint As New Position
             
             'Define points. 
             Dim oVerticesColl As New List(Of Position)
            
             oVerticesColl.Add(new Position(0, -0.5, 0));
             oVerticesColl.Add(new Position(1, -0.5, 0));
             oVerticesColl.Add(new Position(1.5, 0, 0));
             oVerticesColl.Add(new Position(1.5, 1, 0));
             oVerticesColl.Add(new Position(1, 1.5, 0));
             oVerticesColl.Add(new Position(0, 1.5, 0));
             oVerticesColl.Add(new Position(-0.5, 1, 0));
             oVerticesColl.Add(new Position(-0.5, 0, 0));
             
             'Call CreateNEdgePrismaticTorus, to create an N-edge prismatic torus for a given list of vertices, radius, and sweep angle.
             Dim oNEdgeTorus As Revolution3d
             oNEdgeTorus = oGeomHelper.CreateNEdgePrismaticTorus(oConnection, oPointsList, dRadius, dSeepAngle); 
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateProjectedPolygonFromCrossSection(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.BusinessObject,System.Double,System.Boolean)">
             <summary>
             Creates a projection given either a linestring or a complex string. 
             Projection is created in the direction of primary axis.
             <para>Note: Cross section must be defined in the global XY plane.</para>
             </summary>
             <param name="oConnection">SP3DConnection.</param>
             <param name="oCrossSection">Cross section of the polygon.</param>
             <param name="dLength">Length of projection.</param>
             <param name="bCappedEnds">Boolean to specify whether ends are capped or not.</param>
             <returns>Projection3d object.</returns>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to an invalid argument.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to an invalid argument; the given cross section does not lie in the global XY plane.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CrossSectionIsNotClosedException">Curve passed is an open curve.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CrossSectionNotPlanarException">The given cross section is not planar.</exception>
             <example>This example demonstrates the creation of a projected polygon from a given cross section.
             <code>
            'Create SymbolGeometryHelper object. 
             Dim oGeomHelper As New SymbolGeometryHelper
             'Define SP3DConnection 
             Dim oConnection As SP3DConnection = Nothing
             'Define points for constructing the LineString3d.
             Dim oPosColl As New List(Of Position)
             'Define oOrigin and offset value.
             Dim oOrigin As Position = New Position(0.0, 0.0, 0.0)
             Dim dOffSet As Double = 0.5
            
             oPosColl.Add(New Position(oOrigin.X - 2 * dOffSet, oOrigin.Y - 4 * dOffSet, oOrigin.Z))
             oPosColl.Add(New Position(oOrigin.X + 2 * dOffSet, oOrigin.Y - 4 * dOffSet, oOrigin.Z))
             oPosColl.Add(New Position(oOrigin.X + 5 * dOffSet, oOrigin.Y, oOrigin.Z))
             oPosColl.Add(New Position(oOrigin.X + 2 * dOffSet, oOrigin.Y + 4 * dOffSet, oOrigin.Z))
             oPosColl.Add(New Position(oOrigin.X - 2 * dOffSet, oOrigin.Y + 4 * dOffSet, oOrigin.Z))
             oPosColl.Add(New Position(oOrigin.X - 5 * dOffSet, oOrigin.Y, oOrigin.Z))
             
             Dim oCrossSection As LineString3d
             oCrossSection = oGeomHelper.CreateLineString(Nothing, oPosColl, True)
             
             'Call CreateProjectedPolygonFromCrossSection to create a polygon from a given cross section. 
             Dim oPolygon As Projection3d
             oPolygon = oGeomHelper.CreateProjectedPolygonFromCrossSection(oConnection, oCrossSection, 2 * dOffSet, True)
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateProjectedPolygonFromVertices(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.Generic.List{Ingr.SP3D.Common.Middle.Position},System.Double,System.Boolean)">
             <summary>
             Creates a projection from a given set of vertices. Projection is created in the direction of the primary axis.
             <para>Note: Vertices must be defined in the global XY plane.</para>
             </summary>
             <param name="oConnection">SP3DConnection object.</param>
             <param name="oVertices">Vertices of the cross section of a polygon.</param>
             <param name="dLength">Length of projection.</param>
             <param name="bCappedEnds">Boolean to specify whether ends are capped or not.</param>
             <returns>Projection3d</returns>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised if an invalid argument.</exception>        
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised if an invalid argument; the given vertices are not in the global XY plane.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CrossSectionNotPlanarException">The given cross section is not planar.</exception>
             <example>This example demonstrates the creation of a projected polygon from a given vertices of the cross section of the polygon.
             <code>
             'Create SymbolGeometryHelper object. 
             Dim oGeomHelper As New SymbolGeometryHelper()
             'Define SP3DConnection. 
             Dim oConnection As SP3DConnection = Nothing
             'Define points. 
             Dim oVerticesColl As New List(Of Position)
             Dim oOrigin As Position = New Position(0.0, 0.0, 0.0)
             Dim dOffset As Double = 0.5
            
             oVerticesColl.Add(New Position(oOrigin.X - 2 * dOffSet, oOrigin.Y - 4 * dOffSet, oOrigin.Z))
             oVerticesColl.Add(New Position(oOrigin.X + 2 * dOffSet, oOrigin.Y - 4 * dOffSet, oOrigin.Z))
             oVerticesColl.Add(New Position(oOrigin.X + 5 * dOffSet, oOrigin.Y, oOrigin.Z))
             oVerticesColl.Add(New Position(oOrigin.X + 2 * dOffSet, oOrigin.Y + 4 * dOffSet, oOrigin.Z))
             oVerticesColl.Add(New Position(oOrigin.X - 2 * dOffSet, oOrigin.Y + 4 * dOffSet, oOrigin.Z))
             oVerticesColl.Add(New Position(oOrigin.X - 5 * dOffSet, oOrigin.Y, oOrigin.Z))
            
             'Call CreateProjectedPolygonFromVertices to create a polygon from a given list of vertices. 
             Dim oPolygon As Projection3d
             oPolygon = oGeomHelper.CreateProjectedPolygonFromVertices(oConnection, oVerticesColl, 2 * dOffSet, True)
            
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.DefinePlacePoint(Ingr.SP3D.Common.Middle.Matrix4X4,System.Int32)">
            <summary>
            Creates or adds a new place point with active position and orientation to the place points list.
            </summary>
            <param name="oMatrix">Matrix4X4 object.</param>
            <param name="key">Key to identify the matrix.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised if an invalid argument.</exception>
            <example>This example explains how to define a place point.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Create matrix.
            Dim Arr As Double() = New Double() {0.0, 0.0, 1.0, 0.0, _
                                                1.0, 0.0, 0.0, 0.0, _
                                                0.0, 1.0, 0.0, 0.0, _ 
                                                0.0, 0.0, 5, 1.0}
            Dim oMatrix As New Matrix4X4(Arr, True)
            'Define place point with a key value 1.
            oGeomHelper.DefinePlacePoint(oMatrix, 1)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreateControlPoint(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double)">
            <summary>
            Creates a control point at the active position of the SymbolGeometryHelper.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dDiameter">Diameter of the control point.</param>
            <returns>ControlPoint object.</returns>
            <exception cref="T:System.ArgumentNullException">Raised if there is no SP3DConnection.</exception> 
            <example>This example demonstrates the creation of a control point.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create control point with dDiameter.
            oGeomHelper.CreateControlPoint(oConnection,0.0)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreatePlanewithRectangularBoundary(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double)">
            <summary>
            Creates a rectangular plane for a give length and width.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dLength">Length of the plane to be created.</param>
            <param name="dWidth">Width of the plane to be created.</param>
            <returns>Returns the Plane3d that is created.</returns>
            <example>This example demonstrates the creation of a plane with a rectangular boundary.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create plane with a rectangular boundary with 2 meter length and 1 meter width.
            oGeomHelper.CreatePlanewithRectangularBoundary(oConnection,2.0,1.0)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.CreatePlanewithCircularBoundary(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double)">
            <summary>
            Creates a cicular plane for a given radius.
            </summary>
            <param name="oConnection">SP3DConnection object.</param>
            <param name="dRadius">Radius of the circular plane to be created.</param>
            <returns>Returns the Plane3d that is created.</returns>
            <example>This example demonstrates the creation of plane with a circular boundary.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define SP3DConnection.
            Dim oConnection As SP3DConnection = Nothing
            'Create plane with a circular boundary with 2 meter radius.
            oGeomHelper.CreatePlanewithCircularBoundary(oConnection,2.0)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.SetActiveMatrix(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Sets the active matrix of the SymbolGeometryHelper coordinate system.
            </summary>        
            <param name="oMatrix">Matrix4X4 object to set.</param>
            <example>This example explains how to set the active matrix.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Create matrix.
            Dim Arr As Double() = New Double() {0.0, 0.0, 1.0, 0.0, _
                                                1.0, 0.0, 0.0, 0.0, _
                                                0.0, 1.0, 0.0, 0.0, _ 
                                                0.0, 0.0, 5, 1.0}
            Dim oMatrix As New Matrix4X4(Arr, True)
            'Set the active matrix.
            oGeomHelper.SetActiveMatrix(oMatrix)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.GetActiveMatrix">
            <summary>
            Gets the active matrix of the SymbolGeometryHelper coordinate system.
            </summary>
            <returns>Matrix4X4 object.</returns>
            <example>This example explains how to get the active matrix.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            Dim oMatrix As New Matrix4X4()
            'Get the active matrix.
            oMatrix = oGeomHelper.GetActiveMatrix
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the symbol's coordinate system so that the coordinate system can be rotated with respect to its origin.
            </summary>
            <param name="vecPrimary">Primary vector of the SymbolGeometryHelper coordinate system.</param>
            <param name="vecSecondary">Secondary vector of the SymbolGeometryHelper coordinate system.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to invalid argument.</exception>
            <example>This example explains how to set the orientation.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define new primary and secondary.
            Dim oPrim As New Vector(0.0, 0.0, 1.0)
            Dim oSec As New Vector(1.0, 0.0, 0.0)
            'Set the orientation.
            oGeomHelper.SetOrientation(oPrim,oSec)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.MoveAlongAxis(System.Double,Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.AxisDirection)">
            <summary>
            Sets the symbol coordinate system reference to a specified distance along the axis defined.
            </summary>
            <param name="dDistance">Distance by which the coordinate system must be moved.</param>
            <param name="eDirection">Direction in which the coordinate system must be moved.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to an invalid argument.</exception>
            <example>This example explains how to move a distance along the axis.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Move 1 meter along active normal direction.
            oGeomHelper.MoveAlongAxis(1, SymbolGeometryHelper.AxisDirection.Normal)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.RotateOrientation(System.Double,Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.AxisDirection)">
            <summary>
            Rotates the coordinate system with respect to an axis, which is with respect to its origin at a specified angle. 
            The angle should be in radians, and it is measured +180 degrees to -180 degrees.
            </summary>
            <param name="dAngle">Angle by which the coordinate system is to be rotated.</param>
            <param name="eDirection">Direction by which the object must be rotated.</param>
            <example>This example explains how to rotate orientation with a certain angle.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Rotate orientation by 180 degrees about active normal directions.
            oGeomHelper.RotateOrientation(System.Math.PI, SymbolGeometryHelper.AxisDirection.Normal)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.MoveToPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Sets the origin of the SymbolGeometryHelper coordinate system to the specified position.
            </summary>
            <param name="oPosition">Position to which the coordinate system must be moved.</param>
            <example>This example explains how to move to a certain point.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Create a new position to which the coordinate system must be moved.
            Dim oPoint As New Position(10, 10, 10)
            oGeomHelper.MoveToPoint(oPoint)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.MoveToPlacePoint(System.Int32)">
            <summary>
            Sets the origin of the SymbolGeometryHelper coordinate system to the specified place point.
            </summary>
            <param name="iPlacePoint">Integer representing the place point.</param>
            <example>This example explains how to move to a certain place point.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Move to place point 1.
            oGeomHelper.MoveToPlacePoint(1)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.MoveAlongLine(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            The symbol coordinate system's active point is moved by a relative distance along a line 
            with a given the direction of travel (a starting point and end point of the line) and travel distance.
            </summary>
            <param name="oFromLineEnd">The starting input point for computing the direction of travel.</param>
            <param name="oToLineEnd">The ending input point for computing direction of travel.</param>        
            <param name="dDistance">The input variable containing the distance of travel.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to invalid argument.</exception>
            <example>This example explains how to move the active coordinate system along a line.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define oFromLineEnd, oToLineEnd and oFromPosition.
            Dim oFromLineEnd As New Position(0, 0, 0) 
            Dim oToLineEnd As New Position(10,10,0)
            Dim oFromPosition As New Position(5,5,0)
            'Move the coordinate system by a distance of 2 meters.
            oGeomHelper.MoveAlongLine(oFromLineEnd,oToLineEnd,oFromPosition,2.0)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.MoveAlongArc(Ingr.SP3D.Common.Middle.Arc3d,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary> 
            Moves the active coordinate system by a specified length. The real move traces a path along the arc as defined.
            Here the active point moves relative to where it is but along the arc. It does not have to be on the arc.
            </summary>
            <param name="oArc">Arc object.</param>
            <param name="oFromPosition">An input to identify the measuring start point, which should lie on the arc that is passed.</param>
            <param name="oToPosition">An input to identify the measuring end point, which should lie on the arc that is passed.</param>
            <param name="dTravalDistance">An input to specify the peripheral traversal distance from oFromPosition.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Raised due to invalid argument.</exception>
            <example>This example explains how to move the active coordinate system relatively along an arc.
            <code>
            'Create SymbolGeometryHelper object.
            Dim oGeomHelper As New SymbolGeometryHelper()
            'Define start, end, and center points of the real arc.
            Dim oStartPos As New Position(5.0, 0.0, 0.0)
            Dim oEndPos As New Position(0.0, 5.0, 0.0)
            Dim ocenterPos As New Position(0.0, 0.0, 0.0)
            'Define arc normal.
            Dim oArcNormal As Vector
            oArcNormal = New Vector(oGeomHelper.ActiveNormal)
            'Define oFromPosition and oToPosition. 
            Dim dStartAngle As Double = Math.PI * 30 / 180.0
            Dim dEndAngle As Double = Math.PI * 60 / 180.0
            Dim oFromPosition As New Position((5 * Math.Cos(dStartAngle)), (5 * Math.Sin(dStartAngle)), 0.0)
            Dim oToPosition As New Position((5 * Math.Cos(dEndAngle)), (5 * Math.Sin(dEndAngle)), 0.0)
            'Find the cord length (l = r*angle).
            Dim dCordLength As Double = 5 * (dEndAngle - dStartAngle)
            'Create the real arc. 
            Dim oRealArc As New Arc3d(ocenterPos, oArcNormal, oStartPos, oEndPos)
            'Set the active position of coordinate system to oFromPosition.
            oGeomHelper.ActivePosition = oFromPosition
            'Call the MoveAlongArc method such that the coordinate system is moved along arc with a travel distance of dCordLength/2.
            oGeomHelper.MoveAlongArc(oRealArc, oFromPosition, oToPosition, dCordLength / 2)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ActivePosition">
            <summary>
            Gets or sets the position of the symbol coordinate system.
            </summary>
            <example>This example explains how to get or set the active position.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            Dim oActivePos As Position
            'Getting the active position.
            oActivePos = oGeomHelper.ActivePosition
            'Create a new position and set the active position.
            oActivePos = New Position(10.0, 0.0, 0.0)
            oGeomHelper.ActivePosition = oActivePos
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ActivePrimary">
            <summary>
            Gets the primary vector of the symbol coordinate system. 
            </summary>
            <example>This example explains how to get the active primary vector.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            Dim oVector As Vector
            'Getting the active primary.
            oVector = oGeomHelper.ActivePrimary
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ActiveSecondary">
            <summary>
            Gets the secondary vector of the symbol coordinate system.
            </summary>
            <example>This example explains how to get the active secondary vector.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            Dim oVector As Vector
            'Getting the active secondary.
            oVector = oGeomHelper.ActiveSecondary
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ActiveNormal">
            <summary>        
            Gets the tertiary vector of the symbol coordinate system. 
            </summary>
            <example>This example explains how to get the active normal vector.
            <code>
            'Create SymbolGeometryHelper object. 
            Dim oGeomHelper As New SymbolGeometryHelper()
            Dim oVector As Vector
            'Getting the active normal.
            oVector = oGeomHelper.ActiveNormal
            </code>
            </example>        
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.AxisDirection">
            <summary>
            Axis direction enumerated types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.AxisDirection.Primary">
            <summary>
            Primary direction of SymbolGeometryHelper coordinate system.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.AxisDirection.Secondary">
            <summary>
            Secondary direction of SymbolGeometryHelper coordinate system.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.AxisDirection.Normal">
            <summary>
            Tertiary or normal direction of SymbolGeometryHelper coordinate system.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ShortOrLongOption">
            <summary>
            Short or long option enumerated types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ShortOrLongOption.Short">
            <summary>
            Short option.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SymbolGeometryHelper.ShortOrLongOption.Long">
            <summary>
            Long option.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SP3DConnection">
             <summary>
             The connection to a specific model or catalog database. SP3DConnection is base class for both. Also
             provides access to SmartPlant 3D metadata for the database.
             </summary>
             <example>This is an example for SP3DConnection class methods and properties.
             <code>
             Public Class SP3DConnection
               Public Sub New()
            
                'Getting the model connection. 
                Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                Dim oPlantModel As Model = oSiteMgr.ActiveSite.ActivePlant.PlantModel
                Dim oRootObj As BusinessObject = DirectCast(oPlantModel.RootSystem, BusinessObject)
                Dim oModelConn As SP3DConnection = oRootObj.DBConnection
            
                Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                'Getting the parent plant from the model connection. 
                Dim oPlant As Plant = oModelConn.ParentPlant
            
                'Getting the database ID from the model connection. 
                Dim strDataBaseID As String = oModelConn.DatabaseID
                   
                'Getting the database provider from the model connection. 
                Dim strModelDataBaseProvider As String = oModelConn.DBProvider
            
                'Getting the model connection server name from the model connection. 
                Dim strModelServer As String = oModelConn.Server
            
                'Getting model connection name. 
                Dim strModelName As String = oModelConn.Name
                
                'Getting MetadataManager from the model connection. 
                Dim oMetadataMgr As MetadataManager = oModelConn.MetadataMgr 
            
                'Getting folders from the model connection. 
                Dim Folders As Collection(Of SP3DFolder) = oModelConn.Folders
            
                'Getting the PermissionGroup collection in the model. 
                Dim PermissionGroups As ReadOnlyCollection(Of PermissionGroup) = oModelConn.PermissionGroups
            
                'Getting the active permission group from the model connection. 
                Dim ActivePermissionGroup As PermissionGroup = oModelConn.ActivePermissionGroup
            
                'Setting the active permission group.
                Dim oNextPermissionGrp As PermissionGroup = PermissionGroups.ElementAt(1)
                oModelConn.ActivePermissionGroup = oNextPermissionGrp
            
                'Getting the moniker from the object ID. 
                Dim strModelObjectID As String
                strModelObjectID = oRootObj.ObjectID
                'Getting the model object moniker using GetBOMonikerFromDbIdentifier method on ModelConnection.
                Dim BOMoniker As BOMoniker = oModelConn.GetBOMonikerFromDbIdentifier(strModelObjectID)
                   
                'Getting the catalog connection.
                Dim oCatConn As SP3DConnection = Nothing
                'Getting the active catalog.
                Dim oCatalog As Catalog = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantCatalog
                oCatConn = oCatalog
             
                'Getting the parent plant from the catalog connection.
                Dim oCatalogParentPlant As Plant = oCatConn.ParentPlant
                   
                'Getting the catalog database ID. 
                Dim strCatDataBaseID As String = oCatConn.DatabaseID
              
                'Getting the database provider. 
                Dim strDataBaseProvider As String = oCatConn.DBProvider
            
                'Getting the catalog server name. 
                Dim strCatalogServer As String = oCatConn.Server
            
                'Getting the catalog connection name. 
                Dim strCatalogName As String = oCatConn.Name
            
                'Getting MetadataManager using the catalog connection. 
                Dim oCatMetadataMgr As MetadataManager = oCatConn.MetadataMgr 
            
                'Getting folders in the catalog database. 
                Dim oCatalogFoldersCol As Collection(Of SP3DFolder) = oCatConn.Folders
                
                'Getting permission groups in the catalog. 
                Dim oCatalogPermissionGroups As ReadOnlyCollection(Of PermissionGroup) = oCatConn.PermissionGroups
            
                'Getting the moniker given the object ID from the catalog connection.
                Dim strCatalogFolderObjectID As String
                'Getting the catalog folder object.
                Dim oFolder As BusinessObject = Nothing
                Dim oCollFolder As Collection(Of SP3DFolder) = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantCatalog.Folders
                oFolder = oCollFolder.ElementAt(0)
                strCatalogFolderObjectID = oFolder.ObjectID
                Dim oFolderBOMoniker As BOMoniker = oCatConn.GetBOMonikerFromDbIdentifier(strCatalogFolderObjectID)
              
                'Calling the Dispose method on the connection. This should be done before closing the application. 
                oCatConn.Dispose()
            
               End Sub
             End Class
             </code>
             </example>
            <summary>
            Defines the connection to a specific model or catalog database. SP3DConnection is the base class for both. Also
            provides access to SP3D metadata for the database.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Private.IJTransactionNotification">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.IJTransactionNotification.OnPostCommit">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.IJTransactionNotification.OnPostAbort">
            <summary>
            For internal use only.
            </summary>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.IJTransactionNotification.OnPreCommit">
            <summary>
            For internal use only.
            </summary>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.IJTransactionNotification.OnPreAbort">
            <summary>
            For internal use only.
            </summary>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.IJTransactionNotification.TransactionNotificationOnClose">
            <summary>
            For internal use only.
            </summary>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetDBIDFromDBType(Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes)">
            <summary>
            Gets a DatabaseID as string for the DBType passed in.
            </summary>
            <param name="eType">Enumerated database type.</param>
            <returns>DatabaseID as a System.string.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.SelectObjects(System.String)">
            <summary>
            Returns a ReadOnlyCollection of BusinessObjects for the query string passed in.
            </summary>
            <param name="strQuery">Query string.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetDBType(Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes)">
            <summary>
            Gets the database type as string for the enumerated DBType passed in.
            </summary>
            <param name="eDBType">Enumerated database type.</param>
            <returns>Database type as a System.string.</returns>
            <exception cref="T:System.ArgumentException">Unsupported database type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetBOMonikers(System.String)">
            <summary>
            Executes a query and returns a BOMoniker collection.
            </summary>
            <param name="sQuery">Database query to be executed.</param>
            <returns>Ingr.SP3D.Common.Middle.Services.BOMonikers object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException">Middle command failed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.InitializeCache">
            <summary>
            Initializes connection cache.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.TerminateCache">
            <summary>
            Releases member references.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.ConnectSinkToSource">
            <summary>
            Adds this connection as a listener to IJTransactionNotification notifications from RevisionMgr
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotCreateRevisionManagerException">Failed to create Revision Manager object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotReserveSeatException">Failed to reserve SP3D seat (license).</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingInterfaceException">IConnectionPointContainer interface is missing on RevisionManager (JRevisionClass) class.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingConnectionPointException">ConnectionPoint for IJTransactionNotification interface is missing on RevisionManager (JRevisionClass) class.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJExposeErrorsException">Failed to cast revision class to IJExposeErrors.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.DisconnectSinkFromSource">
            <summary>
            Removes this connection from receiving IJTransactionNotification notifications from RevisionMgr.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.CreateBusinessObject(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Creates a BusinessObject using the supplied PrivateBusinessObject.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject that corresponds to the PrivateBusinessObject passed in.</returns>
            <exception cref="T:System.ArgumentNullException">oPrivateBusinessObject is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnLoadBusinessObjectAssemblyException">Failed to load BusinessObject assembly.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnGetBusinessObjectTypeException">Failed to get BusinessObject class type from assembly.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnBusinessObjectSubClassedTypeException">Failed to create BusinessObject sub-classed instance.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.CreatePrivateBusinessObject(RESPOMLib.IMoniker)">
            <summary>
            Creates a PrivateBusinessObject using the supplied IMoniker.
            </summary>
            <param name="oIMoniker">RESPOMLib.IMoniker corresponding to an object in database.</param>
            <returns>Ingr.SP3D.Common.Middle.PrivateBusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oIMoniker is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnLoadPrivateBusinessObjectAssemblyException">Failed to load PrivateBusinessObject assembly.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnGetPrivateBusinessObjectTypeException">Failed to get PrivateBusinessObject class type from assembly.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPrivateBusinessObjectSubClassedTypeException">Failed to create PrivateBusinessObject sub-classed instance.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetBusinessObject(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Gets a BusinessObject for the supplied PrivateBusinessObject, if one exists; otherwise, wraps one, links it to PrivateBusinessObject and returns it.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject for which, a BusinessObject is required.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oPrivateBusinessObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetClsidOfMoniker(RESPOMLib.IMoniker)">
            <summary>
            Gets classid of the supplied IMoniker from POM.
            </summary>
            <param name="oIMoniker">RESPOMLib.IMoniker for which the classid is required.</param>
            <returns>Classid of moniker as System.string.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClsidFromMonikerException">Failed to get ClassId from Moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetPrivateBusinessObjectByMoniker(RESPOMLib.IMoniker)">
            <summary>
            Gets a PrivateBusinessObject for IMoniker, if one exists; otherwise, wraps one, adds to cache and returns it.
            </summary>
            <param name="oIMoniker">RESPOMLib.IMoniker to wrap.</param>
            <returns>Ingr.SP3D.Common.Middle.PrivateBusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oIMoniker is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetSupportsInterface(RESPOMLib.IMoniker,System.String)">
            <summary>
            Determines if the object of the supplied moniker supports the supplied interface.
            </summary>
            <param name="oIMoniker">RESPOMLib.Moniker of an existing object.</param>
            <param name="sInterfaceName">Interface name to be checked on the object.</param>
            <returns>System.bool.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">MK_E_NOOBJECT</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.ReleaseCOMObjectReferences(System.Boolean)">
            <summary>
            Releases all COM object references.
            </summary>
            <param name="bForceRefCountToZero">Bool value indicating if refcount of COM objects must be forced to zero.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.RemoveUnusedWeakReferencesFromCache">
            <summary>
            Removes all unused weak reference objects from cache.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.AddToCache(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Adds a private business object to cache indexed by its DbIdentifier.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPrivateBusinessObjectExistsInCacheException">PrivateBusinessObject already exists in cache.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.AddToTransaction(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Adds a PrivateBusinessObject to transaction cache.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject to add to transaction cache.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.CacheContains(System.String)">
            <summary>
            Determines whether a WeakReference object corresponding to sDbIdentifier is in cache.
            </summary>
            <param name="sDbIdentifier">String value of DbIdentifier, which is used as an index in cache.</param>
            <returns>System.bool. True if object is found in the cache; otherwise, false.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetDbIdentifierFromMoniker(RESPOMLib.IMoniker)">
            <summary>
            Gets DbIdentifier from the supplied IMoniker.
            </summary>
            <param name="oIMoniker">RESPOMLib.IMoniker for which DbIdentifier is required.</param>
            <returns>DbIdentifier as System.string.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDbIdentifierFromMonikerException">MK_E_NOOBJECT</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.RemoveFromCache(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Removes a PrivateBusinessObject from cache.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject to be removed from cache.</param>
            <returns>System.bool. True is object was removed. False if object was not found in the cache.</returns>
            <exception cref="T:System.ArgumentNullException">oPrivateBusinessObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.WrapPersistentPrivateBO(System.Object)">
            <summary>
            Wraps the supplied persistent COM business object in PrivateBusinessObject and adds it to SOM connection cache.
            </summary>
            <param name="oPersistentComObject">Reference to a persistent COM object as System.object.</param>
            <returns>Ingr.SP3D.Common.Middle.PrivateBusinessObject that corresponds to the persistent COM object passed in.</returns>
            <exception cref="T:System.ArgumentNullException">oPersistentComObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.WrapSuspectSP3DBO(Ingr.SP3D.Common.Middle.Services.BOMoniker)">
            <summary>
            Wraps an existing object whose connection is unknown (suspect), using the supplied BOMoniker.
            </summary>
            <param name="oBOMoniker">Ingr.SP3D.Common.Middle.Services.BOMoniker of the object whose connection is unknown (suspect).</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject whose connection is unknown (suspect).</returns>
            <exception cref="T:System.ArgumentNullException">oBOMoniker is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.WrapSuspectSP3DBOs(Ingr.SP3D.Common.Middle.Services.BOMonikers)">
            <summary>
            Wraps existing objects whose connection is unknown (suspect), using their BOMoniker from the supplied BOMonikers.
            </summary>
            <param name="oBOMonikers">Ingr.SP3D.Common.Middle.Services.BOMonikers collection of objects whose connection is unknown (suspect).</param>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of BusinessObject objects whose connection is unknown (suspect).</returns>
            <exception cref="T:System.ArgumentNullException">oBOMonikers is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetBOMonikerFromDbIdentifier(System.String)">
            <summary>
            Gets a BOMoniker based on the supplied DbIdentifier.
            </summary>
            <param name="sDbIdentifier">DbIdentifier as System.string.</param>
            <returns>Ingr.SP3D.Common.Middle.Services.BOMoniker.</returns>
            <exception cref="T:System.ArgumentException">sDbIdentifier is null or blank.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMonikerFromDbIdentifierException">Failed to get Moniker from DbIdentifier.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNullMonikerException">Failed to get moniker for DbIdentifier from POM.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.WrapSP3DBOs(Ingr.SP3D.Common.Middle.Services.BOMonikers)">
            <summary>
            Wraps multiple existing objects using their monikers from the supplied BOMonikers.
            </summary>
            <param name="oBOMonikers">Collection of IMonikers as Ingr.SP3D.Common.Middle.Services.BOMonikers.</param>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of BusinessObject objects.</returns>
            <exception cref="T:System.ArgumentNullException">oBOMonikers is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClsidFromMonikerException">Failed to get ClassId from Moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingInterfaceException"></exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDbIdentifierFromMonikerException">Failed to get DbIdentifier from Moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.WrapSP3DBO(Ingr.SP3D.Common.Middle.Services.BOMoniker)">
            <summary>
            Wraps an existing object using its moniker from the supplied BOMoniker.
            </summary>
            <param name="oBOMoniker">Ingr.SP3D.Common.Middle.Services.BOMoniker.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oBOMoniker is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnClsidFromMonikerException">Failed to get ClassId from Moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingInterfaceException"></exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDbIdentifierFromMonikerException">Failed to get DbIdentifier from Moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetNamedObject(System.String)">
            <summary>
            Resolves the Business Object by its name. 
            </summary>
            <param name="sName">Name of the BusinessObject</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">No object for moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPOMGetObjectException">Unable to bind the business object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Ingr#SP3D#Common#Middle#Private#IJTransactionNotification#OnPostAbort">
            <summary>
            Handler for IJTransactionNotification.OnPostAbort notification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Ingr#SP3D#Common#Middle#Private#IJTransactionNotification#OnPostCommit">
            <summary>
            Handler for IJTransactionNotification.OnPostCommit notification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Ingr#SP3D#Common#Middle#Private#IJTransactionNotification#OnPreAbort">
            <summary>
            Handler for IJTransactionNotification.OnPreAbort notification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Ingr#SP3D#Common#Middle#Private#IJTransactionNotification#OnPreCommit">
            <summary>
            Handler for IJTransactionNotification.OnPreCommit notification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Ingr#SP3D#Common#Middle#Private#IJTransactionNotification#TransactionNotificationOnClose">
            <summary>
            Handler for IJTransactionNotification.TransactionNotificationOnClose notification.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_sDBID">
            <summary>
            DatabaseID of connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_sName">
            <summary>
            Name of connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_sServer">
            <summary>
            Server name of connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_strDBProvider">
            <summary>
            Database provider of connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_permissionGroupID">
            <summary>
            Permission Group id.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_oMetadataMgr">
            <summary>
            Metadata Manager
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_sDBType">
            <summary>
            Database connection type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.m_sSchemaName">
            <summary>
            Schema Name. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.GetLocationsFromDatabase">
            <summary>
            Gets Location objects from database.
            </summary>
            <returns>ReadOnlyDictionary</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetLocationException">Failed to get Location.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Dispose">
            <summary>
            Called by the application at shutdown to cleanup all outstanding cache holdings.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.POM">
            <summary>
            read-only access to the connections (IJDPOM) 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.MiddleCommand">
            <summary>
            Read-only access to JMiddleCommand object for the connection.
            </summary>
            <returns>MIDDLECOMMANDLib.JMiddleCommand.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Name">
            <summary>
            Gets the read-only name of the model or catalog.
            </summary>
            <returns>Name of connection as System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Server">
            <summary>
            Gets the read-only server name of the connection database.
            </summary>
            <returns>Name of server as System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.DatabaseID">
            <summary>
            Gets the read-only database ID of connection.
            </summary>
            <returns>DatabaseID as System.string.</returns>
            <remarks>In SP3D 2009.1 (and previous releases), this property only returns the correct value for the ACTIVE CONNECTION. It should NOT be used for any connection other than the Active one.</remarks>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.DBProvider">
            <summary>
            Gets the read-only name of the database provider, which is either Oracle or MSSQL.
            </summary>
            <returns>DBProvider as System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.PermissionGroupID">
            <summary>
            Returns the permission group ID of SP3DConnection.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.DatabaseType">
            <summary>
            set and get database type 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.SchemaName">
            <summary>
            Gets the readonly name of the schema. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.MetadataMgr">
            <summary>
            Gets the read-only access to the metadata manager for this connection.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.MetadataManager.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.PermissionGroups">
            <summary>
            Gets the collection of known permission groups defined in this connection.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of PermissionGroup objects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetLocationException">Failed to get Location object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetPermissionGroupsException">Failed to get PermissionGroups object.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.PermissionGroupFolders">
            <summary>
            Returns permission group folders under a catalog or model connection.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Projects">
            <summary>
            Gets the read-only collection of projects, not implemented in initial release.
            </summary>
            <returns>System.Collections.ObjectModel.Collection of SP3DProject objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.Folders">
            <summary>
            Gets the read-only collection of folders in the connection.
            </summary>
            <returns>System.Collections.ObjectModel.Collection of SP3DFolder objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3DConnection.ActivePermissionGroup">
            <summary>
            Gets the active permission group used for newly created objects.
            </summary>
            <returns>ActivePermissionGroup object as Ingr.SP3D.Common.Middle.PermissionGroup.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetActivePermissionGroupException">Failed to get ActivePermissionGroup object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetActivePermissionGroupException">Failed to set ActivePermissionGroup object.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes">
            <summary>
            Specifies enumerated constants for database types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes.Site">
            <summary>
            Site database connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes.Model">
            <summary>
            Model database connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes.Catalog">
            <summary>
            Catalog database connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes.Reports">
            <summary>
            Reports database connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes.PDSRef">
            <summary>
            PDS reference connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes.FileRef">
            <summary>
            Reference file connection.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.PlantConnection">
            <summary>
            Base class for all plant connections such as model, catalog, reports.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.OpenConnectionForAssociatedPlant">
            <summary>
            This method opens the connection if the current plant is active else throw an exception.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access the property or method because the plant is not active.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.GetDBIDFromDBType(Ingr.SP3D.Common.Middle.Services.SP3DConnection.eDBTypes)">
            <summary>
            Gets a DatabaseID as string for the DBType passed in.
            </summary>
            <param name="eType">Enumerated database type.</param>
            <returns>DatabaseID as a System.string.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access GetDBIDFromDBType because the plant is not active.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.Close">
            <summary>
             Releases references and closes the connection object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.OpenConnection">
            <summary>
            Opens the connection 
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoDatabaseException">Database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaDatabaseException">Schema database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoServerException">Server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaServerException">Schema server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException">Database access denied.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException">Site database is out of date. Update Site and Site Schema.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchObjectException">No object in database.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException">GetProjectContext on MiddleContext failed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.Dispose">
            <summary>
            Releases references and disposes the connection object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.WrapSP3DBO(Ingr.SP3D.Common.Middle.Services.BOMoniker)">
            <summary>
            Wraps an existing object using its moniker from the supplied BOMoniker.
            </summary>
            <param name="oBOMoniker">Ingr.SP3D.Common.Middle.Services.BOMoniker.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access WrapSP3DBO because the plant is not active.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.WrapSP3DBOs(Ingr.SP3D.Common.Middle.Services.BOMonikers)">
            <summary>
            Wraps multiple existing objects using their monikers from the supplied BOMonikers.
            </summary>
            <param name="oBOMonikers">Collection of IMonikers as Ingr.SP3D.Common.Middle.Services.BOMonikers.</param>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of BusinessObject objects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access WrapSP3DBOs because the plant is not active.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.GetBOMonikers(System.String)">
            <summary>
            Executes a query and returns a BOMoniker collection.
            </summary>
            <param name="sQuery">Database query to be executed.</param>
            <returns>Ingr.SP3D.Common.Middle.Services.BOMonikers object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access GetBOMonikers because the plant is not active.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.GetBOMonikerFromDbIdentifier(System.String)">
            <summary>
            Gets a BOMoniker based on the supplied DbIdentifier.
            </summary>
            <param name="sDbIdentifier">DbIdentifier as System.string.</param>
            <returns>Ingr.SP3D.Common.Middle.Services.BOMoniker.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access GetBOMonikerFromDbIdentifier because the plant is not active.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PlantConnection.GetNamedObject(System.String)">
            <summary>
            Resolves the Business Object by its name. 
            </summary>
            <param name="sName">Name of the BusinessObject</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">No object for moniker.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPOMGetObjectException">Unable to bind the business object.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PlantConnection.POM">
            <summary>
            read-only access to the connections (IJDPOM) 
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access POM because the plant is not active.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PlantConnection.ParentPlant">
            <summary>
            Gets the parent plant.
            </summary>
            <returns>Parent plant as Ingr.SP3D.Common.Middle.Services.Plant.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnParentPlantAlreadyExistsException">Cannot set the parent plant. It is already set.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PlantConnection.PermissionGroups">
            <summary>
            Gets the collection of known permission groups defined in this connection.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access PermissionGroups because the plant is not active.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PlantConnection.PermissionGroupFolders">
            <summary>
            Returns permission group folders under a catalog or model connection.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access PermissionGroupFolders because the plant is not active.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PlantConnection.MetadataMgr">
            <summary>
            Gets the read-only access to the metadata manager for this connection.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.MetadataManager.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access MetadataMgr because the plant is not active.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PlantConnection.Folders">
            <summary>
            Gets the read-only collection of folders in the connection.
            </summary>
            <returns>System.Collections.ObjectModel.Collection of SP3DFolder objects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access folders because the plant is not active.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PlantConnection.ActivePermissionGroup">
            <summary>
            Gets or sets the active permission group used for newly created objects.
            </summary>
            <returns>ActivePermissionGroup object as Ingr.SP3D.Common.Middle.PermissionGroup.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException"> Failed to access ActivePermissionGroup because the plant is not active.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException">
            <summary>
            This exception is thrown when an error occurs using MiddleCommand object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException.#ctor">
            <summary>
            Initializes a new instance of the CmnMiddleCommandException 
            class.
            </summary>        
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnMiddleCommandException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnMiddleCommandException 
            class with the message for the resource ID passed in.
            </summary> 
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException.#ctor(System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnMiddleCommandException 
            class with the message and a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnMiddleCommandException 
            class with the message for the resource ID passed in and a reference to the inner COMException
            that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnParentPlantAlreadyExistsException">
            <summary>
            This exception is thrown when ParentPlant property cannot be set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnParentPlantAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the CmnParentPlantAlreadyExistsException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException">
            <summary>
            This exception is thrown when the plant properties are accessed for non-active plant
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPlantIsNotActiveException.#ctor">
            <summary>
            Initializes a new instance of the CmnPlantIsNotActiveException class. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnTaskHostIsActiveException">
            <summary>
            This exception is thrown when TaskHost is active and the user tries to create a new site.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnTaskHostIsActiveException.#ctor">
            <summary>
            Initializes a new instance of the CmnTaskHostIsActive 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnActiveSiteAlreadyExistsException">
            <summary>
            This exception is thrown when there is an active site and the user tries to create a new site.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnActiveSiteAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the CmnActiveSiteAlreadyExistsException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateSiteException">
            <summary>
            This exception is thrown when there is an unexpected error creating the site.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateSiteException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateSiteException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateSiteException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToCreateSiteException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer">
            <summary>
            Failed to set NameGenerator path.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer.#ctor">
            <summary>
            Failed to set NameGenerator path.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException">
            <summary>
            Unexpected failure in RegenerateReports.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException.#ctor">
            <summary>
            DataBase with the same name exists already.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteException">
            <summary>
            This exception is thrown when there is an unexpected error creating site.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteException.#ctor">
            <summary>
            DataBase with the same name exists already.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteSchema">
            <summary>
            Failed to restore site schema.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteSchema.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToRestoreSiteSchema
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.OracleSite">
            <summary>
            The oracle site that contains plants and a catalog.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Site">
             <summary>
             The site definition that contains plants and a catalog.
             </summary>
             <example>This is an example for Site class methods and properties.
             <code>
             Public Class Site
               Public Sub New()
            
                 'Get the active site. 
                 Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite
            
                 'Get the site name. 
                 Dim sName As String = oSite.Name
            
                 'Get the collection of plants from the site. 
                 Dim oPlantColl As ReadOnlyCollection(Of Plant) = oSite.Plants
            
                 'Get the collection of catalog database information objects from the site. 
                 Dim oCatalogDatabaseInfoColl As ReadOnlyCollection(Of CatalogDatabaseInformation) = oSite.CatalogDatabaseInfos
            
                 'Get the active plant from the site. 
                 Dim oActivePlant As Plant = oSite.ActivePlant
            
                 'Open the active plant. 
                 oSite.OpenPlant(oActivePlant)
            
                 'Open the active plant by name. 
                 Dim sActivePlantName As String = ""  'This would be initialized to the name of the plant to be opened.
                 oSite.OpenPlant(sActivePlantName)
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.#ctor">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.Site class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.GetDBInfoFromPath(System.String,System.Int32)">
            <summary>
            Gets the Database Server[0] or Database name[1] from path.
            </summary>
            <param name="sPath">string containing catalog database information.</param>
            <param name="iIndx">index of the delimiter.</param>
            <returns>System.string.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.BackUpDBAndSchema(System.String,System.String,System.String,System.String)">
            <summary>
            BackUpDBAndSchema
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.WriteToBcf(System.String)">
            <summary>
            WriteToBcf
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.WriteToLogFile(System.String)">
            <summary>
            WriteToLogFile
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.ReadBCFFile(System.String,System.String@,System.String@,System.String@)">
            <summary>
            ReadBCFFile
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.Cleanup">
            <summary>
            Releases internal variables and prepares class to be terminated or re-initialized.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.SetActivePlant(Ingr.SP3D.Common.Middle.Services.Plant)">
            <summary>
            Sets up wrapper objects for a plant that is already open in COM middle.
            </summary>
            <param name="oPlant">Plant to be set active.</param>
            <remarks>To be used when CommonMiddle is executing in a non-Standalone (Dependent) mode only.</remarks>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetActivePlantException">Cannot set active plant. The plants collection on Site does not contain such a plant.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.SetActivePlant(System.String)">
            <summary>
            Sets up wrapper objects for a plant that is already open in COM middle.
            </summary>
            <param name="sPlantName">Name of the plant to set as active.</param>
            <remarks>To be used when CommonMiddle is executing in a non-Standalone (Dependent) mode only.</remarks>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetActivePlantException">Cannot set active plant. The plants collection on Site does not contain such a plant.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.OpenPlant(Ingr.SP3D.Common.Middle.Services.Plant)">
            <summary>
            Opens an available plant. If a plant is already open, the open plant is closed. Aborts any ongoing transaction.
            </summary>
            <param name="oPlant">The plant object to open.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOpenPlantException">Cannot change plants when running in non-standalone mode.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.OpenPlant(System.String)">
            <summary>
            Opens the given plant name.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.BackupPlant(Ingr.SP3D.Common.Middle.Services.Plant,System.String,System.String,System.Boolean)">
            <summary>
            Performs backup of all databases associated with the given plant.
            </summary>
            <param name="oPlant">Plant object.</param>
            <param name="sBackupConfigFileLocation">Location of backup configuration file (including file name).</param>
            <param name="sBackupFilesLocation">Location of back up files on server.</param>
            <param name="bOverWriteExistingFiles">Overwrite existing files or not.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument exception.</exception>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToBackUpPlantException">Unexpected failure in backup plant.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOracleServerDoesnotHaveWritePermissions">Oracle server does not have write permission exception.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory does not exist exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFileExistsWithSameNameException">File with same name exists at specified location.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantDoesnotBelongToActiveSite">Plant doesn't belongs to active site.</exception>
            <returns>Returns True if succeeded; else returns False.</returns>
            <example>This example explains how to perform backup of plant.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite 
            'Get plant to take backup.
            Dim oPlant As Plant = oSite.ActivePlant 
            'Declare backup configuration file path.
            Dim sBackUpConfigFilePath As String = "D:\BackUpBcfFolder\Plant1.bcf" 
            'Declare backup dump files path.
            Dim sBackUpFilesPath As String = "D:\Plant1BackUp" 
            Dim bOverWriteExistingFiles = True
            'Call BackupPlant to get backup dump files at specified location.
            oSite.BackupPlant(oPlant, sBackUpConfigFilePath, sBackUpFilesPath, bOverWriteExistingFiles) 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.CreateCatalog(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the catalog in this site.
            </summary>
            <param name="sDatabaseServer">Database server in which the catalog database needs to be created.</param>
            <param name="sCatalogDBName">Catalog database name.</param>
            <param name="sCatalogDBLocation">Physical database location.</param>
            <param name="sCatalogLogFileLocation">Log file location for catalog.</param>
            <param name="sTemplateFilePath">Template file path of the catalog and catalog schema.</param>
            <param name="sSymbolShare">Symbol share path.</param>
            <param name="sCatalogSchemaDBLocation">Catalog database schema physical path location.</param>
            <param name="sCatalogSchemaLogFileLocation">Log file location for catalog schema.</param>        
            <param name="bOverwriteExistingCatalog">Boolean to overwrite the existing catalog.</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Name generator has not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found .</exception>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogDataBaseException">Failed to create catalog data base.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogSchemaException">Failed to create catalog schema.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogException">Unexpected error while creating the catalog.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>        
            <returns>Returns True if succeeded; else False.</returns>
            <example>This example explains how to create the catalog.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite
            'Declare all input variables.
            Dim sDataBaseServer As String = "SqlSrv"
            Dim sCatalogDBName As String = "Catalog1"
            Dim sCatalogDBLocation As String = "C:\SqlDbs\"
            Dim sCatalogLogFileLocation As String = "C:\SqlDbs\"
            Dim sCatalogSchemaName As String = "Catalog1_Schema"
            Dim sCatalogSchemaDBLocation As String = "C:\SqlDbs\"
            Dim sCatalogSchemaLogFileLocation As String = "C:\SqlDbs\"
            Dim sTemplateFileLocation As String = "D:\Plant1BackUp\Catalog.dat"
            Dim sSymbolSharePath As String = "D:\Symbols\"
            'Call CreateCatalog method.
            Dim bDoesCreateCatalog As Boolean
            bDoesCreateCatalog = oSite.CreateCatalog(sDataBaseServer, sCatalogDBName, sCatalogDBLocation, sCatalogLogFileLocation, _
                sTemplateFileLocation, sSymbolSharePath, sCatalogSchemaDBLocation, sCatalogSchemaLogFileLocation, True)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.CreateCatalog(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the catalog database.
            </summary>
            <param name="sDatabaseServer">Database server in which the catalog database needs to be created.</param>
            <param name="sCatalogDBName">Catalog database name.</param>        
            <param name="sTemplateFilePath">Template file path of the catalog and catalog schema.</param>
            <param name="sSymbolShare">Symbol share path.</param>   
            <param name="bOverwriteExistingDB">Boolean to overwrite the existing catalog.</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Name generator has not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogDataBaseException">Failed to create catalog database.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogSchemaException">Failed to create catalog schema.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogException">Unexpected error while creating the catalog.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>        
            <returns>Returns True if succeeded; else returns False.</returns>
            <example>This example explains how to create the catalog.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite 
            'Declare all input variables.
            Dim sDataBaseServer As String = "SqlSrv" 
            Dim sCatalogDBName As String = "Catalog1" 
            Dim sTemplateFileLocation As String = "D:\Plant1BackUp\Catalog.dat" 
            Dim sSymbolSharePath As String = "D:\Symbols\" 
            'Call CreateCatalog method.
            oSite.CreateCatalog(sDataBaseServer, sCatalogDBName, sTemplateFileLocation, sSymbolSharePath, True) 
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.RestorePlant(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Restores plant and associated catalog. Physical database files will be created at default server path.
            </summary>        
            <param name="sBackupConfigFile">Backup configuration file path including file.</param>
            <param name="sDabatabaseServer">Database server.</param>
            <param name="sBackupFilePathLoc">Location of dump files.</param>
            <param name="sSymbolSharePath">Symbol share path.</param>
            <param name="sNameGeneratorServer">Name generator server.</param>        
            <param name="bLinkIfCatalogExists">Link to catalog if exists with same name in this site.</param>
            <param name="bOverWriteExistingDataBase">Overwrites if database already exists.</param>        
            <returns>Returns True if succeeded; else returns False.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite">Catalog with name exists in the site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantException">Unexpected failure while restoring plant.</exception>
            <example><code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite 
            'Declare input arguments.         
            Dim sDataBaseServer As String = "SqlSrv" 
            Dim sSymbolSharePath As String = "D:\Symbols\" 
            Dim sBackUpConfigFilePath As String = "D:\BackUpBcfFolder\Plant1.bcf" 
            Dim sBackUpFilesPath As String = "D:\Plant1BackUp\" 
            Dim sNameGeneratorServer As String = "in-sp3d4" 
            Dim bOverWriteExistingDataBase = false
            Dim bLinkIfCatalogExists = true
            'Call RestorePlant method.
            oSite.RestorePlant(sBackUpConfigFilePath, sDataBaseServer, sBackUpFilesPath, sSymbolSharePath, sNameGeneratorServer, bOverWriteExistingDataBase ,bLinkIfCatalogExists)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.RestorePlant(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Restores the plant and associated catalog.
            </summary>        
            <param name="sBackupConfigFile">Backup configuration file path including file name.</param>
            <param name="sDabatabaseServer">Database server name.</param>
            <param name="sBackupFilePathLoc">Database dump files location.</param>
            <param name="sPhysicalDBLocForCatalog">Catalog database physical location.</param>
            <param name="sLogFileLocForCatalog">Catalog database log physical location.</param>
            <param name="sPhysicalDBLocForModel">Model database physical location.</param>
            <param name="sLogFileLocForModel">Model database log physical location.</param>
            <param name="sSymbolSharePath">Symbol share path.</param>
            <param name="sNameGenerator">Name generator server.</param>        
            <param name="bOverWriteExistingDataBase">Boolean to overwrite existing databases.</param>
            <param name="bLinkIfCatalogExists">Link to catalog if it exists with same the name in this site.</param>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite">Catalog with name exists in the site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantException">Unexpected failure while restoring plant.</exception>
            <returns>Returns True if succeeded; else returns False.</returns>
            <example>This example explains how to restore a plant.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite 
            'Declare input arguments.        
            Dim sBackUpConfigFilePath As String = "D:\BackUpBcfFolder\Plant1.bcf" 
            Dim sDataBaseServer As String = "SqlSrv" 
            Dim sBackUpFilesPath As String = "D:\Plant1BackUp\" 
            Dim sPhysicalCatalogDBLoc As String = "D:\SqlDbs\" 
            Dim sLogFileLocForCatalog As String = "D:\SqlDbs\" 
            Dim sPhysicalDBLocForModel As String = "D:\SqlDbs\" 
            Dim sLogFileLocForModel As String = "D:\SqlDbs\" 
            Dim sSymbolSharePath As String = "D:\Symbols\" 
            Dim sNameGeneratorServer As String = "in-sp3d4" 
            Dim bOverWriteExistingDataBase = false
            Dim bLinkIfCatalogExists = true
            'Call restore plant.
            oSite.RestorePlant(sBackUpConfigFilePath, sDataBaseServer, sBackUpFilesPath, sPhysicalCatalogDBLoc, sLogFileLocForCatalog, _ 
                               sPhysicalDBLocForModel, sLogFileLocForModel, sSymbolSharePath, sNameGeneratorServer, bOverWriteExistingDataBase, bLinkIfCatalogExists) 
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.RestorePlantAsCopy(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Restores the plant with user-defined plant and catalog names.
            </summary>
            <param name="sNewPlantName">Plant name.</param>
            <param name="sCatlogDBName">Catalog database name.</param>
            <param name="sModelDBName">Model database name.</param>
            <param name="sBackUpConfigFile">Backup configuration file path.</param>
            <param name="sBackUpFilePath">Backup dump file path.</param>
            <param name="sDataBaseServer">Database server name.</param>
            <param name="sCatalogDBPhysicalLoc">Physical location of catalog.</param>
            <param name="sCatalogDBLogFileLoc">Physical log file location of catalog.</param>
            <param name="sModelDBPhysicalLoc">Model database physical location.</param>
            <param name="sModelDBLogFileLoc">Log file location of model database.</param>
            <param name="sSymbolSharePath">Symbol share path.</param>
            <param name="sNameGeneratorServerName">Name generator server.</param>
            <param name="bOverWriteExitingDBs">Boolean to overwrite existing databases.</param>
            <param name="bLinkIfCatalogExists">Link to catalog if it already exists with the same name in this site.</param>        
            <returns>Returns True if succeeded; else returns False.</returns>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite">Catalog with name exists in the site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantAsCopyException">Unexpected failure while restoring plant as copy.</exception>
            <example>This example explains how to restore plant as a copy.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite 
            'Declare input arguments.
            Dim sPlantName As String = "Plant1" 
            Dim sCataLogDBName As String = "Plant1_CDB" 
            Dim sModelDBName As String = "Plant1_MDB" 
            Dim sBackUpConfigFilePath As String = "D:\BackUpBcfFolder\Plant1.bcf" 
            Dim sDataBaseServer As String = "SqlSrv" 
            Dim sBackUpFilesPath As String = "D:\Plant1BackUp\" 
            Dim sDataBaseServer As String = "SqlSrv"
            Dim sPhysicalCatalogDBLoc As String = "D:\SqlDbs\" 
            Dim sLogFileLocForCatalog As String = "D:\SqlDbs\" 
            Dim sPhysicalDBLocForModel As String = "D:\SqlDbs\" 
            Dim sLogFileLocForModel As String = "D:\SqlDbs\" 
            Dim sSymbolSharePath As String = "D:\Symbols\" 
            Dim sNameGeneratorServer As String = "in-sp3d4" 
            Dim bOverWriteDBs = False
            Dim bLinkIfCatalogExists = True
            oSite.RestorePlantAsCopy(sPlantName,sCataLogDBName,sModelDBName, sBackUpConfigFilePath, sBackUpFilesPath,sDataBaseServer, sPhysicalCatalogDBLoc, sLogFileLocForCatalog, _ 
                               sPhysicalDBLocForModel, sLogFileLocForModel, sSymbolSharePath, sNameGeneratorServer, bOverWriteDBs, bLinkIfCatalogExists) 
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.RestorePlantAsCopy(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Restores the plant with user-defined plant and catalog names.
            </summary>
            <param name="sNewPlantName">New plant name.</param>
            <param name="sCatlogDBName">Catalog database name.</param>
            <param name="sModelDBName">Model database name.</param>
            <param name="sBackUpConfigFile">Backup configuration file.</param>
            <param name="sBackUpFilePath">Backup dump files path.</param>
            <param name="sDataBaseServer">Database server name.</param>
            <param name="sSymbolSharePath">Symbol share path.</param>
            <param name="sNameGeneratorServerName">Name generator server.</param>
            <param name="bOverWriteExistingDBs">Boolean to overwrite existing databases.</param>
            <param name="bLinkIfCatalogExists">Link to catalog if it exists with the same name in this site.</param>
            <returns>True if succeeded.</returns>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite">Catalog with name exists in the site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantAsCopyException">Unexpected failure while restoring plant as copy.</exception>
            <example>This is an example for RestorePlantAsCopy.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite 
            'Declare input arguments.
            Dim sPlantName As String = "Plant1" 
            Dim sCataLogDBName As String = "Plant1_CDB" 
            Dim sModelDBName As String = "Plant1_MDB" 
            Dim sBackUpConfigFilePath As String = "D:\BackUpBcfFolder\Plant1.bcf" 
            Dim sDataBaseServer As String = "SqlSrv" 
            Dim sBackUpFilesPath As String = "D:\Plant1BackUp\"          
            Dim sDatabaseserver As String = "SqlSrv"
            Dim sSymbolSharePath As String = "D:\Symbols\" 
            Dim sNameGeneratorServer As String = "in-sp3d4"
            Dim bOverWriteDBs = False
            Dim bLinkIfCatalogExists = True
            oSite.RestorePlantAsCopy(sPlantName, sCataLogDBName, sModelDBName, sBackUpConfigFilePath, sBackUpFilesPath, _
                                    sDatabaseserver, sSymbolSharePath, sNameGeneratorServer, bOverWriteDBs, bLinkIfCatalogExists)
            </code></example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.RestorePlantForSelectiveModelObjectsRecovery(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Restores plant for selective recovery of model objects.
            </summary>
            <param name="sNewPlantName">New plant name.</param>
            <param name="sCatlogDBName">Catalog name.</param>
            <param name="sModelDBName">Model database name.</param>
            <param name="sBackUpConfigFile">Backup configuration files.</param>
            <param name="sBackUpFilePath">Backup files path.</param>
            <param name="sDataBaseServer">Database server.</param>
            <param name="bOverWriteExistingDBs">Boolean to overwrite existing databases.</param>
            <param name="bLinkIfCatalogExists">Link plant to catalog if the catalog exists with the same name in this site.</param>
            <returns>True if restore completed successfully.</returns>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite">Catalog with name exists in the site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantForSelectiveModelObjectsRecovery">Failed to restore plant for selective model objects recovery.</exception>
            <example> This example shows how to do restore plant for selective model objects recovery.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite
            'Declare input arguments.
            Dim sPlantName As String = "Plant1"
            Dim sCataLogDBName As String = "Plant1_CDB"
            Dim sModelDBName As String = "Plant1_MDB"
            Dim sBackUpConfigFilePath As String = "D:\BackUpBcfFolder\Plant1.bcf"
            Dim sDataBaseServer As String = "SqlSrv"
            Dim sBackUpFilesPath As String = "D:\Plant1BackUp\"
            Dim sDataBaseServer As String = "SqlSrv"
            Dim sPhysicalCatalogDBLoc As String = "D:\SqlDbs\"
            Dim sLogFileLocForCatalog As String = "D:\SqlDbs\"
            Dim sPhysicalDBLocForModel As String = "D:\SqlDbs\"
            Dim sLogFileLocForModel As String = "D:\SqlDbs\"
            Dim sSymbolSharePath As String = "D:\Symbols\"
            Dim sNameGeneratorServer As String = "in-sp3d4"
            Dim bOverWriteDBs = False
            Dim bLinkIfCatalogExists = True
            oSite.RestorePlantForSelectiveModelObjectsRecovery(sPlantName, sCataLogDBName, sModelDBName, sBackUpConfigFilePath, sBackUpFilesPath, sDataBaseServer, sPhysicalCatalogDBLoc, sLogFileLocForCatalog, _
                               sPhysicalDBLocForModel, sLogFileLocForModel, bOverWriteDBs, bLinkIfCatalogExists)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.RestorePlantForSelectiveModelObjectsRecovery(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Restores plant for recovery of selective model objects.
            </summary>
            <param name="sNewPlantName">New plant name.</param>
            <param name="sCatlogDBName">Catalog name.</param>
            <param name="sModelDBName">Model database name.</param>
            <param name="sBackUpConfigFile">Backup configuration file.</param>
            <param name="sBackUpFilePath">Backup file path.</param>
            <param name="sDataBaseServer">Database server.</param>
            <param name="sCatalogDBPhysicalLoc">Catalog database physical location.</param>
            <param name="sCatalogDBLogFileLoc">Catalog database physical log location.</param>
            <param name="sModelDBPhysicalLoc">Model database physical location.</param>
            <param name="sModelDBLogFileLoc">Model database physical log location.</param>
            <param name="bOverWriteExitingDBs">Boolean to overwrite database if it exists with the same name in server.</param>
            <param name="bLinkIfCatalogExists">Link plant to catalog if catalog exists with the same name in this site.</param>
            <returns>True if restore completed successfully.</returns>               
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite">Catalog with name exists in the site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantForSelectiveModelObjectsRecovery">Failed to restore plant for selective model objects recovery.</exception>
            <example> This example shows how to restore plant for selective model objects recovery.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite
            'Declare input arguments.
            Dim sPlantName As String = "Plant1"
            Dim sCataLogDBName As String = "Plant1_CDB"
            Dim sModelDBName As String = "Plant1_MDB"
            Dim sBackUpConfigFilePath As String = "D:\BackUpBcfFolder\Plant1.bcf"
            Dim sDataBaseServer As String = "SqlSrv"
            Dim sBackUpFilesPath As String = "D:\Plant1BackUp\"
            Dim sDatabaseserver As String = "SqlSrv"
            Dim bOverWriteDBs = False
            Dim bLinkIfCatalogExists = True
            oSite.RestorePlantForSelectiveModelObjectsRecovery(sPlantName, sCataLogDBName, sModelDBName, sBackUpConfigFilePath, sBackUpFilesPath, _
                                    sDataBaseServer, bOverWriteDBs, bLinkIfCatalogExists)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.CreatePlant(Ingr.SP3D.Common.Middle.Services.CatalogDatabaseInformation,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new plant using the provided catalog database information.
            </summary>
            <param name="oCatalogDBInfo">Catalog database information.</param>
            <param name="sModelDBServer">Model database server name.</param>
            <param name="sReportsDBServer">Reports database server name.</param>
            <param name="sPlantName">New plant name.</param>
            <param name="sModelDBName">Model database name.</param>
            <param name="sReportsName">Reports name.</param>
            <param name="sDBLocation">Database physical location for SQL; data tablespace location for Oracle.</param>
            <param name="sLogFileLocation">Database log file location for SQL; index tablespace location for Oracle.</param>
            <param name="sNameGenerator">Name generator server.</param>
            <returns>Returns True if succeeded.</returns>
            <exception cref="T:System.ArgumentNullException">Null argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument.</exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogDoesNotBelogsToSite">Specified catalog does not belong to this site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException">Failed to regenerate reports.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantExistsWithSameName">Plant with same name exists in this site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogDoesNotBelogsToSite">Catalog does not belong to site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePlantException">Unexpected failure while creating plant.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>        
            <example>This example explains how to create a plant.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite
            'Declare input arguments.
            Dim sPlantName As String = "Plant1"
            Dim sModelDBName As String = "Plant1_Model"
            'Get required catalog database info from site object.
            Dim oCatalogDBInfo As CatalogDatabaseInformation = Nothing
            Dim sModelDBServer As String = "DBServer1"
            Dim sReportsDBServer As String = "ReportsDBServer1"
            Dim sReportsName As String = "Reports1"
            Dim sPysicalLocOfModelDB As String = "D:\SqlDbs\"
            Dim sLogFileLocOfModelDB As String = "D:\SqlDbs\"
            Dim sNameGeneratorServer As String = "in-sp3d4"
            oSite.CreatePlant(oCatalogDBInfo, sPlantName, sModelDBServer, sModelDBName, _
                              sReportsDBServer, sReportsName, sPysicalLocOfModelDB, sLogFileLocOfModelDB, sNameGeneratorServer)
            </code>
            </example>      
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Site.CreatePlant(Ingr.SP3D.Common.Middle.Services.CatalogDatabaseInformation,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new plant.
            </summary>
            <param name="oCatalogDBInfo">Catalog database information.</param>
            <param name="sModelDBServer">Model database server name.</param>
            <param name="sReportsDBServer">Reports database server name.</param>
            <param name="sPlantName">New plant name.</param>
            <param name="sModelDBName">Model database name.</param>
            <param name="sReportsName">Reports name.</param>      
            <param name="sNameGenerator">Name generator.</param>        
            <exception cref="T:System.ArgumentNullException">Null argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with same name exists in the server.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument.</exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogDoesNotBelogsToSite">Specified catalog does not belong to this site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Specified name generator server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">Specified name generator server not started.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException">Failed to regenerate reports.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPlantExistsWithSameName">Plant with same name exists in this site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCatalogDoesNotBelogsToSite">Catalog does not belong to site.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePlantException">Unexpected failure while creating plant.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>        
            <returns>Returns True if succeeded.</returns>
            <example>This example explains how to create a new plant.
            <code>
            'Get site object.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite
            'Declare input arguments.
            Dim sPlantName As String = "Plant1"
            Dim sModelDBName As String = "Plant1_Model"
            'Get required catalog database info from site object.
            Dim oCatalogDBInfo As CatalogDatabaseInformation = Nothing
            Dim sModelDBServer As String = "DBServer1"
            Dim sReportsDBServer As String = "ReportsDBServer1"
            Dim sReportsName As String = "Reports1"
            Dim sNameGeneratorServer As String = "in-sp3d4"
            oSite.CreatePlant(oCatalogDBInfo, sPlantName, sModelDBServer, sModelDBName, _
                              sReportsDBServer, sReportsName, sNameGeneratorServer)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Site.Plants">
            <summary>
            Gets the collection of all available plants in the site.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of plant objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Site.CatalogDatabaseInfos">
            <summary>
            Gets the read-only collection of CatalogDatabaseInformation for all available catalogs in the site.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of CatalogDatabaseInformation objects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException">Failed to create MiddleContext component.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnResourceManagerException">Failed to get ResourceManager.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNullResourceManagerException">ResourceManager is NULL.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnProjectManagementFactoryException">Failed to create ProjMgmtFactory component.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnProjMgmtFactoryGetProjectsException">Failed to get projects collection object from ProjMgmtFactory component.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJHierarchyGetDisplayChildrenException">Failed GetDisplayChildren from the IJHierarchy interface.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Site.ActivePlant">
            <summary>
            Gets the read-only access to the currently opened plant.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Plant.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Site.ActiveLocation">
            <summary>
            Gets the active location.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISphere">
            <summary>
            Default interface definition for spheres.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISphere.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the sphere.
            </summary>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISphere.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="index">Index integer.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISphere.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the sphere.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISphere.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="index">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISphere.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="index">Index integer.</param>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISphere.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISphere.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries.
            This removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISphere.Center">
            <summary>
            Gets or sets the center.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISphere.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISphere.OriginDir">
            <summary>
            Gets or sets the origin direction.  This points from the center of the sphere
            to the origin of the V-parameterization.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISphere.PoleDir">
            <summary>
            Gets or sets the pole direction.  This points from the center to the north pole of the sphere.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISphere.ReverseV">
            <summary>
            Gets or sets reverse V.  Default direction for the V-parameterization is counter clockwise around pole direction.
            If ReverseV = True, then V-parameterization is clockwise.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISphere.Capped">
            <summary>
            Gets or sets whether capped; only if you have a bounded sphere,
            and boundaries are closed.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISphere.BoundaryCount">
            <summary>
            Gets the number of boundaries.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Sphere3d">
             <summary>
             Class definition for Sphere3d.
             </summary>
             <example> This is an example for Sphere3d methods and properties.
             <code>
             Public Class Sphere3d
               Public Sub New()
            
                 ' Create the Sphere3d object. 
                 Dim oPosCenter As New Position(4, 0, 0)
                 Dim dRadius As Double = 2
                 Dim bSolid As Boolean = False
            
                 ' Create a Sphere3d object using position center, radius, and whether a solid. 
                 Dim oSphere3d_1 As New Sphere3d(oPosCenter, dRadius, bSolid)
            
                 ' Create a Sphere3d object using a connecton, position center, radius and whether a solid.
                 Dim oConn As SP3DConnection
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 Dim oSphere3d_2 As New Sphere3d(oConn, New Position(8, 0, 0), 4, True)
            
                 ' Create a Sphere3d object using an existing Sphere3d object.
                 Dim oSphere3dCopy As New Sphere3d(oSphere3d_2)
            
                 ' Set all the properties of a Sphere3d object into another Sphere3d object.            
                 oSphere3dCopy.[Set](oSphere3d_1)
            
                 ' Set the boundaries of the Sphere3d object.
                 ' Create the continuous arcs.
            
                 Dim oVecNor As New Vector(0, 0, 1)
                 Dim oArc_1 As New Arc3d(oPosCenter, oVecNor, New Position(6, 0, 0), New Position(4, 2, 0))
                 Dim oArc_2 As New Arc3d(oPosCenter, oVecNor, New Position(4, 2, 0), New Position(2, 0, 0))
                 Dim oArc_3 As New Arc3d(oPosCenter, oVecNor, New Position(2, 0, 0), New Position(4, -2, 0))
                 Dim oArc_4 As New Arc3d(oPosCenter, oVecNor, New Position(4, -2, 0), New Position(6, 0, 0))
                 Dim oArc_5 As New Arc3d(oPosCenter, oVecNor, New Position(8, 0, 0), New Position(4, 4, 0))
                 Dim oArc_6 As New Arc3d(oPosCenter, oVecNor, New Position(4, 4, 0), New Position(0, 0, 0))
                 Dim oArc_7 As New Arc3d(oPosCenter, oVecNor, New Position(0, 0, 0), New Position(4, -4, 0))
                 Dim oArc_8 As New Arc3d(oPosCenter, oVecNor, New Position(4, -4, 0), New Position(8, 0, 0))
            
                 ' Add the arcs into a collection.
                 Dim oCollCurves_1 As New Collection(Of ICurve)()
                 Dim oCollCurves_2 As New Collection(Of ICurve)()
                 oCollCurves_1.Add(oArc_1)
                 oCollCurves_1.Add(oArc_2)
                 oCollCurves_1.Add(oArc_3)
                 oCollCurves_1.Add(oArc_4)
            
                 oCollCurves_2.Add(oArc_5)
                 oCollCurves_2.Add(oArc_6)
                 oCollCurves_2.Add(oArc_7)
                 oCollCurves_2.Add(oArc_8)
            
                 ' Create a ComplexString3d object using these curve collections.
                 Dim oCString3d_1 As New ComplexString3d(oCollCurves_1)
                 Dim oCString3d_2 As New ComplexString3d(oCollCurves_2)
            
                 Dim oCollCStrings As New Collection(Of ComplexString3d)()
                 oCollCStrings.Add(oCString3d_1)
                 oCollCStrings.Add(oCString3d_2)
            
                 ' Set the boundaries.
                 ' oCollCStrings contains two objects of ComplexString3d; i.e., two boundaries.
                 oSphere3d_1.SetBoundaries(oCollCStrings)
            
                 ' Clear the collection, oCollCStrings.
                 oCollCStrings.Clear()
            
                 ' Get the boundaries of the Sphere3d object. 
                 oCollCStrings = Nothing
                 oSphere3d_1.GetBoundaries(oCollCStrings)
            
                 ' Get the boundary count of the Sphere3d object.
                 Dim iBCount As Integer
                 iBCount = oSphere3d_1.BoundaryCount
            
                 ' Get the specified index boundary from the Sphere3d object.
                 Dim oCString3dTest_1 As ComplexString3d
                 Dim oCString3dTest_2 As ComplexString3d
                 oCString3dTest_1 = Nothing
                 oCString3dTest_2 = Nothing
                 oSphere3d_1.GetBoundary(1, oCString3dTest_1)
                 oSphere3d_1.GetBoundary(2, oCString3dTest_2)
            
                 ' Set the boundary to the Sphere3d object.
                 oSphere3d_1.SetBoundary(1, oCString3dTest_2)
            
                 ' Add a new boundary to the Sphere3d object.
                 ' Create a ComplexString3d object.
                 Dim oArc_15 As New Arc3d(oPosCenter, oVecNor, New Position(10, 0, 0), New Position(4, 6, 0))
                 Dim oArc_16 As New Arc3d(oPosCenter, oVecNor, New Position(4, 6, 0), New Position(-2, 0, 0))
                 Dim oArc_17 As New Arc3d(oPosCenter, oVecNor, New Position(-2, 0, 0), New Position(4, -6, 0))
                 Dim oArc_18 As New Arc3d(oPosCenter, oVecNor, New Position(4, -6, 0), New Position(10, 0, 0))
            
                 oCollCurves_2.Clear()
                 oCollCurves_2.Add(oArc_15)
                 oCollCurves_2.Add(oArc_16)
                 oCollCurves_2.Add(oArc_17)
                 oCollCurves_2.Add(oArc_18)
            
                 Dim oCSNewBoundary As New ComplexString3d(oCollCurves_2)
            
                 ' Add a boundary.
                 oSphere3d_1.AddBoundary(oCSNewBoundary)
                 
                 ' Transform the Sphere3d object.
                 Dim oMatrix As New Matrix4X4()
                 oMatrix.Scale(2)
                 oSphere3d_2.Transform(oMatrix)
            
                 ' Get the center position of the Sphere3d object.
                 oPosCenter = oSphere3d_2.Center
            
                 ' Set the center position of the Sphere3d object.
                 oSphere3d_2.Center = oPosCenter
            
                 ' Get the radius of the Sphere3d object.
                 dRadius = oSphere3d_2.Radius
            
                 ' Set the radius of the Sphere3d object.
                 oSphere3d_2.Radius = dRadius
            
                 ' Set the center, radius, and whether a solid. 
                 oSphere3d_2.DefineByCenterRadius(New Position(0, 0, 0), 6, False)
                 
                 ' Get whether capped.
                 Dim bCapped As Boolean
                 bCapped = oSphere3d_2.Capped
            
                 ' Get whether or not is reverse V-parameterization. If true, then it is clockwise.
                 Dim bReversev As Boolean
                 bReversev = oSphere3d_2.ReverseV
            
                 ' Get the origin direction of the Sphere3d object.
                 Dim oVecOrgn As Vector
                 oVecOrgn = oSphere3d_1.OriginDir
            
                 ' Set the origin direction of the Sphere3d object.
                 oSphere3d_1.OriginDir = New Vector(1, 0, 0)
            
                 ' Get the pole direction of the Sphere3d object.
                 Dim oVecPole As Vector
                 oVecPole = oSphere3d_1.PoleDir
            
                 ' Set the pole direction of the Sphere3d object.
                 oSphere3d_1.PoleDir = New Vector(0, 0, 1)
            
                 ' Get the range of the Sphere3d object.
                 Dim oRBox As RangeBox
                 oRBox = oSphere3d_1.Range
            
                End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Sphere3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.#ctor(Ingr.SP3D.Common.Middle.Sphere3d)">
            <summary>
            Constructor used to copy an existing Sphere3d.
            </summary>
            <param name="oSphere">A Sphere3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oSphere cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create sphere.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,System.Double,System.Boolean)">
            <summary>
            Constructor used to create a persistent Sphere3d given the center and radius.
            </summary>
            <param name="oConnection">SP3D connection.</param>
            <param name="posCenter">Center of sphere.</param>
            <param name="dRadius">Radius of sphere.</param>
            <param name="Solid">Whether to create as a solid (or hollow).</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create sphere.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.#ctor(Ingr.SP3D.Common.Middle.Position,System.Double,System.Boolean)">
            <summary>
            Constructor used to create a transient Sphere3d given center and radius.
            </summary>
            <param name="posCenter">Center of sphere.</param>
            <param name="dRadius">Radius of sphere.</param>
            <param name="Solid">Whether to create as a solid (or hollow).</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create sphere.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.Set(Ingr.SP3D.Common.Middle.Sphere3d)">
            <summary>
            Sets this sphere equal to an existing sphere.
            </summary>
            <param name="oSphere3d">Existing Sphere3d.</param>
            <exception cref="T:System.ArgumentNullException">oSphere3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.DefineByCenterRadius(Ingr.SP3D.Common.Middle.Position,System.Double,System.Boolean)">
            <summary>
            Redefines this sphere with a new center, radius, and solid.
            </summary>
            <param name="posCenter">Center</param>
            <param name="dRadius">Radius</param>
            <param name="Solid">Whether a solid.</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByCenterRadius exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the sphere.
            </summary>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="i">Index integer.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the sphere.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="i">Index integer.</param>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries 
            and removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:System.ArgumentNullException">colCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sphere3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this sphere by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.OriginDir">
            <summary>
            Gets or sets the origin direction.  This points from the center of the sphere
            to the origin of the V-parameterization.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.PoleDir">
            <summary>
            Gets or sets the pole direction.  This points from the center to the north pole of the sphere.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.ReverseV">
            <summary>
            Gets or sets the reverse V.  Default direction for the V-parameterization is counter clockwise around pole direction.
            If ReverseV = True, then V-parameterization is clockwise.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.Capped">
            <summary>
            Gets or sets whether capped; only if you have a bounded sphere,
            and boundaries are closed.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.BoundaryCount">
            <summary>
            Gets the number of boundaries.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sphere3d.Range">
            <summary>
            Finds the range box of this sphere.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.OutputDefinition">
            <summary>
            Class used internally to manage the symbol definition output definitions.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.OutputDefinition.m_name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.OutputDefinition.m_description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDefinition.#ctor">
            <summary>
            Output definition default constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDefinition.#ctor(System.String,System.String)">
            <summary>
            Constructor for a symbol output given the name and description of the output.
            </summary>
            <param name="name">Name of definition.</param>
            <param name="description">Description of definition.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDefinition.SetOutputDefinitionInfo(System.String,System.String)">
            <summary>
            Sets the symbol output definition name and description.
            </summary>
            <param name="name">Name of definition.</param>
            <param name="description">Description of definition.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDefinition.GetOutputDefinitionInfo(System.String@,System.String@)">
            <summary>
            Gets the symbol output name and description.
            </summary>
            <param name="name">Name of definition.</param>
            <param name="description">Description of definition.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.OutputDefinition.Name">
            <summary>
            Gets or sets the symbol output name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.OutputDefinition.Description">
            <summary>
            Gets or sets the symbol output description.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.FoulInterfaceType">
            <summary>
            Foul interface type to be reported to the interference engine.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.FoulInterfaceType.NonParticpant">
            <summary>
            Entity is non-participant in interference. Ignored by the interference engine.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.FoulInterfaceType.Participant">
            <summary>
            Entity is participant in interference.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ICustomFoulCheck">
            <summary>
            This interface is to be implemented by all .NET symbols which want to customize the foul check behavior of a business object. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomFoulCheck.GetFoulInterfaceType(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the foul interface type from the custom symbol.
            </summary>
            <param name="oBO"> Delegating Business Object.</param>
            <returns> Foul interface type. Returns non-participant if the custom symbol wants to be ignored for interference check.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomFoulCheck.GetConnectedParts(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the logically connected parts which are treated as non-interfering with the custom symbol geometry by interference engine.
            </summary>
            <param name="oBO">Delegating Business Object. </param>
            <returns> Collection of parts which are logically connected to this entity.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ICustomPropertyManagement">
            <summary>
            This interface is to be implemented by all .NET symbols which want to customize validation and handling of attributes on the property pages of a business object. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomPropertyManagement.OnPreLoad(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor})">
            <summary>
            Gets called immediately before the properties are loaded in the property page control. Any change to the display status of properties is to be done here.
            </summary>
            <param name="oBusinessObject">Delegating Business Object.</param>
            <param name="CollAllDisplayedValues">Collection of all properties displayed in the property pages control.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomPropertyManagement.OnPropertyChange(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor},Ingr.SP3D.Common.Middle.Services.PropertyDescriptor,Ingr.SP3D.Common.Middle.PropertyValue,System.String@)">
            <summary>
            Called each time a property is modified. Any custom validation should be done here.
            </summary>
            <param name="oBusinessObject">Delegating Business Object.</param>
            <param name="CollAllDisplayedValues">Collection of all properties displayed in the property pages control.</param>
            <param name="oPropToChange">Property being modified.</param>
            <param name="oNewPropValue">New value of the property.</param>
            <param name="strErrorMsg">Custom error message returned by validation.</param>
            <returns>Returns boolean for error status. Returns False if a change in property value is not valid.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.PropertyDescriptor">
            <summary>
            Provides information about a property and its current display state on the property pages. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyDescriptor.#ctor(Ingr.SP3D.Common.Middle.PropertyValue,System.Boolean)">
            <summary>
            Creates a property descriptor with given PropertyValue and read-only flag.
            </summary>
            <param name="oPropValue">Property value for the property.</param>
            <param name="bReadOnly">Flag to check if the property is displayed read-only on the property page control.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyDescriptor.Property">
            <summary>
            Gets the property value object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyDescriptor.ReadOnly">
            <summary>
            Gets or sets the ReadOnly flag on the attribute. Setting the flag to True makes the property display as read-only in the property page control.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ICustomMirror">
            <summary>
            This interface is to be implemented by all .NET symbols which want to customize the mirror behavior of a business object. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomMirror.Mirror(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.Matrix4X4,System.Boolean)">
            <summary>
            Mirrors the custom symbol geometry about the given mirror plane.
            </summary>
            <param name="oBusinessObject">Delegating (target) Business Object.</param>
            <param name="oBusinessObjectOrig">Original (source) Business Object.</param>
            <param name="oMirrorPlane">Plane of mirror.</param>
            <param name="oTransformMatrix">Transformation matrix for the mirror operation.</param>
            <param name="bIsCopy">Flag to determine whether the operation is in-place mirror or mirror-copy; True if mirror copy.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ICustomEvaluate">
            <summary>
            This interface is to be implemented by all .NET symbols which want to be called during evaluation of the business object. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomEvaluate.EvaluateGeometry(Ingr.SP3D.Common.Middle.BusinessObject,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Evaluates the custom symbol geometry.
            </summary>
            <param name="oBusinessObject">Delegating Business Object.</param>
            <param name="bPartChanged">Flag to determine whether the catalog part has been changed.</param>
            <param name="bGeomInputChanged">Flag to determine whether a geometric input has been changed.</param>
            <param name="bPropertyValueChanged">Flag to determine whether the value of a property has been changed.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ICustomWeightCG">
            <summary>
            This interface is to be implemented by all .NET symbols which want to implement custom evaluation of the weight and center of gravity of the business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomWeightCG.EvaluateWeightCG(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Evaluates the weight and center of gravity of the part and sets it on the business object.
            </summary>
            <param name="oBusinessObject"> Delegating Business Object </param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ICustomTransform">
            <summary>
            This interface may need to be implemented by .NET symbols that have custom properties to control the orientation of a business object. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomTransform.Transform(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            This method allows the callee to update custom properties that control the orientation of the business object based on the applied transform.
            </summary>
            <param name=" businessObject "> The object that is being transformed.</param>
            <param name=" t4x4"> The transformation matrix.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ControlPointType">
            <summary>
            Enumerator ControlPointType of codelisted values.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointType.ControlPoint">
            <summary>
            ControlPoint control point type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointType.Keypoint">
            <summary>
            Keypoint control point type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointType.InsertionPoint">
            <summary>
            InsertionPoint control point type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ControlPointSubType">
            <summary>
            Enumerator ControlPointSubType of codelisted values.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointSubType.ProcessEquipment">
            <summary>
            ProcessEquipment control point subtype.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointSubType.MechanicalEquipment">
            <summary>
            MechanicalEquipment control point subtype.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointSubType.Foundation">
            <summary>
            Foundation control point subtype.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointSubType.Structure">
            <summary>
            Structure control point subtype.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointSubType.PipeManufacturingLimitPoint">
            <summary>
            PipeManufacturingLimitPoint control point subtype.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ControlPointSubType.SpoolBreak">
            <summary>
            SpoolBreak control point subtype.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ControlPoint">
             <summary>
             .NET wrapper for the control point.
             </summary>
             <example> This is an example for ControlPoint class methods and properties.
             <code>
             Public Class ControlPoint
               Public Sub New()
            
                   'Creating a control point given the model connection and position. 
                   Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
                   Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                   Dim oPlant As Plant = oSiteMgr.ActiveSite.ActivePlant
                   Dim oModel As Model = oPlant.PlantModel
                   Dim oRootObj As BusinessObject = DirectCast(oModel.RootSystem, BusinessObject)
                   'Getting the model connection. 
                   Dim oModelConn As SP3DConnection = oRootObj.DBConnection
                   'Initializing the control point position.
                   Dim oControlPoint1Pos As New Position(1, 1, 1)
                   'Creating the control point at oControlPointPos position.
                   Dim oControlPoint1 As New ControlPoint(oModelConn, oControlPoint1Pos)
            
                   'Creating a control point using the model connection, position, and diameter.
                   Dim oControlPoint2Pos As New Position(1, 2, 1)
                   Dim dControlPoint2Diameter As Double = 0.4
                   Dim oControlPoint2 As New ControlPoint(oModelConn, oControlPoint2Pos, dControlPoint2Diameter)
            
                   'Creating a control point using the parent BusinessObject and position.
            
                   'Creating an equipment to use as the parent to the control point. 
                   Dim oEqp As Equipment = Nothing
                   'Null system indicates that equipment is created under project root. 
                   oEqp = New Equipment("PUMP 001A-E", Nothing)   
                   Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEqp, ILocalCoordinateSystem)
                   Dim oPos As New Position(1, 3, 3)
                   oEqpCS.Origin = oPos
                   'Commiting equipment. 
                   oTransactionMgr.Commit("Place Equipment")
            
                   'Getting the BusinessObject from the equipment. 
                   Dim oParentEqpBO As BusinessObject = DirectCast(oEqp, BusinessObject)
                   Dim oControlPoint3Pos As New Position(1, 3, 3)
                   'Creating a Controlpoint with Equipment Object as Parent at oControlPoint3Pos Position. 
                   Dim oControlPoint3 As New ControlPoint(oParentEqpBO, oControlPoint3Pos)
            
                   'Creating a control point given a parent object, position, and diameter. 
                   Dim oControPoint4Pos As New Position(1, 3.5, 3)
                   Dim dControlPoint4Dia As Double = 0.5
                   Dim oControlPoint4 As New ControlPoint(oParentEqpBO, oControPoint4Pos, dControlPoint4Dia)
                  
                   'Getting the parent of the control point.
                   Dim oControlPoint4Parent As BusinessObject
                   oControlPoint4Parent = oControlPoint4.Parent
               
                   Dim dControlPoint4X As Double
                   Dim dControlPoint4Y As Double
                   Dim dControlPoint4Z As Double
                   dControlPoint4X = oControlPoint4.X
                   dControlPoint4Y = oControlPoint4.Y
                   dControlPoint4Z = oControlPoint4.Z
            
                   'Get the position of the control point. 
                   Dim oControlPoint4GetPos As Position
                   oControlPoint4GetPos = oControlPoint4.Position
            
                   'Compare whether the positions of two control points are equal.
                   Dim oControlPoint1IPoint As IPoint = DirectCast(oControlPoint1, IPoint)
                   Dim bPosEqual As Boolean 
                   bPosEqual = oControlPoint2.EqualPositions(oControlPoint1IPoint)
                  
                   'Finding the distance of the control point from the given point.
                   Dim oControlPoint3IPoint As IPoint
                   oControlPoint3IPoint = DirectCast(oControlPoint3, IPoint)
                   Dim dDistanceFromControlPoint3 As Double = 0
                   'Getting DistanceFromPoint on the control point. 
                   dDistanceFromControlPoint3 = oControlPoint4.DistanceFromPoint(oControlPoint3IPoint)
            
                   'Setting type and subtype properties on the control point. 
                   Dim dControlPointType As Integer = 1 'ControlPointType = 1 indicates ControlPoint. 
                   Dim dControlPointSubType As Integer = 2 'ControlPointSubType = 2 indicates MechanicalEquipment. 
                   If True = oControlPoint1.SupportsInterface("IJControlPoint") Then
                       ' oControlPoint3.SetPropertyValue(1,"IJControlPoint","Type") 
                       oControlPoint1.SetPropertyValue(dControlPointType, "IJControlPoint", "Type")
                       oControlPoint1.SetPropertyValue(dControlPointSubType, "IJControlPoint", "SubType")
                   End If
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IPoint">
            <summary>
            Interface definition for Point3d.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPoint.DistanceFromPoint(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Finds the distance between 2 points.
            </summary>
            <param name="iPoint">IPoint</param>
            <returns>Distance as a double.</returns> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPoint.EqualPositions(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Determines whether this point and an input point are equal.
            </summary>
            <param name="iPoint">IPoint</param>
            <returns>Boolean</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPoint.X">
            <summary>
            Gets or sets the X-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPoint.Y">
            <summary>
            Gets or sets the Y-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPoint.Z">
            <summary>
            Gets or sets the Z-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPoint.Position">
            <summary>
            Gets or sets Position. Get returns a read-only Position object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.INamedItem">
            <summary>
            Interface INamedItem definition.
            </summary>
            <remarks>
            This interface is provided to support naming of an item without having
            to use the generic GetPropertyValue and SetPropertyValue methods to
            get and set the name property of the COM interface IJNamedItem.
            
            <para>In most cases, applying a user-defined name to an object means the name
            rule relationship, if present, is removed.  Using SetPropertyValue does
            not cause that relationship to be removed, so applying a new name in that
            way is quietly ignored.</para>
            
            <para>In some cases other unique actions need to be done when changing the name
            of an item.  Systems are an example.  For systems "User Defined"
            is a valid name rule.  The wrappers of special classes such as these
            will have to override the INamedItem set Name property with the correct
            behavior for that class.</para>
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.INamedItem.SetUserDefinedName(System.String)">
            <summary>
            Sets the name of an object.
            </summary>
            <param name="Name">Name to apply to the object.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.INamedItem.Name">
            <summary>
            Gets the name of an object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IWBSItemChild">
            <summary>
            Implementator can be included in a Work Breakdown Structure.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSItemChild.WBSItemParents">
            <summary>
            Gets the WBSItem parents for this item.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create a control point from the internal PrivateBusinessObject returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Constructor for the persistent instance of a control point.
            </summary>
            <param name="parentBO">BusinessObject</param>
            <param name="pos">Position</param>
            <param name="diameter">Diameter as a double.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor for the persistent instance of a control point.
            </summary>
            <param name="parentBO">BusinessObject</param>
            <param name="pos">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Constructor for the persistent instance of a control point.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="pos">Position</param>
            <param name="diameter">Diameter as a double.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor for the persistent instance of a control point.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="pos">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.EqualPositions(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Returns whether the positions are equal.
            </summary>
            <param name="poOther">IPoint</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.DistanceFromPoint(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Returns the distance from the point.
            </summary>
            <param name="poOther">IPoint</param>
            <returns>Distance as a double.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the control point object by a 4x4 matrix. 
            </summary>
            <param name="oMatrix">4X4 matrix.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ControlPoint.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of an object.
            </summary>
            <param name="Name">The new name.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.WBSItemChildHelperObj">
            <summary>
            Returns the WBSItemChild helper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.Parent">
            <summary>
            Returns the parent property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.X">
            <summary>
            X-coordinate property.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.Y">
            <summary>
            Y-coordinate property.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.Z">
            <summary>
            Z-coordinate property.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.NamedItemHelperObj">
            <summary>
            Private utility method for managing the existance of the NamedItemHelper object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ControlPoint.WBSItemParents">
            <summary>
            Gets the WBSItem parents for this item.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnControlPointCreationFailedException">
            <summary>
            Raised when the control point creation fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnControlPointCreationFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnControlPointCreationFailedException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CmnLocalizer">
            <summary>
            Class definition used (at runtime) to provide strings, icons, and other localized resources, 
            which are in turn presented to the end-user.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetBitmapImage(System.String,System.String,System.String)">
            <summary>
            Retrieves the Bitmap image from the resource.
            </summary>
            <param name="iID">Image id</param>
            <param name="sResourceName">Resource name</param>
            <param name="sAssemblyName">Assembly name</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetString(System.Int32,System.String)">
            <summary>
            Retrieves the string from the resource.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetString(System.Int32,System.String,System.String)">
            <summary>
            Retrieves the string from the resource.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetString(System.Int32,System.String,System.String,System.String)">
            <summary>
            Retrieves the string from the resource.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithParameters(System.Int32,System.String[])">
            <summary>
            Retrieves the string from the resource with parameters.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sParamArray">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithParameters(System.Int32,System.String,System.String[])">
            <summary>
            Retrieves the string from the resource with parameters.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sParamArray">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithParameters(System.Int32,System.String[],System.String,System.String)">
            <summary>
            Retrieves the string from the resource with parameters.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sParamArray">Message ID.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithParameters(System.Int32,System.String,System.String[],System.String,System.String)">
            <summary>
            Retrieves the string from the resource with parameters.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sParamArray">Message ID.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.RemoveElipses(System.String)">
            <summary>
            Removes the ellipses from the string.
            </summary>
            <param name="sString">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.RemoveElipses(System.String,System.String,System.String)">
            <summary>
            Removes the ellipses from the string.
            </summary>
            <param name="sString">Message ID.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColon(System.Int32)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColon(System.Int32,System.String,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColon(System.Int32,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColon(System.Int32,System.String,System.String,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColonMandatory(System.Int32)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColonMandatory(System.Int32,System.String,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColonMandatory(System.Int32,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithColonMandatory(System.Int32,System.String,System.String,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithElipses(System.Int32)">
            <summary>
            Retrieves the string from the resource with an ellipses.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithElipses(System.Int32,System.String,System.String)">
            <summary>
            Retrieves the string from the resource with an ellipses.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithElipses(System.Int32,System.String)">
            <summary>
            Retrieves the string from the resource with an elipses.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.GetStringWithElipses(System.Int32,System.String,System.String,System.String)">
            <summary>
            Retrieves the string from the resource with an ellipses.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to return if not from the resource file.</param>
            <param name="sResourceName">Resource name.</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources">
            <summary>
            CmnResources is a helper to connect to resource files and returns requested resources strings and objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetString(System.Int32)">
            <summary>
            Returns the string from the resource.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetBitmap(System.String)">
            <summary>
            Returns the System.Drawing.Bitmap from the resource. If it fails to obtain then it returns null
            </summary>
            <param name="iID">Image Id</param>
            <returns>Bitmap image</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetString(System.Int32,System.String)">
            <summary>
            Returns the string from the resource. If it fails to obtain the resource, it returns the dafault string.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to be used in case the resource file not found.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetObject(System.Int32)">
            <summary>
            Returns the object from the resource.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetObject(System.Int32,System.Object)">
            <summary>
            Returns the object from the resource.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="oDefaultObject">Default object to return if the resource is not found.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.CurrentCultureCode">
            <summary>
            Returns the current culture code.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.CurrentCultureName">
            <summary>
            Returns the current culture name.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.#ctor">
            <summary>
            Creates the default connection to the default resource.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates the connection to the default resource.
            </summary>
            <param name="pobjCultureInfo">Culture Information.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.#ctor(System.String,System.String)">
            <summary>
            Creates the connection to the given resource under the specified assembly.
            </summary>
            <param name="sResourceName">Resource base name (For example, CmnResources).</param>
            <param name="sAssemblyName">Assembly name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.Clear">
            <summary>
            Releases all resources that the object is maintaining.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithParameters(System.Int32,System.String[])">
            <summary>
            Retrieves the string from the resource with parameters.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sParamArray">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithParameters(System.Int32,System.String,System.String[])">
            <summary>
            Retrieves the string from the resource with parameters.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to use.</param>
            <param name="sParamArray">String parameter array.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.RemoveElipses(System.String)">
            <summary>
            Removes the ellipses from the string.
            </summary>
            <param name="sString">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithColon(System.Int32)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithColon(System.Int32,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to use if the ID is not found.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithColonMandatory(System.Int32)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithColonMandatory(System.Int32,System.String)">
            <summary>
            Retrieves the string from the resource with a colon.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to use if the ID is not found.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithElipses(System.Int32)">
            <summary>
            Retrieves the string from the resource with an ellipses.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.GetStringWithElipses(System.Int32,System.String)">
            <summary>
            Retrieves the string from the resource with an ellipses.
            </summary>
            <param name="iID">Message ID.</param>
            <param name="sDefaultStr">Default string to use if the ID is not found.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.ResourceName">
            <summary>
            Gets or sets to indentify the current resource source file.
            </summary>
            <returns>Name of the resource.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CmnLocalizer.CmnResources.AssemblyName">
            <summary>
            Gets or sets to identify the assembly name currently referenced.
            </summary>
            <returns>Name of the assembly.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper">
            <summary>
            CorrelatedObjectHelper wraps calls to the IJEFWCorrelatedObject COM interface.
            This helper inherits from the ICorrelatedObject interface.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ICorrelatedObject">
            <summary>
            Interface ICorrelatedObject definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICorrelatedObject.Correlate(Ingr.SP3D.Common.Middle.BusinessObject,System.Boolean,Ingr.SP3D.Common.Middle.ECorrelationStatus@)">
            <summary>
            Correlates the SmartPlant 3D object to the design basis object.  The bUpdateSP3DObject argument 
            allows the mapped properties of the SmartPlant 3D object to be updated.   
            The correlation status is returned.
            </summary>
            <param name="oDesignBasis">The design basis object.</param>
            <param name="UpdateSP3DObject">Update the SmartPlant 3D object.</param>
            <param name="Status">Correlation status.</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICorrelatedObject.UnCorrelate(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes the correlation relationship for the SmartPlant 3D object.
            </summary>
            <returns>BusinessObject</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICorrelatedObject.UpdateCorrelationStatus">
            <summary>
            Compares the mapped properties and determines the correlation status.
            </summary>
            <returns>ECorrelationStatus object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICorrelatedObject.GetPropertyComparison(System.Boolean)">
            <summary>
            Returns the collection of property comparison objects and a 
            boolean that indicates whether all of the properties match.
            </summary>
            <param name="bPropertyMatch">Indicates whether all of the properties match.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICorrelatedObject.GetTopologyComparison(System.Boolean)">
            <summary>
            Returns the collection of topology comparison objects and a 
            boolean that indicates whether the topology matches.
            </summary>
            <param name="bPropertyMatch">Indicates whether the topology matches.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICorrelatedObject.IsValidDesignBasis(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Determines whether the specified design basis object is valid for the SmartPlant 3D object.
            </summary>
            <param name="oDesignBasis">Design basis object.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICorrelatedObject.MatchesDesignBasis(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Returns the design basis object that has the best match with the SmartPlant 3D object.
            Exceptions:
            InvalidObjectType – The design basis object is not a valid type for the SmartPlant 3D object.
            </summary>
            <param name="oDesignBasis">ReadOnlyCollection of BusinessObjects.</param>
            <returns>BusinessObject</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICorrelatedObject.DesignBasisObject">
            <summary>
            Read-only property that returns the correlated design basis for the object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICorrelatedObject.SafeToDelete">
            <summary>
            Read-only property that indicates whether the object can be deleted without causing 
            the deletion of children, whose design basis correlation shows they should belong to 
            a different parent.  This property will actually attempt to move these children to the
            correct parent.  A value of False will be returned if any children cannot be moved 
            successfully.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            This is the constructor of the CorrelatedObjectHelper.
            </summary>
            <returns>No return</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">Failed if implementation does not support the interface.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.Correlate(Ingr.SP3D.Common.Middle.BusinessObject,System.Boolean,Ingr.SP3D.Common.Middle.ECorrelationStatus@)">
            <summary>
            Correlates the SP3D object to the design basis object.  The UpdateSP3DObject argument 
            allows the mapped properties of the SP3D object to be updated.   
            The correlationStatus is returned.
            </summary>
            <param name="oDesignBasis">The Design basis object.</param>
            <param name="UpdateSP3DObject">Update the SP3D object.</param>
            <param name="Status">Correlation status.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">Failed to get the valid object type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToCorrelateException">Failed to correlate the object.</exception>
            <returns>Correlation status.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.UnCorrelate(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes the correlation relationship for the SP3D object.
            </summary>
            <returns>Correlation status.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToUnCorrelateException">Failed to uncorrelate the object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.UpdateCorrelationStatus">
            <summary>
            Compares the mapped properties and determines the correlation status.
            </summary>
            <returns>ECorrelationStatus</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToUpdateCorrelateException">Failed to update the correlation.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.GetPropertyComparison(System.Boolean)">
            <summary>
            Returns the collection of property comparison objects and a 
            boolean that indicates whether all of the properties match.
            </summary>
            <param name="bPropertyMatch">Indicates whether all of the properties match.</param>
            <returns>ReadOnlyCollection of BusinessObject.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetPropertyComparisonException">Failed to get the property comparison.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.GetTopologyComparison(System.Boolean)">
            <summary>
            Returns the collection of topology comparison objects and a 
            boolean that indicates whether the topology matches.
            </summary>
            <param name="bPropertyMatch">Indicates whether the topology matches.</param>
            <returns>ReadOnlyCollection BusinessObject.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetTopologyComparisonException">Failed to get the topology comparison.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.IsValidDesignBasis(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Determines whether the specified design basis object is valid for the SP3D object.
            </summary>
            <param name="oDesignBasis">Design basis object.</param>
            <returns>boolean</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedIsValidDesignBasisException">Failed if design basis is not valid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.MatchesDesignBasis(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Returns the design basis object that has the best match with the SP3D object.
            </summary>
            <param name="oDesignBasis">ReadOnlyCollection of BusinessObject.</param>
            <returns>BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedMatchesDesignBasisException">Failed to match design basis.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.DesignBasisObject">
            <summary>
            Read-only property that returns the DesignBasis object.
            </summary>
            <returns>BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetDesignBasisException">Failed to get Design basis object.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CorrelatedObjectHelper.SafeToDelete">
            <summary>
            Read-only property that indicates whether the object can be deleted without causing 
            the deletion of children, whose design basis correlation shows they should belong to 
            a different parent.  This property will actually attempt to move these children to the
            correct parent.  A value of False will be returned if any children cannot be moved 
            successfully.
            </summary>
            <returns>boolean</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedSafeToDeleteException">Failed if not deleted safely.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetDesignBasisException">
            <summary>
            Failed to get the design basis object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetDesignBasisException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetDesignBasisException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetDesignBasisException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetDesignBasisException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToCorrelateException">
            <summary>
            Failed to correlate the design basis object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToCorrelateException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToCorrelateException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToCorrelateException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToCorrelateException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToUnCorrelateException">
            <summary>
            Failed to uncorrelate the design basis object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToUnCorrelateException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToUnCorrelateException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToUnCorrelateException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToUnCorrelateException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToUpdateCorrelateException">
            <summary>
            Failed to update the correlation of the design basis object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToUpdateCorrelateException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToUpdateCorrelateException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToUpdateCorrelateException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToUpdateCorrelateException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetPropertyComparisonException">
            <summary>
            Failed to get the property comparison of the design basis object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetPropertyComparisonException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetPropertyComparisonException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetPropertyComparisonException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToUpdateCorrelateException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetTopologyComparisonException">
            <summary>
            Failed to get the topology comparison of the design basis object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetTopologyComparisonException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetTopologyComparisonException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetTopologyComparisonException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToUpdateCorrelateException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedIsValidDesignBasisException">
            <summary>
            Failed if design basis is not valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedIsValidDesignBasisException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedIsValidDesignBasisException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedIsValidDesignBasisException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailedIsValidDesignBasisException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedSafeToDeleteException">
            <summary>
            Failed if not safe to be deleted.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedSafeToDeleteException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedSafeToDeleteException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedSafeToDeleteException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailedSafeToDeleteException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedMatchesDesignBasisException">
            <summary>
            Failed when design basis does not match.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedMatchesDesignBasisException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedMatchesDesignBasisException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedMatchesDesignBasisException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailedSafeToDeleteException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNotCorrelatedException">
            <summary>
            Failed if the design basis is not correlated.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNotCorrelatedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNotCorrelatedException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNotCorrelatedException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnNotCorrelatedException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CurveFeature">
            <summary>
            Abstract class for curve features.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveFeature.#ctor(SP3DPIA.TransientEntities.IJDLineFeature)">
            <summary>
            Initializes a new instance of the CurveFeature class with the supplied 
            COM object (IJDLineFeature). For internal-use only. 
            </summary>
            <param name="oIJDLineFeature">COM IJDLineFeature.</param>
            <exception cref="T:System.ArgumentNullException">oIJDLineFeature cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveFeature.Finalize">
            <summary>
            Releases memory.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveFeature.Cleanup">
            <summary>
            Releases COM object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveFeature.GetCOMLineFeature">
            <summary>
            Gets COM line feature object. This is for internal use only.
            </summary>
            <returns>COM object as IJDLineFeature.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveFeature.ComputeGeometry(Ingr.SP3D.Common.Middle.BusinessObject@)">
            <summary>
            Performs a compute and returns the computed geometry.
            </summary>
            <param name="Geometry">Geometry as BusinessObject.</param>
            <returns>Boolean indicating the result of compute.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveFeature.Delete">
            <summary>
            Deletes this curve feature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveFeature.GetOffsetCurve(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Gets an ICurve that is offset by a vector.
            </summary>
            <param name="oVector">Vector</param>
            <returns>ICurve</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveFeature.SketchPoints">
            <summary>
            Gets a read-only collection of sketch points associated with this curve feature.
            </summary>
            <returns>Read-only collection of SketchPoints.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveFeature.Geometry">
            <summary>
            Gets the geometry BusinessObject that is set after ComputeGeometry is called.
            </summary>
            <returns>BusinessObject</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveFeature.IsModified">
            <summary>
            Gets a value indicating if this curve feature needs to be recomputed.
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ArcBy3PointsFeature">
            <summary>
            Wrapper class for ArcBy3PointsFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ArcBy3PointsFeature.#ctor(SP3DPIA.TransientEntities.IJDLineFeature)">
            <summary>
            Initializes a new instance of the ArcBy3PointsFeature class
            with the supplied COM object (IJDLineFeature).
            For internal-use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDLineFeature">COM IJDLineFeature.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ArcByEndPointsFeature">
            <summary>
            Wrapper class for ArcByEndPointsFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ArcByEndPointsFeature.#ctor(SP3DPIA.TransientEntities.IJDLineFeature)">
            <summary>
            Initializes a new instance of the ArcByEndPointsFeature class
            with the supplied COM object (IJDLineFeature).
            For internal-use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDLineFeature">COM IJDLineFeature.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.EllipticalArcFeature">
            <summary>
            Wrapper class for EllipticalArcFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArcFeature.#ctor(SP3DPIA.TransientEntities.IJDLineFeature)">
            <summary>
            Initializes a new instance of the EllipticalArcFeature class
            with the supplied COM object (IJDLineFeature).
            For internal-use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDLineFeature">COM IJDLineFeature.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.LineFeature">
            <summary>
            Wrapper class for LineFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineFeature.#ctor(SP3DPIA.TransientEntities.IJDLineFeature)">
            <summary>
            Initializes a new instance of the LineFeature class
            with the supplied COM object (IJDLineFeature).
            For internal-use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDLineFeature">COM IJDLineFeature.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SelectorRule">
            <summary>
            SelectionRule base class for defining custom selection rules for choosing an appropriate
            part based on the selected/defined inputs.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.IRuleInitialization">
            <summary>
            Interface used to communicate between the selection rule and its internal
            wrapper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.IRuleInitialization.RuleWrapper">
            <summary>
            Provides the rule COM wrapper to the SelectionRule enabling the
            internal communication. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SelectorRule.Occurrence">
            <summary>
            Returns the symbol occurrence in the model related to the rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SelectorRule.PartClass">
            <summary>
            Returns the PartClass associated to the selector rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SelectorRule.Inputs">
            <summary>
            Returns the object inputs for the part.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SelectorRule.Selections">
            <summary>
            Selection rule method, which is provided by the inheriting class, to process the rules
            and return the list of named part items that are possible choices based on provided inputs.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SelectorRule.Ingr#SP3D#Common#Middle#Services#IRuleInitialization#RuleWrapper">
            <summary>
            Do not set this property! This interface property is for internal use
            only for communicating between objects.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidSelectionRuleWrapper">
            <summary>
            This exception is thrown when the SelectionRule is not properly initialized.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidSelectionRuleWrapper.#ctor">
            <summary>
            Instantiates a new instance of the CmnInvalidSelectionRuleWrapper 
            class which identifies that the SelectionRule was not initialized correctly.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Model">
            <summary>
            The model is the database that contains the plant or marine data.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Model.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,Ingr.SP3D.Common.Middle.Services.Plant)">
            <summary>
            Construct Model 
            </summary>
            <param name="name">name</param>
            <param name="server">server</param>
            <param name="databaseID">databaseid</param>
            <param name="provider">provider</param>
            <param name="permissionID">permissionid</param>
            <param name="parentplant">parentplant</param>
            <param name="schemaname">schemaname</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Model.Close">
            <summary>
            Closes the unmanaged resources
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Model.Dispose">
            <summary>
            Disposes unmanaged resources.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Model.RegenerateReports(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Regenerates the reports database and schema.
            </summary>
            <param name="sDBServer">Database server.</param>
            <param name="sReportsDBName">Reports database name.</param>
            <param name="sReportsDBLocation">Reports database location.</param>
            <param name="sReportsLogFileLocation">Reports log file location.</param>
            <param name="sReportsSchemaDBLocation">Reports schema database location.</param>
            <param name="sReportsSchemaLogFileLocation">Reports schema log file location.</param>
            <param name="bDeleteExistingReportsDB">Delete existing reports database if it is true.</param> 
            <returns>True if succeeded.</returns>
            <exception cref="T:System.ArgumentNullException">Some of the input arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Given directory path is not found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">A database already exists with the same name.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException">Failed to regenerate reports.</exception>
            <example>This example shows how to regenerate reports.
            <code>
            'Get model object.
            Dim oModel As Model = Nothing
            'Declare input arguments.            
            Dim sDataBaseServer As String = "SqlSrv"
            Dim sReportsDBName As String = "Reports1"
            Dim sReportsDBLoc As String = "D:\SqlDbs\"
            Dim sReportsLogLoc As String = "D:\SqlDbs\"
            Dim sReportsSchemaDBLoc As String = "D:\SqlDbs\"
            Dim sReportsSchemaLogLoc As String = "D:\SqlDbs\"
            Dim bDeletedExistingReportsDB As Boolean = True
            'Regenerate reports by given reports name info.
            oModel.RegenerateReports(sDataBaseServer, sReportsDBName, sReportsDBLoc, sReportsLogLoc,sReportsSchemaDBLoc,sReportsSchemaLogLoc, bDeletedExistingReportsDB)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Model.UpdatePRJMGTDatabaseWithReportsAndServerName(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Update the PRJMGTDatabase table on the site database with the information for the report database
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Model.RegenerateReports">
            <summary>
            Regenerates the reports database and schema.
            </summary>
            <returns>True if succeeded.</returns>   
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRegenerateReportsException">Failed to regenerate reports.</exception>
            <example>This example shows how to regenerate reports.
            <code>
            'Get model object.
            Dim oModel As Model = Nothing
            'Declare input arguments.            
            'Regenerate reports by given reports name info.
            oModel.RegenerateReports()
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Model.RootHierarchies">
            <summary>
            Gets the hierarchies root object.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.HierarchiesRoot.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnConfigProjectRootFromGenericUtilClassException">Failed to get ConfigProjectRoot from CmnAppGenericUtilClass.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingHierarchiesRootWrapperException">Cannot cast BusinessObject to HierarchiesRoot object type. Missing class wrapper for HierarchiesRoot. Ensure map file has an entry for HierarchiesRoot wrapper.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Model.PlantCatalog">
            <summary>
            Gets the catalog associated with this model.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Catalog.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Model.RootAssembly">
            <summary>
            Gets the assembly root node for this model.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.IAssembly.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Model.RootSpace">
            <summary>
            Gets the space root node for this model.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.ISpaceParent.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Model.RootSystem">
            <summary>
            Gets the system root node for this model.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.ISystem.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Model.RootWBS">
            <summary>
            Gets the WBS root node for this model.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.IWBSParent.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Model.RootAnalysis">
            <summary>
            Gets the analysis hierarchy root node.
            </summary>
            <value>Analysis hierarchy root node as analysis parent.</value>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Report">
            <summary>
            The Report database object definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Report.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,Ingr.SP3D.Common.Middle.Services.Plant)">
            <summary>
            Construct catlog 
            </summary>
            <param name="name">name</param>
            <param name="server">server</param>
            <param name="databaseID">databaseid</param>
            <param name="provider">provider</param>
            <param name="permissionID">permissionid</param>
            <param name="parentplant">parentplant</param>
            <param name="schemaname">schema name</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Report.SelectObjects(System.String)">
            <summary>
            Executes query on this connection and returns a read only collection of BusinessObjects. 
            </summary>
            <param name="strQuery">Query to be executed.</param>
            <returns>ReadOnlyCollection of BusinessObject objects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Report.WrapSP3DBO(Ingr.SP3D.Common.Middle.Services.BOMoniker)">
            <summary>
            Wraps an existing object using its moniker.
            </summary>
            <param name="oBOMoniker">BOMoniker of the object to wrap.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oBOMoniker is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Report.WrapSP3DBOs(Ingr.SP3D.Common.Middle.Services.BOMonikers)">
            <summary>
            Wraps multiple existing objects using monikers.
            </summary>
            <param name="oBOMonikers">BOMonikers of existing objects to wrap.</param>
            <returns>ReadOnlyCollection of BusinessObject objects.</returns>
            <exception cref="T:System.ArgumentNullException">oBOMonikers is null.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Report.PlantCatalog">
            <summary>
            Gets the catalog associated with this model.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Catalog.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Report.PermissionGroupFolders">
            <summary>
            Returns permission group folders under a report connection.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotSupportedByReportsException">PermissionGroup Folders is not supported on Reports connection.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Report.PermissionGroups">
            <summary>
            Returns permission group folders under a report connection.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotSupportedByReportsException">PermissionGroups is not supported on Reports connection.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Report.ActivePermissionGroup">
            <summary>
            Gets or sets the active permission group used for newly created objects.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotSupportedByReportsException">Active PermissionGroup is not supported on Reports connection.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Catalog">
            <summary>
            The Catalog database object definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Catalog.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,Ingr.SP3D.Common.Middle.Services.Plant)">
            <summary>
            Construct catlog 
            </summary>
            <param name="name">name</param>
            <param name="server">server</param>
            <param name="databaseID">databaseid</param>
            <param name="provider">provider</param>
            <param name="permissionID">permissionid</param>
            <param name="parentplant">parentplant</param>
            <param name="schemaname">schemaname</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Catalog.PlantModels">
            <summary>
            Gets the collection of all models using this catalog.
            </summary>
            <returns>ReadOnlyCollection of Model objects.</returns>
            <exception cref="T:System.NotImplementedException">Not implemented.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Catalog.SymbolShare">
            <summary>
            Gets the SymbolShare path.
            </summary>
            <example>This example explains how to get the symbol share.
            <code>
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnConfigProjectRootFromGenericUtilClassException">
            <summary>
            This exception is thrown when a COMException occurs calling CmnAppGenericUtilClass.GetConfigProjectRoot.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnConfigProjectRootFromGenericUtilClassException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnConfigProjectRootFromGenericUtilClassException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMissingHierarchiesRootWrapperException">
            <summary>
            This exception is thrown when HierarchiesRoot wrapper class is missing.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingHierarchiesRootWrapperException.#ctor">
            <summary>
            Initializes a new instance of the CmnMissingHierarchiesRootWrapperException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNotSupportedByReportsException">
            <summary>
            This exception is thrown when the properties that are not supported by Reports Connection is called.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNotSupportedByReportsException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnNotSupportedByReportsException  
            class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">The default message for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IProjection">
            <summary>
            Default interface for Projections.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IProjection.GenCurve">
            <summary>
            Gets or sets the generating curve of the projection.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IProjection.ProjVec">
            <summary>
            Gets or sets the projection vector.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IProjection.ProjLength">
            <summary>
            Sets the projection length.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IProjection.IsOrthogonal">
            <summary>
            Gets whether the projection is orthogonal to the generating curve plane.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IProjection.Capped">
            <summary>
            Gets or sets whether the projection is capped or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IProjection.ReverseNormal">
            <summary>
            Gets or sets reverse normal.  The outward normal is usually U X V, but if reverse normal
            is True, then it's V X U.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Projection3d">
             <summary>
             Class definition for Projection3d.
             </summary>
             <example> This is an example for Projection3d methods and properties.
             <code>
             Public Class Projection3d
               Public Sub New()
            
                 ' Create the Projection3d object.
                 Dim oPosCenter As New Position(0, 0, 0)
                 Dim oVecNormal As New Vector(0, 0, 1)
                 Dim oPosStart As New Position(1, 0, 0)
                 Dim oPosEnd As New Position(0, 1, 0)
                 Dim oArc3d As New Arc3d(oPosCenter, oVecNormal, oPosStart, oPosEnd)
                 Dim dLength As Double = 2
                 Dim bCapped As Boolean = False
            
                 ' Create a Projection3d object using an arc, normal vector, length, and whether capped.
                 Dim oProj3D_1 As New Projection3d(oArc3d, oVecNormal, dLength, bCapped)
                 
                 ' Create a Projection3d object using a connection, an arc, normal vector, length, and whether capped.
                 Dim oConn As SP3DConnection
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 Dim oArc3d_2 As New Arc3d(oPosCenter, oVecNormal, New Position(2, 0, 0), New Position(0, 2, 0))
                 Dim dLength_2 As Double = 4
                 Dim oProj3D_2 As New Projection3d(oArc3d_2, oVecNormal, dLength_2, bCapped)
            
                 ' Create a Projection3d object using an existing Projection3d object.
                 Dim oProjCopy As New Projection3d(oProj3D_1)
                 
                 ' Set all values of the existing Projection3d object into another.
                 oProjCopy.[Set](oProj3D_2)
                 
                 ' Define by a curve using an arc, normal vector, length, and whether capped.
                 oProjCopy.DefineByCurve(oArc3d_2, oVecNormal, dLength_2, bCapped)
            
                 ' Transform the Projection3d object.
                 Dim oMatrix As New Matrix4X4()
                 oMatrix.Scale(2)
                 oProjCopy.Transform(oMatrix)
            
                 ' Get whether it is capped. 
                 Dim bCappedTest As Boolean
                 bCappedTest = oProj3D_1.Capped
            
                 ' Set whether it is capped. 
                 oProj3D_1.Capped = bCappedTest
            
                 ' Get the generating curve.
                 'Dim oArcTest As Arc3d
                 oProj3D_1.GenCurve = oArc3d_2
            
                 ' Set the generating curve.
                 oProj3D_1.GenCurve = oArc3d_2
            
                 ' Get whether it is orthogonal.
                 Dim bIsOrthogonal As Boolean
                 bIsOrthogonal = oProj3D_1.IsOrthogonal
            
                 ' Get the projection length.
                 Dim dProjLengthTest As Double
                 dProjLengthTest = oProj3D_1.ProjLength
            
                 ' Set the projection length.
                 oProj3D_1.ProjLength = dProjLengthTest
            
                 ' Get the projection vector.
                 Dim oProjVecTest As Vector
                 oProjVecTest = oProj3D_1.ProjVec
            
                 ' Set the projection vector.
                 oProj3D_1.ProjVec = New Vector(0, 1, 0)
            
                 ' Get the reverse normal.
                 Dim bReverseNorTest As Boolean
                 bReverseNorTest = oProj3D_1.ReverseNormal
            
                 ' Set the reverse normal.
                 oProj3D_1.ReverseNormal = bReverseNorTest
            
                 ' Get the range. 
                 Dim oRBox As RangeBox
                 oRBox = oProj3D_1.Range
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Projection3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Projection3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Projection3d.#ctor(Ingr.SP3D.Common.Middle.Projection3d)">
            <summary>
            Constructor used to copy an existing Projection3d.
            </summary>
            <param name="oProjection">A Projection3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oProjection cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create projection.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Projection3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.ICurve,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean)">
            <summary>
            Constructor used to create a persistent Projection3d.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="GenCurve">The generating curve or curve to be projected.</param>
            <param name="vecProjDir">The direction of projection.</param>
            <param name="dLength">The projection length.</param>
            <param name="bCapped">Whether to cap the projection. This is valid only if
            the generating curve is closed.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">GenCurve cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecProjDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Projection3d.#ctor(Ingr.SP3D.Common.Middle.ICurve,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean)">
            <summary>
            Constructor used to create a transient Projection3d.
            </summary>
            <param name="GenCurve">The generating curve or curve to be projected.</param>
            <param name="vecProjDir">The direction of projection.</param>
            <param name="dLength">The projection length.</param>
            <param name="bCapped">Whether to cap the projection. This is valid only if
            the generating curve is closed.</param>
            <exception cref="T:System.ArgumentNullException">GenCurve cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecProjDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Projection3d.Set(Ingr.SP3D.Common.Middle.Projection3d)">
            <summary>
            Sets this projection equal to an existing projection.
            </summary>
            <param name="oProjection3d">Existing Projection3d.</param>
            <exception cref="T:System.ArgumentNullException">oProjection3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Projection3d.DefineByCurve(Ingr.SP3D.Common.Middle.ICurve,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Boolean)">
            <summary>
            Redefines this projection by a new curve.
            </summary>
            <param name="GenCurve">Generating curve.</param>
            <param name="vecProjDir">Projection direction.</param>
            <param name="dLength">Length of projection.</param>
            <param name="bCapped">Whether to cap the projection. This is valid only if
            the generating curve is closed.</param>
            <exception cref="T:System.ArgumentNullException">GenCurve cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecProjDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByCurve exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Projection3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this projection by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Projection3d.GenCurve">
            <summary>
            Gets or sets the generating curve of the projection.
            </summary>
            <exception cref="T:System.ArgumentNullException">value cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Projection3d.ProjVec">
            <summary>
            Gets or sets the projection vector.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Projection vector cannot be 0.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Projection3d.ProjLength">
            <summary>
            Sets the projection length.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Projection3d.IsOrthogonal">
            <summary>
            Gets whether the projection is orthogonal to the generating curve plane.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Projection3d.Capped">
            <summary>
            Gets or sets whether the projection is capped or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Projection3d.ReverseNormal">
            <summary>
            Gets or sets reverse normal.  The outward normal is usually U X V, but if reverse normal
            is True, then it's V X U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Projection3d.Range">
            <summary>
            Finds the range box of this projection.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyArgumentException">
            <summary>
            Exception class for a bad argument passed to a CustomAssembly method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyArgumentException.#ctor(System.String)">
            <summary>
            Constructor to create a Custom Assembly bad argument exception.
            </summary>
            <param name="message">Bad argument message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNotImplementedException">
            <summary>
            Internal exception class thrown for a call to a CustomAssembly interface
            method that is not supported in .NET.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyNotImplementedException.#ctor(System.String)">
            <summary>
            Constructor to create a Custom Assembly exception for a method not implemented.
            </summary>
            <param name="message">Message for method not implemented exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNoAttributesException">
            <summary>
            Exception class thrown internally when the symbol does not support
            the internal attributes interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyNoAttributesException.#ctor(System.String)">
            <summary>
            Constructor to create the no attributes exception.
            </summary>
            <param name="message">Message for no attributes exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyDoesNotSupportInterfaceException">
            <summary>
            Exception class thrown when an internal object does not support an expected interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyDoesNotSupportInterfaceException.#ctor(System.String)">
            <summary>
            Constructor to create the exception for unsupported interface.
            </summary>
            <param name="message">Message for the unsupported interface exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyFailedToCreateCADException">
            <summary>
            Exception for failure to create the COM CustomAssembly definition object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyFailedToCreateCADException.#ctor">
            <summary>
            Constructor when the .NET CustomAssembly fails to create the COM CAD definition object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyDuplicateIndexException">
            <summary>
            Exception class thrown when two outputs for a user-defined
            Custom Assembly are decorated with the AssemblyOutput attribute
            and have the same index, which must be unique for each assembly output.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyDuplicateIndexException.#ctor">
            <summary>
            Constructor to create the duplicate index exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyInvalidInterfaceException">
            <summary>
            Exception class thrown when the OutputNotification attribute is defined on an
            object that is not an AssemblyOutput.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyInvalidInterfaceException.#ctor(System.String)">
            <summary>
            Constructor to create the no interface exception.
            </summary>
            <param name="interfaceName">Name of the interface.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNoAssemblyOutputForBOException">
            <summary>
            Exception class thrown when the specified business object does not have a
            correlating assembly output.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyNoAssemblyOutputForBOException.#ctor">
            <summary>
            Constructor to create the exception when the specified business object has no assembly output.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyOutputAlreadyExistsException">
            <summary>
            Exception class thrown when an attempt is made to construct a new
            assembly output when one already exists. The Delete
            method must be called on the AssemblyOutput class first to remove the output before providing
            a new output value. Normal workflow is to update the existing output rather than
            creating a new output.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyOutputAlreadyExistsException.#ctor">
            <summary>
            Constructor to create the exception for an assembly output that already exists.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyOutputRemovedByUserException">
            <summary>
            Exception class thrown when an attempt is made to re-create an Assembly output
            that was intentionally removed by the user. 
            <para><b>Note</b> This is not allowed unless the developer
            explicitly resets the HasBeenDeletedByUser property to False. In this case, it acknowledges that
            the output was removed but needs to be resurrected.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyOutputRemovedByUserException.#ctor">
            <summary>
            Exception constructor for an assembly output that was removed
            by the user but an attempt is being made to resurrect without
            clearing the HasBeenDeletedByUser property first.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyCannotSetOutputToNullException">
            <summary>
            Exception class thrown when an attempt is made to set an output to null, which is
            not allowed. The Delete method needs to be explicitly called
            to remove an output. Calling Delete prevents accidental removal of
            outputs where the normal workflow is to update the existing outputs rather than
            re-create them.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyCannotSetOutputToNullException.#ctor">
            <summary>
            Exception constructor for attempting to set an assembly output to null. Delete method must be called
            instead.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyErrorValidationMustProvideMessage">
            <summary>
            Exception class thrown when the developer overrides the IsPropertyValid method and returns a failure
            for a property, but does not provide a context message to post to the user as to why the property
            failed the validation.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyErrorValidationMustProvideMessage.#ctor">
            <summary>
            Exception constructor for indicating that a property is invalid but no message is provided
            as to why it is invalid.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNonPersistentOutputException">
            <summary>
            Exception class thrown when the developer assigns a non-persistent business object as an output of
            a Custom Assembly.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyNonPersistentOutputException.#ctor">
            <summary>
            Exception constructor for indicating that the assembly output must be made persistent.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNonPersistentObjectException">
            <summary>
            Exception class thrown when the developer passes a non-persistent object to the property validation routines.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyNonPersistentObjectException.#ctor">
            <summary>
            Exception constructor for indicating that non-persistent object was passed to the validation routines.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblySymbolNotInitializedException">
            <summary>
            Internal exception class thrown when the symbol could not be initialized properly.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblySymbolNotInitializedException.#ctor(System.String)">
            <summary>
            Constructor for the custom assembly when the symbol initialization fails.
            </summary>
            <param name="message">Symbol not initialized exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyOverflowException">
            <summary>
            Exception class thrown when a value for a custom attribute execeeds the maximum value.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyOverflowException.#ctor(System.String)">
            <summary>
            Constructor for the custom assembly overflow exception.
            </summary>
            <param name="message">Overflow exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyMissingOutputException">
            <summary>
            Exception class thrown when an attempt is made to access an assembly output by its
            index or name, and no output exists with either this index or name.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyMissingOutputException.#ctor(System.String)">
            <summary>
            Constructor to create the missing output exception.
            </summary>
            <param name="message">Missing output exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNullPointerException">
            <summary>
            Internal exception class thrown when an internal object reference is missing.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyNullPointerException.#ctor(System.String)">
            <summary>
            Constructor to create an exception for a bad object reference.
            </summary>
            <param name="message">Missing internal object reference exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyInvalidPropertyDescriptionIndexException">
            <summary>
            Internal exception thrown when an attempt is made to access a non-existent
            interface OutputNotification attribute.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CustomAssemblyInvalidPropertyDescriptionIndexException.#ctor(System.String)">
            <summary>
            Constructor to create the invalid index for an OutputNotification attribute.
            </summary>
            <param name="message">Accessing a non-existent attribute exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CurveHelper">
            <summary>
            Helper class to implement ICurve.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Initializes a new instance of the CurveHelper class with the supplied named BusinessObject.
            </summary>
            <param name="curve">Curve object as BusinessObject.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IJCurve interface is not supported by given business object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.GetCOMBO">
            <summary>
            Gets COM object for entity BusinessObject.
            </summary>
            <returns>COM object of entity BusinessObject as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.IsCurve(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Checks if the provided business object input is a curve or not.
            </summary>
            <param name="oBO">Business Object</param>
            <returns>Boolean value indicating whether the object is a curve or not.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.ScopeNormal(Ingr.SP3D.Common.Middle.CurveScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Finds the planarity and the normal for this curve.
            </summary>
            <param name="eScope">Enumerator which shows the planarity of this curve.</param>
            <param name="vecNormal">The normal vector of this curve.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <example>This is an example of the ScopeNormal method.
            <code>
            Dim eScope As CurveScopeType
            Dim oVecNormal As Vector
            oCurve.ScopeNormal(eScope, oVecNormal)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.AreaCentroidMomentsOfInertia(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Compute the center, area, moments of inertia, principle axes of lamina (e.g., 
             a sheet metal) bounded by a closed planar curve.
            </summary>
            <param name="dArea">Area of the the lamina.</param>
            <param name="posCentroid">Centroid of the lamina.</param>
            <param name="dInteriaX">Moment of inertia to centroidal X-axis.</param>
            <param name="dInertiaY">Moment of inertia to centroidal Y-axis.</param>
            <param name="dInertiaXY">Product of inertia (zero if it is symmetric).</param>
            <param name="dMajorPrncplInertia">Principle moment of inertia to major axis.</param>
            <param name="dMinorPrncplInertia">Principle moment of inertia to minor axis.</param>
            <param name="dPolarInertia">Polar moment of inertia to the normal.</param>
            <param name="MjIAxis">Major principle axis.</param>
            <param name="MnIAxis">Minor principle axis.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is the example of AreaCentroidMomentsOfInertia method.
            <code>
            Dim dArea, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertia, dPolarInertia As Double
            Dim oCentroid As Position
            Dim oMjIAxis, oMnIAxis As Vector
            oCurve.AreaCentroidMomentsOfInertia(dArea, oCentroid, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertia, dPolarInertia, oMjIAxis, oMnIAxis)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.CentroidInertiaForWire(System.Double@,Ingr.SP3D.Common.Middle.Position@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Compute length, centroid, moments of inertia, principle axes of an open or
            closed thin wire.
            </summary>
            <param name="dLength">Length of the wire.</param>
            <param name="posCentroid">Centroid of the curve.</param>
            <param name="dInteriaX">Moment of inertia to centroidal X-axis.</param>
            <param name="dInertiaY">Moment of inertia to centroidal Y-axis.</param>
            <param name="dInertiaZ">Moment of inertia to centroidal Z-axis.</param>
            <param name="dPrncplInertiaU">Principle moment of inertia to uDir.</param>
            <param name="dPrncplInertiaV">Principle moment of inertia to vDir.</param>
            <param name="dPrncplInertiaN">Principle moment of inertia to nDir.</param>
            <param name="AxisU">Major principle axis.</param>
            <param name="AxisV">Minor principle axis.</param>
            <param name="AxisN">Minor principle axis.</param>
            
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is the example of CentroidInertiaForWire method.
            <code>
            Dim dLength, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertia, dPolarInertiaN As Double
            Dim oCentroid As Position
            Dim oMjIAxis, oMnIAxis, oNIAxis As Vector
            oCurve.AreaCentroidMomentsOfInertia(dLength, oCentroid, dInteriaX, dInertiaY, dInertiaXY, dMajorPrncplInertia, dMinorPrncplInertiaN, dPolarInertia, oMjIAxis, oMnIAxis, oNAxis)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.EndPoints(Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the end points of this curve.
            </summary>
            <param name="posStart">Start position.</param>
            <param name="posEnd">End position.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <example>This is an example of the EndPoints method.
            <code>
            Dim oPosStart, oPosEnd As Position
            oCurve.EndPoints(oPosStart, oPosEnd)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether the input point is on this curve.
            </summary>
            <param name="pos">Point to determine if on this curve.</param>
            <returns>True if the point is on this curve; False if the point is not on this curve.</returns>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the IsPointOn method.
            <code>
            Dim bIsPointOn As Boolean = oCurve.IsPointOn(New Position(1.5, 0, 0))
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            This method determines the distance between this curve and the input point.
            </summary>
            <param name="point3d">Input point.</param>
            <param name="dist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this curve at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>      
            <example>This is an example of DistanceBetween method.
            <code>
            Dim oPoint3d As New Point3d(1.5, 0, 0)
            Dim dDist As Double
            Dim posSrcPos As Position
            oCurve.DistanceBetween(oPoint3d, dDist, posSrcPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            This method determines the distance between this curve and the input curve.
            </summary>
            <param name="inCurve">Input curve.</param>
            <param name="dist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this curve at minimum distance.</param>
            <param name="posInPos">Point on input curve at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of DistanceBetween method.
            <code>
            Dim dDist As Double
            Dim posSrcPos, posInPos As Position
            oCurve.DistanceBetween(oInCurve, dDist, posSrcPos, posInPos)
            </code>
            </example>       
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            This method determines the distance between this curve and the input surface.
            </summary>
            <param name="inSurface">Input surface.</param>
            <param name="dist">Output minimum distance.</param>
            <param name="posSrcPos">Point on this curve at minimum distance.</param>
            <param name="posInPos">Point on input surface at minimum distance.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the DistanceBetween method.
            <code>
            Dim dDist As Double 
            Dim oPosSrcPos, oPosInPos As Position 
            oCurve.DistanceBetween(oInSurface, dDist, oPosSrcPos, oPosInPos)
            </code>
            </example>       
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            This method finds the intersection between this curve and another curve.
            </summary>
            <param name="inCurve">Input curve.</param>
            <param name="colIntPos">Output collection of intersection points.</param>
            <param name="colOverlapPos">Output collection of overlap points.</param>
            <param name="eIntersectCode">Enumerator describing type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the Intersect method.
            <code>
            Dim eIntersectCode As GeometryIntersectionType
            Dim colIntPos As Collection(Of Position) = Nothing
            Dim colOverlapPos As Collection(Of Position) = Nothing
            oCurve.Intersect(oInCurve, colIntPos, colOverlapPos, eIntersectCode)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            This method finds the intersection between this curve and a surface.
            </summary>
            <param name="inSurface">Input surface.</param>
            <param name="colCurves">Collection of curve objects.</param>
            <param name="eIntersectCode">Enumerated value for the type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the Intersect method.
            <code>
            Dim eIntersectCode As GeometryIntersectionType
            Dim colCurves As Collection(Of BusinessObject) = Nothing
            oCurve.Intersect(oInSurface, colCurves, eIntersectCode)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.SelfIntersect(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            This method finds the self intersections and overlaps of this curve.
            </summary>
            <param name="colIntPos">Collection of intersection points.</param>
            <param name="colOverlapPos">Collection of overlap points.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the SelfIntersect method.
            <code>
            Dim colIntPos As Collection(Of Position) = Nothing
            Dim colOverlapPos As Collection(Of Position) = Nothing
            oCurve.SelfIntersect(colIntPos, colOverlapPos)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.PointAtDistanceAlong(Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            This method finds a point along a curve at a given distance from the given 
            start point on the curve. If the given point does not lie on the curve, 
            it is along normal to the curve (minimum distance). 
            </summary>
            <param name="posStart">Position to start from.</param>
            <param name="dist">Distance along.</param>
            <returns>Position - point at given distance.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Failed to create COM Geometry Factory</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the PointAtDistanceAlong method.
            <code>
            Dim oPosStart As New Position(1, 1, 1)
            Dim dDist As Double = 1.0
            Dim oPointDistanceAlong As Position = oCurve.PointAtDistanceAlong(oPosStart, dDist)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.PointAtDistanceAlong(System.Double)">
            <summary>
            This method finds a point along a curve at a given distance from the start of curve.
            </summary>
            <param name="dist">Distance along.</param>
            <returns>Position - point at given distance.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Failed to create COM Geometry Factory</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the PointAtDistanceAlong method.
            <code>
            Dim dDist As Double = 1.0
            Dim oPointDistanceAlong As Position = oCurve.PointAtDistanceAlong(dDist)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            This method finds a point on this curve along given vector from given point.
            </summary>
            <param name="pos">Position to project to curve.</param>
            <param name="vecProj">Vector to project along. If optional argument is null,
                                  then the function projects along vector normal to curve.</param>
            <returns>Position - projected point.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the ProjectPoint method.
            <code>
            Dim oPos As New Position(1, 1, 0)
            Dim oVecProj As New Vector(0, 0, 1)
            Dim oProjectPoint As Position = oCurve.ProjectPoint(oPos, oVecProj)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            This method finds a point on this curve from given point.
            </summary>
            <param name="pos">Position to project to curve.</param>
            <returns>Position - projected point.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the ProjectPoint method.
            <code>
            Dim oPos As New Position(1, 1, 0)
            Dim oProjectPoint As Position = oCurve.ProjectPoint(oPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CurveHelper.TangentAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            This method finds the tangent at a given point.
            </summary>
            <param name="pos">Position in which to find the tangent.</param>
            <returns>Vector - tangent vector.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the TangentAtPoint method.
            <code>
            Dim oPos As New Position(1, 1, 0)
            Dim oTangentPoint As Vector = oCurve.ProjectPoint(oPos)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveHelper.Length">
            <summary>
            Gets the length of this curve.
            </summary>
            <returns>Length value of this curve.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveHelper.Area">
            <summary>
            Gets the area of this curve.
            </summary>
            <returns>Area value of this curve.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveHelper.Form">
            <summary>
            Gets the form (closure) of this curve.
            </summary>
            <returns>Enumerated value of this curve closure.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveHelper.Scope">
            <summary>
            Gets the scope (planarity) of this curve.
            </summary>
            <returns>Enumerated value of this curve planarity.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CurveHelper.Centroid">
            <summary>
            Gets the centroid of this curve.
            </summary>
            <returns>Position of centroid of this curve. </returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">CurveHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SP3DFolder">
            <summary>
            A folder is a way to organize BusinessObject within a model or catalog.
            This is the abstract class that is inherited by other folder (e.g., FilterFolder) classes.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SP3DFolder.#ctor">
            <summary>
            Constructor used to create an SP3DFolder object without parameters.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SP3DFolder.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Used to wrap BusinessObject only.
            </summary>
            <param name="oBOBasePrivate">PrivateBusinessObject</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SP3DFolder.Name">
            <summary>
            Name of the folder.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.NameRuleBase">
             <summary>
             Base class for all .NET name rule implementations. 
             </summary>
             <example>This is an example for NameRuleBase class methods and properties.
             <code>
             Public Class NameRuleBase
               Public Sub New()
            
                 Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
                 Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                 Dim oPlant As Plant = oSiteMgr.ActiveSite.ActivePlant
                 Dim oModel As Model = oPlant.PlantModel
                 Dim oRootObj As BusinessObject = DirectCast(oModel.RootSystem, BusinessObject)
                 Dim oModelConn As SP3DConnection = oRootObj.DBConnection
            
                 'Creating a NameRuleBase class; an abstract base class that cannot be instantiated directly.
                 'Instantiate a class which inherits from this class. 
            
                 'Creating a CommonAppNameRule class object, which inherits from the NameRuleBase class. 
                 'Compute the name for an Equipment object.
                 'Start creation of equipment.
                 Dim oEquipment As Equipment = Nothing
                 oEquipment = New Equipment("PUMP 001A-E", Nothing)
                 'Null system indicates that equipment is created under the project root. 
            
                 'Getting ILocalCoordinateSystem interface and setting the position of equipment. 
                 'Setting the position of the equipment. 
                 Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEquipment, ILocalCoordinateSystem)
                 Dim oPos As New Position()
                 oPos.X = 3
                 oPos.Y = 3
                 oPos.Z = 3
                 oEqpCS.Origin = oPos
            
                 'Committing equipment.
                 oTransactionMgr.Commit("Place Equipment1")
            
                 'Getting BusinessObject from the equipment.
                 Dim oEqpBusObj As BusinessObject = DirectCast(oEquipment, BusinessObject)
            
                 'Creating an instance of oTestCmnAppNameRule class using the default constructor.
                 Dim oTestCmnAppNameRule As New TestCmnAppNameRule()
            
                 'Getting naming parents of Equipment BusinessObject using the GetNamingParents method on the CommonAppNameRule class. 
                 Dim oEqpNamingParentsCol As Collection(Of BusinessObject) = oTestCmnAppNameRule.GetNamingParents(oEqpBusObj)
            
                 'Computing the name for an Equipment BusinessObject using the ComputeName method on CommonAppNameRule.
                 'Converting the collection object into a ReadOnlyCollection to pass to the ComputeName method on CommonAppNameRule class.
                 Dim oReadOnlyEqp1NamingPrntsCol As New ReadOnlyCollection(Of BusinessObject)(oEqpNamingParentsCol)
                 Dim strAERoleName As String = "Destination"
                 Dim strAERelationShipName As String = "NamedEntity"
                 Dim RelationColObj As RelationCollection = oEqpBusObj.GetRelationship(strAERelationShipName, strAERoleName)
                 Dim ObjCol As ReadOnlyCollection(Of BusinessObject) = RelationColObj.TargetObjects
                 Dim oNameRuleAEObj As BusinessObject = ObjCol.ElementAt(0)
                 If oNameRuleAEObj.SupportsInterface("IJNameRuleAE") Then
                     'Calling the ComputeName method on the CommonAppNameRule class. 
                     oTestCmnAppNameRule.ComputeName(oEqpBusObj, oReadOnlyEqp1NamingPrntsCol, oNameRuleAEObj)
                 End If
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.#ctor">
            <summary>
            Constructs a NameRuleBase class object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.Finalize">
            <summary>
            Destructor for NameRuleBase.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.ComputeName(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Computes a name for the given entity.
            </summary>
            <param name="oEntity">BusinessObject for which a name should be computed.</param>
            <param name="oParents">Parents of BusinessObject for which a name should be computed.</param>
            <param name="oActiveEntity">ActiveEntity for BusinessObject.</param>
            <returns>void</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetNamingParents(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the naming parents from naming rule.
            </summary>
            <param name="oEntity">BusinessObject for which naming parents are required.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetCountAndLocationID(System.String,System.Int64@,System.String@)">
            <summary>
            Gets count and location ID from the NameGeneratorService.
            </summary>
            <param name="sBaseName">BaseNameString for which next counter is requested.</param>
            <param name="lCount">Counter returned from NameGeneratorService for sBaseName.</param>
            <param name="sLocationID">LocationID returned from NameGeneratorService.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetCountAndLocationID(System.String,System.Int32,System.Int64@,System.String@)">
            <summary>
            Gets count and location ID using the range specified from NameGeneratorService.
            </summary>
            <param name="sBaseName">BaseNameString for which next counter is requested.</param>
            <param name="iRange">Range to reserve for the invoking client. Note that, small values result in more hits to NameGenerator, and large value result in a bigger range cached for each invoking  client.</param>
            <param name="lCount">Counter returned from NameGeneratorService for sBaseName.</param>
            <param name="sLocationID">LocationID returned from NameGeneratorService</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetName(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the name of BusinessObject. 
            </summary>
            <param name="oBusinessObject">Business object.</param>
            <returns>Name of business object.</returns>
            <exception cref="T:System.ArgumentNullException">oBusinessObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.SetName(Ingr.SP3D.Common.Middle.BusinessObject,System.String)">
            <summary>
            Sets the name on the object passed in.
            </summary>
            <param name="oBusinessObject">BusinessObject on which the name has to be set.</param>
            <param name="sName">String value of the name to set.</param>
            <exception cref="T:System.ArgumentNullException">oBusinessObject is null.</exception>
            <exception cref="T:System.ArgumentException">oBusinessObject is not IJNamedItem.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetPart(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the part from part or smart occurrence.
            </summary>
            <param name="oOccurrence">BusinessObject</param>
            <returns>Part for part occurrence.</returns>
            <exception cref="T:System.ArgumentNullException">oOccurrence is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetPartNumber(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the part number for the given part.
            </summary>
            <param name="oPart">Part for which part number is required.</param>
            <returns>PartNumber for oPart.</returns>
            <exception cref="T:System.ArgumentNullException">oPart is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetParent(Ingr.SP3D.Common.Middle.HierarchyTypes,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets a parent BusinessObject in the hierarchy specified for a child BusinessObject. "Volume_NamedSpace" is not implemented.
            </summary>
            <param name="oHierarchyType">Hierarchy to use for finding the parent. PermissionGroup hierarchy is not supported.</param>
            <param name="oChild">BusinessObject that is a child in the specified hierarchy.</param>
            <returns>BusinessObject that is the parent.</returns>
            <exception cref="T:System.NotSupportedException">PermissionGroup value for HierarchyTypes is not supported.</exception>
            <exception cref="T:System.ArgumentNullException">oChild  is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetTypeString(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the TypeString property value for BusinessObject.
            </summary>
            <param name="oNamedItem">Business object.</param>
            <returns>TypeString</returns>
            <exception cref="T:System.ArgumentNullException">oNamedItem is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetNamingParentsString(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Returns the NamingParentsString property value from IJNameRuleAE interface.
            </summary>
            <param name="oActiveEntity">BusinessObject that is an IJNameRuleAE object.</param>
            <returns>NamingParentsString as a string.</returns>
            <exception cref="T:System.ArgumentNullException">oActiveEntity is null.</exception>
            <exception cref="T:System.ArgumentException">oActiveEntity is not IJNameRuleAE.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.SetNamingParentsString(Ingr.SP3D.Common.Middle.BusinessObject,System.String)">
            <summary>
            Sets the NamingParentsString property value on IJNameRuleAE interface.
            </summary>
            <param name="oActiveEntity">BusinessObject that is a IJNameRuleAE object.</param>
            <param name="sNamingParentsString">String to be set on NamingParentsString property of IJNameRuleAE interface.</param>
            <exception cref="T:System.ArgumentNullException">oActiveEntity is null.</exception>
            <exception cref="T:System.ArgumentException">oActiveEntity is not IJNameRuleAE.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.GetFrozen(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the Frozen property value from IJNameRuleAE interface.
            </summary>
            <param name="oActiveEntity">BusinessObject that is a IJNameRuleAE object.</param>
            <returns>Boolean indicating whether NameRuleAE is frozen.</returns>
            <exception cref="T:System.ArgumentNullException">oActiveEntity is null.</exception>
            <exception cref="T:System.ArgumentException">oActiveEntity is not IJNameRuleAE.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleBase.SetFrozen(Ingr.SP3D.Common.Middle.BusinessObject,System.Boolean)">
            <summary>
            Sets the Frozen property value on IJNameRuleAE interface.
            </summary>
            <param name="oActiveEntity">BusinessObject that is a IJNameRuleAE object.</param>
            <param name="bFrozen">Boolean value to be set on Frozen property of IJNameRuleAE interface.</param>
            <exception cref="T:System.ArgumentNullException">oActiveEntity is null.</exception>
            <exception cref="T:System.ArgumentException">oActiveEntity is not IJNameRuleAE.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnLoadNameRuleAssemblyException">
            <summary>
            This exception is thrown if calling .NET's Assembly.LoadFrom raises an exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnLoadNameRuleAssemblyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetNameRuleTypeException">
            <summary>
            This exception is thrown if calling .NET's Assembly.GetType returns a null type.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetNameRuleTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetNameRuleTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNameRuleBaseSubClassedTypeException">
            <summary>
            This exception is thrown if calling .NET's Activator.CreateInstance raises an exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNameRuleBaseSubClassedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNotNameRuleException">
            <summary>
            This exception is thrown if the class instantiated using SolverProgId is not a NameRule class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNotNameRuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetCountAndLocationIDException">
            <summary>
            This exception is thrown if the user range >= 100 (COMPLUSSERVERRANGE).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetCountAndLocationIDException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetCountAndLocationIDException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider">
             <summary>
             This is a static class which provides common services. Since the class is static, it acts as a singleton.
             </summary>
             <example>This is an example for MiddleServiceProvider class methods and properties.
             <code>
             Public Class MiddleServiceProvider
               Public Sub New()
            
                'Getting SiteManager from MiddleServiceProvider. 
                Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
            
                'Getting TransactionManager service from MiddleServiceProvider.
                Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                'Getting UOMManager service from MiddleServiceProvider.
                Dim oUOMMgr As UOMManager = MiddleServiceProvider.UOMMgr
            
                'Getting the error log service from MiddleServiceProvider.
                Dim oLogError As LogError = MiddleServiceProvider.ErrorLogger
            
                'Calling Cleanup method on MiddleServiceProvider.
                'This method should be called before closing the client application. 
                MiddleServiceProvider.Cleanup()
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.Cleanup">
            <summary>
            Cleans up references. This should be called from clients before shutting down the application. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.SetUOMMiddle(UnitsOfMeasureServicesLib.IJUomVBInterface)">
            <summary>
            Internal method that will set the UOMManager. 
            </summary>
            <param name="oUOM">UOM service obtained from CommonClient via SP3DNetServiceProvider via COM UOM Service.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.GetSP3dToSomMapEntry(System.String)">
            <summary>
            Gets an SP3dToSomMapEntry for ClassId.
            </summary>
            <param name="sClassId">ClassID</param>
            <returns>SP3dToSomMapEntry</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read-access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.IsSiteManagerInitialized">
            <summary>
            Gets a bool indicating if SiteManager is initialized.
            </summary>
            <remarks>For internal use only!!!</remarks>
            <returns></returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.SiteMgr">
            <summary>
            The SiteManager object maintains a list of known sites, which essentially correspond to known database servers. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.TransactionMgr">
            <summary>
            Commits, aborts, and computes. This provides a convenient way for stand-alone,
            non-client tier applications to commit their changes.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.TransientObjectService">
            <summary>
            Gets the transient object service that facilitates creation or maintenance of 
            BusinessObject and PrivateBusinessObject wrappers for transient COM objects.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.TransientSketchObjectService">
            <summary>
            Gets the transient sketch object service that facilitates creation and maintenance of
            SketchPoint, PointFeature and CurveFeature wrappers.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.UOMMgr">
            <summary>
            A UOM (Units of Measure) management service.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.ErrorLogger">
            <summary>
            An error logging service.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MiddleServiceProvider.Sketch2dApplication">
            <summary>
            Get Sketch2d Application
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.TransientObjectService">
            <summary>
            TransientObjectService allows creation or maintenance of BusinessObject and 
            PrivateBusinessObject wrappers for transient COM objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientObjectService.CreateBusinessObject(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Creates a BusinessObject wrapper for a PrivateBusinessObject that corresponds to 
            a transient COM object.
            </summary>
            <param name="oPrivateBusinessObject">PrivateBusinessObject that corresponds to a transient COM object.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject</returns>
            <exception cref="T:System.ArgumentNullException">oPrivateBusinessObject cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientObjectService.CreatePrivateBusinessObject(IMSEntitySupport.IJDObject)">
            <summary>
            Creates a PrivateBusinessObject wrapper that corresponds to a transient COM object.
            </summary>
            <param name="oIJDObjectTransient">Transient COM object as IJDObject.</param>
            <returns>Ingr.SP3D.Common.Middle.PrivateBusinessObject</returns>
            <exception cref="T:System.ArgumentNullException">oIJDObjectTransient cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientObjectService.GetClsid(IMSEntitySupport.IJDObject)">
            <summary>
            Gets the class ID of the given COM object.
            </summary>
            <param name="oIJDObject">COM object as IJDObject.</param>
            <returns>Class ID as System.string.</returns>
            <exception cref="T:System.ArgumentNullException">oIJDObject cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIPersistGetClassIdException">An exception occured while calling GetClassID method on IPersist interface.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientObjectService.CleanUp">
            <summary>
            Releases references from internal cache.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientObjectService.GetBusinessObject(System.Object)">
            <summary>
            Gets a BusinessObject that corresponds to the transient COM object passed in.
            </summary>
            <param name="oJObject">Transient COM object as IMSEntitySupport.IJDObject.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientObjectService.GetBusinessObject(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Gets a BusinessObject that corresponds to the PrivateBusinessObject passed in.
            </summary>
            <param name="oPrivateBusinessObject">PrivateBusinessObject that corresponds to a transient COM object.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oPrivateBusinessObject cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientObjectService.GetPrivateBusinessObject(System.Object)">
            <summary>
            Gets a PrivateBusinessObject that corresponds to the IJDObject passed in.
            </summary>
            <param name="oJObject">COM object as IJDObject.</param>
            <returns>Ingr.SP3D.Common.Middle.PrivateBusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oJObject cannot be null.</exception>
            <exception cref="T:System.ArgumentException">oJObject is not of IJDObject type.</exception>        
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService">
            <summary>
            TransientSketchObjectCache allows creation and maintenance of Sketch objects
            such as SketchPoint, PointFeature and CurveFeature wrappers.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.CreateCurveFeature(SP3DPIA.TransientEntities.IJDLineFeature)">
            <summary>
            Creates a CurveFeature wrapper that corresponds to IJDLineFeature passed in.
            </summary>
            <param name="oIJDLineFeature">Transient CurveFeature object as oIJDLineFeature.</param>
            <returns>Ingr.SP3D.Common.Middle.CurveFeature.</returns>
            <exception cref="T:System.ArgumentNullException">oIJDLineFeature cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.CreatePointFeature(SP3DPIA.TransientEntities.IJDPointFeature,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Creates a PointFeature wrapper that corresponds to IJDPointFeature passed in.
            </summary>
            <param name="oIJDPointFeature">Transient PointFeature object as IJDPointFeature.</param>
            <param name="oSketchPoint">SketchPoint to which the point feature is associated.</param>
            <returns>Ingr.SP3D.Common.Middle.PointFeature.</returns>
            <exception cref="T:System.ArgumentNullException">oIJDPointFeature cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">oSketchPoint cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.AddToCache(Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Adds the specified sketch point object to transient sketch object cache indexed by its COM CachedPoint.
            For internal use only. To be called from SketchPoint constructors that create a CachedPoint object.
            </summary>
            <param name="oSketchPoint">SketchPoint to be added to transient sketch object cache.</param>
            <exception cref="T:System.ArgumentNullException">oSketchPoint cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketchPointWithoutCachedPointException">SketchPoint does not have a CachedPoint. Every sketch point must have a cached point.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.Cleanup">
            <summary>
            Clears transient sketch object cache.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.GetCurveFeature(SP3DPIA.TransientEntities.IJDLineFeature)">
            <summary>
            Gets a curve feature wrapper for the specified COM IJDLineFeature object. If one exists 
            in cache, it is returned else a wrapper is create and returned.
            </summary>
            <param name="oIJDLineFeature">COM IJDLineFeature for which a CurveFeature wrapper is required.</param>
            <returns>CurveFeature</returns>
            <exception cref="T:System.ArgumentNullException">oIJDLineFeature cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.GetPointFeature(SP3DPIA.TransientEntities.IJDPointFeature,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Gets a point feature wrapper for the specified COM IJDPointFeature object. If one exists 
            in cache, it is returned else a wrapper is create and returned.
            </summary>
            <param name="oIJDPointFeature">COM oIJDPointFeature for which a PointFeature wrapper is required.</param>
            <param name="oSketchPoint">SketchPoint with which the new PointFeature must be associated with.</param>
            <returns>PointFeature.</returns>
            <exception cref="T:System.ArgumentNullException">oIJDPointFeature cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">oSketchPoint cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.GetSketchPoint(SP3DPIA.TransientEntities.CachedPoint)">
            <summary>
            Gets a sketch point wrapper for the specified COM cached point object. If one exists 
            in cache, it is returned else a wrapper is create and returned.
            </summary>
            <param name="oCachedPoint">COM CachedPoint for which a SketchPoint wrapper is required.</param>
            <returns>SketchPoint</returns>
            <exception cref="T:System.ArgumentNullException">oCachedPoint cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.RemoveFromCache(Ingr.SP3D.Common.Middle.CurveFeature)">
            <summary>
            Removes a CurveFeature from transient sketch object cache.
            </summary>
            <param name="oCurveFeature">Curve feature to be removed from transient sketch object cache.</param>
            <returns>System.bool. True is CurveFeature was removed. False if CurveFeature was not found in the cache.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.RemoveFromCache(Ingr.SP3D.Common.Middle.PointFeature)">
            <summary>
            Removes a PointFeature from transient sketch object cache.
            </summary>
            <param name="oPointFeature">Point feature to be removed from transient sketch object cache.</param>
            <returns>System.bool. True is CurveFeature was removed. False if CurveFeature was not found in the cache.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransientSketchObjectService.RemoveFromCache(Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Removes a SketchPoint from transient sketch object cache.
            </summary>
            <param name="oSketchPoint">Sketch point to be removed from transient sketch object cache.</param>
            <returns>System.bool. True is SketchPoint was removed. False if SketchPoint was not found in the cache.</returns>
            <exception cref="T:System.ArgumentNullException">oSketchPoint cannot be null.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Sketch2d">
            <summary>
            This class in only used internally to initialize 2d Applet
            Caller is only exposed to MiddleTierServiceProvider.Sketch2dApplication
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Sketch2d.AddRADToPath(System.String)">
            <summary>
            Adds RAD Directory to Search Path.
            </summary>
            <param name="sAppName"></param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ICircle">
            <summary>
            Interface definition for ICircle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICircle.Circumference">
            <summary>
            Gets or sets this circle's circumference.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICircle.Center">
            <summary>
            Gets or sets the center.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICircle.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICircle.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Circle3d">
             <summary>
             Circle3d class definition. 
             </summary>
             <example> This is an example for Circle3d methods and properties.
             <code> 
             Public Class Circle3d
              Public Sub New()
            
                Dim oCircle As Circle3d = Nothing
                'Create a 1m radius circle centered about 1,0,0. 
                Dim vZero As New Vector(0, 0, 0)
                Dim pZero As New Position(0, 0, 0)
                Dim pTwo As New Position(2, 2, 2)
                Dim oP1 As New Position(0, 0, 0)
                Dim oP2 As New Position(0.2929, 0.7071, 0)
                Dim oP3 As New Position(1, 1, 0)
            
                oCircle = New Circle3d(oP1, oP2, oP3)
                If oCircle Is Nothing Then
                    SOMUtils.LogResults("Failed to create a Circle3d.")
            
                End If
            
                'Get the center of the circle.
                Dim pPOS As New Position(0, 0, 0)
                 
                pPOS = oCircle.Center
                If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                    SOMUtils.LogResults("Circle center not returned.")
            
                End If
                Dim pPOS1 As New Position(0, 0, 0)
                
                oCircle.Center = pPOS1
                If SOMUtils.AreTheyEqual(oCircle.Center, pZero) Then
                    oCircle.Center = pPOS
                Else
                    SOMUtils.LogResults("Circle center not returned.")
            
                End If
            
                'Get the circumference of the circle
                Dim dDBL As Double = 0
                
                dDBL = oCircle.Circumference
                If dDBL = 0 Then
                    SOMUtils.LogResults("Circle circumference failed.")
            
                End If
            
                'Get the normal of the circle.
                Dim vVEC As New Vector(0, 0, 0)
                
                vVEC = oCircle.Normal
                If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                    SOMUtils.LogResults("Circle normal failed.")
            
                End If
                Dim vVEC1 As New Vector(0, 0, 1)
                 
                oCircle.Normal = vVEC1
                If SOMUtils.AreTheyEqual(oCircle.Normal, vVEC1) Then
                    'Reset back to original. 
                    oCircle.Normal = vVEC
                Else
                    SOMUtils.LogResults("Circle normal set failed.")
            
                End If
            
                ‘Get the radius of the circle.
                dDBL = 0
                
                dDBL = oCircle.Radius
                If SOMUtils.AreTheyEqual(dDBL, 0) Then
                    SOMUtils.LogResults("Circle radius failed.")
            
                End If
                
                ‘Set the radius of the circle.
                oCircle.Radius = 1.5
                If SOMUtils.AreTheyEqual(oCircle.Radius, 1.5) Then
                    'Reset radius. 
                    oCircle.Radius = dDBL
                Else
                    SOMUtils.LogResults("Set Circle radius failed.")
            
                End If
            
                'Get the range of the circle.
                Dim rRNG As New RangeBox(oP2, oP2)
                rRNG = oCircle.Range
                If SOMUtils.AreTheyEqual(rRNG.Low, rRNG.High) Then
                    SOMUtils.LogResults("Circle range failed.")
            
                End If
            
                'Get the transform of the circle.
                Dim mMat4 As New Matrix4X4()
                mMat4.SetIdentity()
                vVEC = New Vector(1, 1, 1)
                mMat4.Translate(vVEC)
                oCircle.Transform(mMat4)
                'Get the start point and check to see it’s still 0,0,0. 
                pPOS = pTwo
                pPOS = oCircle.Center
                If SOMUtils.AreTheyEqual(pPOS, pTwo) Then
                    SOMUtils.LogResults("Circle transform failed.")
            
                End If
            
                'Define by three points.
                oP1.[Set](0, 0, 1)
                oP2.[Set](2, 2, 1)
                oP3.[Set](4, 0, 1)
                oCircle.DefineBy3Points(oP1, oP2, oP3)
                oP2.[Set](2, 0, 1)
                'Change and check new position. 
                If Not SOMUtils.AreTheyEqual(oCircle.Center, oP2) OrElse Not SOMUtils.AreTheyEqual(oCircle.Radius, 2) Then
                    SOMUtils.LogResults("Circle start, middle, and end failed.")
            
                End If
            
                'Define by center normal radius. 
                oP1.[Set](1, 0, 2)
                dDBL = 3
                vVEC = New Vector(0, 0, 1)
                oCircle.DefineByCenterNormalRadius(oP1, vVEC, dDBL)
                If Not SOMUtils.AreTheyEqual(oCircle.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oCircle.Radius, dDBL) Then
                    SOMUtils.LogResults("Circle center, normal, radius failed.")
            
                End If
            
                oP1.[Set](1, 1, 0)
                dDBL = 2
                Dim oCircle1 As New Circle3d(oP1, vVEC, dDBL)
                oCircle1.[Set](oCircle)
                If Not SOMUtils.AreTheyEqual(oCircle.Center, oCircle1.Center) OrElse Not SOMUtils.AreTheyEqual(oCircle.Radius, oCircle1.Radius) Then
                    SOMUtils.LogResults("Circle set failed.")
            
                Else
                    oCircle1.Delete()
                End If
            
                'Construct from another circle.
                oCircle1 = New Circle3d(oCircle)
                If Not SOMUtils.AreTheyEqual(oCircle1.Center, oCircle.Center) OrElse Not SOMUtils.AreTheyEqual(oCircle1.Radius, oCircle.Radius) Then
                    SOMUtils.LogResults("Construct circle from circle failed.")
            
                Else
                    oCircle1.Delete()
                End If
            
                oP1.[Set](1, 0, 0)
                dDBL = 2
                oCircle1 = New Circle3d(oP1, vVEC, dDBL)
                If Not SOMUtils.AreTheyEqual(oCircle1.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oCircle1.Radius, dDBL) Then
                    SOMUtils.LogResults("Construct circle by center, normal, start, end, failed.")
            
                Else
                    oCircle1.Delete()
                End If
            
                oP1.[Set](1, 0, 1)
                Dim oConn As SP3DConnection
                oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                oCircle1 = New Circle3d(oConn, oP1, vVEC, dDBL)
                If Not SOMUtils.AreTheyEqual(oCircle1.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oCircle1.Radius, dDBL) Then
                    SOMUtils.LogResults("Construct circle by connection, center, normal, and radius failed.")
            
                Else
                    oCircle1.Delete()
                End If
            
                oP1.[Set](0, 0, 1)
                oP2.[Set](0.2929, 0.7071, 1)
                oP3.[Set](2, 0, 1)
                oCircle1 = New Circle3d(oConn, oP1, oP2, oP3)
                oP1.[Set](1, 0, 1)
                'Change and check new position. 
                If Not SOMUtils.AreTheyEqual(oCircle1.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oCircle1.Radius, 1) Then
                    SOMUtils.LogResults("Construct circle by connection, start, mid, end, failed.")
            
                Else
                    oCircle1.Delete()
                End If
            
                'Delete original circle. 
                oCircle.Delete()
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Circle3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.#ctor(Ingr.SP3D.Common.Middle.Circle3d)">
            <summary>
            Constructor used to copy an existing Circled3d.
            </summary>
            <param name="oCircle">A Circle3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oCircle cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterNormalRadius exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor to create a persistent circle given 3 points on the circle.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posPt1">First position.</param>
            <param name="posPt2">Second position.</param>
            <param name="posPt3">Third position.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt1 cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt2 cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt3 cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy3Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor to create a transient circle given 3 points on the circle.
            </summary>
            <param name="posPt1">First position.</param>
            <param name="posPt2">Second position.</param>
            <param name="posPt3">Third position.</param>
            <exception cref="T:System.ArgumentNullException">posPt1 cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt2 cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt3 cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy3Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Constructor to create a persistent Circle3d.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posCenter">Position center.</param>
            <param name="vecNorm">Vector normal.</param>
            <param name="Radius">Radius as double</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterNormalRadius exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Constructor to create a transient Circle3d.
            </summary>
            <param name="posCenter">Center position.</param>
            <param name="vecNorm">Normal vector.</param>
            <param name="Radius">Radius as double.</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterNormalRadius exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.Set(Ingr.SP3D.Common.Middle.Circle3d)">
            <summary>
            Sets this circle equal to an existing circle.
            </summary>
            <param name="oCircle3d">Existing Circle3d object.</param>
            <exception cref="T:System.ArgumentNullException">oArc3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.DefineBy3Points(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Redefines this circle given 3 points on the circle.
            </summary>
            <param name="posPt1">First position.</param>
            <param name="posPt2">Second position.</param>
            <param name="posPt3">Third position.</param>
            <exception cref="T:System.ArgumentNullException">posPt1 cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt2 cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt3 cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineBy3Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.DefineByCenterNormalRadius(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Redefines this circle.
            </summary>
            <param name="posCenter">Center position.</param>
            <param name="vecNorm">Normal vector.</param>
            <param name="Radius">Radius as double.</param>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Radius cannot be less than or equal to 0.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByCenterNormalRadius exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Circle3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this circle by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Circle3d.Circumference">
            <summary>
            Gets or sets this circle's circumference.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Circle3d.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Circle3d.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Circle3d.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Circle3d.Range">
            <summary>
            Finds the range box of this circle.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CacheOptionType">
            <summary>
            Enumerator for the caching options available for a symbol.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CacheOptionType.Automatic">
            <summary>
            Automatic option type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CacheOptionType.Cached">
            <summary>
            Cached option type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CacheOptionType.NonCached">
            <summary>
            Non Cached option type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputType">
            <summary>
            Enumerator defining the symbol input parameter type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.InputType.CatalogPart">
            <summary>
            Catalog part input type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.InputType.Double">
            <summary>
            Double input type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.InputType.Object">
            <summary>
            Object input type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.InputType.String">
            <summary>
            String input type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AspectID">
            <summary>
            Enumerator defining the pre-defined aspects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AspectID.SimplePhysical">
            <summary>
            Simple Physical
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AspectID.DetailedPhysical">
            <summary>
            Detailed Physical
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AspectID.Insulation">
            <summary>
            Insulation
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AspectID.Operation">
            <summary>
            Operation
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AspectID.Maintenance">
            <summary>
            Maintenance
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AspectID.ReferenceGeometry">
            <summary>
            Reference Geometry
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AspectID.Centerline">
            <summary>
            Center line
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputDoubleAttribute">
             <summary>
             Attribute defined on an InputDouble field in a user CustomSymbolDefinition class to declare
             the field as a double input parameter. This attribute is required for bulkload to recognize
             an InputDouble field variable as a double parameter input.
             </summary>
             <example> This is an example of using InputDoubleAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 <![CDATA[<]]>InputDouble(2, "ImpellerWidth", "Impeller Width", 0.3)<![CDATA[>]]> _
                     Public m_dblImpellerWidth As InputDouble
            
             End Class
            
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputDoubleAttribute.#ctor(System.Int32,System.String,System.String,System.Double)">
            <summary>
            Constructor for the InputDoubleAttribute that declares an InputDouble field as a
            required input parameter.
            </summary>
            <param name="index">Index of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="name">Name of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="description">Description of the input parameter.</param>
            <param name="defaultValue">Default parameter value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputDoubleAttribute.#ctor(System.Int32,System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Constructor for the InputDoubleAttribute that can declare an InputDouble field as an
            optional input parameter.
            </summary>
            <param name="index">Index of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="name">Name of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="description">Description of the input parameter.</param>
            <param name="defaultValue">Default parameter value.</param>
            <param name="optional">Boolean to indicate whether the input parameter is optional.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputDoubleAttribute.Index">
            <summary>
            Gets the input parameter index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputDoubleAttribute.Name">
            <summary>
            Gets the input parameter name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputDoubleAttribute.Description">
            <summary>
            Gets the input parameter description.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputDoubleAttribute.DefaultValue">
            <summary>
            Gets the default parameter value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputDoubleAttribute.Optional">
            <summary>
            Returns whether the input parameter is optional.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputStringAttribute">
             <summary>
             Attribute defined on an InputString field in a user CustomSymbolDefinition class to declare
             the field as a string input parameter. This attribute is required for bulkload to recognize
             an InputString field variable as a string parameter input.
             </summary>
             <example> This is an example of using InputStringAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 <![CDATA[<]]>InputString(10, "GroutSPSMaterial", "Grout Material", "Grout")<![CDATA[>]]> _
                     Public m_sGroutMaterial As InputString
            
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputStringAttribute.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructor for the InputStringAttribute that declares an InputString field as a
            required input parameter.
            </summary>
            <param name="index">Index of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="name">Name of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="description">Description of the input parameter.</param>
            <param name="defaultString">Default parameter value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputStringAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor for the InputStringAttribute that can declare an InputString field as an
            optional input parameter.
            </summary>
            <param name="index">Index of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="name">Name of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="description">Description of the input parameter.</param>
            <param name="defaultString">Default parameter value.</param>
            <param name="optional">Boolean to indicate whether the input parameter is optional.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputStringAttribute.Index">
            <summary>
            Gets the input parameter index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputStringAttribute.Name">
            <summary>
            Gets the input parameter name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputStringAttribute.Description">
            <summary>
            Gets the input parameter index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputStringAttribute.DefaultString">
            <summary>
            Gets the input parameter default string.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputStringAttribute.Optional">
            <summary>
            Returns a boolean to indicate whether the input parameter is optional.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputCatalogPartAttribute">
             <summary>
             Attribute defined on the InputCatalogPart field in a user CustomSymbolDefinition class to declare
             the field as the catalog part input parameter. This attribute is required for bulkload to recognize
             an InputCatalogPart field variable as a part parameter input.
             </summary>
             <example> This is an example of using InputCatalogPartAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 <![CDATA[<]]>InputCatalogPart(1)<![CDATA[>]]> _
                    Public m_oCatalogPart As InputCatalogPart
            
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputCatalogPartAttribute.#ctor(System.Int32)">
            <summary>
            Constructor for the InputCatalogPartAttribute that declares an InputCatalogPart field as a
            required input parameter.
            </summary>
            <param name="index">Index of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputCatalogPartAttribute.Index">
            <summary>
            Gets the input parameter index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputCatalogPartAttribute.Name">
            <summary>
            Gets the input parameter name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputCatalogPartAttribute.Description">
            <summary>
            Gets the input parameter description.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputObjectAttribute">
             <summary>
             Attribute defined on a InputObject field in a user CustomSymbolDefinition class to declare
             the field as an object input parameter. This attribute is required for bulkload to recognize
             an InputObject field variable as an object parameter input.
             </summary>
             <example> This is an example of using InputObjectAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 <![CDATA[<]]>InputObject(2, "SupportingPlane", "Supporting Plane"<![CDATA[>]]> _
                     Public m_oSupportingPlane as InputObject
            
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputObjectAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor for the InputObjectAttribute that declares an InputObject field as a
            required input parameter.
            </summary>
            <param name="index">Index of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="name">Name of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="description">Description of the input parameter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputObjectAttribute.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Constructor for the InputObjectAttribute that can declare an InputObject field as an
            optional input parameter.
            </summary>
            <param name="index">Index of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="name">Name of the input parameter (must be unique for all input parameters in a CustomSymbolDefinition class).</param>
            <param name="description">Description of the input parameter.</param>
            <param name="optional">Boolean to indicate whether the input parameter is optional.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputObjectAttribute.Index">
            <summary>
            Gets the input parameter index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputObjectAttribute.Name">
            <summary>
            Gets the input parameter name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputObjectAttribute.Description">
            <summary>
            Gets the input parameter description.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputObjectAttribute.Optional">
            <summary>
            Gets the boolean that indicates whether the object input parameter is required.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AspectAttribute">
             <summary>
             Attribute defined on a AspectDefinition field in a user CustomSymbolDefinition class to declare
             the field as a symbol aspect. This attribute is required for bulkload to recognize
             an AspectDefinition field variable as a symbol aspect.
             </summary>
             <example> This is an example of using AspectAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 'SimplePhysical Aspect
                 <![CDATA[<]]>SymbolOutput("Grout", "Grout Geometry")<![CDATA[>]]> _
                 <![CDATA[<]]>Aspect("SimplePhysical", "Simple Physical Aspect", AspectID.SimplePhysical)<![CDATA[>]]> _
                     Public m_oSimplePhysicalAspect As AspectDefinition
            
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectAttribute.#ctor(System.String,System.String,Ingr.SP3D.Common.Middle.AspectID)">
            <summary>
            Constructor for an AspectAttribute class to declare an AspectDefinition class as a pre-defined symbol aspect.
            </summary>
            <param name="aspectName">Aspect name.</param>
            <param name="description">Description of the aspect.</param>
            <param name="aspectID">Enumerator value identifying the aspect type (i.e., "Simple Physical").</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor for an AspectAttribute class to declare an AspectDefinition class with a new aspect not provided
            by the pre-defined ones.
            </summary>
            <param name="aspectName">Aspect name</param>
            <param name="description">Description of the aspect.</param>
            <param name="aspectID">ID for the new aspect.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectAttribute.Name">
            <summary>
            Gets the name of the aspect.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectAttribute.Description">
            <summary>
            Gets the description of the aspect.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectAttribute.AspectID">
            <summary>
            Gets the ID of the aspect.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SymbolOutputAttribute">
             <summary>
             Attribute defined on a AspectDefinition field in a user CustomSymbolDefinition class to declare
             outputs for a symbol aspect. This attribute is required for bulkload to recognize
             an AspectDefinition field has symbol outputs.
             </summary>
             <example> This is an example of using SymbolOutputAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 'SimplePhysical Aspect has three outputs: slab geometry, pier geometry and grout geometry. 
                 <![CDATA[<]]>SymbolOutput("Slab", "Slab Geometry")<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Pier", "Pier Geometry")<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Grout", "Grout Geometry")<![CDATA[>]]> _
                 <![CDATA[<]]>Aspect("SimplePhysical", "Simple Physical Aspect", AspectID.SimplePhysical)<![CDATA[>]]> _
                     Public m_oSimplePhysicalAspect As AspectDefinition
            
             End Class
             
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOutputAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor for a SymbolOutputAttribute class to declare an output on an Aspect class.
            </summary>
            <param name="name">Symbol output name.</param>
            <param name="description">Symbol output description.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolOutputAttribute.Name">
            <summary>
            Gets the symbol output name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolOutputAttribute.Description">
            <summary>
            Gets the symbol output description.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CacheOptionAttribute">
             <summary>
             Attribute defined on a CustomSymbolDefinition class defining the caching behavior
             of the symbol.
             </summary>
             <example> This is an example of using CacheOptionAttribute.
             <code>
             
             <![CDATA[<]]>CacheOption(CacheOptionType.Cached)<![CDATA[>]]> _
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 'Custom Symbol Definition code 
            
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CacheOptionAttribute.#ctor(Ingr.SP3D.Common.Middle.CacheOptionType)">
            <summary>
            Constructor for the CacheOptionAttribute declaring the caching behavior of the symbol.
            </summary>
            <param name="CacheOption">Value indicating the caching behavior (i.e., cached or non-cached).
            Note in some instances the cache behavior will be forced to non-cached when the
            defined symbol has declared InputObject parameters.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CacheOptionAttribute.CacheOption">
            <summary>
            Gets the symbol cache option.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.VariableOutputsAttribute">
             <summary>
             Attribute defined on a CustomSymbolDefinition class defining that the symbol has variable outputs.
             </summary>
             <example> This is an example of using VariableOutputAttribute.
             <code>
             
             <![CDATA[<]]>VariableOutputs()<![CDATA[>]]> _
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 'Custom Symbol Definition code 
            
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.VariableOutputsAttribute.#ctor">
            <summary>
            Constructor for a VariableOutputsAttribute declaring that a symbol has variable outputs.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AspectDefinition">
             <summary>
             Class used to define aspects of a symbol by declaring field variables of this type with a
             defining AspectAttribute which provides the aspect information (name, description, and
             aspect type). This object gets constructed automatically when it has a defining AspectAttribute.
             </summary>
             <example> This is an example of using AspectDefinition.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                <![CDATA[<]]>SymbolOutput("Pier, "Pier Geometry")<![CDATA[>]]> _
                <![CDATA[<]]>Aspect("SimplePhysical", "Simple Physical Aspect", AspectID.SimplePhysical)<![CDATA[>]]> _
                    Public m_oSimplePhysicalAspect As AspectDefinition
            
                Protected Overrides Sub ConstructOutputs()
                    '========================================
                    ' Construction of Simple Physical Aspect
                    '========================================
                    Dim oConnection As SP3DConnection = OccurrenceConnection
            
                    'Adding the created geometry to the SimplePhysical aspect  
                    m_oSimplePhysicalAspect.Outputs("Pier") = New Projection3d(oConnection, New Circle3d(New Position(0, 0, 0), New Vector(0, 0, 1), 2.0), New Vector(1, 0, 0), 5.0, True)
                End Sub
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.#ctor">
            <summary>
            Default constructor for the AspectDefinition class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor for an AspectDefinition class given the aspect data.
            </summary>
            <param name="aspectName"> Name of the aspect.</param>
            <param name="aspectDescription"> Description of the aspect.</param>
            <param name="aspectID"> ID of the aspect. </param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.AddOutputObject(System.String,System.Object)">
            <summary>
            Adds output object to output object collection of CustomSymbolDefinition.
            This is an internal mathod. This is called by OutputDictionary when a new output is added.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.ClearOutputs">
            <summary>
            Clears output dictionary that holds output objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.RemoveAllOutputDefinitions">
            <summary>
            Removes all output definitions of this aspect. Usually this methid is called
            when the symbol is of VariableOutput type and output defintions are generated at runtime.
            Probably a new class called VaraibleAspectDefinition needs to be created to support
            RemoveAllOutputDefinitions and expose it the user. Currently being made private.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.AddOutputDefinition(Ingr.SP3D.Common.Middle.OutputDefinition)">
            <summary>
            Adds an output definition to this aspect. Usually this methid is called
            when the symbol is of VariableOutput type and output defintions are generated at runtime.
            Probably a new class called VaraibleAspectDefinition needs to be created to support
            AddOutputDefinition and expose it the user. Currently being made private.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.ConstructOutputs">
            <summary>
            The symbol definition's overrideable method for constructing the outputs for each aspect.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.SetAspectInfo(System.String,System.String,System.Int32)">
            <summary>
            Sets the aspect information by name, description, and ID.
            </summary>
            <param name="aspectName"> Name of the aspect.</param>
            <param name="aspectDescription"> Description of the aspect.</param>
            <param name="aspectID"> ID of the aspect. </param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AspectDefinition.GetAspectInfo(System.String@,System.String@,System.Int32@)">
            <summary>
            Returns the name, description, and ID values for the aspect.
            </summary>
            <param name="aspectName">Name of the aspect.</param>
            <param name="aspectDescription">Description of the aspect.</param>
            <param name="aspectID">ID of the aspect. </param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectDefinition.RepDuringGame">
            <summary>
            Sets the representation during game. This is the COM representation that is being computed.
            The method is used by CustomSymbolDefinition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectDefinition.VariableOutputs">
            <summary>
            Sets or gets VaraibleOutputs flag.
            true : The aspect has variable outputs.
            false : The aspect doesn't have variable outputs.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectDefinition.CustomDefinition">
            <summary>
            Gets ot sets CustomSymbolDefinition object to which this aspect belongs.
            This property is set by CustomSymbolDefinition during InvokeRepresentation.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectDefinition.AspectNameFromRepDuringGame">
            <summary>
            Gets name from Representation during game. This should be same as name of the aspect.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectDefinition.Outputs">
            <summary>
            Returns the collection of declared outputs, which is indexed by the name of the outputs
            declared as defining SymbolOutputs on the AspectDefinition field.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AspectDefinition.Name">
            <summary>
            Gets the name of the aspect.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.OutputDictionary">
            <summary>
            Dictionary object used by the AspectDefinition so outputs of an
            aspect can be added via the format:
            m_oPhysicalAspect.Outputs["OutputName"] = oOutputObject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDictionary.#ctor(Ingr.SP3D.Common.Middle.AspectDefinition)">
            <summary>
            Constructor that takes in an aspect definition.
            </summary>
            <param name="aspectDef"> AspectDefinition for which this dictionary is being created.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDictionary.Finalize">
            <summary>
            Destructor of OutputDictionary.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an output to the dictionary given the output name as the key.
            </summary>
            <param name="outputName"> Name of the Output. This is used as key.</param>
            <param name="output"> Output object to be added to the dictionary.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OutputDictionary.Contains(System.String)">
            <summary>
            Checks whether the dictionary contains the given symbol output name.
            </summary>
            <param name="outputName">Name of the output which is the key into the dictionary.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.OutputDictionary.Item(System.String)">
            <summary>
            Gets or sets the symbol output based on the declared name of the symbol output.
            </summary>
            <param name="outputName">Name of the symbol output which is the key into the dictionary.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ComponentOcc">
            <summary>
            .NET wrapper class for COM component occurrence business object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ILocalCoordinateSystem">
            <summary>
            Interface ILocalCoordinateSystem definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILocalCoordinateSystem.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the local coordinate system.
            </summary>
            <param name="xAxis">Required X-axis of the local coordinate system.</param>
            <param name="yAxis">Required Y-axis of the local coordinate system.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILocalCoordinateSystem.Origin">
            <summary>
            Gets or sets the origin of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILocalCoordinateSystem.XAxis">
            <summary>
            Gets the X-axis of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILocalCoordinateSystem.YAxis">
            <summary>
            Gets the Y-axis of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILocalCoordinateSystem.ZAxis">
            <summary>
            Gets the Z-axis of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILocalCoordinateSystem.Matrix">
            <summary>
            Gets or sets the transformation matrix of local coordinate system.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComponentOcc.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
             <summary>
             Constructor for .NET to access this class.
             </summary>
             <param name="oPBO">PrivateBusinessObject</param>
             <example> This is an example for ComponentOcc class methods and properties.
            <code>
             Public Class ComponentOcc
               Public Sub New()
            
                 'Creating a component occurrence. 
                 'Get the catalog connection.  
                 Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                 Dim oPlantModel As Plant = oSiteMgr.ActiveSite.ActivePlant
                 Dim oCatalog As Catalog = oPlantModel.PlantCatalog
                 Dim oCatConn As SP3DConnection = Nothing
                 oCatConn = oCatalog
            
                 'Get the TransactionManager.
                 Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                 'Get the model connection.  
                 Dim oModel As Model = oPlantModel.PlantModel
                 Dim oRootObj As BusinessObject = DirectCast(oModel.RootSystem, BusinessObject)
                 Dim oModelConn As SP3DConnection = oRootObj.DBConnection
            
                 'Get the catalog part. 
                 Dim oSOMCatalogPart As IPart = Nothing
                 Dim strPartNumber As String = "DIA-2170-BLT-150-31.5in_Op"
                 Dim oCatBaseHlpr As New CatalogBaseHelper(oCatConn)
                 oSOMCatalogPart = oCatBaseHlpr.GetPart(strPartNumber)
            
                 'Calling the component occurrence constructor.
                 Dim oCompOcc As New ComponentOcc(oSOMCatalogPart, oModelConn)
            
                 'Committing the transaction. 
                 oTransactionMgr.Commit("Committing SOMComponentOcc")
            
                 'Getting the component occurrence matrix.
                 Dim oCompOccMatrix As New Matrix4X4()
                 oCompOccMatrix = oCompOcc.Matrix
            
                 'Getting the component occurrence origin.
                 Dim oCompOccOriginPos As New Position()
                 'Calling (set) origin on ComponentOcc.
                 oCompOccOriginPos = oCompOcc.Origin
            
                 'Setting the component occurrence origin.
                 Dim oNewCompOccOriginPos As New Position(1, 1, 1)
                 'Calling (set) origin on ComponentOcc.
                 oCompOcc.Origin = oNewCompOccOriginPos
            
                 'Get the part (catalog) of the component occurrence.
                 Dim oPart As IPart = Nothing
                 oPart = oCompOcc.Part
            
                 'Setting the ComponentOcc matrix. 
                 'Rotating the component by 90 degrees along the X-axis. 
                 Dim oXaxis As New Vector(1, 0, 0)
                 oCompOccMatrix.Rotate(1.5, oXaxis)
                 'Calling (set) matrix property on ComponentOcc.
                 oCompOcc.Matrix = oCompOccMatrix
            
                 'Setting the origin of the ComponentOcc.
                 'Calling (set) origin on ComponentOcc.  
                 Dim oNewCompOccPos As New Position(5, 3, 3)
                 oCompOcc.Origin = oNewCompOccPos
            
                 'Getting the part of the ComponentOcc.
                 'Calling (get) part on ComponentOcc.  
                 strPartNumber = "SVMDV-30.5in_Op"
                 Dim oNewCatPart As IPart = Nothing
                 oNewCatPart = oCatBaseHlpr.GetPart(strPartNumber)
            
                 'Setting a new part on ComponentOcc.
                 'Calling (set) part on ComponentOcc.  
                 oCompOcc.Part = oNewCatPart
            
                 'Committing ComponentOcc so that the new part is persisted. 
                 oTransactionMgr.Commit("Committing new part.")
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComponentOcc.#ctor(Ingr.SP3D.Common.Middle.IPart,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
             <summary>
             Constructs a component occurrence given an existing part.
             </summary>
             <param name="oPart">The part which corresponds to this component.</param>
             <param name="oConnection">The connection in which to create the component occurrence.</param>
             <example> This is an example for ComponentOcc class methods and properties.
             <code>
             Public Class SOMComponentOcc
               Public Sub New()
            
                 'Creating a component occurrence. 
                 'Get the catalog connection.  
                 Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                 Dim oPlantModel As Plant = oSiteMgr.ActiveSite.ActivePlant
                 Dim oCatalog As Catalog = oPlantModel.PlantCatalog
                 Dim oCatConn As SP3DConnection = Nothing
                 oCatConn = oCatalog
            
                 'Get the TransactionManager.
                 Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                 'Get the model connection.  
                 Dim oModel As Model = oPlantModel.PlantModel
                 Dim oRootObj As BusinessObject = DirectCast(oModel.RootSystem, BusinessObject)
                 Dim oModelConn As SP3DConnection = oRootObj.DBConnection
            
                 'Get the catalog part. 
                 Dim oSOMCatalogPart As IPart = Nothing
                 Dim strPartNumber As String = "DIA-2170-BLT-150-31.5in_Op"
                 Dim oCatBaseHlpr As New CatalogBaseHelper(oCatConn)
                 oSOMCatalogPart = oCatBaseHlpr.GetPart(strPartNumber)
            
                 'Calling the component occurrence constructor.
                 Dim oCompOcc As New ComponentOcc(oSOMCatalogPart, oModelConn)
            
                 'Committing the transaction. 
                 oTransactionMgr.Commit("Committing SOMComponentOcc")
            
                 'Getting the component occurrence matrix.
                 Dim oCompOccMatrix As New Matrix4X4()
                 oCompOccMatrix = oCompOcc.Matrix
            
                 'Getting the component occurrence origin.
                 Dim oCompOccOriginPos As New Position()
                 'Calling (set) origin on ComponentOcc.
                 oCompOccOriginPos = oCompOcc.Origin
            
                 'Setting the component occurrence origin.
                 Dim oNewCompOccOriginPos As New Position(1, 1, 1)
                 'Calling (set) origin on ComponentOcc.
                 oCompOcc.Origin = oNewCompOccOriginPos
            
                 'Get the part (catalog) of the component occurrence.
                 Dim oPart As IPart = Nothing
                 oPart = oCompOcc.Part
            
                 'Setting the ComponentOcc matrix. 
                 'Rotating the component by 90 degrees along the X-axis. 
                 Dim oXaxis As New Vector(1, 0, 0)
                 oCompOccMatrix.Rotate(1.5, oXaxis)
                 'Calling (set) matrix property on ComponentOcc.
                 oCompOcc.Matrix = oCompOccMatrix
            
                 'Setting the origin of the ComponentOcc.
                 'Calling (set) origin on ComponentOcc.  
                 Dim oNewCompOccPos As New Position(5, 3, 3)
                 oCompOcc.Origin = oNewCompOccPos
            
                 'Getting the part of the ComponentOcc.
                 'Calling (get) part on ComponentOcc.  
                 strPartNumber = "SVMDV-30.5in_Op"
                 Dim oNewCatPart As IPart = Nothing
                 oNewCatPart = oCatBaseHlpr.GetPart(strPartNumber)
            
                 'Setting a new part on ComponentOcc.
                 'Calling (set) part on ComponentOcc.  
                 oCompOcc.Part = oNewCatPart
            
                 'Committing ComponentOcc so that the new part is persisted. 
                 oTransactionMgr.Commit("Committing new part.")
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComponentOcc.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the component occurence's object.
            </summary>
            <param name="xAxisNew">X-axis of the coordinate system that needs to be set.</param>
            <param name="yAxisNew">Y-axis of the coordinate system that needs to be set.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComponentOcc.Part">
            <summary>
            Gets or sets the part that is used to define the component occurrence.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComponentOcc.XAxis">
            <summary>
            Gets the X-axis of component occurence.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComponentOcc.YAxis">
            <summary>
            Gets the Y-axis of the component occurence.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComponentOcc.ZAxis">
            <summary>
            Gets the Z-axis of the component occurence.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComponentOcc.Origin">
            <summary>
            Gets or sets the origin of the component occurrence.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComponentOcc.Matrix">
            <summary>
            Gets or sets the transformation matrix of the component occurrence.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPersistentCOMBOAlreadyExistsException">
            <summary>
            Raised when a persistent COM object cannot be set if one already exists.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPersistentCOMBOAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the CmnPersistentCOMBOAlreadyExistsException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnTransientCOMBOAlreadyExistsException">
            <summary>
            Raised when a transient COM object cannot be set if one already exists.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnTransientCOMBOAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the CmnTransientCOMBOAlreadyExistsException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnTransientPrivateBOAlreadyExistsException">
            <summary>
            Raised when a transient PrivateBusinessObject cannot be set if one already exists.
            </summary>    
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnTransientPrivateBOAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the CmnTransientPrivateBOAlreadyExistsException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPermissionGroupNotInConnectionException">
            <summary>
            Raised when the passed in permission group object does not belong to the connection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPermissionGroupNotInConnectionException.#ctor">
            <summary>
            Initializes a new instance of the CmnPermissionGroupNotInConnectionException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetPermissionGroupException">
            <summary>
            Raised when a COM exception occurs while setting a value to IJDObject.PermissionGroup property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToSetPermissionGroupException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToSetPermissionGroupException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetPermissionGroupException">
            <summary>
            Raised when a COM exception occurs while getting the value for IJDObject.PermissionGroup property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetPermissionGroupException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToGetPermissionGroupException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetUserClassInfoException">
            <summary>
            This exception is thrown when a COM exception occurs calling IJUserType.get_UserType to 
            retrieve the user class information for a COM business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetUserClassInfoException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToGetUserClassInfoException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIPersistGetClassIdException">
            <summary>
            Raised when a COM exception occurs calling IPersist.GetClassID to  
            get a GUID from a COM business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIPersistGetClassIdException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnIPersistGetClassIdException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoDBConnectionInClassInfoException">
            <summary>
            This exception is thrown when a COM exception occurs calling IJUserType.get_UserType to 
            retrieve the user class information for a COM business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoDBConnectionInClassInfoException.#ctor">
            <summary>
            Initializes a new instance of the CmnNoDBConnectionInClassInfoException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnBusinessObjectDeleteException">
            <summary>
            Raised when a COM exception occurs calling IJDObject.Remove.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnBusinessObjectDeleteException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnBusinessObjectDeleteException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetApprovalReasonException">
            <summary>
            Raised when a COM exception occurs while getting a value from IJDObject.ApprovalReason property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetApprovalReasonException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnGetApprovalReasonException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSetApprovalReasonException">
            <summary>
            Raised when a COM exception occurs while setting a value to IJDObject.ApprovalReason property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSetApprovalReasonException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnSetApprovalReasonException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection">
            <summary>
            Class use to run queries on Oracle
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.#ctor">
            <summary>
            Create an empty connection (not connected to any database)
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.#ctor(System.String,System.String)">
            <summary>
            Create a connection connected to a server and set the session to the schema name.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.TestConnection(System.String,System.String@)">
            <summary>
            Test the the user can connect to the server. 
            Even if successfull, the connection is kept alive after calling that method. 
            </summary>
            <param name="server">The name of the server to test the connection</param>
            <param name="sErrorMessage">If an error, return the error message here</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.OpenOraConnection(System.String,System.String)">
             <summary>
            Open an Oracle connetcion given the server name and schema name 
             </summary>
             <param name="server">The server name to connect to</param>
             <param name="schemaName">The schema name to connect to. If null, default schema for that user</param>
             <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.CloseConnection">
            <summary>
            Close the opened connection
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.ExecuteNonQuery(System.String)">
            <summary>
            Execute a query that does not return a result. 
            For example, execute a query that either insert rows, delete rows, update rows.
            </summary>
            <param name="executeQuery">The sql statement to execute to execute</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.ExecuteSelectQuery(System.String)">
            <summary>
            Execute a query that select values and return the result in a data table
            </summary>
            <param name="selectQuery">The select query string</param>
            <returns>The data table containing the selected rows</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.ExecuteRowCountQuery(System.String)">
            <summary>
            Execute a query returning a count. 
            Such query is "select count(*) from ..."
            </summary>
            <param name="queryRowCount">Any query returning a row count, like "select count(*) from ..."</param>
            <returns>The count return by that query</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.Dispose">
            <summary>
            IDisposable implementation
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.Dispose(System.Boolean)">
            <summary>
            Dispose member
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.Finalize">
            <summary>
            The destructor
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.CommandTimeout">
            <summary>
            The timeout for the command. Default 900s
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection.Connection">
            <summary>
            Return the Oracle connection. Accessible for specific needs
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection">
            <summary>
            Class use to run query on SQL server
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.#ctor">
            <summary>
            Create an empty connection (not connected to any database)
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.#ctor(System.String,System.String)">
            <summary>
            Create a connection connected to the server and database name
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.OpenSQLConnection(System.String,System.String)">
            <summary>
            Open the SQL connection.
            </summary>
            <param name="server">Name of the SQL server.</param>
            <param name="databaseName">Name of the SQL database.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.TestConnection(System.String,System.String@)">
            <summary>
            Test the the user can connect to the server. 
            Even if successfull, the connection is kept alive after calling that method. 
            </summary>
            <param name="server">The name of the server to test the connection</param>
            <param name="sErrorMessage">If an error, return the error message here</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.CloseConnection">
            <summary>
            Close the database connection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.ExecuteNonQuery(System.String)">
            <summary>
            Execute a query that does not return a result
            </summary>
            <param name="executeQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.ExecuteSelectQuery(System.String)">
            <summary>
            Execute a query that return a DataTable
            </summary>
            <param name="selectQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.ExecuteRowCountQuery(System.String)">
            <summary>
            Execute a query returning a count. 
            Such query is "select count(*) from ..."
            </summary>
            <param name="queryRowCount">Any query returning a row count, like "select count(*) from ..."</param>
            <returns>The count return by that query</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.Dispose">
            <summary>
            IDisposable implementation
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.Dispose(System.Boolean)">
            <summary>
            IDisposable implementation
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.Finalize">
            <summary>
            Generic destructor
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.CommandTimeout">
            <summary>
            Timeout for the command, default 900s
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.SQLDBConnection.Connection">
            <summary>
            Return the SQL connection for specific needs
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.OraGuidRawConverter">
            <summary>
            Utility class to convert from Guid to Raw with the byte preserved in the Sp3d order
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OraGuidRawConverter.GuidToOraRaw(System.Guid)">
            <summary>
            From a Guid, return a byte[16] array that can be use for RAW oracle oid inside the database.
            That function insure that the bytes are in expected Sp3d order.
            </summary>
            <param name="inGuid">"GUID to convert to an Oracle Raw"</param>
            <returns>An array of byte containing the RAW format for Oracle</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.OraGuidRawConverter.OraRawToGuid(System.Byte[])">
            <summary>
            From a Guid, return a byte[16] array that can be use for RAW oracle oid inside the database.
            That function insure that the bytes are in expected Sp3d order.
            </summary>
             /// <param name="rawBytes">"RAW data to convert to a GUID"</param>
            <returns>A Guid representation of the raw data</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ILineString">
            <summary>
            Interface definition for ILineString.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILineString.GetPoint(System.Int32,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Gets a particular point.
            </summary>
            <param name="index">Indexing starts at 1.</param>
            <param name="posVertex">Position vertex.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILineString.SetPoint(System.Int32,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Sets a particular point.
            </summary>
            <param name="index">Indexing starts at 1.</param>
            <param name="posVertex">Position vertex.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILineString.InsertPoint(System.Int32,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Inserts a particular point.
            </summary>
            <param name="index">Indexing starts at 1.</param>
            <param name="posVertex">Position vertex.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILineString.AddPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Adds a point to the end.
            </summary>
            <param name="posVertex">Position vertex.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILineString.RemovePoint(System.Int32)">
            <summary>
            Removes a point at a particular index.
            </summary>
            <param name="index">Indexing starts at 1.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILineString.GetPoints(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Gets all the points.
            </summary>
            <param name="colPoints">Collection of Position objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILineString.PointCount">
            <summary>
            Gets this linestring's number of points.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILineString.IsClosed">
            <summary>
            Gets or sets this linestring's closure.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.LineString3d">
             <summary>
             LineString3d class definition. 
             </summary>
             <example> This is an example for LineString3d methods and properties.
             <code>
             Public Class LineString3d
               Public Sub New()
            
                 ' Create the LineString3d object using a collection of positions.
                 Dim oPos1 As Position, oPos2 As Position, oPos3 As Position
                 oPos1 = New Position(0, 0, 0)
                 oPos2 = New Position(10, 0, 0)
                 oPos3 = New Position(10, 10, 0)
            
                 Dim oCollPos As New Collection(Of Position)()
                 oCollPos.Add(oPos1)
                 oCollPos.Add(oPos2)
                 oCollPos.Add(oPos3)
            
                 Dim oLineString3d As New LineString3d(oCollPos)
            
                 ' Create a LineString3d object using connection, root point, and direction.
                 ' Create a connection to the model database.
                 Dim oConn As SP3DConnection = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 Dim oLineString3dConn As New LineString3d(oConn, oCollPos)
            
                 ' Create the LineString3d object using an existing LineString3d object as input. 
                 Dim oLineString3dCopy As LineString3d
                 oLineString3dCopy = New LineString3d(oLineString3d)    'Create a copy of oLineString3d.
            
                 ' Get the count of points.
                 Dim iPointCount As Integer
                 iPointCount = oLineString3d.PointCount()
            
                 ' Get a collection of points.
                 Dim collPosOut As Collection(Of Position)
                 collPosOut = Nothing
                 oLineString3d.GetPoints(collPosOut)
            
                 ' Get a single point.
                 Dim oPosLast As Position
                 oPosLast = Nothing
                 oLineString3d.GetPoint(oLineString3d.PointCount, oPosLast)  'Get the last point.
            
                 ' Get whether the linestring is closed.
                 Dim bIsClosed As Boolean
                 bIsClosed = oLineString3d.IsClosed()
            
                 ' Get the range box of the line.
                 Dim oRangeBox As RangeBox = oLineString3d.Range
                 Dim oLowPos As Position = oRangeBox.Low
                 Dim oHighPos As Position = oRangeBox.High
            
                 ' Get the length of a line.
                 Dim dLength As Double
                 dLength = oLineString3d.Length
            
                 ' Check whether the line is identical to another line.
                 If oLineString3d.Equals(oLineString3dCopy) Then
                     System.Diagnostics.Debug.Print("We are identical.")
                 End If
            
                 ' Add a point to an existing LineString3d object.
                 Dim pos4 As New Position(0, 10, 0)
                 oLineString3d.AddPoint(pos4)
            
                 ' Insert a point. 
                 Dim pos5 As New Position(5, 5, 0)
                 oLineString3d.InsertPoint(2, pos5)
            
                 ' Remove a point.
                 oLineString3d.RemovePoint(2)
            
                 'Set a point to another point (replace).
                 oLineString3d.SetPoint(1, pos5)
            
                  ' Set a linestring to another linestring.
                 oLineString3dCopy.[Set](oLineString3d)
            
                 ' Transform a line.
                  Dim oMatrix As New Matrix4X4()
                  oMatrix.SetIndexValue(12, 100)  'Set the X-translation component of the matrix to 100.
                  'Translate by 100
                  oLineString3d.Transform(oMatrix)
            
                 ' Redefine by a collection of points.
                 oLineString3d.DefineByPoints(oCollPos)
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create LineString3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.#ctor(Ingr.SP3D.Common.Middle.LineString3d)">
            <summary>
            Constructor used to copy an existing LineStringd3d.
            </summary>
            <param name="oLineString">A LineString3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oLineString cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoints exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position})">
            <summary>
            Constructor to create a persistent linestring from points.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="colPoints">Collection of Position objects.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoints exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.#ctor(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position})">
            <summary>
            Constructor to create a transient linestring from points.
            </summary>
            <param name="colPoints">Collection of Position objects.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoints exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.Set(Ingr.SP3D.Common.Middle.LineString3d)">
            <summary>
            Sets this linestring equal to an existing linestring.
            </summary>
            <param name="oLineString3d">Existing LineString3d.</param>
            <exception cref="T:System.ArgumentNullException">oLineString3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.DefineByPoints(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position})">
            <summary>
            Redefines this linestring by a new set of points.
            </summary>
            <param name="colPoints">Collection of Position objects.</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByPoints exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Cannot have less than 2 points.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.GetPoint(System.Int32,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Gets a particular point.
            </summary>
            <param name="index">Indexing starts at 1.</param>
            <param name="posVertex">Position vertex.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.SetPoint(System.Int32,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Sets a particular point.
            </summary>
            <param name="index">Indexing starts at 1.</param>
            <param name="posVertex">Position vertex.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.InsertPoint(System.Int32,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Inserts a particular point.
            </summary>
            <param name="index">Indexing starts at 1.</param>
            <param name="posVertex">Position vertex.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.AddPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Adds a point to the end.
            </summary>
            <param name="posVertex">Position vertex.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.RemovePoint(System.Int32)">
            <summary>
            Removes a point at a particular index.
            </summary>
            <param name="index">Indexing starts at 1.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.GetPoints(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Gets all the points.
            </summary>
            <param name="colPoints">Collection of Position objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this linestring by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.ConvertPositionArray(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Array@)">
            <summary>
            Private routine to convert a collection of positions to System array.
            </summary>
            <param name="colPts">Collection of Position objects.</param>
            <param name="arPoints">System.Array</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.ConvertDoubleArray(System.Collections.ObjectModel.Collection{System.Double},System.Array@)">
            <summary>
            Private method to convert a collection of doubles to a system array.
            </summary>
            <param name="colDouble">Collection of doubles.</param>
            <param name="arDouble">System.Array</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.ConvertArrayDouble(System.Array,System.Collections.ObjectModel.Collection{System.Double}@)">
            <summary>
            Private routine to convert system array of doubles to a collection of doubles.
            </summary>
            <param name="arDouble">System.Array</param>
            <param name="colDouble">Collection of doubles.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineString3d.ConvertArrayPosition(System.Array,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Private routine to convert a system array of points to a collection of positions.
            </summary>
            <param name="arPoints">System.Array</param>
            <param name="colPosition">Collection of Position objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineString3d.PointCount">
            <summary>
            Gets this linestring's number of points.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineString3d.IsClosed">
            <summary>
            Gets or sets this linestring's closure.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineString3d.Range">
            <summary>
            Finds the range box of this linestring.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IEllipse">
            <summary>
            Interface definition for IEllipse.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.Circumference">
            <summary>
            Gets this ellipse's circumference.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.Circle">
            <summary>
            Gets whether this ellipse is circular or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.Center">
            <summary>
            Gets or sets the center of this ellipse.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.Normal">
            <summary>
            Gets or sets the normal.  Negating the normal reverses the direction of the ellipse.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.MajorAxis">
            <summary>
            Gets or sets the major axis vector.  The parameterization of the ellipse starts at the major axis.
            <para>Note: This is the UNIT vector, and the length will always be 1.0.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.MinorAxis">
            <summary>
            Gets or sets the minor axis of this ellipse.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.MajorRadius">
            <summary>
            Gets or sets the major radius of this ellipse.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.MinorRadius">
            <summary>
            Gets or sets the minor radius of this ellipse.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipse.MinorMajorRatio">
            <summary>
            Gets or sets the minor major matio of this ellipse.
            <para>MinorMajorRatio = MinorRadius / MajorRadius.</para>
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Ellipse3d">
             <summary>
             Ellipse3d class definition. 
             </summary>
             <example> This is an example for Ellipse3d methods and properties..
             <code>
             Public Class Ellipse3d
               Public Sub New()
            
                 Dim oEllipse As Ellipse3d = Nothing
            
                 Dim vZero As New Vector(0, 0, 0)
                 Dim vMajor As New Vector(1, 0, 0)
                 Dim vNorm As New Vector(0, 0, 1)
                 Dim pZero As New Position(0, 0, 0)
                 Dim pTwo As New Position(2, 2, 2)
                 Dim oP1 As New Position(1, 0, 0)
                 Dim oP2 As New Position(0.2929, 0.7071, 0)
                 Dim oP3 As New Position(1, 1, 0)
                 Dim dRatio As Double = 0.5
                 oEllipse = New Ellipse3d(oP1, vNorm, vMajor, dRatio)
                 If oEllipse Is Nothing Then
                     SOMUtils.LogResults("Failed to create an Ellipse3d.")
            
                 End If
            
                 ‘Get the ellipse center.
                 Dim pPOS As New Position(0, 0, 0)
                 
                 pPOS = oEllipse.Center
                 If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                     SOMUtils.LogResults("Ellipse center not returned.")
            
                 End If
                 Dim pPOS1 As New Position(0, 0, 0)
                 'Set the ellipse center. 
                 oEllipse.Center = pPOS1
                 If SOMUtils.AreTheyEqual(oEllipse.Center, pZero) Then
                     oEllipse.Center = pPOS
                 Else
                     SOMUtils.LogResults("Ellipse center not returned.")
            
                 End If
            
                 'Get the ellipse circle.
                 If oEllipse.Circle Then
                     SOMUtils.LogResults("Ellipse circle failed.")
            
                 End If
                 'Switch the ellipse to a circle and get minor major ratio.
                 oEllipse.MinorMajorRatio = 1
                 If Not oEllipse.Circle Then
                     SOMUtils.LogResults("Ellipse circle failed.")
            
                 End If
                 If oEllipse.MinorMajorRatio <![CDATA[<>]]> 1 Then
                     SOMUtils.LogResults("Ellipse minor major ratio failed.")
            
                 End If
                 'Switch back to an ellipse. 
                 oEllipse.MinorMajorRatio = 0.5
            
                 'Get the circumference. 
                 Dim dDBL As Double = 0
                  
                 dDBL = oEllipse.Circumference
                 If dDBL = 0 Then
                     SOMUtils.LogResults("Ellipse circumference failed.")
            
                 End If
            
                 'Get the major axis.
                 Dim vVEC As New Vector(0, 0, 0)
                 
                 vVEC = oEllipse.MajorAxis
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("Ellipse major axis failed.")
            
                 End If
                 Dim vVEC1 As New Vector(0.7071, 0.7071, 0)
                 'Set the major axis. 
                 oEllipse.MajorAxis = vVEC1
                 If SOMUtils.AreTheyEqual(oEllipse.MajorAxis, vVEC1) Then
                     'RESET BACK TO ORIGINAL 
                     oEllipse.MajorAxis = vVEC
                 Else
                     SOMUtils.LogResults("Ellipse major axis set failed.")
            
                 End If
            
                 'Get the major radius.
                 dDBL = 0
                  
                 dDBL = oEllipse.MajorRadius
                 If SOMUtils.AreTheyEqual(dDBL, 0) Then
                     SOMUtils.LogResults("Ellipse major radius failed.")
            
                 End If
                 'Set the major radius.
                 oEllipse.MajorRadius = 1.5
                 If SOMUtils.AreTheyEqual(oEllipse.MajorRadius, 1.5) Then
                     'RESET THE MajorRadius BACK 
                     oEllipse.MajorRadius = dDBL
                 Else
                     SOMUtils.LogResults("Setting ellipse major radius failed.")
            
                 End If
            
                 'Get the minor axis. 
                 vVEC = New Vector(0, 0, 0)
                  
                 vVEC = oEllipse.MinorAxis
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("Ellipse minor axis failed.")
            
                 End If
                 vVEC1 = New Vector(0.7071, 0.7071, 0)
                 'Set the minor axis. 
                 oEllipse.MinorAxis = vVEC1
                 If SOMUtils.AreTheyEqual(oEllipse.MinorAxis, vVEC1) Then
                     'RESET BACK TO ORIGINAL 
                     oEllipse.MinorAxis = vVEC
                 Else
                     SOMUtils.LogResults("Ellipse minor axis set failed.")
            
                 End If
            
                 'Get the minor radius.
                 dDBL = 0
                  
                 dDBL = oEllipse.MinorRadius
                 If SOMUtils.AreTheyEqual(dDBL, 0) Then
                     SOMUtils.LogResults("Ellipse MinorRadius failed.")
            
                 End If
                 'Set the minor radius. 
                 oEllipse.MinorRadius = 1.5
                 If SOMUtils.AreTheyEqual(oEllipse.MinorRadius, 1.5) Then
                     'RESET THE MinorRadius BACK 
                     oEllipse.MinorRadius = dDBL
                 Else
                     SOMUtils.LogResults("Set ellipse minor radius failed.")
            
                 End If
            
                 'Get the ellipse normal.
                 vVEC = New Vector(0, 0, 0)
                 
                 vVEC = oEllipse.Normal
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("Ellipse normal failed.")
            
                 End If
                 vVEC1 = New Vector(0, 0, -1)
                 'Set the ellipse normal. 
                 oEllipse.Normal = vVEC1
                 If SOMUtils.AreTheyEqual(oEllipse.Normal, vVEC1) Then
                     'Reset to the original. 
                     oEllipse.Normal = vVEC
                 Else
                     SOMUtils.LogResults("Ellipse normal set failed.")
            
                 End If
            
                 'Get the range. 
                 Dim rRNG As New RangeBox(oP2, oP2)
                 rRNG = oEllipse.Range
                 If SOMUtils.AreTheyEqual(rRNG.Low, rRNG.High) Then
                     SOMUtils.LogResults("Ellipse range failed.")
            
                 End If
            
                 'Get the transform.
                 Dim mMat4 As New Matrix4X4()
                 mMat4.SetIdentity()
                 vVEC = New Vector(1, 1, 1)
                 mMat4.Translate(vVEC)
                 oEllipse.Transform(mMat4)
                 'Get the start point and check whether it is 0,0,0. 
                 pPOS = pTwo
                 pPOS = oEllipse.Center
                 If SOMUtils.AreTheyEqual(pPOS, pTwo) Then
                     SOMUtils.LogResults("Ellipse transform failed.")
            
                 End If
            
                 'Define by center, normal, major axis, and ratio. 
                 oP1.[Set](2, 0, 1)
                 oEllipse.DefineByCenterNormMajAxisRatio(oP1, vNorm, vMajor, dRatio)
                 oP2.[Set](2, 0, 1)
                 'Check the new position. 
                 If Not SOMUtils.AreTheyEqual(oEllipse.Center, oP2) OrElse Not SOMUtils.AreTheyEqual(oEllipse.MajorRadius, 1) Then
                     SOMUtils.LogResults("Ellipse center, normal, major axis, and ratio failed.")
            
                 End If
             
                 oP1.[Set](1, 1, 0)
                 dDBL = 2
                 Dim oEllipse1 As New Ellipse3d(oP1, vNorm, vMajor, dRatio)
                 oEllipse1.[Set](oEllipse)
                 If Not SOMUtils.AreTheyEqual(oEllipse.Center, oEllipse1.Center) OrElse Not SOMUtils.AreTheyEqual(oEllipse.MajorRadius, oEllipse1.MajorRadius) Then
                     SOMUtils.LogResults("Ellipse set failed.")
            
                 Else
                     oEllipse1.Delete()
                 End If
            
                 ‘Test the constructors.
                 oEllipse1 = New Ellipse3d(oEllipse)
                 If Not SOMUtils.AreTheyEqual(oEllipse1.Center, oEllipse.Center) OrElse Not SOMUtils.AreTheyEqual(oEllipse1.MajorRadius, oEllipse.MajorRadius) Then
                     SOMUtils.LogResults("Construct ellipse from ellipse failed.")
            
                 Else
                     oEllipse1.Delete()
                 End If
            
                 oP1.[Set](1, 0, 1)
                 Dim oConn As SP3DConnection
                 dDBL = 1
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 oEllipse1 = New Ellipse3d(oConn, oP1, vNorm, vMajor, dRatio)
                 If Not SOMUtils.AreTheyEqual(oEllipse1.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oEllipse1.MajorRadius, dDBL) Then
                     SOMUtils.LogResults("Construct ellipse by connection, center, normal, and radius failed.")
            
                 Else
                     oEllipse1.Delete()
                 End If
            
                 'Delete the original ellipse.
            
                 oEllipse.Delete()
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ellipse3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Ellipse3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ellipse3d.#ctor(Ingr.SP3D.Common.Middle.Ellipse3d)">
            <summary>
            Constructor used to copy an existing Ellipsed3d object.
            </summary>
            <param name="oEllipse">A Ellipse3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oEllipse cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterNormMajAxisRatio exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ellipse3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Constructs a persistent Ellipse3d from the given input.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posCenter">The center of the ellipse.</param>
            <param name="vecNorm">The ellipse normal, which determines the direction of the ellipse.</param>
            <param name="vecMajorAxis">The major axis vector of the ellipse.  This vector should contain
            the length of the major radius.</param>
            <param name="dMinorMajorRatio">The MinorMajorRatio of the arc.
                                           = MinorRadius / MajorRadius</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecMajorAxis cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy3Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ellipse3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Constructs a transient Ellipse3d from the given input.
            </summary>
            <param name="posCenter">The center of the ellipse.</param>
            <param name="vecNorm">The ellipse normal, which determines the direction of the ellipse.</param>
            <param name="vecMajorAxis">The major axis vector of the ellipse.  This vector should contain
            the length of the major radius.</param>
            <param name="dMinorMajorRatio">The MinorMajorRatio of the arc;
                                           = MinorRadius / MajorRadius</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecMajorAxis cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy3Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ellipse3d.Set(Ingr.SP3D.Common.Middle.Ellipse3d)">
            <summary>
            Sets this ellipse equal to an existing ellipse.
            </summary>
            <param name="oEllipse3d">Existing Ellipse3d.</param>
            <exception cref="T:System.ArgumentNullException">oArc3d cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ellipse3d.DefineByCenterNormMajAxisRatio(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Redefines this Ellipse3d by new input.
            </summary>
            <param name="posCenter">New center.</param>
            <param name="vecNorm">New normal.</param>
            <param name="vecMajorAxis">New major axis (should contain the length of major radius).</param>
            <param name="dMinorMajorRatio">New minor/major radius ratio.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecMajorAxis cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ellipse3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this ellipse by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.Circumference">
            <summary>
            Gets this ellipse's circumference.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.Circle">
            <summary>
            Gets whether this ellipse is circular or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.Center">
            <summary>
            Gets or sets the center of this ellipse.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.Normal">
            <summary>
            Gets or sets the normal.  Negating the normal reverses the direction of the ellipse.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.MajorAxis">
            <summary>
            Gets or sets the major axis vector.  The parameterization of the ellipse starts at the major axis.
            <para>Note: This is the UNIT vector, and the length will always be 1.0.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.MinorAxis">
            <summary>
            Gets or sets the minor axis of this ellipse.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.MajorRadius">
            <summary>
            Gets or sets the major radius of this ellipse.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.MinorRadius">
            <summary>
            Gets or sets the minor radius of this ellipse.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.MinorMajorRatio">
            <summary>
            Gets or sets the minor major ratio of this ellipse.
            <para>MinorMajorRatio = MinorRadius / MajorRadius.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">Cannot set this ellipse if read-only.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ellipse3d.Range">
            <summary>
            Finds the range box of this ellipse.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException">
            <summary>
            Raised if there is an attempt to set a value on a read-only ellipse.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnReadOnlyEllipseException.#ctor">
            <summary>
            Initializes a new instance of CmnReadOnlyEllipseException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IBSplineCurve">
            <summary>
            Interface definition for IBSplineCurve.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.GetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position@,System.Double@)">
            <summary>
            Gets a particular pole at index.
            </summary>
            <param name="index">Integer index.</param>
            <param name="Pole">Position</param>
            <param name="dWeight">Double as weight.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.SetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Sets a particular pole at index.
            </summary>
            <param name="index">Integer</param>
            <param name="Pole">Position</param>
            <param name="dWeight">Double defining the weight.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.InsertPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Inserts a pole at the index.
            </summary>
            <param name="index">Integer index.</param>
            <param name="Pole">Position of the poles.</param>
            <param name="dWeight">Double defining the weight.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.RemovePoleWt(System.Int32)">
            <summary>
            Removes a pole weight at index.
            </summary>
            <param name="index">Integer index.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.GetKnot(System.Int32,System.Double@)">
            <summary>
            Gets a knot at index.
            </summary>
            <param name="index">Integer defining the index.</param>
            <param name="dKnot">Double defining knots.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.SetKnot(System.Int32,System.Double)">
            <summary>
            Sets a knot at "index".
            </summary>
            <param name="index">int</param>
            <param name="dKnot">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.InsertKnot(System.Double,System.Int32)">
            <summary>
            Inserts a knot value with given multiplicity.
            </summary>
            <param name="dKnot">Knot value to insert. Of course the knot must be between the
            first and last knot value.</param>
            <param name="iMul">Multiplicity of knot to insert.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.RemoveKnot(System.Int32)">
            <summary>
            Removes a particular knot at given index.
            </summary>
            <param name="index">int</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IBSplineCurve.GetPolesWeightsKnots(System.Int32@,System.Int32@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{System.Double}@,System.Collections.ObjectModel.Collection{System.Double}@)">
            <summary>
            Gets all basic B-spline information.
            </summary>
            <param name="iOrder">Order</param>
            <param name="iNumPoles">Number of poles.</param>
            <param name="colPoles">Poles (unweighted, if rational).</param>
            <param name="colWeights">Weights, if rational.</param>
            <param name="colKnots">Collection of knots.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineCurve.Order">
            <summary>
            Gets the order of the B-spline.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineCurve.NumPoles">
            <summary>
            Gets the number of poles.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineCurve.KnotCount">
            <summary>
            Gets the number of knots.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IBSplineCurve.IsRational">
            <summary>
            Gets whether the curve is rational or not.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.BSplineCurve3d">
             <summary>
             BSplineCurve3d Class 
             </summary>
             <example> This is an example for BSplineCurve3d methods and properties.
             <code>
             Public Class BSplineCurve3d
               Public Sub New()
            
                 SOMUtils.LogResults("Started creation of a B-spline curve.")
                 Dim vZero As New Vector(0, 0, 0)
                 Dim vVec As New Vector(1, 1, 1)
                 Dim pZero As New Position(0, 0, 0)
                 Dim pTwo As New Position(2, 2, 2)
                 Dim pPos As New Position(0, 0, 0)
                 Dim oP2 As New Position(0.2929, 0.7071, 0)
                 Dim colPoles As New Collection(Of Position)()
                 Dim colKnots As New Collection(Of Double)()
                 Dim colWeights As New Collection(Of Double)()
                 Dim dKnot As Double = 0
            
                 'Create the poles, which will be the control points for the curve.
                 Dim pPole As New Position(0, 0, 0)
                 colPoles.Add(pPole)
                 colPoles.Add(New Position(1, 1, 0))
                 colPoles.Add(New Position(2, 0, 0))
                 colPoles.Add(New Position(3, 1, 0))
                 colPoles.Add(New Position(4, 0, 0))
            
                 'Create the knots. 
                 colKnots.Add(0)
                 colKnots.Add(0)
                 colKnots.Add(0)
                 colKnots.Add(0.333)
                 colKnots.Add(0.666)
                 colKnots.Add(1)
                 colKnots.Add(1)
                 colKnots.Add(1)
            
                 'Create a third order curve with the five points and eight knots from previous definition.
                 Dim oBSplineCurve As New BSplineCurve3d(3, colPoles, colKnots, False)
                 If oBSplineCurve Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 End If
            
                 'Create the same curve, but as persistant.
                 Dim oConn As SP3DConnection
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 Dim oBSplineCurve1 As New BSplineCurve3d(oConn, 3, colPoles, colKnots, False)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 Else
                     oBSplineCurve1.Delete()
                     oBSplineCurve1 = Nothing
                 End If
            
                 'Create a curve which is a copy of an existing curve.
                 oBSplineCurve1 = New BSplineCurve3d(oBSplineCurve)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d (BSplineCurve3d).")
                 Else
                     oBSplineCurve1.Delete()
                     oBSplineCurve1 = Nothing
                 End If
            
                 'Create the weights, which influence each pole.
                 colWeights.Add(1)
                 colWeights.Add(0.5)
                 colWeights.Add(1)
                 colWeights.Add(0.5)
                 colWeights.Add(1)
                 oBSplineCurve1 = New BSplineCurve3d(3, colPoles, colWeights, colKnots, False)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 Else
                     oBSplineCurve1.Delete()
                     oBSplineCurve1 = Nothing
                 End If
            
                 'Create the same curve, but make persistant in the model.
                 oBSplineCurve1 = New BSplineCurve3d(oConn, 3, colPoles, colWeights, colKnots, False)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 Else
                     oBSplineCurve1.Delete()
                     oBSplineCurve1 = Nothing
                 End If
            
                 'Create a curve which travels through the points and define the start and end tangents for the curve.
                 Dim vecStartTan As New Vector(0, 0, 1)
                 Dim vecEndTan As New Vector(0, 0, -1)
                 oBSplineCurve1 = New BSplineCurve3d(3, colPoles, vecStartTan, vecEndTan, _
                                                     False, False)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 Else
                     oBSplineCurve1.Delete()
                     oBSplineCurve1 = Nothing
                 End If
            
                 'Create the same curve, but as persistant.
                 oBSplineCurve1 = New BSplineCurve3d(oConn, 3, colPoles, vecStartTan, vecEndTan, _
                                                      False, False)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 Else
                     oBSplineCurve1.Delete()
                     oBSplineCurve1 = Nothing
                 End If
            
                 'Create a third order curve fit through the points, defining the start and end tangents,  
                 'calling for only two curve segments, and fitting to a certain tolerance.
                 oBSplineCurve1 = New BSplineCurve3d(3, colPoles, vecStartTan, vecEndTan, _
                                                      False, False, False, 2, 0.01)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 Else
                     oBSplineCurve1.Delete()
                     oBSplineCurve1 = Nothing
                 End If
            
                 'Create the same curve, but persistant.
                 oBSplineCurve1 = New BSplineCurve3d(oConn, 3, colPoles, vecStartTan, vecEndTan, False, _
                 False, False, 2, 0.01)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed to create a BSplineCurve3d.")
                 End If
            
                 'Define a third order curve fit through the points with start and end tangents specified.
                 oBSplineCurve1.DefineByFitCurve(3, colPoles, vecStartTan, vecEndTan, False, False)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed DefineByFitCurve method for a BSplineCurve3d.")
                 End If
            
            
                 oBSplineCurve1.DefineByLeastSquareFitCurve(3, colPoles, vecStartTan, vecEndTan, _
                                                            False, False, False, 2, 0.01)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed DefineByLeastSquareFitCurve method for a BSplineCurve3d.")
                 End If
            
                 oBSplineCurve1.DefineByParameters(3, colPoles, colWeights, colKnots, False)
                 If oBSplineCurve1 Is Nothing Then
                     SOMUtils.LogResults("Failed DefineByParameters method for a BSplineCurve3d.")
                 End If
            
                 oBSplineCurve1.GetKnot(4, dKnot)
                 If dKnot <![CDATA[<>]]> 0.333 Then
                     SOMUtils.LogResults("Failed to get knot value.")
                 End If
            
                 Dim iOrder As Integer = 2, iNumPoles As Integer = 0
            
                 oBSplineCurve1.GetPolesWeightsKnots(iOrder, iNumPoles, colPoles, colWeights, colKnots)
                 If iOrder <![CDATA[<>]]> 3 OrElse iNumPoles <![CDATA[<>]]> 5 OrElse colKnots(3) <![CDATA[<>]]> 0.333 Then
                     SOMUtils.LogResults("Failed GetPolesWeightsKnots method.")
            
                 End If
            
                 oBSplineCurve1.InsertKnot(0.5, 1)
                 If oBSplineCurve1.KnotCount <![CDATA[<>]]> 9 Then
                     SOMUtils.LogResults("Failed InsertKnot method.")
            
                 End If
            
                 pPole = New Position(2, 1, 0)
                 oBSplineCurve1.InsertPoleWt(4, pPole, 0.5)
                 If oBSplineCurve1.KnotCount <![CDATA[<>]]> 10 OrElse oBSplineCurve1.NumPoles <![CDATA[<>]]> 7 Then
                     SOMUtils.LogResults("Failed InsertPoleWt method.")
            
                 End If
            
            
                 'public void SetKnot(int index, double dKnot)
                 oBSplineCurve1.SetKnot(6, 0.6)
                 oBSplineCurve1.GetPolesWeightsKnots(iOrder, iNumPoles, colPoles, colWeights, colKnots)
                 oBSplineCurve1.SetPoleWt(4, colPoles(5), 0.8)
                 oBSplineCurve1.GetPolesWeightsKnots(iOrder, iNumPoles, colPoles, colWeights, colKnots)
                 If Not SOMUtils.AreTheyEqual(colKnots(5), 0.6) OrElse Not SOMUtils.AreTheyEqual(colWeights(3), 0.8) Then
                     SOMUtils.LogResults("Failed SetKnot or SetPoleWt method.")
            
                 End If
            
                 oBSplineCurve1.RemoveKnot(4)
                 If oBSplineCurve1.KnotCount <![CDATA[<>]]> 9 Then
                     SOMUtils.LogResults("Failed RemoveKnot method.")
            
                 End If
            
                 oBSplineCurve1.RemovePoleWt(4)
                 oBSplineCurve1.GetPolesWeightsKnots(iOrder, iNumPoles, colPoles, colWeights, colKnots)
                 If colWeights.Count <![CDATA[<>]]> 5 Then
                     SOMUtils.LogResults("Failed RemovePoleWt method.")
            
                 End If
            
            
            
                 'Get whether the B-spline curve is rational. 
                 If oBSplineCurve.IsRational = True Then
                     SOMUtils.LogResults("Failed whether BSplineCurve is rational.")
            
                 End If
            
                 'Get the five poles plus third order = eight knots. 
                 If oBSplineCurve.KnotCount <![CDATA[<>]]> 8 Then
                     SOMUtils.LogResults("Failed BSplineCurve knot count.")
            
                 End If
            
                 'Get the number of poles.
                 If oBSplineCurve.NumPoles <![CDATA[<>]]> 5 Then
                     SOMUtils.LogResults("Failed BSplineCurve pole count.")
            
                 End If
            
                 'Get the order. 
                 If oBSplineCurve.Order <![CDATA[<>]]> 3 Then
                     SOMUtils.LogResults("Failed BSplineCurve order.")
            
                 End If
            
                 'Define the range.
                 Dim rRNG As New RangeBox(oP2, oP2)
                 rRNG = oBSplineCurve.Range
                 If SOMUtils.AreTheyEqual(rRNG.Low, rRNG.High) Then
                     SOMUtils.LogResults("BSplineCurve range failed.")
            
                 End If
            
                 'Transform the B-spline curve.
                 Dim mMat4 As New Matrix4X4()
                 mMat4.SetIdentity()
                 vVec = New Vector(1, 1, 1)
                 mMat4.Translate(vVec)
                 oBSplineCurve.Transform(mMat4)
                 'Get the start point and check whether it is 0,0,0. 
                 Dim dWeight As Double = 0
                 oBSplineCurve.GetPoleWt(1, pPole, dWeight)
                 If SOMUtils.AreTheyEqual(pPole, pZero) Then
                     SOMUtils.LogResults("BSplineCurve transform failed.")
            
                 End If
            
                 'Set the B-spline curve.
                 If oBSplineCurve1 Is Nothing Then
                     oBSplineCurve1 = New BSplineCurve3d(oBSplineCurve)
                 End If
                 oBSplineCurve1.[Set](oBSplineCurve)
                 If oBSplineCurve1.IsRational = True Then
                     SOMUtils.LogResults("BSplineCurve set failed.")
            
                 Else
                     oBSplineCurve1.Delete()
                 End If
            
                 'Delete the original B-spline curve.
                 oBSplineCurve.Delete()
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create BSplineCurve3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.BSplineCurve3d)">
            <summary>
            Constructor used to copy an existing BSplineCurved3d.
            </summary>
            <param name="oBSplineCurve">A BSplineCurve3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oBSplineCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean)">
            <summary>
            Creates a rational persistent B-spline curve given input parameters.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iOrder">Desired order of the output curve.</param>
            <param name="colPoles">The poles of the curve. The poles are unweighted.</param>
            <param name="colWeights">The curve weights.</param>
            <param name="colKnots">The curve knots.</param>
            <param name="bPeriodic">Whether the curve is periodic or not.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colWeights cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Cannot create GeometryFactory exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean)">
            <summary>
            Creates a rational transient B-spline curve given input parameters.
            </summary>
            <param name="iOrder">Desired order of the B-spline curve.</param>
            <param name="colPoles">Poles (unweighted).</param>
            <param name="colWeights">The weights.</param>
            <param name="colKnots">The curve knots.</param>
            <param name="bPeriodic">Whether the curve is periodic or not.</param>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colWeights cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Cannot create GeometryFactory exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Boolean)">
            <summary>
            Creates a non-rational persistent B-spline curve given input parameters.
            </summary>
            <param name="oConnection"></param>
            <param name="iOrder">Desired order of the output curve.</param>
            <param name="colPoles">The poles of the curve.</param>
            <param name="colKnots">The curve knots.</param>
            <param name="bPeriodic">Whether the curve is periodic or not.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Cannot create GeometryFactory exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Boolean)">
            <summary>
            Creates a non-rational transient B-spline curve given input parameters.
            </summary>
            <param name="iOrder">Desired order of the B-spline curve.</param>
            <param name="colPoles">Collection of poles.</param>
            <param name="colKnots">The curve knots.</param>
            <param name="bPeriodic">Whether the curve is periodic or not.</param>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByParameters exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Cannot create GeometryFactory exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Boolean,System.Boolean)">
            <summary>
            Creates a persistent B-spline curve through a set of points.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iOrder">The order of fit.</param>
            <param name="colPoints">The points to fit through.</param>
            <param name="vecStartTan">Optional starting tangent.</param>
            <param name="vecEndTan">Optional ending tangent.</param>
            <param name="bClosed">If true, output curve will be closed.
                                  If first point and last point are not equal, then a
                                  point is added before fitting.</param>
            <param name="bPeriodic">Whether output curve is desired to be periodic.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByFitCurve exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Cannot create GeometryFactory exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Boolean,System.Boolean)">
            <summary>
            Creates a B-spline curve by direct fitting through a set of points.
            </summary>
            <param name="iOrder">The order of fit.</param>
            <param name="colPoints">The points to fit through.</param>
            <param name="vecStartTan">Optional starting tangent.</param>
            <param name="vecEndTan">Optional ending tangent.</param>
            <param name="bClosed">If true, output curve will be closed.
                                  If first point and last point are not equal, then a
                                  point is added before fitting.</param>
            <param name="bPeriodic">Whether the output curve is desired to be periodic.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByFitCurve exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Cannot create GeometryFactory exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Creates a persistent B-spline curve by doing a least squares fit through the points.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iOrder">Integer specifying order.</param>
            <param name="colPoints">The points to fit.</param>
            <param name="vecStartTan">Optional starting tangent.</param>
            <param name="vecEndTan">Optional ending tangent.</param>
            <param name="bClosed">If true, output curve will be closed.
                                  If first point and last point are not equal, then a
                                  point is added before fitting.</param>
            <param name="bPeriodic">Whether the output curve is desired to be periodic.</param>
            <param name="bOpt">Option for fitting.
                               <para>0: Fit by entering a tolerance value.
                                  The math will output a B-spline curve which is within tolerance to the input points.</para>
                               <para>1: fit by entering the number of segments in the output B-spline curve,
                                   for a direct fit nseg = pointCount-1, so nseg has to be less = to direct fit.</para></param>
            <param name="iNSeg">If bOpt=1, then desired number of segments.</param>
            <param name="dTol">If bOpt =0, then tolerance value.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByLeastSquareFitCurve exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">Cannot create GeometryFactory exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Creates a transient B-spline curve by doing a least squares fit through the points.
            </summary>
            <param name="iOrder">Integer value of the order.</param>
            <param name="colPoints">The points to fit.</param>
            <param name="vecStartTan">Optional starting tangent.</param>
            <param name="vecEndTan">Optional ending tangent.</param>
            <param name="bClosed">If true, output curve will be closed.
                                  If first point and last point are not equal, then a
                                  point is added before fitting.</param>
            <param name="bPeriodic">Whether output curve is desired to be periodic.</param>
            <param name="bOpt">Option for Fitting.
                               <para>0: fit by entering a tolerance value.
                                  The math will output a B-spline curve which is within tolerance to the input points.</para>
                               <para>1: fit by entering the number of segments in the output B-spline curve,
                                   for a direct fit nseg = pointCount-1, so nseg has to be less= to direct fit.</para></param>
            <param name="iNSeg">If bOpt=1, then desired number of segments.</param>
            <param name="dTol">If bOpt =0, then tolerance value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.CatenaryCurveOptions,System.Double)">
            <summary>
            Construct a persistent catenary B-spline curve based on 2 points, a vector and option.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="P1">Starting point of the Catenary curve.</param>
            <param name="P2">Ending point of the Catenary curve.</param>
            <param name="Vec">This is the vector defining the plane of the catenary. This is the vector determining the sag direction.</param>
            <param name="iOpt">Option for how to create the Catenary Curve:
                               <para>1: Curve is created using input middle sag value.</para>
                               <para>2: Curve is created using input clearance height value.</para>                 
                               <para>3: Curve is created using input curve length value.</para></param>
            
            <param name="dValue">Double value based on input option above.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.CatenaryCurveOptions,System.Double)">
            <summary>
            Construct a transient catenary B-spline curve based on 2 points, vector and option.
            </summary>
            <param name="P1">Starting point of the Catenary curve</param>
            <param name="P2">Ending point of the Catenary curve.</param>
            <param name="Vec">This is the vector defining the plane of the catenary. This is the vector determining the sag direction.</param>
            <param name="iOpt">Option for how to create the Catenary Curve:
                               <para>1: Curve is created using input middle sag value.</para>
                               <para>2: Curve is created using input clearance height value.</para>                 
                               <para>3: Curve is created using input curve length value.</para></param>
            
            <param name="dValue">Double value based on input option above.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.Set(Ingr.SP3D.Common.Middle.BSplineCurve3d)">
            <summary>
            Sets this B-spline curve equal to an existing B-spline curve.
            </summary>
            <param name="oBSplineCurve3d">Existing BSplineCurve3d.</param>
            <exception cref="T:System.ArgumentNullException">oBSplineCurve3d cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.DefineByParameters(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Boolean)">
            <summary>
            Redefines a B-spline curve given the following input.
            </summary>
            <param name="iOrder">Order of the B-spline.</param>
            <param name="colPoles">The B-spline poles( unweighted if rational).</param>
            <param name="colWeights">If B-spline is rational, the weights.</param>
            <param name="colKnots">The knots of the B-spline.</param>
            <param name="periodic">Whether the curve is periodic or not.</param>
            <exception cref="T:System.ArgumentNullException">colPoles cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colKnots cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByParameters exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.DefineByFitCurve(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Boolean,System.Boolean)">
            <summary>
            Redefines a B-spline curve by direct fitting through a set of points.
            </summary>
            <param name="iOrder">The order of the fit.</param>
            <param name="colPoints">The points to fit through.</param>
            <param name="vecStartTan">Optional starting tangent.</param>
            <param name="vecEndTan">Optional ending tangent.</param>
            <param name="bClosed">If true, output curve will be closed.
                                  If first point and last point are not equal, then a
                                  point is added before fitting.</param>
            <param name="bPeriodic">Whether the output curve is desired to be periodic.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByFitCurve exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.DefineByLeastSquareFitCurve(System.Int32,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Redefines a transient B-spline curve by doing a least squares fit through the points.
            </summary>
            <param name="iOrder">int</param>
            <param name="colPoints">The points to fit.</param>
            <param name="vecStartTan">Optional starting tangent.</param>
            <param name="vecEndTan">Optional ending tangent.</param>
            <param name="bClosed">If true, output curve will be closed.
                                  If first point and last point are not equal, then a
                                  point is added before fitting.</param>
            <param name="bPeriodic">Whether output curve is desired to be periodic.</param>
            <param name="bOpt">Option for Fitting.
                               <para>0: Fit by entering a tolerance value.
                                  The math will output a B-spline curve which is within tolerance to the input points.</para>
                               <para>1: Fit by entering the number of segments in the output B-spline curve,
                                   for a direct fit nseg = pointCount-1, so nseg has to be less= to direct fit.</para></param>
            <param name="iNSeg">If bOpt=1, then desired number of segments.</param>
            <param name="dTol">If bOpt =0, then tolerance value.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByLeastSquareFitCurve exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.GetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position@,System.Double@)">
            <summary>
            Gets the pole and weight at a particular index.
            </summary>
            <param name="index">int</param>
            <param name="Pole">Position</param>
            <param name="dWeight">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.SetPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Sets a particular pole and weight.
            </summary>
            <param name="index">int</param>
            <param name="Pole">Position</param>
            <param name="dWeight">double</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.InsertPoleWt(System.Int32,Ingr.SP3D.Common.Middle.Position,System.Double)">
            <summary>
            Inserts a particular pole and weight at given index.
            </summary>
            <param name="index">int</param>
            <param name="Pole">Position</param>
            <param name="dWeight">double</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.RemovePoleWt(System.Int32)">
            <summary>
            Removes a particular pole and weight at index.
            </summary>
            <param name="index">int</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.GetKnot(System.Int32,System.Double@)">
            <summary>
            Gets a particular knot at given index.
            </summary>
            <param name="index">int</param>
            <param name="dKnot">double</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.SetKnot(System.Int32,System.Double)">
            <summary>
            Sets a particular knot at given index.
            </summary>
            <param name="index">int</param>
            <param name="dKnot">double</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.InsertKnot(System.Double,System.Int32)">
            <summary>
            Inserts a knot value with given multiplicity.
            </summary>
            <param name="dKnot">Knot value to insert. Of course knot must be between
            first and last knot value.</param>
            <param name="iMul">Multiplicity of knot to insert.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.RemoveKnot(System.Int32)">
            <summary>
            Removes a knot at "index".
            </summary>
            <param name="index">int</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.GetPolesWeightsKnots(System.Int32@,System.Int32@,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@,System.Collections.ObjectModel.Collection{System.Double}@,System.Collections.ObjectModel.Collection{System.Double}@)">
            <summary>
            Gets all basic B-spline info.
            </summary>
            <param name="iOrder">Order</param>
            <param name="iNumPoles">Number of poles.</param>
            <param name="colPoles">Poles(unweighted, if rational).</param>
            <param name="colWeights">Weights, if rational.</param>
            <param name="colKnots">Knots</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this B-spline curve by given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to Com method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.ConvertPositionArray(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Array@)">
            <summary>
            Private routine to convert a collection of positions to System.Array.
            </summary>
            <param name="colPts">Collection of Positions</param>
            <param name="arPoints">System.Array</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.ConvertDoubleArray(System.Collections.ObjectModel.Collection{System.Double},System.Array@)">
            <summary>
            Converts a collection of doubles to a System.Array.
            </summary>
            <param name="colDouble">Collection of doubles.</param>
            <param name="arDouble">System.Array</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.ConvertArrayDouble(System.Array,System.Collections.ObjectModel.Collection{System.Double}@)">
            <summary>
            Converts a System.Array to a collection of doubles.
            </summary>
            <param name="arDouble">System.Array</param>
            <param name="colDouble">Collection of doubles.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BSplineCurve3d.ConvertArrayPosition(System.Array,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Converts a System.Array to a collection of positions.
            </summary>
            <param name="arPoints">System.Array</param>
            <param name="colPosition">Collection of Positions.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineCurve3d.Order">
            <summary>
            Property to get this B-spline curve's order.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineCurve3d.NumPoles">
            <summary>
            Gets the number of poles in the B-spline.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineCurve3d.KnotCount">
            <summary>
            Gets the number of knots.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineCurve3d.IsRational">
            <summary>
            Gets whether the B-spline is rational or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BSplineCurve3d.Range">
            <summary>
            Finds the range box of this B-spline curve.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterBase">
            <summary>
            Base class for Filter, SQLFilter, and CompoundFilter classes.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterBase.TEMPSQLTABLNAME">
            <summary>
            SQL temp table name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterBase.m_IsCompleted">
            <summary>
            Is filter completed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterBase.m_lOpenParenCount">
            <summary>
            Count of open parens in CompoundFilter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterBase.m_lCloseParenCount">
            <summary>
            Count of close parens in CompoundFilter definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            This constructor is used for API internal needs.
            </summary>
            <param name="oBOP"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.#ctor">
            <summary>
            Default constructor for a transient filter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.Apply">
            <summary>
            Returns a collection of objects that pass the filter in the current or active connection.
            </summary>
            <returns>ReadOnlyCollection of BusinessObject.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException">"Applying filter failed in building filter query string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException">Applying filter failed in building filter query string, building an empty query, or in executing query.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetConnectionException">The filter cannot get a connection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">The parameter is not supplied for the parametric filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">Nested filter of the filter cannot be found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException">The compound filter does not contain matching OpenParen and CloseParen operators.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.Apply(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Returns a collection of objects that pass the filter in provided connection.
            </summary>
            <param name="oConnection">Connection to which the filter will be applied.</param>
            <returns>ReadOnlyCollection of BusinessObject.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException">"Applying filter failed in building filter query string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException">Applying filter failed in building filter query string, building an empty query, or in executing query</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetConnectionException">The filter cannot get a connection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">The parameter is not supplied for the parametric filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">Nested filter of the filter cannot be found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException">The compound filter does not contain matching OpenParen and CloseParen operators.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.ApplyWithAllParameters(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            This is a centralized private method that is called by all other Apply methods.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <returns>ReadOnlyCollection of BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException">"Applying filter failed in building filter query string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException">Applying filter failed in building filter query string, building an empty query, or in executing query</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetConnectionException">The filter cannot get a connection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">The parameter is not supplied for the parametric filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">Nested filter of the filter cannot be found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException">The compound filter does not contain matching OpenParen and CloseParen operators.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.ApplyWithDefaultConnections(GSCADMiddleFilters.IJSimpleFilter)">
            <summary>
            Applies the filter by acquiring all necessary connections.
            </summary>
            <param name="oSimpleFilter">IJSimpleFilter</param>
            <returns>ReadOnlyCollection of BusinessObject</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.ApplyWithSpecifiedConnection(Ingr.SP3D.Common.Middle.Services.SP3DConnection,GSCADMiddleFilters.IJSimpleFilter)">
            <summary>
            Applies the filter to the connection passed in and returns the objects that exist in that connection only.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="oSF">IJSimpleFilter</param>
            <returns>ReadOnlyCollection of BusinessObject</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.IsLeafOrIntermediateFilter(GSCADMiddleFilters.IJItemList,System.Int32,GSCADMiddleFilters.IJSimpleFilter@)">
            <summary>
            A utility method that detects whether the item in the itemlist is either leaf or intemediate filter
            </summary>
            <param name="oItemList">The itemlist to investigate</param>
            <param name="idx">the index into the itemlist to check</param>
            <param name="oSimpleFilter">out, the simple filter in the item</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.ContainsPDSFilter(GSCADMiddleFilters.IJSimpleFilter)">
            <summary>
            Private function to identify if a filter contains a PDS part.
            </summary>
            <param name="oSF">IJSimpleFilter</param>
            <returns>PDS filter</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.ContainsRefFilter(GSCADMiddleFilters.IJSimpleFilter)">
            <summary>
            Private function to determine if a filter (userFilter or userCompoundFilter) contains a reference part.
            </summary>
            <param name="oSF">IJSimpleFilter</param>
            <returns>Reference filter</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.FilterObject(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Tests whether a BusinessObject passes the filter using object binding.
            </summary>
            <param name="oTestObject">BusinessObject to be tested.</param>
            <returns>
            True = passed;
            False = not passed.
            </returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedInExecutingQueryException">Filter failed in executing filter query statement.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">The parameter is not supplied for the parametric filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">Nested filter of the filter cannot be found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.FilterObject(Ingr.SP3D.Common.Middle.FilterStrategies,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Tests whether a BusinessObject passes the filter using the specified filter strategy.
            </summary>
            <param name="iFilterStrategy">FilterStrategies value: BindingMoniker, DatabaseQueryResult, or Automatic.</param>
            <param name="oTestObject">BusinessObject to be tested.</param>
            <returns>True or False indicating whether the BusinessObject pass the filter or not.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedInExecutingQueryException">Filter failed in executing filter query statement.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">The parameter is not supplied for the parametric filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">Nested filter of the filter cannot be found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.FilterObjects(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Filters a collection of BusinessObjects that passes the filter.
            </summary>
            <param name="oTestObjects">ReadOnlyCollection of BusinessObjects to be tested.</param>
            <returns>
            A ReadOnlyCollection of BusinessObjects that pass the filter.
            </returns>                    
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedInExecutingQueryException">Filter failed in executing filter query statement.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">The parameter is not supplied for the parametric filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">Nested filter of the filter cannot be found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.FilterObjects(Ingr.SP3D.Common.Middle.FilterStrategies,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Filters a collection of BusinessObjects that passes the filter with a filter strategy.
            </summary>
            <param name="iFilterStrategy">FilterStrategies value: BindingMoniker, DatabaseQueryResult, or Automatic.</param>
            <param name="oTestObjects">BusinessObject</param>
            <returns>A ReadOnlyCollection of BusinessObject that pass the filter.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedInExecutingQueryException">Filter failed in executing filter query statement.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">The parameter is not supplied for the parametric filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">Nested filter of the filter cannot be found.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterBase.GetCOMFilter">
            <summary>
            Gets the COM filter. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterBase.Name">
            <summary>
            The name of the filter. The name is not required to create a transient filter.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterBase.Parametric">
            <summary>
            Indicates if the filter is parametric. Read-only.
            </summary>
            <returns>Bool value: True or False.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterBase.Completed">
            <summary>
            Property indicates if the filter is modifiable or not.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Filter">
             <summary>
             Filters BusinessObjects in the database and returns a collection of objects that pass the filter.
             </summary>
             <example>This is an example for Filter class methods and properties.
             <code>
              Public Class Filter
                Public Sub New()
            
                 Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                 Dim oPlantModel As Model = oSiteMgr.ActiveSite.ActivePlant.PlantModel
                 'Get the model connection. 
                 Dim oRootObj As BusinessObject = DirectCast(oPlantModel.RootSystem, BusinessObject)
                 Dim oModelConn As SP3DConnection = oRootObj.DBConnection
                 Dim strFolderName As String = "CommonMiddleFilterTestFolder"
            
                 Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr 
                 'String strFilterFolderPath = @"My Filters\CommonMiddleFilterTestFolder" + iRandomNumber; 
                 Dim strFilterFolderPath As String = "My Filters\" + strFolderName
                 Dim strQueryString As String
            
                 'Creating a new (transient) simple Filter object. 
                 Dim strFilterName As String
            
                 Dim strFilter1Name As String = "Filter1"
                 Dim oFilter1 As New Filter()
              
                 'Creating a new FilterFolder object. 
            
                 Dim oFilterFolder1 As New FilterFolder(strFolderName)
                 
                 'Creating a Filter object under a given filter folder. 
                 strFilterName = "Filter2"
                 Dim oFilter2 As New Filter(strFilterName, oFilterFolder1)
            
                 'Creating a Filter object given a filter folder path. 
                 strFilterName = "Filter3-"
                 Dim oFilter3 As New Filter(strFilterName, strFilterFolderPath)
            
                 'Getting the definition of the filter.
                 Dim oFilter1Definition As FilterDefinition = oFilter1.Definition
            
                 'Getting the name of the filter.
                 Dim strName As String = oFilter1.Name
            
                 'Checking whether the filter is a parametric filter.
                 Dim IsFilter2Parametric As Boolean = oFilter2.Parametric
            
                 'Creating an SQL filter given a name and filter folder.
                 Dim strSQLFilterName As String = "SqlFilter1"
                 Dim oSqlFilter1 As New SQLFilter(strSQLFilterName, oFilterFolder1)
            
                 'Creating an SQL filter given a name and folder path.
                 strSQLFilterName = "SqlFilter2"
                 Dim oSqlFilter2 As New SQLFilter(strSQLFilterName, strFilterFolderPath)
            
                 'Creating an SQL filter given a filter name, filter folder, and query string.
                 strSQLFilterName = "SqlFilter3"
                 strQueryString = "Select oid from EQUIPSmartEquipment" 'For example, getting all equipments.
                 Dim oSqlFilter3 As New SQLFilter(strSQLFilterName, oFilterFolder1, strQueryString)
            
                 'Creating an SQL filter given a filter name, filter folder, and query string.
                 strSQLFilterName = "SqlFilter4"
                 Dim oSqlFilter4 As New SQLFilter(strSQLFilterName, strFilterFolderPath, strQueryString)
            
                 'Setting the query string for the SQL filter.
                 Dim strNewQueryString As String = "Select oid from CMNAPPPControlPoint"
                 oSqlFilter4.SetSQLFilterString(strNewQueryString)
            
                 'Creating a compound filter (transient). 
                 Dim oCompoundFilter1 As New CompoundFilter()
            
                 'Creating a compound filter given a name. 
                 Dim strCompoundFilterName As String = "CompoundFilter2"
            
                 'Creating a compound filter given a name and filter folder. 
                 Dim oCompoundFilter2 As New CompoundFilter(strCompoundFilterName, oFilterFolder1)
            
                 'Creating a compound filter given a name and folder path. 
                 strCompoundFilterName = "CompoundFilter3-"
                 Dim oCompoundFilter3 As New CompoundFilter(strCompoundFilterName, strFilterFolderPath)
            
                 'Getting the members of a compound filter.
                 Dim oInitialMembersCol As ReadOnlyCollection(Of FilterBase) = oCompoundFilter3.Members
            
                 'Adding a simple filter to the compound filter.
                 oCompoundFilter1.AddFilter(oFilter1)
            
                 'Adding an SQL filter to the compound filter.
                 oCompoundFilter2.AddFilter(oSqlFilter4)
            
                 'Adding a compound filter to a compound filter.
                 oCompoundFilter2.AddFilter(oCompoundFilter1)
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Filter.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            This constructor is used for API internal needs.
            </summary>
            <param name="oBOP">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Filter.#ctor">
            <summary>
            Creates a transient filter.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter, or for any other reason.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Filter.#ctor(System.String,Ingr.SP3D.Common.Middle.SP3DFolder)">
            <summary>
            Creates a filter with name and parent FilterFolder.
            </summary>
            <param name="sName">The name of the filter.</param>
            <param name="oFolder">
            The folder where the filter will be created. It carries the connection information.
            </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter, 
            a filter with the same name already exists in the folder, or for other reasons.
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>
            <remarks>
            If the filter is created into the catalog database and contains any hierarchical elements, it will be constructed as a parametric filter automatically. 
            Any business objects specified as filter inputs will be ignored.
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Filter.#ctor(System.String,System.String)">
            <summary>
            Creates a filter with name and parent FilterFolder string.
            </summary>
            <param name="sName">Name of the filter.</param>
            <param name="sFolderPath">
            The folder path of the filter; example: "My Filters", "MyFolder1", "MSubFolder1"
            </param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter,
            a filter with the same name already exists in the folder, or for other reasons. 
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>
            <remarks>
            If the filter is created into the catalog database and contains any hierarchical elements, it will be constructed as a parametric filter automatically. 
            Any business objects specified as filter inputs will be ignored.
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Filter.SupplyParameters(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.FilterParameter})">
            <summary>
            Supplies a list a parameters to a defined filter and used by parametric filters.
            </summary>
            <param name="FPList">Collection of FilterParameters.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Filter.PrepareParameters">
            <summary>
            Generates the parameter list required by a parametric filter.
            </summary>
            <returns>Collection of FilterParameters.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Filter.Definition">
            <summary>
            Definition of the filter.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SQLFilter">
             <summary>
             Creates a SQL filter.
             </summary>
             <example>This is an example for SQLFilter class methods and properties.
             <code>
                Public Class SQLFilterExample
                    Public Sub New()
                        Try
                            Dim oBusinessObjs As ReadOnlyCollection(Of BusinessObject) = Nothing
                            Dim oSQLFilterTransient As SQLFilter = Nothing
                            Dim oSQLFilterPersistent As SQLFilter = Nothing
            
                            'Place an equipment 
                            Dim oEqp1 As Equipment = Nothing
                            oEqp1 = New Equipment("PUMP 001A-E", Nothing)
            
                            If oEqp1 IsNot Nothing Then
                                'Setting the position of the Equipment 
                                Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEqp1, ILocalCoordinateSystem)
                                Dim oPos As New Position(5, 5, 0)
                                oEqpCS.Origin = oPos
                                oEqp1.SetPropertyValue("EquipForFilterTest", "IJNamedItem", "Name")
                                MiddleServiceProvider.TransactionMgr.Commit("Place Equipment1")
                            Else
                                'error
                            End If
            
                            'Create a transient SQLFilter 
                            oSQLFilterTransient = New SQLFilter()
            
                            'Set the SQL query string 
                            oSQLFilterTransient.SetSQLFilterString("SELECT oid FROM JEquipmentFurnishings")
            
                            'Call Apply, which returns the SOM BO collection 
                            oBusinessObjs = oSQLFilterTransient.Apply()
            
                            'there should be at least 1 equipment that we added above. 
                            If oBusinessObjs.Count <![CDATA[<]]> 1 Then
                                'error
                            End If
            
                            'set the readonly collection to null 
                            oBusinessObjs = Nothing
                            oSQLFilterTransient = Nothing
            
                            'abort transient SQLFilter 
                            MiddleServiceProvider.TransactionMgr.Abort()
            
                            'Create a persistent SQLFilter 
                            oSQLFilterPersistent = New SQLFilter("SQLFilterPersistent", "My Filters")
                            oSQLFilterPersistent.SetSQLFilterString("SELECT oid FROM JEquipmentFurnishings")
            
                            'Commiting SOMFilter. 
                            MiddleServiceProvider.TransactionMgr.Commit("Commiting SqlFilterTest1")
            
                            'Call Apply, which returns the SOM BO collection 
                            oBusinessObjs = oSQLFilterPersistent.Apply()
            
                            'there should be at least 1 equipment that we added above. 
                            If oBusinessObjs.Count <![CDATA[<]]> 1 Then
                                'error
                            End If
            
                            'set the readonly collection to null 
                            oBusinessObjs = Nothing
                            'delete SQLFilter 
                            oSQLFilterPersistent.Delete()
                            MiddleServiceProvider.TransactionMgr.Commit("delete SQLFilter")
            
                            If oEqp1 IsNot Nothing Then
                                oEqp1.Delete()
                                oEqp1 = Nothing
            
                                'TransactionMgr Commit 
                                MiddleServiceProvider.TransactionMgr.Commit("delete equipment")
                            End If
            
                        Catch exp As Exception
                            'exception
                        End Try
                    End Sub
                End Class
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SQLFilter.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            This constructor is used for API internal needs.
            </summary>
            <param name="oBOP">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SQLFilter.#ctor">
            <summary>
            Creates a transient SQLFilter.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter
            or for any other reason.
            </exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SQLFilter.#ctor(System.String,Ingr.SP3D.Common.Middle.SP3DFolder)">
            <summary>
            Creates an SQLFilter given a name and folder.
            </summary>
            <param name="sName">Name of an SQLFilter.</param>
            <param name="oFolder">The folder where an SQLFilter will be created. It carries the connection information.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter,
            a filter with the same name already exists in the folder, or for other reasons. 
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>     
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SQLFilter.#ctor(System.String,System.String)">
            <summary>
            Creates an SQLFilter given a name and folder path.
            </summary>
            <param name="sName">Name of an SQL filter.</param>
            <param name="sFilterFolderPath">The folder path of an SQL filter; example: "My Filters", "MyFolder1", "MSubFolder1"</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter,
            a filter with the same already exists in the folder, or for other reasons.
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>           
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SQLFilter.#ctor(System.String,Ingr.SP3D.Common.Middle.SP3DFolder,System.String)">
            <summary>
            Creates an SQLFilter, given a name, folder, and query string.
            </summary>
            <param name="sName">Name of an SQL filter.</param>
            <param name="oFolder">The folder where an SQL filter will be created. It carries the connection information.</param>
            <param name="strQueryString">SQL Filter query string.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter,
            a filter with the same name already exists in the folder, or for other reasons.
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterSQLQueryInvalidException">
            SQLFilter query string cannot be 0 or &gt; 8192 characters or contain DELETE, UPDATE, DROP, and INSERT keywords.
            </exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SQLFilter.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an SQLFilter given a name, folder path, and query string.
            </summary>
            <param name="sName">Name of an SQL filter.</param>
            <param name="sFilterFolderPath">The folder path of an SQL filter; example: "My Filters", "MyFolder1", "MSubFolder1"</param>
            <param name="strQueryString">SQL Filter query string.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter,
            a filter with the same name already exists in the folder, or for other reasons. 
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterSQLQueryInvalidException">
            SQLFilter query string cannot be 0 or &gt; 8192 characters or contain DELETE, UPDATE, DROP, and INSERT keywords.
            </exception>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SQLFilter.SetSQLFilterString(System.String)">
            <summary>
            Sets an SQLFilter query string.
            </summary>
            <param name="sQueryString">SQL Filter query string.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterSQLQueryInvalidException">
            SQLFilter query string cannot be 0 or &gt; 8192 characters or contain DELETE, UPDATE, DROP, and INSERT keywords.
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotSetQueryStringException">SQL Filter query string cannot be set for any reason.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CompoundFilter">
             <summary>
             CompoundFilter is composed of two or more existing filters, which can be joined by logical operators.
             </summary>
             <example>This is an example for CompoundFilter class methods and properties.
             <code>
                Public Class CompoundFilterExample
                    Public Sub New()
                        Try
                            Dim oBusinessObjs As ReadOnlyCollection(Of BusinessObject) = Nothing
                            Dim oCompFilter As CompoundFilter = Nothing
                            Dim oFilter1 As Filter = Nothing
                            Dim oFilter2 As Filter = Nothing
                            Dim oPropValue As PropertyValueCodelist = Nothing
            
                            'Place an equipment 
                            Dim oEqp1 As Equipment = Nothing
                            oEqp1 = New Equipment("PUMP 001A-E", Nothing)
                            If oEqp1 IsNot Nothing Then
                                'Setting the position of the Equipment 
                                Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEqp1, ILocalCoordinateSystem)
                                Dim oPos As New Position(5, 5, 0)
                                oEqpCS.Origin = oPos
                                oEqp1.SetPropertyValue("EquipForCompoundFilterTest", "IJNamedItem", "Name")
                                MiddleServiceProvider.TransactionMgr.Commit("Place Equipment1")
                            Else
                                'error
                            End If
            
                            'Create 2 simple filters 
                            'First Filter is ObjectType filter for Equipment 
                            oFilter1 = New Filter("CompoundFilterTest-Filter1", "My Filters")
                            oFilter1.Definition.AddObjectType("Equipment<![CDATA[&]]>Furnishing")
            
                            'Second Filter is a properties filter with "approval status = working" 
                            oFilter2 = New Filter("CompoundFilterTest-Filter2", "My Filters")
                            oPropValue = New PropertyValueCodelist("IJDObject", "ApprovalStatus", 1)
                            oFilter2.Definition.AddWhereProperty(oPropValue, PropertyComparisonOperators.EQ)
            
                            MiddleServiceProvider.TransactionMgr.Commit("create filters")
            
                            'test transient compound filter 
                            oCompFilter = New CompoundFilter()
            
                            oCompFilter.AddFilter(oFilter1)
                            oCompFilter.AddLogicalOperator(CompoundFilterOperators.[And])
                            oCompFilter.AddFilter(oFilter2)
            
                            'apply the compound filter 
                            oBusinessObjs = oCompFilter.Apply()
            
                            'there should be at least 1 equipment that we added above 
                            If oBusinessObjs.Count <![CDATA[<]]> 1 Then
                                'error
                            End If
            
                            oCompFilter = Nothing
                            oBusinessObjs = Nothing
                            MiddleServiceProvider.TransactionMgr.Abort()
            
                            'test persistent CompoundFilter 
                            oCompFilter = New CompoundFilter("CompoundFilterTest", "My Filters")
            
                            oCompFilter.AddFilter(oFilter1)
                            oCompFilter.AddLogicalOperator(CompoundFilterOperators.[And])
                            oCompFilter.AddFilter(oFilter2)
            
                            'apply the compound filter 
                            oBusinessObjs = oCompFilter.Apply()
            
                            'there should be at least 1 equipment that we added above 
                            If oBusinessObjs.Count <![CDATA[<]]> 1 Then
                                'error
                            End If
            
                            MiddleServiceProvider.TransactionMgr.Commit("Persistent compoundFilter")
            
                            'delete compound filter first 
                            oCompFilter.Delete()
                            MiddleServiceProvider.TransactionMgr.Commit("delete compound filter")
            
                            'delete simple filters 
                            oFilter1.Delete()
                            oFilter2.Delete()
                            MiddleServiceProvider.TransactionMgr.Commit("delete simple filters")
            
                            oEqp1.Delete()
                            oEqp1 = Nothing
                            MiddleServiceProvider.TransactionMgr.Commit("delete equipment")
            
                        Catch exp As Exception
                            '
                        End Try
                    End Sub
                End Class
             </code>
             </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            This constructor is used for API internal needs.
            </summary>
            <param name="oBOP">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.#ctor">
            <summary>
            Creates a transient CompoundFilter.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter
            or for any other reason.
            </exception>           
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.#ctor(System.String,Ingr.SP3D.Common.Middle.SP3DFolder)">
            <summary>
            Creates a CompoundFilter with a given name and folder.
            </summary>
            <param name="strFilterName">The name of the CompoundFilter.</param>
            <param name="oFolder">The folder where the CompoundFilter will be created. It carries the connection information.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter,
            a filter with the same name already exists in the folder, or for other reasons.
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>          
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.#ctor(System.String,System.String)">
            <summary>
            Creates a CompoundFilter with a given name and folder path.
            </summary>
            <param name="strFilterName">The name of the CompoundFilter.</param>
            <param name="strFilterFolderPath">The folder path of the CompoundFilter; example: "My Filters", "MyFolder1", "MSubFolder1"</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">Raised because you do not have permission to create the filter,
            a filter with the same name already exists in the folder, 
            or for other reasons.
            </exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">You do not have permission to access the filter folder.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">The filter folder or folder path is invalid or does not exist.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.AddFilter(Ingr.SP3D.Common.Middle.Filter)">
            <summary>
            Adds a Filter to the CompoundFilter definition.
            </summary>
            <param name="oFilter">The filter to be added to the CompoundFilter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotAddFilterException">Cannot add the filter to the compound filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeModifiedException">Cannot add a filter to a completed or existing compound filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterTransientFilterNotAllowedException">A transient filter cannot be added as a member of persistent compound filter.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.AddFilter(Ingr.SP3D.Common.Middle.SQLFilter)">
            <summary>
            Adds an SQLFilter to the CompoundFilter definition.
            </summary>
            <param name="oSQLFilter">SQLFilter to be added to the CompoundFilter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotAddFilterException">Cannot add the filter to the compound filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeModifiedException">Cannot add a filter to a completed or existing compound filter.</exception>      
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterTransientFilterNotAllowedException">A transient filter cannot be added as a member of persistent compound filter.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.AddFilter(Ingr.SP3D.Common.Middle.CompoundFilter)">
            <summary>
            Adds a CompoundFilter to the CompoundFilter definition.
            </summary>
            <param name="oCompFilter">CompoundFilter to be added to the CompoundFilter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotAddFilterException">Cannot add the filter to the compound filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeModifiedException">Cannot add a filter to a completed or existing compound filter.</exception>      
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterTransientFilterNotAllowedException">A transient filter cannot be added as a member of persistent compound filter.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.AddLogicalOperator(Ingr.SP3D.Common.Middle.CompoundFilterOperators)">
            <summary>
            Adds a logical operator: Or, And, Not, OpenParen, CloseParen to the CompoundFilter definition.
            </summary>
            <param name="iOperator">CompoundFilterOperators to be added to the CompoundFilter.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException">Cannot add the logical operator to the compound filter.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeModifiedException">Cannot add a logical operator to a completed or existing compound filter.</exception>      
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException">The compound filter does not contain matching OpenParen and CloseParen operators.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCompoundFilterOperatorMissingException">The compound filter is missing CompoundFilterOperator infront of OpenParen operator. Valid operators are Or, AND, NOT.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.UpdateMiddleFilterCriteria">
            <summary>
            private method to update the filter criteria on the middlefilter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.GetMFOperator(Ingr.SP3D.Common.Middle.CompoundFilterOperators)">
            <summary>
            Given the CompoundFilterOperator, convert it to MiddleFilter MFNestedItemType
            </summary>
            <param name="iFilterOperator"></param>
            <returns>MFNestedItemType.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.GetCompoundFilterOperator(GSCADMiddleFilters.MFNestedItemType)">
            <summary>
            Given the MiddleFilter MFNestedItemType, convert it to CompoundFilterOperator
            </summary>
            <param name="iMFItemType"></param>
            <returns>CompoundFilterOperators.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CompoundFilter.GetMiddleFilterData">
            <summary>
            Private method to load the m_oCompoundFilterCriteria variable from MiddleFilter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CompoundFilter.Members">
            <summary>
            Returns a ReadOnlyCollection of CompoundFilter members.
            </summary>
            <returns>ReadOnlyCollection of FilterBase classes.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CompoundFilter.CompoundFilterCriteria">
            <summary>
            Private class that is SOM equivalent of Itemlist structure in COM.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CompoundFilter.CompoundFilterCriteria.FilterOperator">
            <summary>
            Gets or sets the filter operator.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CompoundFilter.CompoundFilterCriteria.FilterObject">
            <summary>
            Gets or sets the Filter BusinessObject.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CompoundFilter.CompoundFilterCriteria.DisplayText">
            <summary>
            Gets the display text for the CompoundFilter criteria. Readonly.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymbolErrorException">
            <summary>
            This exception is used to raise error exceptions from a custom symbol definition to
            post problems in the ToDo list that occur with the custom definition code.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolErrorException.#ctor">
            <summary>
            Default SymbolErrorException constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolErrorException.#ctor(System.String,System.Exception)">
            <summary>
            SymbolErrorException constructor given a message and an inner exception.
            </summary>
            <param name="message">Message string.</param>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolErrorException.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            SymbolErrorException constructor given a codelisted error to raise a ToDo list
            error from a CustomSymbolDefinition.
            </summary>
            <param name="codeListTable">Name of the codelist table.</param>
            <param name="errorNo">Error number in the provided codelist table.</param>
            <param name="objectToUpdate">Object to update in the ToDo list when the problem has been resolved.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolErrorException.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject,System.String,System.Exception)">
            <summary>
            SymbolErrorException constructor which raises a ToDo list error from a CustomSymbolDefinition
            given the codelist, object to update in the ToDo list, a message, and the inner exception that
            caused the failure.
            </summary>
            <param name="codeListTable">Name of the codelist table.</param>
            <param name="errorNo">Error number in the provided codelist table.</param>
            <param name="objectToUpdate">Object to update in the ToDo list when the problem has been resolved.</param>
            <param name="message">Additional message to log.</param>
            <param name="innerException">Inner exception that caused the failure.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            SymbolErrorException constructor for problems during serialization.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming Context.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolErrorException.GetExceptionInfo(System.String@,System.Int32@,Ingr.SP3D.Common.Middle.BusinessObject@)">
            <summary>
            Returns the exception information.
            </summary>
            <param name="codeListTable">The codelist table name.</param>
            <param name="errorNo">Error number in the provided codelist table.</param>
            <param name="objectToUpdate">Object to update in the ToDo list when the problem has been resolved.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Exceptions.SymbolErrorException.CodeListTable">
            <summary>
            Gets the name of the codelist table.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Exceptions.SymbolErrorException.ErrorNumber">
            <summary>
            Gets the codelst table error number.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Exceptions.SymbolErrorException.ObjectToUpdate">
            <summary>
            Gets the ToDo list object to update.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymbolWarningException">
            <summary>
            This exception is used to raise warning exceptions from a custom symbol definition to
            post problems in the ToDo list that occur with the custom definition code. These ToDo
            warnings allow the sytem to continue to process even though this failure occurred.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolWarningException.#ctor">
            <summary>
            Default SymbolWarningException constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolWarningException.#ctor(System.String,System.Exception)">
            <summary>
            SymbolWarningException constructor given a message and an inner exception that occurred.
            </summary>
            <param name="message">Message that indicates what failed in the custom symbol definition code.</param>
            <param name="inner">The inner exception that caused this failure.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolWarningException.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            SymbolWarningException constructor given a codelisted error and object to update in the ToDo list.
            </summary>
            <param name="codeListTable">The codelist table name.</param>
            <param name="errorNo">Error number in the provided codelist table.</param>
            <param name="objectToUpdate">Object to update in the ToDo list when the problem has been resolved.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolWarningException.#ctor(System.String,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject,System.String,System.Exception)">
            <summary>
            SymbolWarningException constructor given a codelisted warning number; object to update
            in the ToDo list; additional message to log; and the inner exception that casued the error.
            </summary>
            <param name="codeListTable">Name of the codelist table.</param>
            <param name="errorNo">Warning number in the provided codelist table.</param>
            <param name="objectToUpdate">Object to update in the ToDo list when the problem has been resolved.</param>
            <param name="message">Additional message to log.</param>
            <param name="innerException">Inner exception that caused the failure.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolWarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            SymbolWarningException constructor for problems during serialization.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymbolWarningException.GetExceptionInfo(System.String@,System.Int32@,Ingr.SP3D.Common.Middle.BusinessObject@)">
            <summary>
            Returns the warning exception codelist table, warning number, and object to update.
            </summary>
            <param name="codeListTable">The code-list table name.</param>
            <param name="errorNo">Error number in the provided codelist table.</param>
            <param name="objectToUpdate">Object to update in the ToDo list when the problem has been resolved.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Exceptions.SymbolWarningException.CodeListTable">
            <summary>
            Gets the code-list table.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Exceptions.SymbolWarningException.ErrorNumber">
            <summary>
            Gets the warning number in the provided codelist table.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Exceptions.SymbolWarningException.ObjectToUpdate">
            <summary>
            Gets the object to update in the ToDo list when the problem has been resolved.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymOutputCollectionNotSetException">
            <summary>
            Exception raised when no output collection is found on a custom symbol definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymOutputCollectionNotSetException.#ctor(System.String)">
            <summary>
            SymOutputCollectionNotSetException constructor.
            </summary>
            <param name="message">message</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymInvalidNbofAttributesException">
            <summary>
            Exception raised for an invalid number of attributes on symbol inputs or aspects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymInvalidNbofAttributesException.#ctor(System.String)">
            <summary>
            SymInvalidNbofAttributesException constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymInvalidAttributeTypeException">
            <summary>
            Exception raised when an invalid attribute type is specified for an input parameter or aspect.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymInvalidAttributeTypeException.#ctor(System.String)">
            <summary>
            SymInvalidAttributeTypeException constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymInvalidDefinitionNameException">
            <summary>
            Exception raised when the provided CustomSymbolDefinition name is not a valid name (i.e., not a
            unique name for a given catalog of parts).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymInvalidDefinitionNameException.#ctor(System.String)">
            <summary>
            SymInvalidDefinitionNameException constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymInvalidInputsException">
            <summary>
            Exception raised when inputs defined on a symbol are invalid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymInvalidInputsException.#ctor(System.String)">
            <summary>
            SymInvalidInputsException constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymFailedToCreateDefinitionException">
            <summary>
            Exception raised when a symbol definition object cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymFailedToCreateDefinitionException.#ctor(System.String)">
            <summary>
            SymFailedToCreateDefinitionException constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.SymDefinitionNotFoundException">
            <summary>
            Exception raised when a symbol definition was not returned by the definition collection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.SymDefinitionNotFoundException.#ctor(System.String)">
            <summary>
            SymDefinitionNotFoundException constructor.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs">
            <summary>
            Summary description for CmnResourceIDs
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMUnitNameInvalidException">
            <summary>
            The passed in primary unit is not valid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMPropertyValueNullException">
            <summary>
            The PropertyValue object is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMConvertDBUtoUnitException">
            <summary>
            ConvertDBUtoUnit failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMConvertUnitToDBUException">
            <summary>
            ConvertUnitToDBU failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMParseUnitException">
            <summary>
            ParseUnit failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMFormatUnitException">
            <summary>
            FormatUnit failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMSetDefaultUnitsException">
            <summary>
            SetDefaultUnits failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMGetDefaultPrimaryUnitException">
            <summary>
            GetDefaultPrimaryUnit failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMGetDefaultSecondaryUnitException">
            <summary>
            GetDefaultSecondaryUnit failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMGetDefaultTertiaryUnitException">
            <summary>
            GetDefaultTertiaryUnit failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCorregateSupportsInterfaceException">
            <summary>
            The IJEFWCorrelatedObject interface is not supported by given object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetDesignBasisException">
            <summary>
            Failed to get the design basis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToCorrelateException">
            <summary>
            Failed to correlate.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToUnCorrelateException">
            <summary>
            Failed to uncorrelate.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToUpdateCorrelateException">
            <summary>
            Failed to update the correlation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetPropertyComparisonException">
            <summary>
            Failed to get the property comparison.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetTopologyComparisonException">
            <summary>
            Failed to get the topology comparison.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedIsValidDesignBasisException">
            <summary>
            Failed to get the valid status of design basis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedSafeToDeleteException">
            <summary>
            Failed to get the safe to delete state.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedMatchesDesignBasisException">
            <summary>
            Failed to match the design basis.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToObtainConnectMiddleException">
            <summary>
            Failed to obtain connect middle.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToSetActivePermissionGroupException">
            <summary>
            Failed to set the active permission group on the SP3Dconnection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetPermissionGroupsException">
            <summary>
            Failed to get permission group collection from SP3D.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetLocationException">
            <summary>
            Failed to get location information from SP3D.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetActivePermissionGroupException">
            <summary>
            Failed to get the active permission group on the SP3Dconnection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotReserveSeatException">
            <summary>
            Failed to reserve SP3D seat (license).
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateRevisionManagerException">
            <summary>
            Failed to create RevisionManager object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDbIdentifierFromMonikerException">
            <summary>
            Failed to get DbIdentifier from Moniker.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnClsidFromMonikerException">
            <summary>
            Failed to get ClassId from Moniker.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSupportsInterfaceException">
            <summary>
            Failed to evaluate SupportsInterface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMonikerFromDbIdentifierException">
            <summary>
            Failed to get moniker from DbIdentifier.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDatabaseIDFromIJDPomException">
            <summary>
            Failed to get database ID from IJDPom.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPrivateBusinessObjectExistsInCacheParam">
            <summary>
            Cannot add PrivateBusinessObject.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPrivateBusinessObjectExistsInCacheException">
            <summary>
            PrivateBusinessObject already exists in cache.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNullMonikerException">
            <summary>
            Failed to get moniker for DbIdentifier from POM.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnsDbIdentifierArgumentException">
            <summary>
            sDbIdentifier is Null or is a blank string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoPrivateBusinessObjectArgumentException">
            <summary>
            oPrivateBusinessObject is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoIMonikerArgumentException">
            <summary>
            oIMoniker is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBONullArgumentException">
            <summary>
            oBOMoniker is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoPersistentComObjectArgumentException">
            <summary>
            oPersistentComObject is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBOsNullArgumentException">
            <summary>
            oBOMonikers is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnELNullArgumentException">
            <summary>
            oIJElements is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMissingInterfaceException">
            <summary>
            IConnectionPointContainer interface is missing on RevisionManager (JRevisionClass) class.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMissingConnectionPointException">
            <summary>
            ConnectionPoint for IJTransactionNotification interface is missing on RevisionManager (JRevisionClass) class.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMiddleCommandException">
            <summary>
            Middle command failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnParentPlantAlreadyExistsException">
            <summary>
            Parent plant already exists.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmneDBTypeArgumentException">
            <summary>
            Unsupported DB type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMiddleContextGetProjectContextException">
            <summary>
            GetProjectContext on MiddleContext failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMiddleContextGetProjectContextExException">
            <summary>
            GetProjectContextEx on MiddleContext failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMissingEntriesArgumentException">
            <summary>
            Missing required entries in the connection string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMiddleContextNotInitializedException">
            <summary>
            MiddleContext component is not initialized.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIllegalConnectSiteException">
            <summary>
            Illegal connect site.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSelectObjectsException">
            <summary>
            SelectObjects on middle command failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNullResourceManagerException">
            <summary>
            ResourceManager is NULL for DbType. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnServerNameArgumentNullException">
            <summary>
            sServerName is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnConnectionStringArgumentNullException">
            <summary>
            sConnectionString is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSchemaConnectionArgumentNullException">
            <summary>
            sSchemaConnection is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnServerNameArgumentBlankException">
            <summary>
            sServerName is a blank string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnConnectionStringArgumentBlankException">
            <summary>
            sConnectionString is a blank string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSchemaConnectionArgumentBlankException">
            <summary>
            sSchemaConnection is a blank string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRegistryInfoNotExist">
            <summary>
            Registry information does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMissingRegistryKey">
            <summary>
            Missing registry key.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMapFileNotFoundException">
            <summary>
            Map file (S3DAPIClassMap.dat) not found or user has no read access.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidMapEntriesException">
            <summary>
            One or more entries in S3DAPIClassMap.dat are invalid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnOutOfDateSiteDatabaseException">
            <summary>
            Site database is out of date. Update site and site schema.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnResourceManagerException">
            <summary>
            Failed to get ResourceManager.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPlantNotImplementedException">
            <summary>
            Plant.AddReference not implemented in initial release.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetAccessRulesException">
            <summary>
            Failed to get access rules from COM.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoteShouldAlwaysBeRelated">
            <summary>
            Note should always be related to another object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoConnectionSpecified">
            <summary>
            No connection is specified.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoBusinessObjectArgumentNullException">
            <summary>
            oBusinessObject is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoOccurrenceArgumentNullException">
            <summary>
            oOccurrence is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPermissionGroupNotSupportedException">
            <summary>
            PermissionGroup value for HierarchyTypes is not supported.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoChildArgumentNullException">
            <summary>
            oChild  is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnHierarchyTypesNotImplementedException">
            <summary>
            Get parent for HierarchyTypes.Volume_NamedSpace is not implemented.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoNamedItemArgumentNullException">
            <summary>
            oNamedItem is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoActiveEntityArgumentNullException">
            <summary>
            oActiveEntity is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoActiveEntityArgumentException">
            <summary>
            oActiveEntity is not IJNameRuleAE.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnClassNotFoundException">
            <summary>
            Class not found.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRelationShipMissingException">
            <summary>
            Relationship not found.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCodeListTableNotFoundException">
            <summary>
            Codelist table not found.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInterfaceNotFoundException">
            <summary>
            Interface not found.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetInterfacesException">
            <summary>
            Failed to get the interfaces collection on MetadataManager.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetBOCInformationException">
            <summary>
            Failed to get BOCInformation for this object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetBOCsException">
            <summary>
            Failed to get BOCs for this object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetBOCPathException">
            <summary>
            Failed to get BOC path for this BOCInformation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnClassNotFoundOrFailedGetInfoException">
            <summary>
            Class not found or failed to retrieve the class information.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidCSMatrixException">
            <summary>
            The matrix does not represent a valid coordinate system.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCorrdinateInvalidParentException">
            <summary>
            The coordinate system has either no parent or more than one parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnoConnectionArgumentNullException">
            <summary>
            oConnection is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.MethodIsNotImplementedException">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUnableTransformCoordinateSysException">
            <summary>
            Unable to transform the coordinate system with the given T4X4.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUnexpectedFailureTransformCoordinateSysException">
            <summary>
            Unexpected failure to transform the coordinate system with the given T4X4.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMethodOperationNotImplemented">
            <summary>
            The method or operation is not implemented.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRelationshipEnumerationFailedException">
            <summary>
            Failed to enumerate relationships.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoSuchRelationshipFoundException">
            <summary>
            Failed to get the relation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRelationshipInsertFailedException">
            <summary>
            Relationship insert failed. This method could only be used when the origin side of the relationship supports ordering.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnObjectsNotWithinSameDBException">
            <summary>
            Relationship Add failed. DBContainment flag on relation metadata is WITHIN_DB and a relation is being created between objects belonging to different databases.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRelationshipAddfailedException">
            <summary>
            Relationship add failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRelationshipRemovefailedException">
            <summary>
            Relationship remove failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPropertyArgNotCorrect">
            <summary>
            Property argument is not correct type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInterfaceArgIsEmpty">
            <summary>
            Interface name argument is an empty string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPropertyArgIsEmpty">
            <summary>
            Property name argument is an empty string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidPropertyValueException">
            <summary>
            Error while trying to access property value from COM.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotAccessSQLorMetadataException">
            <summary>
            Accessing SQL or Metadata property is not allowed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnClassInfoNotAvailableException">
            <summary>
            Class information is not available for this business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPropertyInfoNotAvailableException">
            <summary>
            Queried property information is not available for this business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnReadOnlyPropertyViolationException">
            <summary>
            Setting a value on read-only property value is not allowed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetAttributeFromCOMException">
            <summary>
            Failed to get the attribute from COM.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCodelistItemNotAMemberException">
            <summary>
            The codelistitem passed in is not a member of codelistinfo for this property.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSetPropertyValueFailedException">
            <summary>
            Failed to set the property value.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidPropertyTypeException">
            <summary>
            Can not set or access property value for properties with property type undefined.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnProxyWriteFailException">
            <summary>
            Caller attempted to write to a proxy object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInterfaceInfoNotAvailableException">
            <summary>
            Queried interface information is not available for this business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMonikerIsNullConstructor">
            <summary>
            oMoniker is null. Argument passed into constructor of PrivateBusinessObject should not be null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSP3DConnectionIsNullConstructor">
            <summary>
            SP3DConnection is null. Argument passed into constructor of PrivateBusinessObject should not be null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMonikerNotRESPOMLibType">
            <summary>
            oMoniker is not an RESPOMLib.IMoniker type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotChangeCOMReference">
            <summary>
            Cannot change COM object reference. PrivateBusinessObject is already initialized.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotChangeCOMRefExpectPBO">
            <summary>
            Cannot change COM object reference for suspect PrivateBusinessObject.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnConnectionPOMReturnNULL">
            <summary>
            Connection.POM returned NULL.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoObjectForMonikerException">
            <summary>
            No object for moniker.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnConnectionIsNull">
            <summary>
            oConnection is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnTransientComObjectIsNull">
            <summary>
            oTransientComObject is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPersistentCOMBOAlreadyExistsException">
            <summary>
            Persistent COM BusinessObject already exists.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnTransientCOMBOAlreadyExistsException">
            <summary>
            Transient Com BusinessObject already exists.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnTransientPrivateBOAlreadyExistsException">
            <summary>
            Transient PrivateBO already exists.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPermissionGroupNotInConnectionException">
            <summary>
            The passed in permission group object does not belong to the connection. Failed to set the permission group.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToSetPermissionGroupException">
            <summary>
            Failed to set the permission group on the business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetPermissionGroupException">
            <summary>
            Failed to get the permission group on the business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetUserClassInfoException">
            <summary>
            Failed to get the user class information for this buisness object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIPersistGetClassIdException">
            <summary>
            Failed to get ClassId from IPersist interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidArg">
            <summary>
            Invalid arguments.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRHSNULL">
            <summary>
            rhs is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMatrixNULL">
            <summary>
            pMatrix is null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnValuesAreTooLarge">
            <summary>
            Values are too large.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMComplexString">
            <summary>
            No COM complexstring interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMathCannotCreateGeometryException">
            <summary>
            Failed to create geometry from GeometryFactory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMLine">
            <summary>
            No COM line interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMLineReturned">
            <summary>
            No COM line returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMComplexStringReturned">
            <summary>
            No COM complexstring returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMathConstructorInputNULL">
            <summary>
            Math constructor input is Null.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMPlane">
            <summary>
            No COM plane returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMPointReturned">
            <summary>
            No COM point returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMPoint">
            <summary>
            No COM point interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterMetadataDefaultException">
            <summary>
            Metadata error.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterInvalidBOCException">
            <summary>
            The BOC node or node path does not exist or is in invalid format.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedToAddObjTypeException">
            <summary>
            Cannot add ObjType to filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterPropInvalidException">
            <summary>
            The property is not valid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterPropMismatchException">
            <summary>
            Two properties do not match.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedToAddPropertyexception">
            <summary>
            Cannot add the Property(ies) to the filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedToAddHierObjectsException">
            <summary>
            Cannot add hierarchy objects to the filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedToAddRefPlanesException">
            <summary>
            Cannot add reference planes to the filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedToAddForeignReferenceException">
            <summary>
            Cannot add foreign references to the filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedToAddToTransientFilterException">
            <summary>
            Cannot add objects to the transient filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterNotValidException">
            <summary>
            The filter is invalid or does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotBeCreatedException">
            <summary>
            The filter cannot be created.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotBeModifiedException">
            <summary>
            Cannot modify an existing or completed filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFolderInvalidException">
            <summary>
            The filter folder or folder path is invalid or does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFolderNotAccessibleException">
            <summary>
            You do not have permission to access the filter folder.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotGetConnectionException">
            <summary>
            The filter cannot get a connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotSetQueryStringException">
            <summary>
            SQL filter query string cannot be set.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotAddLogicalOperatorException">
            <summary>
            Cannot add LogicalOperator to the compound filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotAddFilterException">
            <summary>
            Cannot add the filter to the compound filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterParameterNotSuppliedException">
            <summary>
            The parameter is not supplied for the parametric filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterNestedFilterNotFoundException">
            <summary>
            Nested filter of the filter cannot be found.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterNotInitializedException">
            <summary>
            The filter is not initialized due to hierarchy objects deleted, ObjType is not provided, etc.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedInExecutingQueryException">
            <summary>
            Filter failed in executing filter query statement.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterSQLQueryInvalidException">
            <summary>
            SQLFilter query string cannot be 0 or > 8192 characters or contain DELELE, UPDATE, DROP, and INSERT key words.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailGetIIDPropFromMetaData">
            <summary>
            Failed to get IID of property from metadata.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailGetRelationIIDFromMetaData">
            <summary>
            Failed to get RelationGUID/RelationName from metadata.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailGetRelationGUIDFromMetaData">
            <summary>
            Failed to get RelationGUID of property from metadata.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailGetEdgeGUIDFromMetaData">
            <summary>
            Failed to get EdgeGUID of property from metadata.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailGetRelationGUID2FromMetaData">
            <summary>
            Failed to get RelationGUID/RelationName of RelationInformation from metadata.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotAddRefRootToTransFilter">
            <summary>
            Cannot add the ReferenceRoot to the transient filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotAddRefFilesToTransFilter">
            <summary>
            Cannot add the Reference files to the transient filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotAddRefObjectToTransFilter">
            <summary>
            Cannot add the Reference objects to the transient filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotAddRefParObjectToTransFilter">
            <summary>
            Cannot add parametric Reference objects to the transient filter definition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnApplyingFilterFailed">
            <summary>
            Applying filter failed in executing query string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBuildingFilterFailed">
            <summary>
            Applying filter failed in building string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterGeneratedEmptyString">
            <summary>
            The filter generates an empty query string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedExeQueryString">
            <summary>
            Applying filter failed in executing filter query string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedExeRefQueryString">
            <summary>
            Applying filter failed in executing reference query string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterFailedExePDSQueryString">
            <summary>
            Applying filter failed in executing PDS query string.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSupplyConnectionForFilter">
            <summary>
            Please supply a proper connection for the filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterNoPermissionToCreate">
            <summary>
            You do not have permission to create the filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterAlreadyExists">
            <summary>
            A filter with the same name already exists.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterAlreadyExistsInFolder">
            <summary>
            A filter with the same name already exists in the folder.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotBeCreated">
            <summary>
            Filter cannot be created.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnLogicalOpsNotMatched">
            <summary>
            LogicalOperators are not matched each other or not in the right order.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCompoundFiltersNoOrANDOPs">
            <summary>
            CompoundFilter cannot start with "Or" or "And" operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedGetGroupFromMetaData">
            <summary>
            Failed to get group defining interface name(s) from metadata.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMBSplineCurveReturned">
            <summary>
            No COM BSplineCurve returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMBSplineCurve">
            <summary>
            No COM BSplineCurve interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoAccessException">
            <summary>
            The current user does not have write permission to the SP3D object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidObjectTypeException">
            <summary>
            The design basis object is not a valid type for the SP3D object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNotCorrelatedException">
            <summary>
            The SP3D object  is not correlated to a design basis object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidArgumentException">
            <summary>
            The specified object is not a design basis object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMArc">
            <summary>
            No COM Arc returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMArcReturned">
            <summary>
            No COM Arc interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMSurface">
            <summary>
            No COM Surface interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMCurve">
            <summary>
            No COM Curve interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMEllipse">
            <summary>
            No COM Ellipse returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMEllipseReturned">
            <summary>
            No COM Ellipse interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMCircle">
            <summary>
            No COM Circle returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMCircleReturned">
            <summary>
            No COM Circle interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMEllipticalArc">
            <summary>
            No COM EllipticalArc returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMEllipticalArcReturned">
            <summary>
            No COM EllipticalArc interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMLineString">
            <summary>
            No COM LineString returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMLineStringReturned">
            <summary>
            No COM LineString interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMCone">
            <summary>
            No COM Cone returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMConeReturned">
            <summary>
            No COM Cone interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMSphere">
            <summary>
            No COM Sphere returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMSphereReturned">
            <summary>
            No COM Sphere interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMTorus">
            <summary>
            No COM Torus returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMTorusReturned">
            <summary>
            No COM Torus interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMBSplineSurface">
            <summary>
            No COM BSplineSurface returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMBSplineSurfaceReturned">
            <summary>
            No COM BSplineSurface interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMProjection">
            <summary>
            No COM Projection returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMProjectionReturned">
            <summary>
            No COM Projection interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMRevolution">
            <summary>
            No COM Revolution returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMRevolutionReturned">
            <summary>
            No COM Revolution interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMRuled">
            <summary>
            No COM Ruled returned from factory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoCOMRuledReturned">
            <summary>
            No COM Ruled interface returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetSystemChildrenException">
            <summary>
            Failed to return system hierarchy children.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToAddSystemChildException">
            <summary>
            Failed to add a system hierarchy child.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetSystemParentException">
            <summary>
            Failed to return the system hierarchy parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToSetSystemParentException">
            <summary>
            Failed to set the system hierarchy parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnConfigProjectRootFromGenericUtilClassException">
            <summary>
            Failed to get ConfigProjectRoot from CmnAppGenericUtilClass.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNotNameRuleObjectException">
            <summary>
            The object is not a name rule object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUserHasNoReadOrModifyAccessException">
            <summary>
            The user does not have access to read or modify the object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDRelHelperGetColRelationsException">
            <summary>
            Failed to get relations collection from DRelationHelper.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDColHelperGetItemException">
            <summary>
            Failed to get item from DCollectionHelper.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIJDObjectRemoveException">
            <summary>
            IJDObject.Remove failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDColHelperRemoveException">
            <summary>
            Failed to remove object from DCollectionHelper.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCreateNameRuleAEException">
            <summary>
            Failed to create name rule active entity.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDColHelperAddException">
            <summary>
            Failed to add object to DCollectionHelper.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnJRevisionAddException">
            <summary>
            JRevision.Add failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotGetReferenceFileObject">
            <summary>
            Cannot get reference file objects from reference file name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCannotGetForeignReferenceRoot">
            <summary>
            Cannot get foreign reference root object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterMyFiltersFolder">
            <summary>
            My Filters
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterPlantFiltersFolder">
            <summary>
            Plant Filters
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterCatalogFiltersFolder">
            <summary>
            Catalog Filters
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIJDObjectPermissionGroupException">
            <summary>
            Failed to set permission group on IJDObject interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMapFileLocation">
            <summary>
            Map file location.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnAccessDeniedException">
            <summary>
            You do not have permission to access or modify the object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoSuchObjectException">
            <summary>
            Object identifier cannot be found in the database.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnObjectModifiedException">
            <summary>
            The object cannot be updated or deleted because the object has been concurrently modified by another user.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNotInWorkingStatusException">
            <summary>
            The object is not in working status.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotBindToSourceException">
            <summary>
            Cannot access the source of the object and access the object instance.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMSDTCNotEnabledException">
            <summary>
            Cannot open a transaction. Microsoft Distributed Transaction Coordinator (MSDTC) is not configured to enable network DTC access.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMissingHierarchiesRootWrapperException">
            <summary>
            Cannot cast BusinessObject to HierarchiesRoot object type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoDatabaseException">
            <summary>
            Database does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoSchemaDatabaseException">
            <summary>
            Schema database does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoServerException">
            <summary>
            Server does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoSchemaServerException">
            <summary>
            Schema server does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDatabaseAccessDeniedException">
            <summary>
            Database access denied.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoSpecRelationshipException">
            <summary>
            No specification relationship was found.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToAddAllowableSpecException">
            <summary>
            Failed to add allowable specifications.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToRemoveAllowableSpecException">
            <summary>
            Failed to remove allowable specifications.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetAllowableSpecsException">
            <summary>
            Failed to get allowable specifications.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToReplaceAllowableSpecsException">
            <summary>
            Failed to replace allowable specifications.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToResetAllowableSpecsException">
            <summary>
            Failed to reset to parent allowable specifications.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnReadOnlyClassPropertyViolationException">
            <summary>
            Cannot write to this class property value.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMathValuesAreInValid">
            <summary>
            Math corrdinate values are invalid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSObjectProjectCreationFailedException">
            <summary>
            Creation of WBSProject failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSItemCreationFailedException">
            <summary>
            Creation of WBSItem failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnProjectChangeDeniedFailedException">
            <summary>
            WBSProject change is denied.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnProjectChildAlreadyAssignedException">
            <summary>
            Child is already assigned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnExclusivityConflictException">
            <summary>
            Exclusivity in conflict.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSProjectfailedException">
            <summary>
            Unknown COMException from WBSProject encountered.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoProxySourceObjectException">
            <summary>
            Failed to bind proxy source.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMiddleContextException">
            <summary>
            Failed to create MiddleContext component.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnActiveSiteNullException">
            <summary>
            No active site. Site is not initialized.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnActivePlantNullException">
            <summary>
            No active plant. Plant is not initialized.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketchCrossSectionFactoryException">
            <summary>
            Failed to create COM SketchCrossSectionFactory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketchCrossSectionException">
            <summary>
            Failed to create COM SketchCrossSection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnGetCrossSectionDefinitionException">
            <summary>
            Failed to get COM cross section definition object from IJDSketchCrossSection.CrossSectionDefinition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSetCrossSectionDefinitionException">
            <summary>
            Failed to set COM cross section definition object on IJDSketchCrossSection.CrossSectionDefinition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnArcBy3PointsFeatureStartPointNotConnectable">
            <summary>
            This sketch point which represents the start point of ArcBy3PointsFeature is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPointAlongArcNotConnectable">
            <summary>
            PointAlongArc is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnEndPointNotConnectable">
            <summary>
            EndPoint is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateArcBy3PointsFeatureException">
            <summary>
            Failed to create COM ArcBy3PointsFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMidPointAlongArcNotConnectable">
            <summary>
            MidPointAlongArc is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnArcByEndPointsFeatureStartPointNotConnectable">
            <summary>
            This sketch point which represents the start point of ArcByEndPointsFeature is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateArcByEndPointsFeatureException">
            <summary>
            Failed to create COM ArcByEndPointsFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnEllipticalArcFeatureStartPointNotConnectable">
            <summary>
            This sketch point which represents the start point of EllipticalArcFeature is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateEllipticalArcFeatureException">
            <summary>
            Failed to create COM EllipticalArcFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnLineFeatureStartPointNotConnectable">
            <summary>
            This sketch point which represents the start point of LineFeature is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateLineFeatureException">
            <summary>
            Failed to create COM LineFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateBendFeatureException">
            <summary>
            Failed to create COM BendFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotGetBendFeatureException">
            <summary>
            Failed to get COM BendFeature from CachedPoint.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateCorniceFeatureException">
            <summary>
            Failed to create COM CorniceFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotGetCorniceFeatureException">
            <summary>
            Failed to get COM CorniceFeature from CachedPoint.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateChamferFeatureException">
            <summary>
            Failed to create COM ChamferFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotGetChamferFeatureException">
            <summary>
            Failed to get COM ChamferFeature from CachedPoint.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotCreateSplitFeatureException">
            <summary>
            Failed to create COM SplitFeature.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCannotGetSplitFeatureException">
            <summary>
            Failed to get COM SplitFeature from CachedPoint.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCrossSectionDefinitionException">
            <summary>
            Cannot set CrossSectionDefinition. Value has to be a IPart or Sketch3d type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSplitFeatureAtMidPointException">
            <summary>
            Cannot create SplitFeature at this point which represents the mid point of an arc.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSplitFeatureAtPointException">
            <summary>
            Cannot create SplitFeature at a point that is not associated with two CurveFeatures.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBendFeatureAtPointException">
            <summary>
            Cannot create BendFeature at a point that is not associated with two LineFeatures.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnChamferFeatureAtPointException">
            <summary>
            Cannot create ChamferFeature at a point that is not associated with two LineFeatures.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCorniceFeatureAtPointException">
            <summary>
            Cannot create CorniceFeature at a point that is not associated with two LineFeatures.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnGetCrossSectionGraphicsException">
            <summary>
            Failed to get COM cross section graphics object from IJDSketchCrossSection.CrossSectionGraphics.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUpdateSymbolAttributesException">
            <summary>
            UpdateSymbolAttributes method on COM IJDSketchCrossSection interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnExtractSketch3dFromSymbolException">
            <summary>
            ExtractSketch3dObjectFromSymbol method on COM IJDSketchCrossSection interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCenterPointNotConnectableException">
            <summary>
            CenterPoint for elliptical arc is not connectable.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dFactoryException">
            <summary>
            Failed to create COM Sketch3dFactory.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dException">
            <summary>
            Failed to create COM Sketch3d.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dGetCurveSegmentsException">
            <summary>
            GetCurveSegments property on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dGetComplexStringException">
            <summary>
            GetComplexString property on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dComputeCurveSegmentsException">
            <summary>
            ComputeCurveSegments function on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dGetCacheTurnPointsException">
            <summary>
            CacheTurnPoints method on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dSetTurnPointsException">
            <summary>
            SetTurnPoints method on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dModifySketchingPlaneException">
            <summary>
            ModifySketchingPlane method on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dGetComplexStringsException">
            <summary>
            Get ComplexStringCollection property on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketch3dGetBsplineCurveException">
            <summary>
            GetGBspCurveFromSketch property on COM IJDSketch3d interface failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSketchPointWithoutCachedPointException">
            <summary>
            SketchPoint does not have a CachedPoint. Every sketch point must have a cached point.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMGetDefaultUnitFormatException">
            <summary>
            Unexpected failure in GetDefaultUnitFormat.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMSetDefaultUnitFormatException">
            <summary>
            Unexpected failure in SetDefaultUnitFormat.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMSetFractionalPrecisionException">
            <summary>
            Unexpected failure in set FractionalPrecision.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMSetDecimalPrecisionException">
            <summary>
            Unexpected failure in set DecimalPrecision.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMInvalidFractionalPrecisionValue">
            <summary>
            UOM fractional precision must be 2,4,8,16,32,64, or 128.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUOMInvalidDecimalPrecisionValue">
            <summary>
            UOM decimal precision must be in the range of 0 to 15.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.MathCannotCreateGeometryException">
            <summary>
            Failed to create math geometry in constructor.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.MathCannotDefineGeometryException">
            <summary>
            Failed to define geometry.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.MathGeometryFactoryException">
            <summary>
            Failed to create math GeometryFactory in constructor.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.MathArgumentInvalidException">
            <summary>
            Argument is invalid to math method.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnProjectManagementFactoryException">
            <summary>
            Failed to create ProjMgmtFactory component.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnProjMgmtFactoryGetProjectsException">
            <summary>
            Failed to get projects collection object from ProjMgmtFactory component.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIJHierarchyGetDisplayChildrenException">
            <summary>
            Failed to get GetDisplayChildren from IJHierarchy interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrObjectnotImplement">
            <summary>
            Wrapper object either not initialized or does not implement IJLocalCoordinateSystem interface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrInvalidVector">
            <summary>
            xAxisNew or yAxisNew.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoMatchingOpenParenAndCloseParenException">
            <summary>
            The compound filter does not contain matching OpenParen and CloseParen operators.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCompoundFilterOperatorMissingException">
            <summary>
            The compound filter is missing CompoundFilterOperator infront of OpenParen operator. Valid operators are Or, AND, NOT.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToAddAssemblyChildException">
            <summary>
            Failed to add a assembly hierarchy child.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetAssemblyChildrenException">
            <summary>
            Failed to return assembly hierarchy children.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetAssemblyParentException">
            <summary>
            Failed to return the assembly hierarchy parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToSetAssemblyParentException">
            <summary>
            Failed to set the assembly hierarchy parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBaseObjectDoesNotImplementValidAssemblyHierarchy">
            <summary>
            The base object does not implement valid assembly hierarchy.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBODoesNotSupportIJMfgParentOrIJMfgChild">
            <summary>
            The business Object does not support IJMfgParent or IJMfgChild.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrCompute">
            <summary>
            Unexpected failure while computing.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrInvalidCurves">
            <summary>
            Invalid Curves. Cann't create complexstring with this curves 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrUnExpectedFailureOfDefinePlacePoint">
            <summary>
            Unexpected failure while defining the place point.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrKeyIsNotUnique">
            <summary>
            Cannot define the place point with the specified key. Key Should be unique.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrInvalidArgs">
            <summary>
            Invalid argument is passed. Supports only LineString3d or ComplexString3d.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrIntersectAxisWithCurve">
            <summary>
            Cannot create Revolution3d. Axis intersects with the curve passed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrInvalidCurveNotPlanar">
            <summary>
            Invalid argument is passed. Curve passed as an argument is not planar.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrUnexpectedFail">
            <summary>
            Unexpected failure.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrCrossSectionNotPerpendicularToPrimary">
            <summary>
            Invalid argument passed. Cross section passed is not perpendicular to the primary axis
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrCurveIsNotClosedCurve">
            <summary>
            Curve passed is an open curve.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrVerticesAreSelfIntersecting">
            <summary>
            Given list of vertices are self intersecting.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrVerticesAreNotPlanar">
            <summary>
            List of vertices passed are not planar
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrInvalidHeightGreaterThanRadius">
            <summary>
            Height of the dish is not positive value or greater than the diameter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrInvalidHeightGreaterThanTwiceMinRadius">
            <summary>
            Height of the dish is not positive value or greater than twice minimum radius.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrFlatSideDiaGreaterThanTwiceMaxRadius">
            <summary>
            FlatSideDiameter of the dish is not positive value or greater than twice the maximum radius.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrInvalidArgument">
            <summary>
            Invalid argument passed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrCreateObject">
            <summary>
            Unexpected failure in constructing the .NET object
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnErrUCreateObject">
            <summary>
            Unable to create .Net Object
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInterfaceNameDotPropertyName">
            <summary>
            InterfaceName.PropertyName : 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDot">
            <summary>
            .
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPGFNameIsNotUniqueException">
            <summary>
            Permission group folder name is not unique.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPGNameIsNotUniqueException">
            <summary>
            Permission group name is not unique.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPGAndPGFCanNotCoExistAtSameLevelException">
            <summary>
            Permission group and Permission group folder should not co exist at same level.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreatePGException">
            <summary>
            Failed to create permission group.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreatePGFException">
            <summary>
            Failed to create permission group folder.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToSetPGNameException">
            <summary>
            Failed to set the permission group name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnAtLeastOneUserWriteOrFullAccessException">
            <summary>
            At least one user should have write or full access.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidUserNameException">
            <summary>
            Invalid user name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoUserOrGroupExistsInGivenDomain">
            <summary>
            No user or grouo exists in the given domain.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNameGeneratorServerDoesNotExistsException">
            <summary>
            Specified name generator does not exists.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNameGeneratorServerHasNotStartedException">
            <summary>
            Namegenerator server not started.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidDatabaseServerException">
            <summary>
            Invalid database server.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToExecuteQueryException">
            <summary>
            Failed to execute query exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreateCatalogException">
            <summary>
            Failed to create catalog exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToRestorePlantException">
            <summary>
            Faile to restore plant exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToBackUpPlantException">
            <summary>
            Failed to take backup of plant exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnTaskHostIsActiveException">
            <summary>
            Failure while creating a Site as the TaskHost active. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnActiveSiteAlreadyExistsException">
            <summary>
            Failure while creating a Site , an activeSite exist for the Sitemanger. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToRestoreSiteSchemaException">
            <summary>
            Failure while restoring SiteSchema.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreateSiteException">
            <summary>
            Failed to create Site.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreatePlantException">
            <summary>
            Failed to create Plant exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDatabaseWithTheSameNameExistsException">
            <summary>
            Database with the same name exists.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToRestoreSiteException">
            <summary>
            Failed to restore site because of Unexpected exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToDropDataBaseException">
            <summary>
            Failed to drop database.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToSetNameGeneratorServer">
            <summary>
            Failed to Set NameGenerator server path .
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToRegenerateReportsException">
            <summary>
            Failed to regenerate reports exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnOracleServerDoesnotHaveWritePermissions">
            <summary>
            Oracle server does not have write permissions exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToRestoreCatalogException">
            <summary>
            Failed to restore catalog exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreateCatalogDataBaseException">
            <summary>
            Failed to create catalog data base exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreateCatalogSchemaException">
            <summary>
            Failed to create catalog schema exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnAtleastOneReferencePlaneNeeded">
            <summary>
            At least one reference plane must be passed in.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnArgumentMustBeIJElementsType">
            <summary>
            Argument must be of type IJElements.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnArgumentMustBeIJDObjectCollectionType">
            <summary>
            Argument must be of type IJDObjectCollection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnArgumentMustBeDVectorType">
            <summary>
            Argument must be of type AuthMath.DVector.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnArgumentMustBeDPositionType">
            <summary>
            Argument must be of type AuthMath.DPosition.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnArgumentMustBeDT4x4Type">
            <summary>
            Argument must be of type AuthMath.DT4x4.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPlantDoesnotBelongToActiveSite">
            <summary>
            Plant doesnot belong to Active Site
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetDefaultFileLocationException">
            <summary>
            Failed to get default file location exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnLoadPrivateBusinessObjectAssemblyException">
            <summary>
            Failed to load PrivateBusinessObject assembly : $1.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnLoadBusinessObjectAssemblyException">
            <summary>
            Failed to load BusinessObject assembly : $1.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnLoadNameRuleAssemblyException">
            <summary>
            Failed to load NameRule assembly : $1.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnGetPrivateBusinessObjectTypeException">
            <summary>
            Failed to get PrivateBusinessObject class [$1] type from assembly [$2].
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnGetBusinessObjectTypeException">
            <summary>
            Failed to get BusinessObject class [$1] type from assembly [$2].
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnGetNameRuleTypeException">
            <summary>
            Failed to get NameRule class [$1] type from assembly [$2].
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPrivateBusinessObjectSubClassedTypeException">
            <summary>
            Failed to create PrivateBusinessObject sub-classed instance. Class:$1, Assembly:$2. Constructor may be missing or is inaccessible.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBusinessObjectSubClassedTypeException">
            <summary>
            Failed to create BusinessObject sub-classed instance. Class:$1, Assembly:$2. Constructor may be missing or is inaccessible.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNameRuleBaseSubClassedTypeException">
            <summary>
            Failed to create NameRule instance. Class:$1, Assembly:$2.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFileExistsWithSameNameException">
            <summary>
            File exists at same location with same name exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToCreateProjectManagementObject">
            <summary>
            Failed to create project management object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToLoadOracleSchemaOrDB">
            <summary>
            Failed to load oracle data base or schema.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDataBaseNameExceedsMaximumLength">
            <summary>
            Data base name exceeds maximum length.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToReadBCFFile">
            <summary>
            Failed to read back up configuration file.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNotNameRuleException">
            <summary>
            Class [$1] from assembly [$2] is not a namerule.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToLoadTablesAndViewsException">
            <summary>
            Failed to LoadTablesAndViews.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnClassNotFoundForTransientObjectException">
            <summary>
            Class Not Found For Transient Objectcs."
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoDBConnectionInClassInfoException">
            <summary>
            No Database Connection in ClassInfo
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCatalogWithSameNameExistsInThisSite">
            <summary>
            Catalog with same name exists in this site exception.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToRestorePlantForSelectiveModelObjectsRecovery">
            <summary>
            Unexpected failure in "RestorePlantForSelectiveModelObjectsRecovery".
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGenerateViewsException">
            <summary>
            Failed to generate Views.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnCatalogDoesNotBelogsToSite">
            <summary>
            Catalog does not belog to site.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPlantExistsWithSameName">
            <summary>
            Plant with same name exists in this site.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToRestorePlantAsCopyException">
            <summary>
            Unexpected failure 'RestorePlantAsCopyException' method.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterException">
            <summary>
            Raised when an unknown error is encountered. Error details available in the error log.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRelationshipNotFoundException">
            <summary>
            Relationship not found or failed to retrieve relationship information with parameters Relationship:$1 and Namespace:$2.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnRoleNameException">
            <summary>
            Rolename does not match the origin or destination rolenames of relationship. Relationship:$1, Rolename:$2.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidStateException">
            <summary>
             Helper is in invalid state as the reference to the business object has been lost.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSupportsCurveException">
            <summary>
            This error is raised when the given business object is not a curve.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidValue">
            <summary>
            Invalid property value.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnTrue">
            <summary>
            True.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFalse">
            <summary>
            False.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnUndefinedPropertyType">
            <summary>
            Undefined property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnHyperLinkShouldAlwaysBeRelated">
            <summary>
            HyperLink object should always be related to another object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnHyperLinkNeedsValidURL">
            <summary>
            A valid URL string is required to create a HyperLink object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPlantIsNotActiveException">
            <summary>
            Plant properties cannot be accessed for non-acitve plant
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailedToGetDatabaseInformationForPlantException">
            <summary>
            Failed to get the databaseinformation for the plant.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSupportsSurfaceException">
            <summary>
            This error is raised when the given business object is not a surface.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSupportsPlaneException">
            <summary>
            This error is raised when the given business object is not a plane.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSupportsLineException">
            <summary>
            This error is raised when the given business object is not a line.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnOpenPlantException">
            <summary>
            Cannot change plants when running in non-standalone mode.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSetActivePlantException">
            <summary>
            Cannot set active plant. The plants collection on Site does not contain such a plant.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterTransientFilterNotAllowedException">
            <summary>
            Transient filter cannot be added as a member of persistant compound filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIncorrectCodelistValueException">
            <summary>
            Incorrect codelist value
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnControlPointCreationFailedException">
            <summary>
            ControlPoint Creation failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoteCreationFailedException">
            <summary>
            Note Creation failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnGetNotePositionFailedException">
            <summary>
            Get Note Position failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMissingModelException">
            <summary>
            Model is missing for the plant
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMissingCatalogException">
            <summary>
            Catalog is missing for the plant
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterInvalidOperatorException">
            <summary>
            Compound filter operator is invalid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidSelectionRuleWrapperException">
            <summary>
            Invalid Selection rule wrapper.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnOnlyOneQuestionAllowedException">
            <summary>
            May only have one Question attribute decorate a SelectorAnswer.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoInterfaceAttributeException">
            <summary>
            Must provide the name of the selection rule interface
            (via an InterfaceAttribute decorating the SelectorRule class).
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnDuplicateAssemblyOutputIndexException">
            <summary>
            Two assembly ouputs were declared with the same index.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInterfaceDoesNotExistException">
            <summary>
            Declared output notification wad defined for an interface that does not exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNoAssemblyOutputForBOException">
            <summary>
            The provided business object is nopt an output of this assembly..
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMustDeleteOutputFirstException">
            <summary>
            Cannot re-define an assembly output without deleting it first.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnNotAllowedToResurrectOutputException">
            <summary>
            Assembly output was explicitly deleted by the user; hence, the developer
            should not re-create this output.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMustExplicitlyDeleteOutputException">
            <summary>
            Cannot construct a new output without first explicitly deleting the previous output.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBusinessObjectDeleteException">
            <summary>
            Failed to delete business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnGetApprovalReasonException">
            <summary>
            Failed to get the approval reason on the business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSetApprovalReasonException">
            <summary>
            Failed to set the approval reason on the business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPOMGetObjectException">
            <summary>
            Failed to bind the business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFilterSupplyParametersException">
            <summary>
            Failed to supply parameters to the parametric filter.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnValidateLicenseException">
            <summary>
            Failed to obtain the License seat.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnSPLMClientNotInstalledException">
            <summary>
            Failed to obtaint license seat due to SPLM Client not installed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnReadOnlyLicenseException">
            <summary>
            Failed to obtaint license seat due as the license is readonly.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.GetPlaneInputsException">
            <summary>
            Invalid call of overloaded GetInputs method for respective PlaneDefinitionType.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.SetPlaneInputsException">
            <summary>
            Invalid call of overloaded SetInputs method for respective PlaneDefinitionType.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIJDObjectException">
            <summary>
            Failure in casting $1 to IJDObject.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailBOException">
            <summary>
            Failure in casting $1 to BO.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToOpenRegistryKey">
            <summary>
            Failure in opening a registry key.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToCastObjectToAssemblyOutputsCopyBehavior">
            <summary>
             Failure in casting object to AssemblyOutputsCopyBehavior
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnIJExposeErrorsException">
            <summary>
            Failure in casting $1 to IJExposeError.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPlantIsNullException">
            <summary>
            The Private BO's connection is niether Plant nor Site.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFeatureTypeException">
            <summary>
            The Feature Type of the LineFeature doesnot exist.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBaseObjectDoesNotImplementValidAnalysisHierarchy">
            <summary>
            The base object does not implement valid analysis hierarchy.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetAnalysisParentException">
            <summary>
            Failed to return the analysis hierarchy parent.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToGetAnalysisChildrenException">
            <summary>
            Failed to return analysis hierarchy children.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnFailToAddAnalysisChildException">
            <summary>
            Failed to add a analysis hierarchy child.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnBODoesNotSupportIJAnalysisParentOrIJAnalysisChild">
            <summary>
            The business Object does not support IJAnalysisParent or IJAnalysisChild.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidWBSPurposeParent">
            <summary>
            Parent is invalid for this child.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSSetPurposeException">
            <summary>
            WBSItem property purpose cannot be set.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInvalidProject">
            <summary>
            Project is invalid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnMustProvideErrorContextMessageException">
            <summary>
            Must provide an error context message when a property is tagged as invalid.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnAssemblyOutputMustBePersistent">
            <summary>
            Cannot provide a transient assembly output.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnAssemblyObjectMustBePersistent">
            <summary>
            Cannot provide a transient object for property validation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSSetExclusiveException">
            <summary>
            WBSItem property exclusive cannot be set.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSSetAssignmentException">
            <summary>
            WBSItem property WBSAssignment cannot be set.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSSetTypeException">
            <summary>
            WBSItem property type cannot be set.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSSetProjectStatusException">
            <summary>
            WBSProject property project status cannot be set.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnWBSSetProjectPurposeException">
            <summary>
            WBSProject property project purpose cannot be set.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPermissionGroupFoldersNotSupportedByReports">
            <summary>
            The Permission Group Folder property on the Reports Connection cannot be accessed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnPermissionGroupsNotSupportedByReports">
            <summary>
            The Permission Groups property on the Reports Connection cannot be accessed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnActivePermissionGroupNotSupportedByReports">
            <summary>
            The Active Permission Group property on the Reports Connection cannot be accessed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CmnResourceIDs.CmnInconsistentWBSAssignmentException">
            <summary>
            Updating WBSItem properties causes Assignment Conflicting.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.TransactionManager">
             <summary>
             TransactionManager service allows the user to call abort, commit, and compute.
             </summary>
             <example>This is an example for TransactionManager class methods and properties.
             <code>
             Public Class TransactionMgr
               Public Sub New()
            
                'Getting TransactionManager from the MiddleServiceProvider. 
                Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                'Creating an Equipment given part number.
                'Passing a null system indicates that the equipment is created under the project root. 
                Dim oEqp1 As Equipment = Nothing
                oEqp1 = New Equipment("PUMP 001A-E", Nothing)
            
                'Getting ILocalCoordinateSystem interface and setting the position of the equipment. 
                'Setting the position of the equipment.
                Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEqp1, ILocalCoordinateSystem)
                Dim oPos As New Position()
                oPos.X = 6
                oPos.Y = 3
                oPos.Z = 3
                oEqpCS.Origin = oPos
            
                'Calling TransactionManager compute. This is not implemented yet.
                'm_oTransactionMgr.Compute(); 
            
                'Committing the transaction. (Equipment object is persisted into the database.)
                oTransactionMgr.Commit("Place Equipment1")
            
                'Calling the Abort method on Transaction Manager.
                'Changing the origin of the Equipment object. This change would not be persisted into the database since the transaction will be aborted.
                Dim oNewPos As New Position(7, 3, 3)
                oEqpCS.Origin = oNewPos
                oNewPos = Nothing
                oNewPos = oEqpCS.Origin
            
                'Aborting the transaction.
                oTransactionMgr.Abort()
            
                'These methods are not implemented yet.
                'int iTransactionInCache = oTransactionMgr.TransactionsInCache; 
                'int iUndoLimit = oTransactionMgr.UndoLimit; 
                'oTransactionMgr.UndoLimit = 5; 
                'iUndoLimit = oTransactionMgr.UndoLimit; 
                'oTransactionMgr.ClearUndoCache(); 
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransactionManager.ObtainConnectMiddle">
            <summary>
            Obtains ConnectMiddle object.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToObtainConnectMiddleException">Failed to obtain ConnectMiddle object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransactionManager.#ctor">
            <summary>
            Initializes a new instance of the TransactionManager class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransactionManager.CleanUp">
            <summary>
            Releases members.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransactionManager.Commit(System.String)">
            <summary>
            Commits the current transaction.
            </summary>
            <param name="strMarker">The name of the commit marker.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToObtainConnectMiddleException">Raised when failed to
            obtain the connect middle.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransactionManager.Abort">
            <summary>
            Aborts the current transaction.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransactionManager.Compute">
            <summary>
            Recalculates the business object involved in the current transaction. Not implemented.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.TransactionManager.ClearUndoCache">
            <summary>
            Resets the undo cache. Not implemented.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.TransactionManager.TransactionsInCache">
            <summary>
            Read-only, but not implemented at this time.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.TransactionManager.UndoLimit">
            <summary>
            Defines the number of commits that will be maintained for undo. Read-only, but not implemented.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToObtainConnectMiddleException">
            <summary>
            Raised when the ConnectMiddle object cannot be obtained.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToObtainConnectMiddleException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToObtainConnectMiddleException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToComputeException">
            <summary>
            Raised when there is an unexpected failure while computing.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToComputeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToObtainConnectMiddleException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.BOMoniker">
            <summary>
            BOMoniker provides a SOM-level wrapper for an SP3D IMoniker. This object is intended to
            simply be passed around, primarily when building SOM BO collections.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOMoniker.#ctor(RESPOMLib.IMoniker)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOMoniker class 
            with the supplied IMoniker.
            </summary>
            <param name="oIMoniker">Moniker as RESPOMLib.IMoniker.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOMoniker.Moniker">
            <summary>
            Gets the SP3D moniker.
            </summary>
            <returns>RESPOMLib.IMoniker</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.BOMonikers">
            <summary>
            BOMonikers provides a collection of BOMoniker objects. It can be initialized using an 
            existing IJElemnents object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOMonikers.#ctor(RESPOMLib.IEnumMoniker)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOMonikers class 
            with the supplied IEnumMoniker object.
            </summary>
            <param name="oEumMon">RESPOMLib.IEnumMoniker.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOMonikers.#ctor(IMSCoreCollections.IJDObjectCollection)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOMonikers class 
            with the supplied IJDObjectCollection object.
            </summary>
            <param name="oIJDObjectCollection">IMSCoreCollections.IJDObjectCollection.</param>
            <exception cref="T:System.ArgumentNullException">oIJDObjectCollection is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">ResourceManager on IJDObject returned null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomGetSystemMonikerException">Failed to get SystemMoniker from IJDPom interface.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOMonikers.#ctor(IMSCoreCollections.IJElements)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOMonikers class 
            with the supplied IJElements object.
            </summary>
            <param name="oIJElements">IMSCoreCollections.IJElements</param>
            <exception cref="T:System.ArgumentNullException">oIJElements is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">ResourceManager on IJDObject returned null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomGetSystemMonikerException">Failed to get SystemMoniker from IJDPom interface.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOMonikers.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOMonikers.Monikers">
            <summary>
            Gets the BOMonikers collection.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of BOMoniker objects.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotReserveSeatException">
            <summary>
            This exception is thrown when a SP3D seat (license) cannot be reserverd.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotReserveSeatException.#ctor">
            <summary>
            Initializes a new instance of the CmnCannotReserveSeatException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotCreateRevisionManagerException">
            <summary>
            This exception is thrown when a COM exception occurs creating RevisionManager component (JRevisionClass).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotCreateRevisionManagerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnCannotCreateRevisionManagerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMissingInterfaceException">
            <summary>
            This exception is thrown when an expected interface is missing.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingInterfaceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnMissingInterfaceException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingInterfaceException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnMissingInterfaceException 
            class with the message for the resource ID passed in.
            </summary> 
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMissingConnectionPointException">
            <summary>
            This exception is thrown when IConnectionPoint is missing.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingConnectionPointException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnMissingConnectionPointException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingConnectionPointException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnMissingConnectionPointException 
            class with the message for the resource ID passed in.
            </summary> 
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDbIdentifierFromMonikerException">
            <summary>
            This exception is thrown when a COM exception occurs calling RESPOMLib.IJDPOM.get_DbIdentifierFromMoniker.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDbIdentifierFromMonikerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnDbIdentifierFromMonikerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnClsidFromMonikerException">
            <summary>
             This exception is thrown when a COM exception occurs calling RESPOMLib.IJDPOM.get_ClsidOf.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnClsidFromMonikerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnClsidFromMonikerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMonikerFromDbIdentifierException">
            <summary>
            This exception is thrown when a COM exception occurs calling RESPOMLib.IJDPOM.get_MonikerFromDbIdentifier.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMonikerFromDbIdentifierException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnMonikerFromDbIdentifierException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNullMonikerException">
            <summary>
            This exception is thrown when a null moniker is returned by calling a function
            that is expected to return a valid moniker.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNullMonikerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnNullMonikerException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNullMonikerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnNullMonikerException 
            class with the message for the resource ID passed in.
            </summary> 
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPrivateBusinessObjectExistsInCacheException">
            <summary>
            This exception is thrown when a PrivateBusinessObject cannot be added to cache as one 
            already exists.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPrivateBusinessObjectExistsInCacheException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnPrivateBusinessObjectExistsInCacheException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseIDFromIJDPomException">
            <summary>
            This exception is thrown when a COM exception occurs calling RESPOMLib.IJDPOM.DatabaseID.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDatabaseIDFromIJDPomException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnDatabaseIDFromIJDPomException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoProxySourceObjectException">
            <summary>
            This exception is thrown when a COMException with error code MK_E_NOOBJECT is raised by 
            calling IJProxy.GetSource.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoProxySourceObjectException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoProxySourceObjectException
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnLoadPrivateBusinessObjectAssemblyException">
            <summary>
            This exception is thrown if calling .NET's Assembly.Load raises an exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnLoadPrivateBusinessObjectAssemblyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnLoadBusinessObjectAssemblyException">
            <summary>
            This exception is thrown if calling .NET's Assembly.Load raises an exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnLoadBusinessObjectAssemblyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetPrivateBusinessObjectTypeException">
            <summary>
            This exception is thrown if calling .NET's Assembly.GetType returns a null type.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetPrivateBusinessObjectTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetBusinessObjectTypeException">
            <summary>
            This exception is thrown if calling .NET's Assembly.GetType returns a null type.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetBusinessObjectTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPrivateBusinessObjectSubClassedTypeException">
            <summary>
            This exception is thrown if calling .NET's Activator.CreateInstance raises an exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPrivateBusinessObjectSubClassedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnBusinessObjectSubClassedTypeException">
            <summary>
            This exception is thrown if calling .NET's Activator.CreateInstance raises an exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnBusinessObjectSubClassedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a reference to the 
            inner Exception that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The Exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPOMGetObjectException">
            <summary>
             This exception is thrown when COM exception occurs in IJDPOM->GetOject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPOMGetObjectException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoProxySourceObjectException
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PointFeature">
            <summary>
            Abstract class for point features.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PointFeature.#ctor(SP3DPIA.TransientEntities.IJDPointFeature,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Initializes a new instance of the PointFeature class
            with the supplied COM object (IJDPointFeature).
            For internal use only.
            </summary>
            <param name="oIJDPointFeature">COM IJDPointFeature.</param>
            <param name="oSketchPoint">SketchPoint at which this point feature is associated.</param>
            <exception cref="T:System.ArgumentNullException">oIJDPointFeature cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">oSketchPoint cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PointFeature.Finalize">
            <summary>
            Releases memory.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PointFeature.Cleanup">
            <summary>
            Releases COM object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PointFeature.GetCOMPointFeature">
            <summary>
            Gets the COM point feature object (IJDPointFeature). For internal use only.
            </summary>
            <returns>COM PointFeature as IJDPointFeature.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PointFeature.ComputeGeometry(Ingr.SP3D.Common.Middle.BusinessObject@)">
            <summary>
            Performs a compute and returns the computed geometry.
            </summary>
            <param name="Geometry">Geometry as BusinessObject.</param>
            <returns>bool indicating the result of compute.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PointFeature.UpdateFeatureValueByPosition(Ingr.SP3D.Common.Middle.Position,System.Double@)">
            <summary>
            Updates the feature value by position.
            </summary>
            <param name="Pos">New position.</param>
            <param name="dFeatureValue">Modified feature value.</param>
            <returns>bool.</returns>
            <exception cref="T:System.ArgumentNullException">Pos cannot be null.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.BendFeature">
            <summary>
             Wrapper class for BendFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BendFeature.#ctor(SP3DPIA.TransientEntities.IJDPointFeature,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Initializes a new instance of the BendFeature class
            with the supplied COM object (IJDPointFeature).
            For internal use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDPointFeature">COM IJDPointFeature.</param>
            <param name="oSketchPoint">SketchPoint at which this point feature is associated.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BendFeature.FeatureValue">
            <summary>
            Gets the feature value (Bend radius).
            </summary>
            <returns>Bend radius as double.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ChamferFeature">
            <summary>
            Wrapper class for ChamferFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ChamferFeature.#ctor(SP3DPIA.TransientEntities.IJDPointFeature,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Initializes a new instance of the ChamferFeature class
            with the supplied COM object (IJDPointFeature).
            For internal use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDPointFeature">COM IJDPointFeature.</param>
            <param name="oSketchPoint">SketchPoint at which this point feature is associated.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ChamferFeature.FeatureValue">
            <summary>
            Gets the feature value (Chamfer radius).
            </summary>
            <returns>Chamfer radius as double.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CorniceFeature">
            <summary>
            Wrapper class for CorniceFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CorniceFeature.#ctor(SP3DPIA.TransientEntities.IJDPointFeature,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Initializes a new instance of the CorniceFeature class
            with the supplied COM object (IJDPointFeature).
            For internal use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDPointFeature">COM IJDPointFeature.</param>
            <param name="oSketchPoint">SketchPoint at which this point feature is associated.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CorniceFeature.FeatureValue">
            <summary>
             Gets the feature value.
            </summary>
            <returns>Feature value as double.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SplitFeature">
            <summary>
            Wrapper class for SplitFeature.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SplitFeature.#ctor(SP3DPIA.TransientEntities.IJDPointFeature,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Initializes a new instance of the SplitFeature class
            with the supplied COM object (IJDPointFeature).
            For internal use only. Must be called by TransientSketchObjectService only.
            TransientSketchObjectService is responsible for creating and 
            maintaining sketch transient objects.
            </summary>
            <param name="oIJDPointFeature">COM IJDPointFeature.</param>
            <param name="oSketchPoint">SketchPoint at which this point feature is associated.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Plant">
             <summary>
             The Plant definition is the combination of a model and its corresponding catalog, plus any external references (to other files).
             </summary>
             <example>This is an example for Plant class methods and properties.
             <code>
             Public Class Plant
               Public Sub New()
            
                'Get the active plant.
                Dim oPlant As Plant = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant
            
                'Get the plant name.
                Dim sName As String = oPlant.Name
            
                'Get the description of the plant. 
                Dim sDescription As String = oPlant.Description
            
                'Get the plant model. 
                Dim oModel As Model = oPlant.PlantModel
            
                'Get the plant catalog.
                Dim oCatalog As Catalog = oPlant.PlantCatalog
            
                'Get the plant report.
                Dim oReport As Report = oPlant.PlantReport
            
                'Get the collection of plant references.
                Dim oReferenceColl As ReadOnlyCollection(Of Reference) = oPlant.References
            
                'Add a plant reference. 
                'Not implemented in the wrapper at this time. 
            
                'Get the name of the plant using the ToString method. 
                Dim sPlantName As String = oPlant.ToString()
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Plant.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets Name and Description property values.
            </summary>
            <param name="sPlantName">Plant name.</param>
            <param name="sPlantDescription">Plant description.</param>
            <param name="SiteName">Site Name.</param>
            <param name="SiteServerName">Site's Server Name.</param>
            <param name="SiteProviderName">Site's Provider Name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Plant.IsFileTypeRefConnectionExist(System.String,Ingr.SP3D.Common.Middle.Services.Reference.SP3DReferenceFileType)">
            <summary>
            The method checks if the file type reference connection exist.
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Plant.GetDatabaseInfo(System.String,System.String@,System.String@,System.String@,System.String@,System.Int32@,System.String@)">
            <summary>
            Returns the name, server,permissiongroupid and databaseid.
            </summary>
            <param name="conn">connection type</param>
            <param name="name">name</param>
            <param name="server">server</param>
            <param name="databaseid">databaseid</param>
            <param name="providertype">providertype</param>
            <param name="permissiongroupid">permissiongroupid</param>
            <param name="schemaname">schemaname</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Plant.Dispose">
            <summary>
            Dispose plant and its connections.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Plant.Close">
            <summary>
            Close plant and its connections.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Plant.AddReference(System.String)">
            <summary>
            Not supported in this release.
            </summary>
            <param name="sReferencePath">Path to the reference file to be added.</param>
            <returns>Ingr.SP3D.Common.Middle.Services.Reference.</returns>
            <exception cref="T:System.NotImplementedException">Not implemented.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Plant.ToString">
            <summary>
            Gets the name of this plant.
            </summary>
            <returns>Name of plant as System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Plant.Name">
            <summary>
            Gets the read-only name of the plant.
            </summary>
            <returns>Name of the plant as System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Plant.Description">
            <summary>
            Gets the read-only description of the plant.
            </summary>
            <returns>Description of the plant as System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Plant.PlantModel">
            <summary>
            Gets the read-only model that corresponds to this plant.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Model.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Plant.PlantCatalog">
            <summary>
            Gets the read-only catalog used by this plant.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Catalog.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Plant.PlantReport">
            <summary>
            Gets the read-only report database used by this plant.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Report.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Plant.References">
            <summary>
            Gets the read-only collection of references made by this plant.
            </summary>
            <returns>ReadOnlyCollection of Ingr.SP3D.Common.Middle.Services.Reference objects.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetDatabaseInformationForPlantException">
            <summary>
             This exception is thrown when there is failure in getting the database information for a plant
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetDatabaseInformationForPlantException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFailedToGetDatabaseInformationForPlantException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">Current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMissingModelException">
            <summary>
            This exception is thrown when Model is missing for the plant.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingModelException.#ctor">
            <summary>
            Initializes a new instance of the CmnMissingModelException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMissingCatalogException">
            <summary>
            This exception is thrown when Catalog is missing for the plant.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingCatalogException.#ctor">
            <summary>
            Initializes a new instance of the CmnMissingCatalogException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.MetadataManager">
             <summary>
             MetadataManager exists for each connection. It provides information on classes, interfaces, properties, etc.
             for the BusinessObject on that connection.
             </summary>
             <example>This is an example for MetadataManager class methods and properties.
             <code>
             Public Class MetadataManager
               Public Sub New()
            
                 'Getting the MetadataManager.
                 'Getting SiteManager from MiddleServiceProvider.
                 Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                 Dim oPlantModel As Model = oSiteMgr.ActiveSite.ActivePlant.PlantModel
                 'Getting a model connection. 
                 Dim oRootObj As BusinessObject = DirectCast(oPlantModel.RootSystem, BusinessObject)
                 Dim oModelConn As SP3DConnection = oRootObj.DBConnection
                 'Getting the parent plant.
                 Dim oPlant As Plant = oModelConn.ParentPlant
            
                 'Getting MetadataManager from the model connection.
                 Dim oMetadataMgr As MetadataManager = oModelConn.MetadataMgr
            
                 'Getting BOCInformation from MetadataManager.
                 Dim BOCInformationCol As ReadOnlyDictionary(Of BOCInformation)
                 BOCInformationCol = oMetadataMgr.BOCs
            
                 'Getting ClassInformation from MetadataManager.
                 Dim ClassesCol As ReadOnlyDictionary(Of ClassInformation)
                 ClassesCol = oMetadataMgr.Classes
            
                 'Getting CodelistInformation from MetadataManager.
                 Dim CodeListCol As ReadOnlyDictionary(Of CodelistInformation)
                 CodeListCol = oMetadataMgr.CodeLists
            
                 'Getting the Edges collection from MetadataManager.
                 Dim EdgesCol As ReadOnlyDictionary(Of EdgeInformation)
                 EdgesCol = oMetadataMgr.Edges
            
                 'Getting the InterfaceInformation collection from MetadataManager.
                 Dim InterfaceInfoCol As ReadOnlyDictionary(Of InterfaceInformation)
                 InterfaceInfoCol = oMetadataMgr.Interfaces
            
                 'Getting the RelationshipInformation collection from MetadataManager.
                 Dim RelationshipsCol As ReadOnlyDictionary(Of RelationshipInformation)
                 RelationshipsCol = oMetadataMgr.Relationships
            
                 'Getting BOCInfo from MetadataManager using the BOC path.
                 Dim strBOCTargetPath As String = "CommonObjects"
                 Dim BOCInfo As BOCInformation
                 BOCInfo = oMetadataMgr.GetBOCInfoByPath(strBOCTargetPath)
            
                 'Getting ClassInfomation from MetadataManager given a class name and namespace.
                 'Getting ClassInfomation of PRJMGT.CPConfigProjectRoot.
                 Dim strClassName As String = "CPConfigProjectRoot"
                 Dim strNameSpace As String = "PRJMGT"
                 Dim ClassInfo As ClassInformation
                 ClassInfo = oMetadataMgr.GetClassInfo(strClassName, strNameSpace)
            
                 'Getting CodelistInformation from MetadataManager given a codelist name and namespace.
                 'Getting CodelistInformation of ControlPointType.
                 Dim strCodelistName As String = "ControlPointType"
                 Dim CodeListInfo As CodelistInformation
                 strNameSpace = "CMNSCH"
                 CodeListInfo = oMetadataMgr.GetCodelistInfo(strCodelistName, strNameSpace)
            
                 'Getting EdgeInformation from MetadataManager.
                 'This method is not implemented and hence commenting it for now. 
                 'string strEdgeName = "EquipmentToComponentFndnPort"; 
                 'EdgeInformation EdgeInfo; 
                 'EdgeInfo = oMetadataMgr.GetEdgeInfo(strEdgeName); 
            
                 'Getting InterfaceInformation from MetaDataManager.
                 'Getting InterfaceInformation of IJConfigProjectRoot.
                 Dim strInterfaceName As String = "IJConfigProjectRoot"
                 strNameSpace = "PRJMGT"
                 Dim InterfaceInfo As InterfaceInformation
                 InterfaceInfo = oMetadataMgr.GetInterfaceInfo(strInterfaceName, strNameSpace)
            
                 'Getting RelationshipInformation from MetadataManager.
                 'Getting RelationshipInformation of projects in PRJMGT namespace.
                 Dim strRelationshipName As String = "Projects"
                 Dim RelInfo As RelationshipInformation
                 RelInfo = oMetadataMgr.GetRelationshipInfo(strRelationshipName, strNameSpace)
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddToClassCollection(METADATALib.IJDClassInfo)">
            <summary>
            Add ClassInformation object to the m_oClassDescrs collection.
            </summary>
            <param name="oClassInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddToRelationshipCollection(METADATALib.IJDRelationInfo)">
            <summary>
            Add RelationshipInformation object to the m_oRelationshipDescrs collection.
            </summary>
            <param name="oRelInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddToEdgesCollection(METADATALib.IJDMDEdgeInfo)">
            <summary>
            Add EdgeInformation object to the m_oEdgeDescrs collection.
            </summary>
            <param name="oEdgeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.BuildCodelistInfoObj(METADATALib.IJDCodelistTableInfo)">
            <summary>
            Creates a CodelistInformation object. 
            </summary>
            <param name="oCodelistTableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddParentChildCodelistInfo(System.String,System.String)">
            <summary>
            Adds the Parent/Child CodelistInformation object to the current CodelistInfomation object.
            </summary>
            <param name="sParentChildTableName"></param>
            <param name="strNameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddToCodelistCollection(METADATALib.IJDCodelistTableInfo)">
            <summary>
            Add CodelistInformation object to the m_oCodelistDescrs collection.
            </summary>
            <param name="oCodelistTableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetBOCInformation(METADATALib.IJDBOClassificationNode,System.String)">
            <summary>
            Add BOCInformation object to the m_oBOCDescrs collection.
            </summary>
            <param name="oBOCNode">SP3D BOCNode</param>
            <param name="keypath">BOC path</param>
            <returns>SmartPlant .NET BOCInformation.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddToBOCCollection(Ingr.SP3D.Common.Middle.Services.BOCInformation,Ingr.SP3D.Common.Middle.ReadOnlyDictionary{Ingr.SP3D.Common.Middle.Services.BOCInformation})">
            <summary>
            Internal method to add BOCInformation to the oBOCDescrs collection
            </summary>
            <param name="oBOCInformation"></param>
            <param name="oBOCDescrs"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddToInterfaceCollection(METADATALib.IJDInterfaceInfo)">
            <summary>
            Add InterfaceInformation object to the m_oInterfaceDescrs collection.
            </summary>
            <param name="oInterfaceInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.AddToPropertyCollection(METADATALib.IJDAttributeInfo,Ingr.SP3D.Common.Middle.Services.InterfaceInformation)">
            <summary>
            Add PropertyInformation object to the m_oPropertyDescrs collection.
            </summary>
            <param name="oAttributeInfo">IJDAttributeInfo</param>
            <param name="oInterfaceInfo">InterfaceInformation</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetStringNameFromCategoryID(System.Int64)">
            <summary>
            Used when setting Category on Interfaces.
            </summary>
            <param name="CatID"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.sbKey(System.String,System.Char,System.String)">
            <summary>
            Builds a collection key and returns a StringBuilder obj.
            </summary>
            <param name="sNamespaceName"></param>
            <param name="cDelimitor"></param>
            <param name="sInfoName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetClassInfoUsingClassName(System.String)">
            <summary>
            Get COM classname if no Namespace is provided.
            </summary>
            <param name="strClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetClassInfoFromPrivateBO(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Returns a class descriptor for the indicated BO.
            </summary>
            <param name="oPrivBO"></param>
            <returns>ClassInformation</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetClassInfoFromCLSID(System.Object)">
            <summary>
            Internal method that returns a class information for the CLSID
            </summary>
            <param name="oCLSID">CLSID</param>
            <returns>ClassInformation</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetClassInfo(System.String,System.String)">
            <summary>
            Returns a class descriptor for the indicated class.
            </summary>
            <param name="strClassName">Class name.</param>
            <param name="strNameSpace">Namespace string.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetRelationInfoUsingRelationName(System.String)">
            <summary>
            Returns a COM IJRelationInfo using a relationship name.
            </summary>
            <param name="strRelationshipName">Relationship string name.</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetRelationshipInfo(System.String,System.String)">
            <summary>
            Returns a relationship descriptor for the indicated relationship.
            </summary>
            <param name="strRelationshipName">Relationship string name.</param>
            <param name="strNameSpace">Namespace string.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipNotFoundException">Relationship not found or failed to retrieve relationship information.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetEdgeInfo(System.String)">
            <summary>
            Returns an edge descriptor for the indicated edge.
            </summary>
            <param name="strEdgeName">Edge string name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetCodelistTableInfoUsingName(System.String)">
            <summary>
            Returns a COM IJDCodelistTableInfo using a Codelist name.
            </summary>
            <param name="strCodelistName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetCodelistInfo(System.String,System.String)">
            <summary>
            Returns a codelist descriptor for the indicated codelist.
            </summary>
            <param name="strCodelistName">Codelist string name.</param>
            <param name="strNameSpace">Namespace string name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetInterfaceInfoUsingInterfaceName(System.String)">
            <summary>
            Returns a COM IJDInterfaceInfo using a Interface name.
            </summary>
            <param name="strInterfaceName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetInterfaceInfo(System.String,System.String)">
            <summary>
            Returns an interface descriptor for the indicated interface.
            </summary>
            <param name="strInterfaceName">Interface name.</param>
            <param name="strNameSpace">Namespace string name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetBOCInfoByPath(System.String)">
            <summary>
            Returns a Business Object Classification (BOC) descriptor for the indicated BOC path.
            </summary>
            <param name="sBOCTargetPath">BOC path.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetBOCNodeAndBOCInfoByPath(System.String,Ingr.SP3D.Common.Middle.Services.BOCInformation@,METADATALib.IJDBOClassificationNode@)">
            <summary>
            Internal method to get SP3D BOCNode and SOM BOCInformation given the BOCPath
            </summary>
            <param name="sBOCTargetPath"></param>
            <param name="oBOCInfo"></param>
            <param name="oBOCNode"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetChildrenBOCs(Ingr.SP3D.Common.Middle.ReadOnlyDictionary{Ingr.SP3D.Common.Middle.Services.BOCInformation},METADATALib.IJDBOClassificationNode)">
            <summary>
            Internal method to get the children BOCs for the given BOCNode.
            </summary>
            <param name="oBOCDescrs">Readonlydictionary collection to store children BOCs</param>
            <param name="oBOCNode">Get children BOCs from this BOCNode</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.GetBOCPath(METADATALib.IJDBOClassificationNode,System.String)">
            <summary>
            internal method which will recursively add the parent BOC paths to the current path
            Eg. "Piping\\PipingParts\\PipeComponents"
            </summary>
            <param name="oBOCNode">BOCNode</param>
            <param name="sCurPath">Current BOCNode path</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.MetadataManager.ReleaseComObject(System.Object)">
            <summary>
            Releases COM objects.
            </summary>
            <param name="obj">COM object.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MetadataManager.Classes">
            <summary>
            ReadOnlyDictionary collection of all known classes.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MetadataManager.Relationships">
            <summary>
            ReadOnlyDictionary collection of all known relationships.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MetadataManager.Edges">
            <summary>
            ReadOnlyDictionary collection of all known edges.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MetadataManager.CodeLists">
            <summary>
            ReadOnlyDictionary collection of all known codelists.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MetadataManager.BOCs">
            <summary>
            ReadOnlyDictionary collection of all top level BOCs.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.MetadataManager.Interfaces">
            <summary>
            ReadOnlyDictionary collection of all known interfaces.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SP3DPropType">
            <summary>
            SP3DPropType is an enumeration of the possible variable types of BusinessObject properties. These are fundamental data types,
            which correspond to the kinds of things that can be found in attributes.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTUndefined">
            <summary>
            Signifies internal error condition. All property types should be defined.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTInteger">
            <summary>
            Integer property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTString">
            <summary>
            String property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTBool">
            <summary>
            Boolean property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTDate">
            <summary>
            Date-Time property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTDouble">
            <summary>
            Double property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTCodelist">
            <summary>
            Codelisted property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTShort">
            <summary>
            Short property type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SP3DPropType.PTFloat">
            <summary>
            Float property type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.PropCategories">
            <summary>
            PropCategories is an enumeration of the possible variable types of property categories. Interfaces fall under
            specific categories.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Standard">
            <summary>
            Standard property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Responsibility">
            <summary>
            Responsibility property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Testing">
            <summary>
            Testing property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Surface_Treatment_and_Coating">
            <summary>
            Surface_Treatment_and_Coating property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Temperature_and_Pressure">
            <summary>
            Temperature_and_Pressure property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Position_and_Orientation">
            <summary>
            Position_and_Orientation property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Insulation_and_Tracing">
            <summary>
            Insulation_and_Tracing property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Fabrication_and_Construction">
            <summary>
            Fabrication_and_Construction property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Weight_and_CG">
            <summary>
            Weight_and_CG property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_1">
            <summary>
            Port_1 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_2">
            <summary>
            Port_2 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_3">
            <summary>
            Port_3 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_4">
            <summary>
            Port_4 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_5">
            <summary>
            Port_5 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_6">
            <summary>
            Port_6 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_7">
            <summary>
            Port_7 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_8">
            <summary>
            Port_8 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_9">
            <summary>
            Port_9 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_10">
            <summary>
            Port_10 property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Cable_Fill">
            <summary>
            Cable_Fill property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Fill_Information">
            <summary>
            Fill_Information property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Bend_Data">
            <summary>
            Bend_Data property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Layout">
            <summary>
            Layout property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Dimensions">
            <summary>
            Dimensions property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Equipment_Specification">
            <summary>
            Equipment_Specification property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Equipment_Dimension">
            <summary>
            Equipment_Dimension property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Equipment_Support">
            <summary>
            Equipment_Support property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Platform">
            <summary>
            Platform property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Nozzle_Length">
            <summary>
            Nozzle_Length property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Nozzle_Orientation">
            <summary>
            Nozzle_Orientation property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Nozzle_Position">
            <summary>
            Nozzle_Position property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Nozzle_Offset">
            <summary>
            Nozzle_Offset property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Manhole">
            <summary>
            Manhole property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Pipe_Guide">
            <summary>
            Pipe_Guide property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Vessel_Head">
            <summary>
            Vessel_Head property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Clamp_Dimension">
            <summary>
            Clamp_Dimension property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Component_Dimension">
            <summary>
            Component_Dimension property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Component_Face">
            <summary>
            Component_Face property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Flow_Meter">
            <summary>
            Flow_Meter property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Actuator">
            <summary>
            Instrument_Actuator property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Arm">
            <summary>
            Instrument_Arm property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Dimension">
            <summary>
            Instrument_Dimension property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Height">
            <summary>
            Instrument_Height property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Length">
            <summary>
            Instrument_Length property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Motor">
            <summary>
            Instrument_Motor property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Offset">
            <summary>
            Instrument_Offset property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Positioner">
            <summary>
            Instrument_Positioner property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Radius">
            <summary>
            Instrument_Radius property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Width">
            <summary>
            Instrument_Width property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Orifice_Flange">
            <summary>
            Orifice_Flange property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Valve_Appurtenance">
            <summary>
            Valve_Appurtenance property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Valve_Body">
            <summary>
            Valve_Body property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Valve_Dimension">
            <summary>
            Valve_Dimension property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Valve_Handwheel">
            <summary>
            Valve_Handwheel property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Operation_Volume">
            <summary>
            Operation_Volume property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Valve_Operator">
            <summary>
            Valve_Operator property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Instrument_Actuator_Rotation">
            <summary>
            Instrument_Actuator_Rotation property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Specialty_Steam_Trap">
            <summary>
            Specialty_Steam_Trap property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Cost_Estimation">
            <summary>
            Cost_Estimation property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Cable_Insulation">
            <summary>
            Cable_Insulation property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Cable_Ratings">
            <summary>
            Cable_Ratings property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Cable_Size">
            <summary>
            Cable_Size property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Cable_Family">
            <summary>
            Cable_Family property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Port_Rotation">
            <summary>
            Port_Rotation property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.End_Releases">
            <summary>
            End_Releases property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Pipe_Rack_Structure">
            <summary>
            Pipe_Rack_Structure property category.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PropCategories.Restraints">
            <summary>
            Restraints property category.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CodelistItem">
            <summary>
            Defines a codelist item by name, display name, and value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.NameInfo">
            <summary>
            Base class for all Info classes. Provides name and display name implementation.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameInfo.SetName(System.String)">
            <summary>
            Internal method that permits setting the name.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameInfo.SetDisplayName(System.String)">
            <summary>
            Internal method that permits setting the display name.
            </summary>
            <param name="strDisplayName"></param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.NameInfo.Name">
            <summary>
            Internal name of the property. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.NameInfo.DisplayName">
            <summary>
            Localized, read-only displayed name of the property.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.CodelistItem.UndefinedCodelistValue">
            <summary>
            Signifies an error condition. There should be no undefined codelist values.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistItem.#ctor(System.String,System.String,System.String,System.Int32,Ingr.SP3D.Common.Middle.Services.CodelistInformation,System.Int32)">
            <summary>
            internal constructor
            </summary>
            <param name="strName"></param>
            <param name="strDisplayName"></param>
            <param name="sShortDisplayName"></param>
            <param name="iValue"></param>
            <param name="oCodeListInfo"></param>
            <param name="iParentValueID"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistItem.SetValue(System.Int32)">
            <summary>
            internal write access to set the value
            </summary>
            <param name="iValue">Value to set.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistItem.ToString">
            <summary>
            Returns the ShortString value of the codelist item.
            </summary>
            <returns>System.string</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistItem.Value">
            <summary>
            Read-only access to the value of the codelist item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistItem.CodelistInfo">
            <summary>
            Read-only access to the codelist information object for this codelist item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistItem.ShortDisplayName">
            <summary>
            Read-only short version of display name (the display name inherited from NameInfo is the long version).
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistItem.ParentValue">
            <summary>
            Read-only access to the parent valueID of the codelist item. If the codelist item has a parent codelist item, 
            it will return a parent valueID.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistItem.ChildCodelistMembers">
            <summary>
            Returns the ReadOnlyDictionary of child CodelistItems. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistItem.Parent">
            <summary>
            Returns the parent codelist item or null if there is no parent. Read-only. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.PropertyInformation">
            <summary>
            Describes a property with its name, data type, and interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.op_Equality(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Overloaded operator to compare two PropertyInformation classes
            </summary>
            <param name="oPropInfo1">PropertyInformation</param>
            <param name="oPropInfo2">PropertyInformation</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.op_Inequality(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Overloaded operator to compare two PropertyInformation classes.
            </summary>
            <param name="oPropInfo1">PropertyInformation</param>
            <param name="oPropInfo2">PropertyInformation</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.Equals(System.Object)">
            <summary>
            Determines if a PropertyInformation object equals to the current PropertyInformation object.
            Two PropertyInformation objects are considered to be equal if they have the same name and are 
            on the same interface.
            </summary>
            <param name="obj">object</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.GetHashCode">
            <summary>
            Returns a hash code for the current PropertyInformation object.
            </summary>
            <returns>A hash code for the current PropertyInformation object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetInterfaceInfo(Ingr.SP3D.Common.Middle.Services.InterfaceInformation)">
            <summary>
            Internal method to allow setting the interface info reference.
            </summary>
            <param name="oInterfaceInfo">Interface info reference.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetCodelistInfo(Ingr.SP3D.Common.Middle.Services.CodelistInformation)">
            <summary>
            Internal method to allow setting the CodelistInformation reference.
            </summary>
            <param name="oCodelistInfo">CodelistInformation reference</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetComplex(System.Boolean)">
            <summary>
            Internal method to set value for complex property
            </summary>
            <param name="bComplex">Boolean indicating if property is complex.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetPropertyType(Ingr.SP3D.Common.Middle.Services.SP3DPropType)">
            <summary>
            Internal method to allow setting the property type.
            </summary>
            <param name="iPropType">Property type.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetMetadataReadOnly(System.Boolean)">
            <summary>
            Internal method to allow setting the metadata readonly flag.
            </summary>
            <param name="bMetadataReadOnly">True or false flag.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetDisplayedOnPropertyPage(System.Boolean)">
            <summary>
            Internal method to allow setting the DisplayedOnPropertyPage flag.
            </summary>
            <param name="bDisplayedOnPropertyPage"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetIsValueRequired(System.Boolean)">
            <summary>
            Internal method to allow setting the IsValueRequired flag.
            </summary>
            <param name="bIsValuerequired"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SetPropInfoAccess(System.Int32)">
            <summary>
            Internal method to set propertyInfo access of property.
            </summary>
            <param name="iAccess"></param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.InterfaceInfo">
            <summary>
            Read-only reference to the interface that defines this property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.PropertyType">
            <summary>
            Read-only data type of the property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.MetadataReadOnly">
            <summary>
            Returns whether metadata declares the property as read-only and is read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.DisplayedOnPropertyPage">
            <summary>
            Returns whether metadata declares the property as displayable on the property page. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.IsValueRequired">
            <summary>
            Returns whether the property value is required. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.COMAccess">
            <summary>
            Returns whether the property can be accessed through COM. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.SQLAccess">
            <summary>
            Returns whether the property can be accessed through SQL. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.MetadataAccess">
            <summary>
            Returns whether the property can be accessed through metadata. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.Complex">
            <summary>
            Returns whether the property is a complex type. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.CodeListInfo">
            <summary>
            Read-only reference to codelist information for this property. Only valid if the PropertyType is PTCodelist.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.PropertyInformation.UOMType">
            <summary>
            Read-only unit type of the property.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.InterfaceInformation">
            <summary>
            Describes an interface as name, properties, etc.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.InterfaceInformation.#ctor">
            <summary>
            Internal Constructor to avoid public constuction of this object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.InterfaceInformation.GetPropertyInfo(System.String)">
            <summary>
            Returns a property descriptor for the indicated property.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.InterfaceInformation.IID">
            <summary>
            Returns IID of the interface in string format. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.InterfaceInformation.Namespace">
            <summary>
            Namespace for which this interface is defined. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.InterfaceInformation.Properties">
            <summary>
            Read-only collection of descriptions of properties defined on this interface.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.InterfaceInformation.Category">
            <summary>
            Read-only name of the category to which this interface belongs.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ClassInformation">
            <summary>
            Describes a class with name, interfaces, etc.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ClassInformation.#ctor">
            <summary>
            Internal Constructor to avoid public constuction of this object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ClassInformation.GetInterfaceInfo(System.String)">
            <summary>
            Returns an interface descriptor for the indicated interface.
            </summary>
            <param name="strInterfaceName">Name of the inteface.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ClassInformation.Interfaces">
            <summary>
            ReadOnlyCollection of interfaces realized on this class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ClassInformation.Namespace">
            <summary>
            Read-only namespace definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ClassInformation.BOC">
            <summary>
            If this class is first class, it will return BOCInformation.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ClassInformation.IsUserClass">
            <summary>
            Returns True if this is a user-defined class. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ClassInformation.CLSID">
            <summary>
            Returns the CLSID in string format. Read-only.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.RelationshipInformation">
            <summary>
            Describes a relationship.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.SetDescription(System.String)">
            <summary>
            Internal method to allow setting the description.
            </summary>
            <param name="strDescription">New description string.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.SetOriginRoleName(System.String)">
            <summary>
            Internal method to allow setting the origin role name.
            </summary>
            <param name="strOriginRoleName">Origin role name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.SetOriginInterfaceInfo(Ingr.SP3D.Common.Middle.Services.InterfaceInformation)">
            <summary>
            Internal method to allow setting the origin interface info reference.
            </summary>
            <param name="oInterfaceInfo">Origin interface info reference.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.SetDestinationRoleName(System.String)">
            <summary>
            Internal method to allow setting the destination role name.
            </summary>
            <param name="strDestinationRoleName">Destination role name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.SetDestinationInterfaceInfo(Ingr.SP3D.Common.Middle.Services.InterfaceInformation)">
            <summary>
            Internal method to allow setting the destination interface info reference.
            </summary>
            <param name="oInterfaceInfo">Destination interface info reference.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.Description">
            <summary>
            Read-only description of relationship.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.Namespace">
            <summary>
            Read-only namespace definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginRoleName">
            <summary>
            Read-only name of the origin.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginInterfaceInfo">
            <summary>
            Read-only reference to the interface used on the origin side of the relationship.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.DestinationRoleName">
            <summary>
            Read-only name of the destination.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.DestinationInterfaceInfo">
            <summary>
            Read-only reference to the interface used on the destination side of the relationship.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.PublicRelationship">
            <summary>
            Returns whether the relationship is public. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginMinCardinality">
            <summary>
            The minimum number of members that can be associated on the origin side of the relationship.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginMaxCardinality">
            <summary>
            The maximum number of members that can be associated on the origin side of the relationship. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.DestinationMinCardinality">
            <summary>
            The minimum number of members that can be associated on the destination side of the relationship. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.DestinationMaxCardinality">
            <summary>
            The maximum number of members that can be associated on the destination side of the relationship. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.RelationType">
            <summary>
             internal property for relationship management use.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination">
            <summary>
            Defines whether this describes the origin or destination of the relationship.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination.Destination">
            <summary>
            Destination.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination.Origin">
            <summary>
            Origin.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.EdgeInformation">
            <summary>
            Describes an edge.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.EdgeInformation.EdgeGUID">
            <summary>
            For propertyFilters
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.EdgeInformation.Namespace">
            <summary>
            Read-only namespace definition.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CodelistInformation">
            <summary>
            Describes a codelist with name, list of values (CodelistItems).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.GetChildCodelistMembers(System.Int32)">
            <summary>
            Returns the ReadOnlyDictionary of child CodelistItems for the given parent ValueID.
            </summary>
            <param name="parentValueID">ValueID of parent CodelistItem.</param>
            <returns>ReadOnlyDictionary of CodelistItem.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.GetChildCodelistMembers(Ingr.SP3D.Common.Middle.Services.CodelistItem)">
            <summary>
            Returns the ReadOnlyDictionary of child CodelistItems for the given parent CodelistItem.
            </summary>
            <param name="parentCodelistItem">Parent CodelistItem.</param>
            <returns>ReadOnlyDictionary of CodelistItem.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.SetParentName(System.String)">
            <summary>
            Internal method to set the CodelistInformation parent name.
            </summary>
            <param name="sParentName">Name of the CodelistInformation parent.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.SetChildName(System.String)">
            <summary>
            Internal method to set the CodelistInformation child name.
            </summary>
            <param name="sChildName">Name of the CodelistInformation parent.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.GetCodelistItem(System.String)">
            <summary>
            Returns a codelist item corresponding to the name.
            </summary>
            <param name="sCodelistName">Name of the codelist item.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.GetCodelistItemsForLongString(System.String)">
            <summary>
            Returns a ReadOnlyDictionary of codelist items for a given Long String Value.
            </summary>
            <param name="codelistLongName">Long name of the codelist item.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.GetCodelistItem(System.Int32)">
            <summary>
            Returns a codelist item corresponding to the value.
            </summary>
            <param name="iCodelistValue">Value of the codelist item.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.IsAMember(System.Int32)">
            <summary>
            Returns True if iTestCodelistValue is in the codelist.
            </summary>
            <param name="iTestCodelistValue">Test value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.IsAMember(System.String)">
            <summary>
            Returns True if the name sTestCodelistName is in the codelist.
            </summary>
            <param name="sTestCodelistName">Test value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CodelistInformation.SetMetaDataMgr(Ingr.SP3D.Common.Middle.Services.MetadataManager)">
            <summary>
            Internal method that permits setting the MetadataManager.
            </summary>
            <param name="oMetadataManager"></param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistInformation.Namespace">
            <summary>
            Read-only namespace definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistInformation.CodelistMembers">
            <summary>
            Returns the collection of codelist name and value pairs. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistInformation.Parent">
            <summary>
            Returns the parent codelist or null if there is no parent. Read-only. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CodelistInformation.Child">
            <summary>
            Returns the child codelist or null if there is no child. Read-only. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.BOCInformation">
            <summary>
            Describes a Business Object Classification (BOC).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOCInformation.SetBOCPath(System.String)">
            <summary>
            Internal method that permits setting the BOCPath property..
            </summary>
            <param name="strBOCPath">Path string.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOCInformation.SetMetaDataMgr(Ingr.SP3D.Common.Middle.Services.MetadataManager)">
            <summary>
            Internal method that permits setting the MetadataManager.
            </summary>
            <param name="oMetadataManager"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOCInformation.GetDefiningInterfaceInfo(System.String)">
            <summary>
            Returns a group defining descriptor for the indicated group defining interface.
            </summary>
            <param name="strGDInterfaceName">Name of the interface.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOCInformation.GetCommonInterfaceInfo(System.String)">
            <summary>
            Returns an interface descriptor for the indicated interface.
            </summary>
            <param name="strInterfaceName">Name of the interface.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOCInformation.BOCPath">
            <summary>
            Internal name of the Business Object Classification (BOC) path. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOCInformation.DefiningInterfaces">
            <summary>
            ReadOnlyDictionary collection of group defining interfaces realized on this class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOCInformation.CommonInterfaces">
            <summary>
            ReadOnlyDictionary collection of common interfaces realized on this class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOCInformation.Children">
            <summary>
            Returns the ReadOnlyDictionary collection of children Business Object Classification (BOC)s for this BOCInformation object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetInterfacesException">
            <summary>
            Raised when failed to get the interfaces collection from COM.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetBOCInformationException">
            <summary>
            Raised when failed to get BOCInformation.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetBOCsException">
            <summary>
            Raised when failed to get Business Object Classifications for this object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetBOCPathException">
            <summary>
            Raised when failed to get Business Object Classification (BOC) path for this BOCInformation.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnClassNotFoundException">
            <summary>
            Raised when failed to retrieve the class information.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnClassNotFoundForTransientObjectException">
            <summary>
            Raised when failed to retrieve the class information for transient objects.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipNotFoundException">
            <summary>
            This exception is thrown when a relationship is not found or if relationship information 
            cannot be retrieved.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnRelationshipNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnRelationshipNotFoundException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper">
            <summary>
            Helper class that contains the common implementation of the ILocalCoordinateSystem interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructs a LocalCoordinateSystemImplHelper class for the wrapper.
            </summary>
            <param name="oWrapper">Business Object of the wrapper class that implements the ILocalCoordinateSystem interface.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the new orientation of the local coordinate system.
            </summary>
            <param name="xAxisNew">New X-axis to be set on the coordinate system.</param>
            <param name="yAxisNew">New Y-axis to be set on the coordinate system.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper.Matrix">
            <summary>
            Gets or sets the matrix of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper.XAxis">
            <summary>
            Gets the X-axis of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper.YAxis">
            <summary>
            Gets the Y-axis of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper.ZAxis">
            <summary>
            Gets the Z-axis of the local coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LocalCoordinateSystemImplHelper.Origin">
            <summary>
            Gets or sets the origin of the local coordinate system.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSHierarchyHelper">
            <summary>
            Conglomerated by the .NET BusinessObject to implement the WBS hierarchy membership.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IWBSChild">
            <summary>
            Interface IWBSChild definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSChild.WBSParent">
            <summary>
            Returns WBSParent of a WBSChild object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IWBSItem">
            <summary>
            Implementator is a Work Breakdown Structure.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSItem.AddWBSItemChild(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Adds the specified child to the WBSItem..
            </summary>
            <param name="oChild">The IWBSItemChild to add.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Failed due to invalid child type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSItem.AddWBSItemChildren(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild})">
            <summary>
            Adds the specified children to the WBSItem.
            </summary>
            <param name="oChildren">The set of children to add.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Failed due to invalid child type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSItem.RemoveWBSItemChild(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Removes the specified child from the WBSItem.
            </summary>
            <param name="oChild">The child to be removed.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception>            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSItem.RemoveWBSItemChildren(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild})">
            <summary>
            Removes the specified children from the WBSItem.
            </summary>
            <param name="oChildren">The set of children to remove.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSItem.UpdateWBSItemAssignment">
            <summary>
            Updates WBSItem assigments. This method will assign all children of 
            a parent object that matches the WBSAssignment.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The current user does not have write permission to the system object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSItem.ValidateParents(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Validates whether the object's system or assembly parents are in conflict with the 
            WBSItemAssignment property which would prevent assigning the specific object 
            to this WBSItem.
            </summary>
            <param name="oChild">The child whose parents are to be validated.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSItem.ValidateChildren(Ingr.SP3D.Common.Middle.IWBSItemChild,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild}@)">
            <summary>
            Validates whether the object's system or assembly children are in conflict with the 
            WBSItemAssignment property which would prevent assigning the specific object 
            to this WBSItem.
            <para>If a conflict exists, then the set of invalid children are returned in the 
            ReadOnlyCollection.</para>
            </summary>
            <param name="oChild">The child to be validated.</param>
            <param name="oInvalidChildren">The ReadOnlyCollection of invalid children.</param>
            <returns>WBSValidateChildrenStatus</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSItem.WBSItemChildren">
            <summary>
            Returns a collection of the objects that are children of the parent object.
            An empty collection will be returned if there are no children.
            </summary>
            <returns>ReadOnlyCollection of IWBSItemChild objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSItem.Exclusive">
             <summary>
            Get/Set of boolean property Exclusive
             </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSItem.WBSAssignment">
             <summary>
            Get/Set of property WBSAssignment
             </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSItem.WBSType">
             <summary>
            Get/Set of property WBSType 
             </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSItem.WBSPurpose">
             <summary>
            Get/Set of property WBSPurpose
             </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSItem.Project">
             <summary>
            Get property Project
             </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor used by the conglomerating .NET BusinessObject.
            </summary>
            <param name="oWrapper">The parent .NET BusinessObject.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.AddWBSChild(Ingr.SP3D.Common.Middle.IWBSChild)">
            <summary>
            Adds the specified child object to the parent.
            </summary>
            <param name="oChild">IWBSChild as the child object.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.AddWBSItemChild(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Adds the specified child to the WBSItem.
            </summary>
            <param name="oChild">The IWBSItemChild to add.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Failed if the child type is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Failed if there is no access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.AddWBSItemChildren(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild})">
            <summary>
            Adds the specified children to the WBSItem.
            </summary>
            <param name="oChildren">The set of children to add.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Raised if the child type is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Raised if there is no access.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.RemoveWBSItemChild(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Removes the specified child from the WBSItem.
            </summary>
            <param name="oChild">The child to be removed.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Raised if there is no access.</exception>            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.RemoveWBSItemChildren(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild})">
            <summary>
            Removes the specified children from the WBSItem.
            </summary>
            <param name="oChildren">The set of children to remove.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Raised if there is no access.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.UpdateWBSItemAssignment">
            <summary>
            Updates WBSItem assignments. This method will assign all children of 
            a parent object that matches the WBSAssignment.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Raised if there is no access.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.ValidateParents(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Validates whether the object's system or assembly parents are in conflict with the 
            WBSItemAssignment property, which would prevent assigning the specific object 
            to this WBSItem.
            </summary>
            <param name="oChild">The child whose parents are to be validated.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.ValidateChildren(Ingr.SP3D.Common.Middle.IWBSItemChild,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild}@)">
            <summary>
            Validates whether the object's system or assembly children are in conflict with the 
            WBSItemAssignment property, which would prevent assigning the specific object 
            to this WBSItem.
            If a conflict exists, then the set of invalid children are returned in the 
            ReadOnlyCollection.
            </summary>
            <param name="oChild">The child to be validated.</param>
            <param name="oInvalidChildren">The ReadOnlyCollection of invalid children.</param>
            <returns>WBSValidateChildrenStatus</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.WBSChildren">
            <summary>
            Gets a collection of the WBSItems that are children of the parent object.  
            An empty collection will be returned if there are no children.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.WBSParent">
            <summary>
            Read-only property that returns the parent WBS item in the hierarchy.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.WBSItemChildren">
            <summary>
            Gets a collection of the objects that are children of the parent object.
            An empty collection will be returned if there are no children.
            </summary>
            <returns>ReadOnlyCollection of IWBSItemChild objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.Exclusive">
            <summary>
            Get/Set WBSItem property Exclusive
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Raised if WBSItem is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetExclusiveException">Raised if property exclusive cannot be set.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.WBSAssignment">
            <summary>
            Get/Set WBSItem property WBSAssignment
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Raised if WBSItem is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetAssignmentException">Raised if WBSItem property assignment cannot be set.</exception>   
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.WBSType">
            <summary>
            Get/Set WBSItem property WBSType
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Raised if WBSItem is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetTypeException">Raised if WBSItem property type cannot be set.</exception>   
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.WBSPurpose">
            <summary>
            Get/Set WBSItem property WBSPurpose
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Raised if WBSItem is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidWBSPurposeParent">Raised if parent is invalid.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetPurposeException">Raised if WBSItem property purpose cannot be set.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.Project">
            <summary>
            Get WBSItem property Project
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSHierarchyHelper.WBSItemParents">
            <summary>
            Read-only property that returns the collection of WBS parents for this item.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidWBSPurposeParent">
            <summary>
            Parent is invalid for current child.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidWBSPurposeParent.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnInvalidWBSPurposeParent class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidWBSPurposeParent.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnInvalidWBSPurposeParent class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetPurposeException">
            <summary>
            This exception is raised if the WBSItem property purpose cannot be set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetPurposeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetPurposeException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="inner">Exception object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidProject">
            <summary>
            Project is not valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidProject.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnInvalidProject class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidProject.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnInvalidProject class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetExclusiveException">
            <summary>
            This exception is raised if the WBSItem property exclusive cannot be set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetExclusiveException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetExclusiveException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="inner">Exception object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetAssignmentException">
            <summary>
            This exception is raised if the WBSItem property WBSAssignment cannot be set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetAssignmentException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetAssignmentException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="inner">Exception object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetTypeException">
            <summary>
            This exception is raised if the WBSItem property type cannot be set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetTypeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetTypeException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="inner">Exception object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInconsistentWBSAssignmentException">
            <summary>
            Modifying WBSItem properties causes Assignment Conflicting.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInconsistentWBSAssignmentException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IRevolution">
            <summary>
            Default interface definition for Revolutions.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRevolution.GenCurve">
            <summary>
            Gets or sets the generating curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRevolution.Axis">
            <summary>
            Gets or sets the axis of revolution.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRevolution.Center">
            <summary>
            Gets or sets the center of revolution.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRevolution.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRevolution.CoPlanar">
            <summary>
            Gets whether the generating curve is coplanar with the axis.
            </summary>
            <summary>
            Gets or sets whether capped or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRevolution.Capped">
            <summary>
            Gets or sets whether capped or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRevolution.ReverseNormal">
            <summary>
            Gets or sets reverse normal.  The outward normal is usually U X V, but if reverse normal
            is True, then it is V X U.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Revolution3d">
             <summary>
             Class definition for Revolution3d.
             </summary>
             <example> This is an example for Revolution3d methods and properties.
             <code>
             Public Class Revolution3d
               Public Sub New()
            
                  ' Create the Revolution3d object.
                  ' Create the arc for the Revolution3d object.
                  Dim oPosCenter As New Position(0, 0, 0)
                  Dim oVecNormal As New Vector(0, 0, 1)
                  Dim oPosStart As New Position(1, 0, 0)
                  Dim oPosEnd As New Position(0, 1, 0)
                  Dim oArc3d_1 As New Arc3d(oPosCenter, oVecNormal, oPosStart, oPosEnd)
            
                  ' Define whether capped, the vector axis direction, and sweep angle.
                  Dim bCapped As Boolean = False
                  Dim oVecAxis As New Vector(1, 0, 0)
                  Dim dSweepAngle As Double = 0.6
            
                  ' Create the Revolution3d object using an arc, vector axis, position center, and sweep angle.
                  Dim oRevolution3d As New Revolution3d(oArc3d_1, oVecAxis, oPosCenter, dSweepAngle, bCapped)
            
                  ' Create a Revolution3d object using the existing Revolution3d object.
                  Dim oRevolution3dCopy As New Revolution3d(oRevolution3d)
            
                  ' Create the Revolution3d object using a connection, arc, vector axis, position center, and sweep angle. 
                  Dim oConn As SP3DConnection
                  oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                  Dim oRevolution3d_2 As New Revolution3d(oConn, oArc3d_1, oVecAxis, oPosCenter, 0.8, bCapped)
            
                  ' Set all values of the Revolution3d object into another Revolution3d object.
                  oRevolution3d.[Set](oRevolution3d_2)
            
                  ' Transform the Revolution3d object.
                  Dim oMatrix As New Matrix4X4()
                  oMatrix.Scale(2)
                  oRevolution3d.Transform(oMatrix)
            
                  ' Get the axis value.
                  Dim oVecAxisTest As Vector
                  oVecAxisTest = oRevolution3d.Axis
            
                  ' Set the axis value.
                  oRevolution3d.Axis = New Vector(0, 1, 0)
            
                  ' Get the sweep angle.
                  Dim dSAngleTest As Double
                  dSAngleTest = oRevolution3d.SweepAngle
            
                  ' Set the sweep angle.
                  oRevolution3d.SweepAngle = dSAngleTest
                  
                  ' Get whether coplanar. 
                  Dim bCoPlanarTest As Boolean
                  bCoPlanarTest = oRevolution3d.CoPlanar
            
                  ' Get whether capped. 
                  Dim bCappedTest As Boolean
                  bCappedTest = oRevolution3d.Capped()
                  
                  ' Set whether capped. 
                  oRevolution3d.Capped = bCappedTest
                  
                  ' Get generating curve. 
                  Dim oICurveTest As ICurve
                  oICurveTest = oRevolution3d.GenCurve
            
                  ' Set generating curve.
                  oRevolution3d.GenCurve = oICurveTest
            
                  ' Get range.
                  Dim oRangeBoxTest As RangeBox
                  oRangeBoxTest = oRevolution3d.Range
                  
                  ' Get whether reverse normal.
                  Dim bRevNorTest As Boolean
                  bRevNorTest = oRevolution3d.ReverseNormal
                  
                  ' Set whether reverse normal.
                  oRevolution3d.ReverseNormal = bRevNorTest
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Revolution3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Revolution3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Revolution3d.#ctor(Ingr.SP3D.Common.Middle.Revolution3d)">
            <summary>
            Constructor used to copy an existing Revolution3d.
            </summary>
            <param name="oRevolution">A Revolution3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oRevolution cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create revolution.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Revolution3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.ICurve,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Position,System.Double,System.Boolean)">
            <summary>
            Constructor to create a persistent Revolution3d by the given data.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="GenCurve">Generating curve or curve to revolve.</param>
            <param name="vecAxis">Axis of revolution.</param>
            <param name="posCenter">Center of revolution.</param>
            <param name="dSweep">Sweep angle.</param>
            <param name="bCapped">Whether to cap the revolution. True only if the 
            generating curve is closed and not a full revolution.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">GenCurve cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create revolution.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Revolution3d.#ctor(Ingr.SP3D.Common.Middle.ICurve,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Position,System.Double,System.Boolean)">
            <summary>
            Constructor used to create a transient Revolution3d by the given data.
            </summary>
            <param name="GenCurve">Generating curve or curve to revolve.</param>
            <param name="vecAxis">Axis of revolution.</param>
            <param name="posCenter">Center of revolution.</param>
            <param name="dSweep">Sweep angle.</param>
            <param name="bCapped">Whether to cap revolution. True only if 
            generating curve is closed and not a full revolution.</param>
            <exception cref="T:System.ArgumentNullException">GenCurve cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Revolution3d.Set(Ingr.SP3D.Common.Middle.Revolution3d)">
            <summary>
            Sets this revolution equal to an existing revolution.
            </summary>
            <param name="oRevolution3d">Existing Revolution3d.</param>
            <exception cref="T:System.ArgumentNullException">oRevolution3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Revolution3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this revolution by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.GenCurve">
            <summary>
            Gets or sets the generating curve.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.Axis">
            <summary>
            Gets or sets the axis of revolution.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Axis vector cannot be 0.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.Center">
            <summary>
            Gets or sets the center of revolution.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.CoPlanar">
            <summary>
            Gets whether the generating curve is coplanar with the axis.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.Capped">
            <summary>
            Gets or sets whether capped or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.ReverseNormal">
            <summary>
            Gets or sets reverse normal.  The outward normal is usually U X V, but if reverse normal
            is True, then it's V X U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Revolution3d.Range">
            <summary>
            Finds the range box of this revolution.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterFolder">
            <summary>
            FilterFolder object. Provides access to the filters in it.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterFolder.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            This constructor is used for API internal needs.
            </summary>
            <param name="oBOBasePrivate">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterFolder.#ctor(System.String)">
            <summary>
            Creates a FilterFolder given a name. FilterFolder is created under "My Filter" folder.
            </summary>
            <param name="sName">String specifying FilterFolder name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterFolder.#ctor(System.String,System.String)">
            <summary>
            Creates a FilterFolder given a name and parent FilterFolder path.
            </summary>
            <param name="sName">String specifying FilterFolder name.</param>
            <param name="strParentFolderPath">String specifying Parent FilterFolder path. New FilterFolder will be created under the parent FilterFolder.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterFolder.#ctor(System.String,Ingr.SP3D.Common.Middle.FilterFolder)">
            <summary>
            Creates a FilterFolder given a name and parent FilterFolder.
            </summary>
            <param name="sName">String specifying FilterFolder name.</param>
            <param name="oParentFilterFolder">FilterFolder specifying parent FilterFolder. New FilterFolder will be created under the parent FilterFolder.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterFolder.GetCOMFilterFolder">
            <summary>
            Gets the COM object from cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterFolder.CompareByFilterName(Ingr.SP3D.Common.Middle.FilterBase,Ingr.SP3D.Common.Middle.FilterBase)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterFolder.Category">
            <summary>
            The category of a FilterFolder.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterFolder.Name">
            <summary>
            Name of the FilterFolder.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterFolder.ChildFolders">
            <summary>
            Returns the child FilterFolders contained in the FilterFolder.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterFolder.ChildFilters">
            <summary>
            Returns the filters contained in the FilterFolder.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterFolder.eFolderCategory">
            <summary>
            Enumerator for FilterFolder category types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterFolder.eFolderCategory.MyFilters">
            <summary>
            My Filters category type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterFolder.eFolderCategory.PlantFilters">
            <summary>
            Plant Filters category type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterFolder.eFolderCategory.CatalogFilters">
            <summary>
            Catalog Filters category type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SymbolOccurrence">
            <summary>
            Occurrence business object that represents a general symbol occurrence not tied to any specific application
            occurrence. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create the SymbolOccurrence (used internally to to create the business object given the
            the private business object class).
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.String,System.String,System.Boolean)">
            <summary>
            Constructor used to create a SymbolOccurrence object. The SymbolDefinition and this
            SymbolOccurrence should share the same connection. If the SymbolDefinition is in a
            different connection, the constructor that is provided has the SymbolDefinition as
            an input argument should be used.
            </summary>
            <param name="oConnection">Connection where the symbol occurrence needs to be created.</param>
            <param name="progID">ProgID of the symbol definition.</param>
            <param name="codeBase">Location of the symbol definition relative to the symbol share (i.e.,
            "%OLE_SERVER%\bin"). Allowed to be null or empty string for a COM symbol.</param>
            <param name="bCreateDefinition"> Create the definition object if it does not already exist.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Indicates one of the passed arguments is incorrect.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.SymbolDefinition)">
            <summary>
            Constructor used to create a SymbolOccurrence object given the SymbolDefinition and a connection.
            </summary>
            <param name="oConnection">Connection where the symbol occurrence needs to be created.</param>
            <param name="oSymbolDef">Symbol definition object whose occurrence needs to be created.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Indicates one of the passed arguments is incorrect.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.GetIndexFromInputName(System.String)">
            <summary>
            Returns the input index key for the provided input parameter name.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.SetInputArg(IMSSymbolEntities.IJDArgument)">
            <summary>
            Adds an input to the symbol occurrence.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.SetInputDouble(System.String,System.Double)">
            <summary>
            Sets the double value for the named input parameter.
            </summary>
            <param name="inputName">Name of the input parameter whose value needs to be set.</param>
            <param name="value">New double value for the input parameter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.SetInputString(System.String,System.String)">
            <summary>
            Sets the string value for the named input parameter.
            </summary>
            <param name="inputName">Name of the input whose value needs to be set.</param>
            <param name="value">New string value for the input parameter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.SetInputObject(System.String,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Sets the object on a named parameter input. This method creates a reference collection associated
            to the symbol occurrence if one does not already exist.
            </summary>
            <param name="inputName">Name of the input whose object needs to be set.</param>
            <param name="value">New input object to assign to the input parameter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.Update">
            <summary>
            Computes this symbol by invoking the CustomSymbolDefinition associated to this occurrence
            to generate the outputs for the defined aspects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.GetOutputs(System.String)">
            <summary>
            Returns a collection of symbol outputs for a given aspect. Note: The business objects
            associated to the outputs are not bound until the symbol output value is accessed.
            </summary>
            <param name="aspectName">Name of the aspect whose collection of outputs should to be returned.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOccurrence.GetOutput(System.String,System.String)">
            <summary>
            Returns the output object for a given aspect name and output name.
            </summary>
            <param name="aspectName">Name of the aspect whose output is being requested.</param>
            <param name="outputName">Name of the output whose output is being requested.</param>
            <returns>BusinessObject</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolOccurrence.Aspects">
            <summary>
            Returns a collection of associated aspect definitions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SketchPoint">
            <summary>
            Wrapper class for CachedPoint.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a SketchPoint class object at the location specified by x, y, and z.
            </summary>
            <param name="x">X-coordinate of this point.</param>
            <param name="y">Y-coordinate of this point.</param>
            <param name="z">Z-coordinate of this point.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.#ctor(SP3DPIA.TransientEntities.CachedPoint)">
            <summary>
            Constructs a SketchPoint for the COM cache point. For internal-use only.
            </summary>
            <param name="oCachedPoint">COM cache point.</param>
            <exception cref="T:System.ArgumentNullException">oCachedPoint cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.Finalize">
            <summary>
            Releases memory.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.Cleanup">
            <summary>
            Releases COM object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.GetCOMCachedPoint">
            <summary>
            Gets the COM cached point. This is for internal use only.
            </summary>
            <returns>COM CachedPoint.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.DistanceFromPoint(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Finds the distance between two points.
            </summary>
            <param name="iPoint">IPoint</param>
            <returns>Distance as a double.</returns>
            <exception cref="T:System.ArgumentNullException">iPoint cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.EqualPositions(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Determines whether this point and an input point are equal.
            </summary>
            <param name="iPoint">IPoint</param>
            <returns>boolean</returns>
            <exception cref="T:System.ArgumentNullException">iPoint cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateArcBy3PointsFeature(Ingr.SP3D.Common.Middle.SketchPoint,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Creates an ArcBy3PointsFeature using this sketch point as start point 
            and the two sketch points passed in and associates the ArcBy3PointsFeature 
            with all three sketch points.
            </summary>
            <param name="PointAlongArc">Point along the arc.</param>
            <param name="EndPoint">End point of the arc.</param>
            <returns>ArcBy3PointsFeature</returns>
            <exception cref="T:System.ArgumentNullException">PointAlongArc cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">EndPoint cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnStartPointNotConnectableException">This sketch point 
            which represents the start point of ArcBy3PointsFeature is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPointAlongArcNotConnectableException">PointAlongArc is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnEndPointNotConnectableException">EndPoint is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnArcBy3PointsFeatureException">Failed to create COM ArcBy3PointsFeature.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateArcByEndPointsFeature(Ingr.SP3D.Common.Middle.SketchPoint,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Creates an ArcByEndPointsFeature using this sketch point as start point 
            and two sketch points passed in and associates the ArcByEndPointsFeature 
            with all three sketch points.
            </summary>
            <param name="EndPoint">End point of the arc.</param>
            <param name="MidPointAlongArc">Mid point along arc.</param>
            <returns>ArcByEndPointsFeature</returns>
            <exception cref="T:System.ArgumentNullException">EndPoint cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">MidPointAlongArc cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnStartPointNotConnectableException">This sketch point 
            which represents the start point of ArcByEndPointsFeature is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnEndPointNotConnectableException">EndPoint is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMidPointAlongArcNotConnectableException">MidPointAlongArc is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnArcByEndPointsFeatureException">Failed to create COM ArcByEndPointsFeature.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateEllipticalArcFeature(Ingr.SP3D.Common.Middle.SketchPoint,Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Creates an EllipticalArcFeature using this sketch point as start point 
            and the two sketch points passed in and associates the EllipticalArcFeature 
            with all three sketch points.
            </summary>
            <param name="CenterPoint">Center point of elliptical arc.</param>
            <param name="EndPoint">End point of elliptical arc.</param>
            <returns>EllipticalArcFeature</returns>
            <exception cref="T:System.ArgumentNullException">CenterPoint cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">EndPoint cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnStartPointNotConnectableException">This sketch point which represents the start point of EllipticalArcFeature is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCenterPointNotConnectableException">CenterPoint for elliptical arc is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnEndPointNotConnectableException">EndPoint is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnEllipticalArcFeatureException">Failed to create COM EllipticalArcFeature.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateLineFeature(Ingr.SP3D.Common.Middle.SketchPoint)">
            <summary>
            Creates a line feature starting from this sketch point to the 
            end point passed in and associates it with the two sketch points.
            </summary>
            <param name="EndPoint">End point of the line.</param>
            <returns>LineFeature</returns>
            <exception cref="T:System.ArgumentNullException">EndPoint cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnStartPointNotConnectableException">This sketch point which represents the start point of LineFeature is not connectable.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnEndPointNotConnectableException">EndPoint is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnLineFeatureException">Failed to create COM LineFeature.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.GetCurveFeatures">
            <summary>
            Get a read-only collection of CurveFeature objects.
            </summary>
            <returns>Read-only collection of CurveFeature objects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.ClearCurveFeatures">
            <summary>
            Clears the CurveFeatures associated with this sketch point.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateBendFeature(System.Double)">
            <summary>
            Creates a bend feature using the feature value passed in and 
            associates it with this sketch point.
            </summary>
            <param name="dFeatureValue">Bend radius.</param>
            <returns>BendFeature</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnBendFeatureAtPointException">Cannot create BendFeature at a point that is not associated with two LineFeatures.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnBendFeatureException">Failed to create COM BendFeature.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetBendFeatureException">Failed to get COM BendFeature from CachedPoint.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateCorniceFeature(System.Double)">
            <summary>
            Creates a cornice feature using the feature value passed in and 
            associates it with this sketch point.
            </summary>
            <param name="dFeatureValue">Cornice radius.</param>
            <returns>CorniceFeature</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCorniceFeatureAtPointException">Cannot create CorniceFeature at a point that is not associated with two LineFeatures.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCorniceFeatureException">Failed to create COM CorniceFeature.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetCorniceFeatureException">Failed to get COM CorniceFeature from CachedPoint.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateChamferFeature(System.Double)">
            <summary>
            Creates a chamfer feature using the feature value passed in and 
            associates it with this sketch point.
            </summary>
            <param name="dFeatureValue">Chamfer radius.</param>
            <returns>ChamferFeature</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnChamferFeatureAtPointException">Cannot create ChamferFeature at a point that is not associated with two LineFeatures.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnChamferFeatureException">Failed to create COM ChamferFeature.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetChamferFeatureException">Failed to get COM ChamferFeature from CachedPoint.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.CreateSplitFeature">
            <summary>
            Creates a split feature and associates it with this sketch point.
            </summary>
            <returns>SplitFeature</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureAtMidPointException">"Cannot create SplitFeature at this point which represents the mid point of an arc."</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureAtPointException">"Cannot create SplitFeature at a point which is not associated with two CurveFeatures."</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureException">Failed to create COM SplitFeature.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetSplitFeatureException">Failed to get COM SplitFeature from CachedPoint.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchPoint.ClearPointFeature">
            <summary>
            Clears the point feature associated with this sketch point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.Z">
            <summary>
            Gets or sets the z-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.Position">
            <summary>
            Gets or sets the position. Returns a read-only Position object.
            </summary>
            <exception cref="T:System.ArgumentNullException">Position cannot be null.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.IsModified">
            <summary>
            Gets or sets a value indicating that this sketch point is modified.
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.AssociativePoint">
            <summary>
            Gets or sets the associative point (AssocPoint).
            </summary>
            <returns>Associative point as IPoint.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.IsAssociative">
            <summary>
            Gets a boolean value indicating if an AssociativePoint (AssocPoint) is 
            associated with this sketch point.
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.IsAssociativePointInError">
            <summary>
            Gets a boolean value indicating if the AssociativePoint (AssocPoint) generated 
            an error during the last compute.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.IsConnectable">
            <summary>
            Get a value indicating if this sketch point is connectable.
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.IsDisjoint">
            <summary>
            Get a value indicating if the sketch point is not connected to the 
            preceeding/following sketch points.
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.PointFeatureGraphics">
            <summary>
            Gets the point feature graphics.
            </summary>
            <returns>Point feature graphics as BusinessObject.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchPoint.PointFeature">
            <summary>
            Gets the point feature (Bend, Cornice, Chamfer or Split) associated with 
            this sketch point.
            </summary>
            <returns>PointFeature</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnStartPointNotConnectableException">
            <summary>
            This exception is thrown when an attempt is made to connect to a sketch point (start point
            of a curve feature) that is not connectable.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnStartPointNotConnectableException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPointAlongArcNotConnectableException">
            <summary>
            This exception is thrown when an attempt is made to connect to a sketch point (point 
            along arc of a curve feature) that is not connectable.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPointAlongArcNotConnectableException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnEndPointNotConnectableException">
            <summary>
            This exception is thrown when an attempt is made to connect to a sketch point (end point
            of a curve feature) that is not connectable.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnEndPointNotConnectableException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMidPointAlongArcNotConnectableException">
            <summary>
            This exception is thrown when an attempt is made to connect to a sketch point (mid point
            along arc of a curve feature) that is not connectable.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMidPointAlongArcNotConnectableException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnArcBy3PointsFeatureException">
            <summary>
            This exception is thrown when ArcBy3PointsFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnArcBy3PointsFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnArcBy3PointsFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnArcByEndPointsFeatureException">
            <summary>
            This exception is thrown when ArcByEndPointsFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnArcByEndPointsFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnArcByEndPointsFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnEllipticalArcFeatureException">
            <summary>
            This exception is thrown when EllipticalArcFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnEllipticalArcFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnEllipticalArcFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnLineFeatureException">
            <summary>
            This exception is thrown when LineFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnLineFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnLineFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnBendFeatureException">
            <summary>
            This exception is thrown when BendFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnBendFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class with a reference
            to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetBendFeatureException">
            <summary>
            This exception is thrown when BendFeature cannot be obtained from cached point.
            </summary>    
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotGetBendFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCorniceFeatureException">
            <summary>
            This exception is thrown when CorniceFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCorniceFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class with a reference
            to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetCorniceFeatureException">
            <summary>
            This exception is thrown when CorniceFeature cannot be obtained from cached point.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotGetCorniceFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnChamferFeatureException">
            <summary>
            This exception is thrown when ChamferFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnChamferFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class with a reference
            to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetChamferFeatureException">
            <summary>
            This exception is thrown when ChamferFeature cannot be obtained from cached point.
            </summary>    
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotGetChamferFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureException">
            <summary>
            This exception is thrown when SplitFeature cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class with a reference
            to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotGetSplitFeatureException">
            <summary>
            This exception is thrown when SplitFeature cannot be obtained from cached point.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotGetSplitFeatureException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnBendFeatureAtPointException">
            <summary>
            This exception is thrown when a BendFeature cannot be created at 
            a point that is not associated with two LineFeatures.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnBendFeatureAtPointException.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnChamferFeatureAtPointException">
            <summary>
            This exception is thrown when a ChamferFeature cannot be created at 
            a point that is not associated with two LineFeatures.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnChamferFeatureAtPointException.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCorniceFeatureAtPointException">
            <summary>
            This exception is thrown when a CorniceFeature cannot be created at
            a point that is not associated with two LineFeatures.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCorniceFeatureAtPointException.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureAtMidPointException">
            <summary>
            This exception is thrown when a SplitFeature cannot be created at
            a mid point of an arc.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureAtMidPointException.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureAtPointException">
            <summary>
            This exception is thrown when a SplitFeature cannot be created at
            a point that is not associated with two CurveFeatures.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSplitFeatureAtPointException.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCenterPointNotConnectableException">
            <summary>
            This exception is thrown when an attempt is made to connect to a sketch point (center  
            point of a curve feature) that is not connectable.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCenterPointNotConnectableException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketchPointWithoutCachedPointException">
            <summary>
            This exception is thrown when a sketch point is encounterd that does not have a cached point.
            Every sketch point must have a cached point.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketchPointWithoutCachedPointException.#ctor">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Location">
             <summary>
             Location class definition.
             </summary>
             <example> This is an example for Location methods and properties.
             <code>
             Public Class Location
               Public Sub New()
            
                 'Get the location of the active permission group. 
                 Dim oLocation As Location = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel.ActivePermissionGroup.PGLocation
            
                 'Get the name of the location. 
                 Dim sName As String = oLocation.Name
            
                 'Get the location ID of the location. 
                 Dim sLocationID As String = oLocation.LocationID
            
                 'Get the name of the site server for the location. 
                 Dim sSiteServer As String = oLocation.SiteServer
            
                 'Get the naming string of the location. 
                 Dim sNamingString As String = oLocation.NamingString
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Location.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for wrapping an existing COM location.
            </summary>
            <param name="oPB">PrivateBusinessObject</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Location.Name">
            <summary>
            Gets the read-only name of the location.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Location.LocationID">
            <summary>
            Gets the read-only internal ID.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Location.SiteServer">
            <summary>
            Gets the read-only database server for the locations.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Location.NamingString">
            <summary>
            Gets the read-only string used to name objects.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SiteManager">
             <summary>
             Controls access to all available sites. With the initial release of the .NET software, will only present a single site.
             </summary>
             <example>
             <code>
             Public Class SiteManager
              Public Sub New()
            
                 'Get the site manager. 
                 Dim oSiteManager As SiteManager = MiddleServiceProvider.SiteMgr
            
                 'Get the active site. 
                 Dim oActiveSite As Site = oSiteManager.ActiveSite
            
                 'Connect to the last previously opened site. 
                 oSiteManager.ConnectSite()
            
                 'Connect to a site by identifying the server, the site connection string, the database provider,
                 'and the site schema connection string. 
                 Dim sServerName As String = ""  'This would be initialized to the name of the database server.
                 Dim sDBConnectionString = ""  'This would be initialized to the connection string of the catalog database.
                 Dim sDBProvider = ""  'This would be initialized to the database provider - either "MSSQL" or "Oracle".
                 Dim sDBSchemaConnectionString = ""  'This would be initialized to the connection string of the catalog schema database.
                 oSiteManager.ConnectSite(sServerName, sDBConnectionString, sDBProvider, sDBSchemaConnectionString)
            
                 'Get the collection of sites. 
                 Dim SiteCollection As ReadOnlyCollection(Of Site) = oSiteManager.Sites
            
                 'Get the site server name. 
                 Dim sSiteServerName As String = oSiteManager.SiteServerName
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.#ctor">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.SiteManager class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.ConnectToSite(System.String,System.String,System.String,System.String)">
            <summary>
            The method connects to the site
            </summary>
            <param name="sDBProvider">Database Provider</param>
            <param name="sSiteName">Site Name</param>
            <param name="sServerName">Server Name</param>
            <param name="sSchemaName">Schema Name</param>
            <returns>Site</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.GetPlantModelName(GSCADMiddleContextProj.IJMiddleContext,System.String,System.String,System.String)">
            <summary>
            Gets plant model name for the supplied PlantModelDbId.
            </summary>
            <param name="oIJMiddleContext">GSCADMiddleContextProj.IJMiddleContext.</param>
            <param name="sDatabaseProvider">DatabaseProvider as System.string.</param>
            <param name="sPlantModelDbId">PlantModelDbId as System.string.</param>
            <param name="sDbType">DbType as System.string.</param>
            <returns>Plant model name as System.string.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMiddleCommandException">SelectObjects on MiddleCommand failed.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnResourceManagerException">Failed to get ResourceManager from Middle context using IJMiddleContext.GetResourceManager.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNullResourceManagerException">ResourceManager is NULL.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">No object exists in database for the supplied moniker.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.CreateAttribute(METADATALib.IJDUserTypeMetaData,System.Object,System.Xml.XmlNamedNodeMap,System.Int32)">
            <summary>
            CreateAttribute
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.CheckPermissionGrpIDSAndUpdateSiteNameCounter(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String)">
            <summary>
            CheckPermissionGrpId's
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.GetChildrensRoot(System.Object,GSCADProjMgmt.ProjMgmtRootConstants)">
            <summary>
            GetChildrensRoot
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.ReadjustPermissionsOnObjectCol(System.Object,GSCADProjMgmt.IJDObjectCollection,System.String,System.Boolean@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            ReadjustPermissionsOnObjectCol
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.ResetConditionIdForAccessControlRule(System.String,System.Collections.Generic.List{System.Int32},System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            ResetConditionIdForAccessControlRule
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.GetPGConditionIDColl(System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.Collections.ArrayList@)">
            <summary>
            GetPGConditionIDColl
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.Cleanup">
            <summary>
            Closes site and releases members.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.ConnectSite">
             <summary>
             Opens a connection to the last connected site using information from the Registry. 
             Returns null if no site exists.
             </summary>
             <returns>Ingr.SP3D.Common.Middle.Services.Site.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoDatabaseException">Database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaDatabaseException">Schema database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoServerException">Server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaServerException">Schema server does not exist.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException">Database access denied.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException">Site database is out of date. Update Site and Site Schema.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException">GetProjectContext on MiddleContext failed.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotReserveSeatException">Cannot reserve license seat.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSPLMClientNotInstalledException">Cannot reserve license seat as the SPLM client is not installed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.ConnectSite(System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String)">
            <summary>
            Opens a connection to the site using the supplied parameters.
            Returns null if no site exists.
            </summary>
            <param name="sServerName">Name of the server as System.string.</param>
            <param name="sSiteDatabaseName">Site database name string as System.string.</param>
            <param name="eDBProvider">Database provider as System.string.</param>
            <param name="sSiteSchemaDatabaseName">Schema connection string as System.string.</param>
            <returns>Ingr.SP3D.Common.Middle.Services.Site.</returns>
            <exception cref="T:System.ArgumentNullException">sServerName is null or sConnectionString is null or sSchemaConnection is null.</exception>
            <exception cref="T:System.ArgumentException">sServerName is a blank string or sConnectionString is a blank string or sSchemaConnection is a blank string.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoDatabaseException">Database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaDatabaseException">Schema database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoServerException">Server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaServerException">Schema server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException">Database access denied.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException">Site database is out of date. Update Site and Site Schema.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException">GetProjectContext on MiddleContext failed.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCannotReserveSeatException">Cannot reserve license seat.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSPLMClientNotInstalledException">Cannot reserve license seat as the SPLM client is not installed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.CreateSite(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new site. Site manager should not be connecting to any other site before calling this method.
             </summary>
             <param name="eDBType">Database provider type.</param>
             <param name="sDatabaseServer">Database server.</param>
             <param name="sSiteDBName">Site database name.</param>
             <param name="sSiteDBWorkShareLocation">Site database workshare location.</param>
             <param name="sNameRuleID">Name rule ID.</param>
             <param name="sNameGeneratorServer">Name generator server name.</param>
             <param name="sSiteDBLocation">Site database location.</param>
             <param name="sSiteDBLogFileLocation">Site database log file location.</param>
             <param name="sTemplateFilePath">Template file path to be used to create the site schema.</param>
             <param name="sSiteSchemaDBLocation">Site schema database location.</param>
             <param name="sSiteSchemaDBLogFileLocation">Site schema database log file location.</param>
             <param name="bOverwriteExistingDB">Boolean is used to overwrite the existing site database and schema.</param>
             <returns>Site object.</returns>
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnTaskHostIsActiveException">TaskHost is running. Please close the Taskhost.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnActiveSiteAlreadyExistsException">Active site already exists. Please disconnect.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteSchema">Failed to restore site schema.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Name generator server does not exist.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer">Failed to set name generator server path.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Specified database server does not exist.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>        
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadTablesAndViewsException">Failed to load tables and views.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateSiteException">Unexpected failure in CreateSite method.</exception>  
            <example> This is an example for using CreateSite.
            <code>
            'Get the site manager from the middle service provider.
             Dim oSiteManager As SiteManager = MiddleServiceProvider.SiteMgr
             'Declare the database provider type; it can be SQL or Oracle.
             Dim eDBProviderType As SiteManager.eDBProviderTypes
             'Name of the server on which the databases must be created.
             Dim sDataBaseServer As String = "IN-SP3D4"
             Dim sSiteName As String = "NewSite"
             Dim sSiteWorkShareLocation As String = "INDIA"
             Dim sNameRuleID As String = "1"
             Dim sNameGeneratorServer As String = "IN-SP3D4"   'Name of the NameGeneratorServer
             Dim sSiteDBPhysicalLocation As String = "D:\SqlDbs\"
             Dim sSiteDBLogLocation As String = "D:\SqlDbs\"
             Dim sTemplateFilePath As String = "D:\Sp3d\mroot\DatabaseTemplates\AppRepos.dat"
             Dim sSiteSchemaPhysicalLocation As String = "D:\SqlDbs\"
             Dim sSiteSchemaLogLocation As String = "D:\SqlDbs\"
             Dim bOverwriteExistingDB As Boolean = False
             Dim oNewSite As Site
             oNewSite = oSiteManager.CreateSite(eDBProviderType, sDataBaseServer, sSiteName, sSiteWorkShareLocation, sNameRuleID, sNameGeneratorServer, _
                        sSiteDBPhysicalLocation, sSiteDBLogLocation, sTemplateFilePath, sSiteSchemaPhysicalLocation, sSiteSchemaLogLocation, bOverwriteExistingDB)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.CreateSite(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new site. Site manager should not be connecting to any other site before calling this method.
             The database and the log files will be stored at the default SQL locations on the server.
             </summary>
             <param name="eDBType">Database provider type.</param>
             <param name="sDatabaseServer">Database server.</param>
             <param name="sSiteDBName">Site database name.</param>
             <param name="sSiteDBWorkShareLocation">Site database workshare location.</param>
             <param name="sNamreRuleID">Name rule ID.</param>
             <param name="sNameGeneratorServer">Name generator server name.</param>
             <param name="sTemplateFilePath">Template file path to be used to create the site schema.</param>
             <param name="bOverwriteExistingDB">Boolean is used to overwrite the existing site database and schema.</param>
             <returns>Site object.</returns>
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnTaskHostIsActiveException">TaskHost is running. Please close the Taskhost.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnActiveSiteAlreadyExistsException">Active site already exists. Please disconnect.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteSchema">Failed to restore site schema.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Name generator server does not exist.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer">Failed to set name generator server path.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Specified database server does not exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>        
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadTablesAndViewsException">Failed to load tables and views.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateSiteException">Unexpected failure in CreateSite method.</exception>         
            <example> This is an example for using the CreateSite method.
            <code>
            'Get the site manager from the middle service provider.
            Dim oSiteManager As SiteManager = MiddleServiceProvider.SiteMgr
            'Declare the database provider type; it can be SQL or Oracle.
            Dim eDBProviderType As SiteManager.eDBProviderTypes
            eDBProviderType = SiteManager.eDBProviderTypes.MSSQL
            'Name of the server on which the databases must be created.
            Dim sDataBaseServer As String = "IN-SP3D4"
            Dim sSiteName As String = "NewSite"
            Dim sSiteWorkShareLocation As String = "INDIA"
            Dim sNamreRuleID As String = "1"
            Dim sNameGeneratorServer As String = "IN-SP3D4"   'Name of the NameGeneratorServer
            Dim sTemplateFilePath As String = "D:\Sp3d\mroot\DatabaseTemplates\AppRepos.dat"
            Dim bOverwriteExistingDB As Boolean = False
            Dim oNewSite As Site
            oNewSite = oSiteManager.CreateSite(eDBProviderType, sDataBaseServer, sSiteName, sSiteWorkShareLocation, sNamreRuleID, sNameGeneratorServer, _
                         sTemplateFilePath, bOverwriteExistingDB)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.RestoreSite(System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Restores the site from the backup set.
             </summary>
             <param name="sBackUpConfigurationFile">Backup configuration file.</param>
             <param name="eDBType">Database provider type.</param>
             <param name="sDatabaseServer">Database server.</param>
             <param name="sBackupFilePathLoc">Backup file path location.</param>
             <param name="sSiteDBName">Site database name.</param>
             <param name="sSiteDBWorkShareLocation">Site database workshare location.</param>
             <param name="sSiteDBLocation">Site database location.</param>
             <param name="sSiteDBLogFileLocation">Site database log file location.</param>
             <param name="sNameGeneratorServer">Name generator server.</param>
             <param name="sSiteSchemaDBLocation">Site schema database location.</param>
             <param name="sSiteSchemaDBLogFileLocation">Site schema database log file location.</param>
             <param name="bOverwriteExistingDB">Boolean is used to overwrite the existing site database and schema.</param>
             <returns>Site object.</returns>
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnTaskHostIsActiveException">TaskHost is running. Please close the Taskhost.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnActiveSiteAlreadyExistsException">Active site already exists. Please disconnect.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteSchema">Failed to restore site schema.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Name generator server does not exist.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer">Failed to set name generator server path.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException">Restored site version differs from installed product version.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteException">Unexpected failure in RestoreSite method.</exception>
            <example> This is an example for using RestoreSite.
            <code>
            'Get the site manager from the middle service provider.
            Dim oSiteManager As SiteManager = MiddleServiceProvider.SiteMgr
            'Backup configuration file that must be restored.
            Dim sBackUpConfigFile As String = "D:\Backup\Plant_1.bcf"
            'Declare the database provider type; it can be SQL or Oracle.
            Dim eDBProviderType As SiteManager.eDBProviderTypes
            eDBProviderType = SiteManager.eDBProviderTypes.MSSQL
            Dim sDataBaseServer As String = "IN-SP3D4"
            Dim sBackUpFilePath As String = "D:\Backup\"
            Dim sSiteName As String ="NewSite"
            Dim sSiteWorkShareLocation As String = "INDIA"
            'Name of the server on which the databases must be created.
            Dim sNameGeneratorServer As String = "IN-SP3D4"  'Name of the NameGeneratorServer
            Dim bOverwriteExistingDB As Boolean = False
            Dim oNewSite As Site
            Dim sSiteDBLocation As String = "D:\SqlDbs\"
            Dim sSiteDBLogFileLocation As String = "D:\SqlDbs\"
            Dim sSiteSchemaDBLocation As String = "D:\SqlDbs\"
            Dim sSiteSchemaDBLogFileLocation As String = "D:\SqlDbs\"
            oNewSite = oSiteManager.RestoreSite(sBackUpConfigFile, eDBProviderType, sDataBaseServer, sBackUpFilePath, sSiteName, _
                       sSiteWorkShareLocation, sSiteDBLocation, sSiteDBLogFileLocation, sNameGeneratorServer, sSiteSchemaDBLocation, sSiteSchemaDBLogFileLocation, bOverwriteExistingDB)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.IsCustomRestoreSite">
            <summary>
            IsCustomRestoreSite will read the customrestre flag and return the flag.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.ValidateCreateSiteInputs(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            ValidateCreateSiteInputs will validate all the inputs passed into CreateSite method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.ValidateRestoreSiteInputs(System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            ValidateRestoreSiteInputs will validate all the inputs passed into RestoreSite methods.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.RestoreSite(System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Restores a site. Site manager should not be connecting to any other site before calling this method.
             </summary>
             <param name="sBackUpConfigurationFile">Backup configuration file.</param>
             <param name="eDBType">Database provider type.</param>
             <param name="sDatabaseServer">Database server.</param>
             <param name="sBackupFilePathLoc">Backup file path location.</param>
             <param name="sSiteDBName">Site database name.</param>
             <param name="sSiteDBWorkShareLocation">Site database workshare location.</param>        
             <param name="sNameGeneratorServer">Name generator server.</param>       
             <param name="bOverwriteExistingDB">Boolean is used to overwrite the existing site database and schema.</param>
             <returns>Site object.</returns>        
             <exception cref="T:System.ArgumentNullException">Null arguments.</exception>
             <exception cref="T:System.IO.FileNotFoundException">Specified file not found.</exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">Specified directory not found.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">Invalid argument.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnTaskHostIsActiveException">TaskHost is running. Please close the Taskhost.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">Invalid database server.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnActiveSiteAlreadyExistsException">Active site already exists. Please disconnect.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteSchema">Failed to restore site schema.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">Database name exceeds maximum length.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException">Database with the same name already exists.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">Name generator server does not exist.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetNameGeneratorServer">Failed to set name generator server path.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException">Restored site version differs from installed product version.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreSiteException">Unexpected failure in RestoreSite method.</exception>
            <example> This is an example for using RestoreSite.
            <code>
            'Get the site manager from the middle service provider.
            Dim oSiteManager As SiteManager = MiddleServiceProvider.SiteMgr
            'Backup configuration file that must be restored.
            Dim sBackUpConfigFile As String = "D:\BackUpFolder\Plant1.bcf"
            'Declare the database provider type; it can be SQL or Oracle.
            Dim eDBProviderType As SiteManager.eDBProviderTypes
            eDBProviderType = SiteManager.eDBProviderTypes.MSSQL
            Dim sDataBaseServer As String = "IN-SP3D4"
            Dim sBackUpFilePathLoc As String = "D:\Backup\"
            Dim sSiteName As String = "NewSite"
            Dim sSiteWorkShareLocation As String = "INDIA"
            'Name of the server on which the databases must be created.
            Dim sNameGeneratorServer As String = "IN-SP3D4"   'Name of the NameGeneratorServer
            Dim bOverwriteExistingDB As Boolean = False
            Dim oNewSite As Site
            oNewSite = oSiteManager.RestoreSite(sBackUpConfigFile, eDBProviderType, sDataBaseServer, sBackUpFilePathLoc, sSiteName, _
                       sSiteWorkShareLocation, sNameGeneratorServer, bOverwriteExistingDB)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SiteManager.GetDBType(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBTypes)">
            <summary>
            Gets a string that corresponds to the enumerated database type.
            </summary>
            <param name="eDBType">Enumerated database type.</param>
            <returns>System.string.</returns>
            <exception cref="T:System.ArgumentException">Unsupported database type.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SiteManager.StandAloneMode">
            <summary>
            Gets a bool indicating if this is a stand alone application. Returns True if standlone; otherwise False (Running in TaskHost).
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SiteManager.ActiveSite">
            <summary>
            Gets the active site.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Site.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SiteManager.Sites">
            <summary>
            Gets a read-only collection of all sites. With initial release, will contain at most only one site.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of Site objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SiteManager.SiteServerName">
            <summary>
            Gets the site server name.
            </summary>
            <returns>System.string.</returns>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBTypes.Site">
            <summary>
            Site database connection.
            </summary>            
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBTypes.Model">
            <summary>
            Model database connection.
            </summary>            
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBTypes.Catalog">
            <summary>
            Catalog database connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBTypes.PDSRef">
            <summary>
            PDS Reference connection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBTypes.FileRef">
            <summary>
            Reference file connection.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes">
            <summary>
            Enumeration for the database provider.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes.MSSQL">
            <summary>
            Microsoft SQL database provider.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes.Oracle">
            <summary>
            Oracle database provider.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.DatabaseInformation">
            <summary>
            Provides database information.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.DatabaseInformation.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Instantiates DatabaseInformation with the information passed in.
            </summary>
            <param name="sDatatbaseProvider">Database provider, must be either Oracle or MSSQL.</param>
            <param name="sServer">Server name.</param>
            <param name="sDBType">Database type.</param>
            <param name="sName">Name of database information.</param>
            <param name="sDatabaseID">Unique database ID.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.DatabaseInformation.DatabaseID">
            <summary>
            Gets the read-only database ID. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.DatabaseInformation.DatabaseProvider">
            <summary>
            Gets the read-only name of the database provider.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.DatabaseInformation.DBType">
            <summary>
            Get the read-only database connection type.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.DatabaseInformation.Name">
            <summary>
            Gets the read-only name of the catalog.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.DatabaseInformation.Server">
            <summary>
            Gets the read-only server name.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CatalogDatabaseInformation">
            <summary>
            Provides catalog database information.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CatalogDatabaseInformation.SymbolShare">
            <summary>
            Gets the SymbolShare path.
            </summary>
            <example>This example explains how to get the symbol share.
            <code>
            ' Get the site.
            Dim oSite As Site = MiddleServiceProvider.SiteMgr.ActiveSite
            ' Get catalog database info.
            Dim oCollCatalogDBInfo As ReadOnlyCollection(Of CatalogDatabaseInformation) = oSite.CatalogDatabaseInfos
            ' Get the required item of catalog database info.
            Dim oCatalogDBInfo As CatalogDatabaseInformation = Nothing
            Dim oRequiredCatalogDBInfo As CatalogDatabaseInformation = Nothing
            Dim sCatalogDBName As String = "sp3d_CDB"
            If (Not oCatalogDBInfo Is Nothing And oCollCatalogDBInfo.Count > 0) Then
                'Iterate each item in oCollCatalogDBInfo.
                For Each oCatalogDBInfo In oCollCatalogDBInfo
                    ' Compare catalog database info name with required catalog.
                    If (oCatalogDBInfo.Name.ToUpper().Equals(sCatalogDBName.ToUpper())) Then
                        oRequiredCatalogDBInfo = oCatalogDBInfo
                        Exit For
                    End If
                Next
            End If
            ' Get the symbol share path of required catalog.
            If Not oRequiredCatalogDBInfo Is Nothing Then
                'Dim sSymbolShare As String = oRequiredCatalogDBInfo.SymbolShare
            End If
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry">
            <summary>
            SP3D to SOM class map entry info. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry class
            with sMapEntry string that contains map entry details with delimiters.
            </summary>
            <param name="sMapEntry">System.string containing map entry details with delimiters.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry.Validate">
            <summary>
            Validates member data.
            </summary>
            <returns>System.Boolean. True if validation was successful; False if validation was unsuccessful.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry.SP3DClassId">
            <summary>
            Gets SP3D class id.
            </summary>
            <returns>System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry.BOAssemblyName">
            <summary>
            Gets name of assembly in which BusinessObject wrapper is implemented.
            </summary>
            <returns>System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry.BOClassName">
            <summary>
            Gets class name of BusinessObject wrapper implementation.
            </summary>
            <returns>System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry.PBOAssemblyName">
            <summary>
            Gets name of assembly in which PrivateBusinessobject wrapper is implemented.
            </summary>
            <returns>System.string.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry.PBOClassName">
            <summary>
            Gets class name of PrivateBusinessObject wrapper implementation.
            </summary>
            <returns>System.string.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.DBProviderStringExtension">
            <summary>
            String extension class to quickly test for provider types or convert to a SiteManager.eDBProviderTypes
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.DBProviderStringExtension.IsSQLProvider(System.String)">
            <summary>
            Return true if the string represents SQL server DB provider 
            </summary>
            <param name="str"></param>
            <returns>True if the string represents SQL, false otherwise</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.DBProviderStringExtension.IsOracleProvider(System.String)">
            <summary>
            Return true if the string represents Oracle DB provider 
            </summary>
            <param name="str"></param>
            <returns>True if the string represents Oracle, false otherwise</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.DBProviderStringExtension.ToDBProviderType(System.String)">
            <summary>
            Given a string, return the type of provider represented by that string
            </summary>
            <param name="str"></param>
            <returns>The corresponding eDBProviderTypes</returns>
            <exception>CmnInvalidArgumentException if the string is not MSSQL or Oracle</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SP3dToSomMap">
            <summary>
            SP3D to SOM class map.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3dToSomMap.GetMapFilePath">
            <summary>
            Gets path of map file (S3DAPIClassMap.dat).
            </summary>
            <returns>Path of map file as System.string.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3dToSomMap.InitializeMapCache">
            <summary>
            Initializes map cache from S3DAPIClassMap.dat file.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3dToSomMap.TerminateMapCache">
            <summary>
            Terminates map cache.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.SP3dToSomMap.GetSomMapEntry(System.String)">
            <summary>
            Returns SP3dToSomMapEntry corresponding to ClassId from map cache.
            </summary>
            <param name="sClassId">ClassId as System.string.</param>
            <returns>Ingr.SP3D.Common.Middle.Services.SP3dToSomMapEntry if exists in map cache; else null.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnActivePlantNullException">
            <summary>
            This exception is thrown when there is no active plant. Plant must be initialized before 
            attempting to use it.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnActivePlantNullException.#ctor">
            <summary>
            Initializes a new instance of the CmnActivePlantNullException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnActiveSiteNullException">
            <summary>
            This exception is thrown when there is no active site. Site must be initialized before 
            attempting to use it.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnActiveSiteNullException.#ctor">
            <summary>
            Initializes a new instance of the CmnActiveSiteNullException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException">
            <summary>
            This exception is thrown when a COMException was raised in MiddleContext.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnMiddleContextException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException.#ctor(System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnMiddleContextException 
            class with the message and a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>        
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnMiddleContextException 
            class with the message for the resource ID passed in.
            </summary> 
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleContextException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnMiddleContextException
            class with the message for the resource ID passed in and a reference of the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultStr">Default string to be used if ResourceID is not found at runtime.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMiddleContextNotInitializedException">
            <summary>
            This exception is thrown when MiddleContext component is not initialized.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMiddleContextNotInitializedException.#ctor">
            <summary>
            Initialized a new instance of CmnMiddleContextNotInitializedException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMissingRegistryKeyException">
            <summary>
            This exception is thrown when a key is missing in the Registry.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingRegistryKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnMissingRegistryKeyException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMissingRegistryKeyException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnMissingRegistryKeyException 
            class with the message for the resource ID passed in.
            </summary> 
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNullResourceManagerException">
            <summary>
            This exception is thrown when a null is returned by calling IJMiddleContext.GetResourceManager.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNullResourceManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnNullResourceManagerException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNullResourceManagerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnNullResourceManagerException 
            class with the message for the resource ID passed in.
            </summary> 
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoDatabaseException">
            <summary>
            This exception is thrown when E_DATABASE_DOESNOTEXIST error code is returned from a COMException.
            </summary>    
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoDatabaseException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoDatabaseException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaDatabaseException">
            <summary>
            This exception is thrown when E_SCHEMADATABASE_DOESNOTEXIST error code is returned from a COMException.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoSchemaDatabaseException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoSchemaDatabaseException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoServerException">
            <summary>
            This exception is thrown when E_SERVER_DOESNOTEXIST error code is returned from a COMException.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoServerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoServerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaServerException">
            <summary>
            This exception is thrown when E_SCHEMASERVER_DOESNOTEXIST error code is returned from a COMException.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoSchemaServerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoSchemaServerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException">
            <summary>
            This exception is thrown when E_DATABASE_ACCESSDENIED error code is returned from a COMException.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnDatabaseAccessDeniedException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException">
            <summary>
            This exception is thrown when E_DATABASE_OUTOFDATE error code is returned from a COMException.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException.#ctor">
            <summary>
            Initializes a new instance of the CmnOutOfDateSiteDatabaseException 
            class.
            </summary>                
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnOutOfDateSiteDatabaseException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnResourceManagerException">
            <summary>
            This exception is thrown when a COMException is raised by calling IJMiddleContext.GetResourceManager.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnResourceManagerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnResourceManagerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">
            <summary>
            This exception is thrown when the map file, S3DAPIClassMap.dat, has invalid entries.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnInvalidMapEntriesException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">
            <summary>
            This exception is thrown when the map file, S3DAPIClassMap.dat, is not found, or the user has no read access.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnMapFileNotFoundException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnProjectManagementFactoryException">
            <summary>
            This exception is thrown when CmnProjectManagementFactoryException cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnProjectManagementFactoryException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnProjMgmtFactoryGetProjectsException">
            <summary>
            This exception is thrown when an error occurs in GSCADProjMgmt.ProjMgmtFactory.GetProjectsCollectionObject method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnProjMgmtFactoryGetProjectsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJHierarchyGetDisplayChildrenException">
            <summary>
            This exception is thrown when an error occurs in IJHierarchy.GetDisplayChildren method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJHierarchyGetDisplayChildrenException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException">
            <summary>
            Specified name generator server does not exist. This exception is thrown when there is no name generator with the given name.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerDoesNotExistsException.#ctor">
            <summary>
            Name generator server doesn't exist.
            </summary>        
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException">
            <summary>
            Specified name generator server has not started. This exception is thrown when there is a problem with the specified name generator server.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNameGeneratorServerHasNotStartedException.#ctor">
            <summary>
            A problem exists with the specified name generator server.
            </summary>        
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException">
            <summary>
            Invalid database server exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidDatabaseServerException.#ctor">
            <summary>
            Invalid database server name exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnOpenPlantException">
            <summary>
            This exception is thrown when an attempt is made to open plant when running in non-standalone mode. Ex: within TaskHost.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnOpenPlantException.#ctor">
            <summary>
            Initializes a new instance of the CmnOpenPlantException with the default error message. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSetActivePlantException">
            <summary>
            This exception is thrown when an active plant cannot be set when running in non-standalone mode. Ex: within TaskHost.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSetActivePlantException.#ctor">
            <summary>
            Initializes a new instance of the CmnSetActivePlantException with the default error message. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnValidateLicenseException">
            <summary>
            This exception is thrown when there is failure in validating the license.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnValidateLicenseException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnValidateLicenseException with the default error message. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSPLMClientNotInstalledException">
            <summary>
            This exception is thrown when SPLM client is not installed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSPLMClientNotInstalledException.#ctor">
            <summary>
            Initializes a new instance of the CmnSPLMClientNotInstalledException with the default error message. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyLicenseException">
            <summary>
            This exception is thrown when readonly license is avaliable.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnReadOnlyLicenseException.#ctor">
            <summary>
            Initializes a new instance of the CmnReadOnlyLicenseException with the default error message. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Reference">
            <summary>
            A reference is an external file or database used in conjunction with this database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Reference.#ctor(Ingr.SP3D.Common.Middle.Services.Reference.SP3DReferenceFileType)">
            <summary>
            Constructs and passes in the reference type. For internal-use only.
            </summary>
            <param name="iRefType">SP3DReferenceFileType</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Reference.#ctor(Ingr.SP3D.Common.Middle.Services.Reference.SP3DReferenceFileType,System.String,System.String,System.String,System.String,System.Int32,System.String,Ingr.SP3D.Common.Middle.Services.Plant)">
            <summary>
            Constructs the reference type.
            </summary>
            <param name="iRefType">Sp3dReferenceFileType</param>
            <param name="name">Name</param>
            <param name="server">Server</param>
            <param name="databaseID">Databaseid</param>
            <param name="provider">DatabaseProvider</param>
            <param name="permissionID">PermissionID</param>
            <param name="parentplant">ParentPlant</param>
            <param name="schemaname">schemaname</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Reference.ReferenceType">
            <summary>
            Read-only indication of the type of this reference.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Reference.SP3DReferenceFileType">
            <summary>
            The possible enumerated SP3D reference types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.Reference.SP3DReferenceFileType.PDS">
            <summary>
            PDS reference file type. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.Reference.SP3DReferenceFileType.MicroStation">
            <summary>
            MicroStation reference file type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.Reference.SP3DReferenceFileType.AutoCAD">
            <summary>
            AutoCAD reference file type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PGAccessRights">
            <summary>
            Describes the various access rights that the user can have.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PGAccessRights.FullAccess">
            <summary>
            Full access to the user.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PGAccessRights.Read">
            <summary>
            Read access to the user.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PGAccessRights.Write">
            <summary>
            Write access to the user.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PermissionGroup">
             <summary>
             PermissionGroup provides read-only access to properties of the underlying permission group.
             </summary>
             <example>This is an example for PermissionGroup class methods and properties.
             <code>
             Public Class PermissionGroup
               Public Sub New()
            
                'Getting the model connection.  
                Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                Dim oPlantModel As Model = oSiteMgr.ActiveSite.ActivePlant.PlantModel
                Dim oRootObj As BusinessObject = DirectCast(oPlantModel.RootSystem, BusinessObject)
                Dim oModelConn As SP3DConnection = oRootObj.DBConnection
                Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                'Getting the active permission group on the model connection. 
                Dim oActivePermissionGroup As PermissionGroup = oModelConn.ActivePermissionGroup
            
                'Getting access rules of the permission group. 
                Dim oReadonlyAccessRuleCol As ReadOnlyCollection(Of AccessRule)
                oReadonlyAccessRuleCol = oActivePermissionGroup.AccessRules
            
                'Getting the active permission group name. 
                Dim strPermissionGrpName As String
                strPermissionGrpName = oActivePermissionGroup.Name
            
                'Getting the permission group ID. 
                Dim iPermissionGrpID As Integer
                iPermissionGrpID = oActivePermissionGroup.PermissionGroupID
            
                'Getting the permission group location. 
                Dim oPermissionGrpLocation As Location
                oPermissionGrpLocation = oActivePermissionGroup.PGLocation
              
              End Sub
             End Class
            </code>
            </example>   
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroup.#ctor(Ingr.SP3D.Common.Middle.PermissionGroupFolder,Ingr.SP3D.Common.Middle.Services.Location,System.String)">
            <summary>
            Creates permission group, given a parent folder, location object, permission group name.
            </summary>
            <param name="oParentPGFolder">Permission group folder parent.</param>
            <param name="oLocation">Location object.</param>
            <param name="strPGName">Permission group name.</param>
            <exception cref="T:System.ArgumentNullException">PermissionGroupFolder or location object passed is null.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPGNameIsNotUniqueException">PermissionGroup name already exists.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetPermissionGroupNameException">Failed to set the name of the permission group, the name already exits, or the name passed is a null string.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupException">Failed to create permission group.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException">Aceess denied.</exception>
            <example>This example explains how to create a permission group.
            <code>
            'Create PermissionGroup.
            Dim oParentPGFolder As PermissionGroupFolder = Nothing
            Dim oLocation As Location = Nothing
            Dim strPGName As String = Nothing
            Dim oPG As PermissionGroup = Nothing
            'Call PermissionGroupFolder constructor by passing the folder and name of the folder as arguments.
            oPG = New PermissionGroup(oParentPGFolder, oLocation, strPGName)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroup.#ctor(Ingr.SP3D.Common.Middle.PermissionGroupFolder,System.String)">
            <summary>
            Creates permission group, given a parent folder and permission group name. 
            Note: The location is the active location from the site.
            </summary>
            <param name="oParentPGFolder">PermissionGroupFolder under which the permissiongroup has to be created.</param>
            <param name="strPGName">Permission group name.</param>
            <exception cref="T:System.ArgumentNullException">PermissionGroupFolder passed is null.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPGNameIsNotUniqueException">PermissionGroup name already exists.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetPermissionGroupNameException">Failed to set the name of the permission group, the name already exits, or the name passed is a null string.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupException">Failed to create permission group.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException">Aceess denied.</exception>
            <example>This example explains about how to create a permissiongroup.
            <code>
            'Create PermissionGroup.
            Dim oParentPGFolder As PermissionGroupFolder = Nothing        
            Dim strPGName As String = Nothing
            Dim oPG As PermissionGroup = Nothing
            'Call PermissionGroupFolder constrcutor by passing the folder and name of the folder as arguments
            oPG = New PermissionGroup(oParentPGFolder, strPGName)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroup.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for wrapping an existing COM PermissionGroup.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroup.AddAccessControlRule(System.String,Ingr.SP3D.Common.Middle.PGAccessRights)">
            <summary>
            Adds an access control rule for a given user with certain access rights on a permission group.
            </summary>
            <param name="strUserName">User name given in the format of Domain/UserName.</param>
            <param name="eAccessRight">Access right on the permission group.</param>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoUserOrGroupExistsInGivenDomain">User or group doesn't exist in given domain.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidUserNameException">Invalid user name.</exception>
            <example>This example explains how to add an access rule on a permission group.
            <code>
            'Define PermissionGroup.        
            Dim strUserName As String = "Domain\\EveryOne"        
            Dim oPG As PermissionGroup = Nothing
            Dim eAccessRight As PGAccessRights = PGAccessRights.Read
            'Call the AddAccessControlRule property to add a user with read access.
            oPG.AddAccessControlRule(strUserName, eAccessRight)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroup.ToString">
            <summary>
            Returns the name of this permission group.
            </summary>
            <returns>Name of this permission group.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroup.Equals(System.Object)">
            <summary>
            Determines whether the specified permission group object is equal to the current permission group object.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>True if the passed in permission group object is equal to this permission group object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroup.GetHashCode">
            <summary>
            Returns a hash code for the current permission group object.
            </summary>
            <returns>A hash code for the current permission group object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroup.Parent">
            <summary>
            Returns the parent of the permission group.
            </summary>
            <example>This example explains how to get the parent of a permission group.
            <code>
            'Define PermissionGroup.
            Dim oParentPGFolder As PermissionGroupFolder = Nothing                
            Dim oPG As PermissionGroup = Nothing
            'Call the Parent property to get the parent of the permission group.
            oParentPGFolder = oPG.Parent        
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroup.Name">
            <summary>
            Gets or sets the permission group name.
            </summary>
            <example>This example explains how to get or set the permission group name.
            <code>
            'Define PermissionGroup.        
            Dim strPGName As String = Nothing
            Dim strPGName1 As String = Nothing
            Dim oPG As PermissionGroup = Nothing
            'Call the Name property to get the name of the permission group.
            strPGName = oPG.Name
            'Call the Name property to set the name of permission group.
            oPG.Name = strPGName1
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroup.PermissionGroupID">
            <summary>
            Gets the permission group ID that identifies this permission group.
            </summary>
            <example>This example explains how to get the permission group ID.
            <code>
            'Define PermissionGroup.        
            Dim nPermissionGroupId As int
            Dim oPG As PermissionGroup = Nothing
            'Call the PermissionGroupID property to get the permission group ID.
            nPermissionGroupId = oPG.PermissionGroupID        
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroup.PGLocation">
            <summary>
            Returns the related location object of the permission group.
            </summary>
            <example>This example explains how to get the location.
            <code>
            'Define PermissionGroup.        
            Dim oLocation As Location = Nothing        
            Dim oPG As PermissionGroup = Nothing
            'Call the Location property to get the location of the permission group.
            oLocation = oPG.PGLocation    
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroup.AccessRules">
            <summary>
            Gets the collection of access rules that reference this permission group.
            </summary>
            <example>This example explains how to get the access rules.
            <code>
            'Define PermissionGroup.        
            Dim oAccessRules As ReadOnlyCollection(Of AccessRule) = Nothing        
            Dim oPG As PermissionGroup = Nothing
            'Call the AccessRules property to get the access rules of the permission group.
            oAccessRules = oPG.AccessRules    
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PermissionGroupFolder">
            <summary>
            PermissionGroupFolder is a wrapper class for a folder object that can be created under a catalog database/project root/folder itself.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroupFolder.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.String)">
            <summary>
            Constructor used for creating a permission group folder for a given folder parent and folder name.
            </summary>
            <param name="oConnection">SP3Dconnection: Can be a catalog or model connection.</param>
            <param name="strFolderName">Name of the folder that is being created.</param>
            <exception cref="T:System.ArgumentNullException">SP3DConnection or folder name passed is null.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFolderNameIsNotUniqueException">Folder name already exists.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupFolderException">Failed to create permission group folder.</exception>
            <example>This example explains how to create a permission group folder.
            <code>
            'Create PermissionGroupFolder.
            Dim oConnection As SP3DConnection = Nothing
            Dim oPGFolder1 As PermissionGroupFolder = Nothing
            Dim strFolderName As String = Nothing
            'Call the PermissionGroupFolder constructor by passing the folder and name of the folder as arguments.
            oPGFolder1 = New PermissionGroupFolder(oConnection, strFolderName)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroupFolder.#ctor(Ingr.SP3D.Common.Middle.PermissionGroupFolder,System.String)">
            <summary>
            Constructor used for creating a permission group folder for a given folder parent and folder name.
            </summary>
            <param name="oParentPGFolder">Folder parent object.</param>
            <param name="strFolderName">Name of the folder that is being created.</param>
            <exception cref="T:System.ArgumentNullException">PermissionGroupFolder or folder name passed is null.</exception>        
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFolderNameIsNotUniqueException">Folder name is a null string or empty string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPGAndPGFolderCanNotCoExistAtSameLevelException">Folder name is a null string or empty string.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupFolderException">Failed to create the permission group folder.</exception>
            <example>This example explains how to create a permission group folder.
            <code>
            'Create PermissionGroupFolder.
            Dim oPGFolder As PermissionGroupFolder = Nothing
            Dim oPGFolder1 As PermissionGroupFolder = Nothing
            Dim strFolderName As String = Nothing
            'Call the PermissionGroupFolder constructor by passing the folder and name of the folder as arguments.
            oPGFolder1 = New PermissionGroupFolder(oPGFolder,strFolderName)        
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroupFolder.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for wrapping an existing COM filter.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PermissionGroupFolder.ToString">
            <summary>
            Returns the name of this permission group folder.
            </summary>
            <returns>Name of this permission group folder.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroupFolder.Name">
            <summary>
            Gets or sets the name of the permission group folder.
            </summary>        
            <exception cref="T:System.ArgumentNullException">Given permission group folder name is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFolderNameIsNotUniqueException">Given permission group folder name already exists.</exception>
            <example>This example explains how to get the name of a permission group folder.
            <code>
            Dim oPGFolder As PermissionGroupFolder = Nothing        
            Dim strFolderName As String = Nothing
            'Call the Name property to get the name of the folder.
            strFolderName = oPGFolder1.Name
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroupFolder.Folders">
            <summary>
            Returns the collection of folders under this folder.
            </summary>        
            <example>This example explains how to get the child permission group folders of a permission group folder.
            <code>
            Dim oPGFolder As PermissionGroupFolder = Nothing        
            Dim oChildFolders As ReadOnlyCollection(Of PermissionGroupFolder) = Nothing
            'Call the Folders property to get the child folders.
            oChildFolders = oPGFolder.Folders
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroupFolder.PermissionGroups">
            <summary>
            Returns the collection of PermissionGroup objects under this folder.
            </summary>
            <example>This example explains how to get the child permission groups of a permission group folder.
            <code>
            Dim oPGFolder As PermissionGroupFolder = Nothing        
            Dim oChildPermissionGroup As ReadOnlyCollection(Of PermissionGroup) = Nothing
            'Call the PermissionGroups property to get the child permission groups.
            oChildPermissionGroup = oPGFolder.PermissionGroups
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PermissionGroupFolder.Parent">
            <summary>
            Returns the parent of this folder.
            </summary>
            <example>This example explains how to get the parent of a permission group folder.
            <code>
            Dim oPGFolder As PermissionGroupFolder = Nothing        
            Dim oParent As BusinessObject = Nothing
            'Call the Parent property to get the parent of the permission group folder.
            oParent = oPGFolder.Parent
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AccessRule">
            <summary>
            AccessRule is a wrapper class to an access rule, which can be created on a permission group or catalog or model database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AccessRule.#ctor(Ingr.SP3D.Common.Middle.PermissionGroup,Ingr.SP3D.Common.Middle.PGAccessRights,System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="PermissionGroup">The permission group this access rule applies to.</param>
            <param name="AccessControl">The access control mask.</param>
            <param name="Role">The applicable role.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AccessRule.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for wrapping an existing COM AccessRule.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AccessRule.ToString">
            <summary>
            Returns the string form of this access rule in the form.
            </summary>
            <returns>Role:PermissionGroup.Name:AccessMask.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AccessRule.Equals(System.Object)">
            <summary>
            Determines whether the specified access rule object is equal to the current access rule object.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>True if the passed-in access rule object is equal to this access rule object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AccessRule.GetHashCode">
            <summary>
            Returns a hash code for the current access rule object.
            </summary>
            <returns>A hash code for the current access rule object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AccessRule.User">
            <summary>
            Gets or sets the applicable role; e.g., Everyone, etc.
            </summary>
            <example>This example explains how to get or set the user on a permission group.
            <code>
            'Define AccessRule.        
            Dim oAccessRule As AccessRule = Nothing      
            Dim sUserName As String         
            'Call the User property to get the current user.
            sUserName = oAccessRule.User
            sUserName = "EveryOne"
            'Call the User property to set or change the user.
            oAccessRule.User = sUserName
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AccessRule.TargetPermissionGroup">
            <summary>
            Gets the permission group this access rule applies to.
            </summary>
            <example>This example explains how to get the target permission group.
            <code>
            'Define AccessRule.        
            Dim oAccessRule As AccessRule = Nothing      
            Dim oTargetPermissionGroup As PermissionGroup         
            'Call the TargetPermissionGroup property to get the target permission group.
            oTargetPermissionGroup = oAccessRule.TargetPermissionGroup
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AccessRule.AccessRight">
            <summary>
            Gets or sets the access control mask (Read, Update, Delete, Create).
            </summary>
            <example>This example explains how to get or set the access rights.
            <code>
            'Define AccessRule.        
            Dim oAccessRule As AccessRule = Nothing      
            Dim ePGAccessRights As PGAccessRights         
            'Call the AccessRight property to get the access right.
            ePGAccessRights = oAccessRule.AccessRight
            'Call the AccessRight property to set the access right.
            oAccessRule.AccessRight = ePGAccessRights.Read
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAccessRulesException">
            <summary>
            Raised if failed to get the access rules.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAccessRulesException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToGetAccessRulesException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAccessRulesException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToGetAccessRulesException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFolderNameIsNotUniqueException">
            <summary>
            Raised if given permission group folder name already exists.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFolderNameIsNotUniqueException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToGetAccessRulesException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPGNameIsNotUniqueException">
            <summary>
            Raised if given permission group name already exists.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPGNameIsNotUniqueException.#ctor">
            <summary>
            Initializes a new instance of the CmnPGNameIsNotUniqueException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPGAndPGFolderCanNotCoExistAtSameLevelException">
            <summary>
            Raised if permission group and permission group folder exists at the same level.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPGAndPGFolderCanNotCoExistAtSameLevelException.#ctor">
            <summary>
            Initializes a new instance of the CmnPGNameIsNotUniqueException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupException">
            <summary>
            Raised if unable to create permission group.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToCreatePermissionGroupException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToCreatePermissionGroupException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupFolderException">
            <summary>
            Raised if unable to create permission group folder.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePermissionGroupFolderException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToCreatePermissionGroupFolderException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetPermissionGroupNameException">
            <summary>
            Raised if failed to set the permission group name.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToSetPermissionGroupNameException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToSetPermissionGroupNameException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnAtLeastOneUserHaveWriteOrFullAccessException">
            <summary>
            Raised if no user has write or full access on the permission group.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnAtLeastOneUserHaveWriteOrFullAccessException.#ctor">
            <summary>
            Initializes a new instance of the CmnAtLeastOneUserHaveWriteOrFullAccessException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidUserNameException">
            <summary>
            Raised if the user name is invalid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidUserNameException.#ctor">
            <summary>
            Initializes a new instance of the CmnInvalidUserNameException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoUserOrGroupExistsInGivenDomain">
            <summary>
            Raise if the given user name does not exist in the given domain.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoUserOrGroupExistsInGivenDomain.#ctor">
            <summary>
            Initializes a new instance of the CmnNoUserOrGroupExistsInGivenDomain class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.LineHelper">
            <summary>
            Helper class to implement ILine.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ILine">
            <summary>
            Interface definition for ILine.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILine.Infinite">
            <summary>
            Gets or sets whether this line is infinite.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILine.StartPoint">
            <summary>
            Gets or sets the start point of the line.
            <para>Note: Do not call this routine to set if the line is infinite.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILine.EndPoint">
            <summary>
            Gets or sets the end point of the line.
            <para>Note: Do not call this routine to set if your line is infinite.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILine.RootPoint">
            <summary>
            Gets or sets the root point of the line.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ILine.Direction">
            <summary>
            Gets or sets the direction vector.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Initializes a new instance of the LineHelper class with the supplied named BusinessObject.
            </summary>
            <param name="line">Line object as BusinessObject.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IJLine interface is not supported by given business object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineHelper.GetCOMBO">
            <summary>
            Gets COM object for entity BusinessObject.
            </summary>
            <returns>COM object of entity BusinessObject as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">LineHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.LineHelper.IsLine(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Checks if the provided business object input is a line or not.
            </summary>
            <param name="oBO">Business Object</param>
            <returns>Boolean value indicating whether the object is a line or not.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineHelper.Infinite">
            <summary>
            Gets or sets whether this line is infinite.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">LineHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineHelper.StartPoint">
            <summary>
            Gets or sets the start point of the line.
            <para>Note: Do not call this routine to set if your line is infinite.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">LineHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineHelper.EndPoint">
            <summary>
            Gets or sets the end point of the line.
            <para>Note: Do not call this routine to set if your line is infinite.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">LineHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineHelper.RootPoint">
            <summary>
            Gets or sets the root point of the line.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">LineHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.LineHelper.Direction">
            <summary>
            Gets or sets the direction vector.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">LineHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SymbolDefinition">
            <summary>
            SymbolDefinition class used to wrap an existing COM symbol definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolDefinition.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            SymbolDefinition constructor.
            </summary>
            <param name="oBOP">Private BusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolDefinition.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            SymbolDefinition constructor given a connection.
            </summary>
            <param name="oConnection">SP3D Connection</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolDefinition.Update">
            <summary>
            Forces the symbol to update.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolDefinition.Name">
            <summary>
            Gets the name of the SymbolDefinition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolDefinition.CodeBase">
            <summary>
            Gets the codebase for the symbol definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolDefinition.CacheOption">
            <summary>
            Returns the caching behavior of the symbol definition.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions">
            <summary>
            Enumerator for SymbolDefinition options.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolCacheOptionAutomatic">
            <summary>
            Option to indicate that the system will automatically determine whether to cache the symbol.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolCacheOptionShared">
            <summary>
            Option to indicate a cached symbol.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolCacheOptionNotShared">
            <summary>
            Option to indicate a non-cached symbol.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolGeomFree">
            <summary>
            Option to indicate that the symbol has no geometric inputs.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolDrivenByArg">
            <summary>
            Option indicates the symbol is driven by arguments.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolGeomFixToID">
            <summary>
            Option indicates that the occurrence matrix is the identity matrix.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolDynamicMetadata">
            <summary>
            Option idicates that the symbol has dynamic metadata.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SymbolDefinitionOptions.SymbolNotSupportOnly">
            <summary>
            Option indicates that the symbol is not support only.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ECorrelationStatus">
            <summary>
            Enumerator for ECorrelationStatus.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ECorrelationStatus.CorrelationStatus_NOT_CORRELATED">
            <summary>
            Not correlated.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ECorrelationStatus.CorrelationStatus_CORRELATED_UNKNOWN">
            <summary>
            Unknown correlation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ECorrelationStatus.CorrelationStatus_CORRELATED_CONSISTENT">
            <summary>
            Consistent correlation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ECorrelationStatus.CorrelationStatus_CORRELATED_INCONSISTENT">
            <summary>
            Inconsistent correlation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ECorrelationStatus.CorrelationStatus_INGORED">
            <summary>
            Ignored correlation.
            </summary>
            <remarks>This will be retired in a future version. Do not use this value. Use CorrelationStatus_IGNORED instead.</remarks>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ECorrelationStatus.CorrelationStatus_IGNORED">
            <summary>
            Ignored correlation.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ECorrelationStatus.CorrelationStatus_CORRELATED_BASIS_DELETED">
            <summary>
            Correlated basis deleted.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.DistribPortFlow">
            <summary>
            Enumerator for distribution port flow.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortFlow.DistribFlow_UNDEFINED">
            <summary>
            Undefined distribtion flow.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortFlow.DistribFlow_OUT">
            <summary>
            Distribution flow out.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortFlow.DistribFlow_IN">
            <summary>
            Distribution flow in.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortFlow.DistribFlow_BOTH">
            <summary>
            Distribution flow is both.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortFlow.DistribFlow_NOFLOW">
            <summary>
            No flow distribution.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.DistribPortStatus">
            <summary>
            Enumerator for distribution port status. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortStatus.DistribPortStatus_ALL">
            <summary>
            All distribution port status.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortStatus.DistribPortStatus_BASE">
            <summary>
            Base distribution port status.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.DistribPortStatus.DistribPortStatus_ADDED">
            <summary>
            Added distribution port status.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PortType">
            <summary>
            Enumerator for port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.All">
            <summary>
            All port types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Piping">
            <summary>
            Piping port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Duct">
            <summary>
            Duct port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Cable">
            <summary>
            Cable port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Foundation">
            <summary>
            Foundation port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Cabletray">
            <summary>
            Cabletray port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Conduit">
            <summary>
            Conduit port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Edge">
            <summary>
            Edge port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Face">
            <summary>
            Face port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.End">
            <summary>
            End port type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortType.Centerline">
            <summary>
            Centerline port type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PortStatus">
            <summary>
            Distribution port status.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortStatus.All">
            <summary>
            Port status All.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortStatus.Base">
            <summary>
            Port status Base.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PortStatus.Added">
            <summary>
            Port status Added.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSItemType">
            <summary>
            The enumerated type of the WBS item.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSItemType.UnDefined">
            <summary>
            Undefined WBS item type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSItemType.ContractGroup">
            <summary>
            ContractGroup WBS item type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSItemType.SubContract">
            <summary>
            Contract WBS item type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSItemType.DesignArea">
            <summary>
            DesignArea WBS item type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSItemType.Group">
            <summary>
            Group WBS item type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSPurposeType">
            <summary>
            Enumerator for purpose of a WBS item.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.Undefined">
            <summary>
            Undefined WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupPiping">
            <summary>
            ContractGroupPiping WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupCivil">
            <summary>
            ContractGroupCivil WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupArchitecture">
            <summary>
            ContractGroupArchitecture WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupElectrical">
            <summary>
            ContractGroupElectrical WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupInstrument">
            <summary>
            ContractGroupInstrument WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupMechanical">
            <summary>
            ContractGroupMechanical WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupBuildings">
            <summary>
            ContractGroupBuildings WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupGeneralMechanical">
            <summary>
            ContractGroupGeneralMechanical WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupInsulation">
            <summary>
            ContractGroupInsulation WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupPainting">
            <summary>
            ContractGroupPainting WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupPiling">
            <summary>
            ContractGroupPiling WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupSafetyAndProtection">
            <summary>
            ContractGroupSafetyAndProtection WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupSiteDevelopment">
            <summary>
            ContractGroupSiteDevelopment WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupStructuralSteel">
            <summary>
            ContractGroupStructuralSteel WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupVessel">
            <summary>
            ContractGroupVessel WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupPurchaseOrder">
            <summary>
            ContractGroupPurchaseOrder WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.ContractGroupOther">
            <summary>
            ContractGroupOther WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.SubContractFabrication">
            <summary>
            SubContractFabrication WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.SubContractErection">
            <summary>
            SubContractErection WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.SubContractFabricationAndErection">
            <summary>
            SubContractFabricationAndErection WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.SubContractReference">
            <summary>
            SubContractReference WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.SubContractOther">
            <summary>
            SubContractOther WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaPiping">
            <summary>
            DesignAreaPiping WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaCivil">
            <summary>
            DesignAreaCivil WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaArchitecture">
            <summary>
            DisignAreaArchitecture WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaElectrical">
            <summary>
            DesignAreaElectrical WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaInstrument">
            <summary>
            DesignAreaInstrument WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaMechanical">
            <summary>
            DesignAreaMechanical WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaPCE">
            <summary>
            DesignAreaPCE WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.DesignAreaOther">
            <summary>
            DesignAreaOther WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupMiscellaneous">
            <summary>
            GroupMiscellaneous WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupPiping">
            <summary>
            GroupPiping WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupStructure">
            <summary>
            GroupStructure WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupCivil">
            <summary>
            GroupCivil WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupElectrical">
            <summary>
            GroupElectrical WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupInstrument">
            <summary>
            GroupInstrument WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupMechanical">
            <summary>
            GroupMechanical WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupPCE">
            <summary>
            GroupPCE WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupOther">
            <summary>
            GroupOther WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupIsoDrawing">
            <summary>
            GroupIsoDrawing WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupIsoDrawingTracing">
            <summary>
            GroupIsoDrawingTracing WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupIsoDrawingStress">
            <summary>
            GroupIsoDrawingStress WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupIsoDrawingSystem">
            <summary>
            GroupIsoDrawingSystem WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupIsoDrawingFabrication">
            <summary>
            GroupIsoDrawingFabrication WBS item type purpose.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSPurposeType.GroupStressAnalysis">
            <summary>
            GroupStressAnalysis WBS item type purpose.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSType">
            <summary>
            Enumerator for WBSType.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSType.WBSHeirarchy">
            <summary>
            WBSHierarchy type.
            </summary>
            <remarks>This will be retired in a future version. Do not use this value. Use WBSHierarchy instead.</remarks>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSType.WBSHierarchy">
            <summary>
            WBSHierarchy type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSType.WBSBelongsTo">
            <summary>
            WBSBelongsTo type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSValidateChildrenStatus">
            <summary>
            Enumerator for return status for validating children.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSValidateChildrenStatus.Ok">
            <summary>
            Status is Ok.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSValidateChildrenStatus.DifferentProjects">
            <summary>
            Some children's area is associated to a different project than the WBSItem’s parent project.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSValidateChildrenStatus.Exclusive">
            <summary>
            Some children are assigned to an exclusive WBSItem of the same type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSValidateChildrenStatus.Mixed">
            <summary>
            Children have multiple types of validation conditions.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSValidateChildrenStatus.DifferentAssignment">
            <summary>
            Some children have assignment type conflicts with the WBSItem.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SplitType">
            <summary>
            Enumerator which describes the type of split.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SplitType.Design">
            <summary>
            Used to set different design properties to leaf-systems/parts belonging to the same root system.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SplitType.Planning">
            <summary>
            Used when an entity is split by a planning block boundary.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SplitType.Straking">
            <summary>
            Used to designate separate physical parts, usually due to manufacturing limitations.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSProjectStatus">
            <summary>
            The enumerated Status of the WBS Project.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.Created">
            <summary>
            Created WBS project status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.Active">
            <summary>
            Active WBS project status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.StartedCompletion">
            <summary>
            Started Completion WBS project status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.Completed">
            <summary>
            Completed WBS project status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.Merged">
            <summary>
            Merged WBS project status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.Finished">
            <summary>
            Finished WBS project status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.Cancelled">
            <summary>
            Cancelled WBS project status
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectStatus.Terminated">
            <summary>
            Terminated WBS project status
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSProjectPurpose">
            <summary>
            The enumerated Purpose of the WBS Project.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectPurpose.Project">
            <summary>
            Project WBS project purpose
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.WBSProjectPurpose.AsBuilt">
            <summary>
            AsBuilt WBS project purpose
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IConnectable">
            <summary>
            Interface IConnectable definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IConnectable.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of ports given a port type for this object. An empty list is returned
            if the connectable does not have any ports defined. This method returns all the free and connected ports.
            </summary>
            <param name="eType">PortType enumerator.</param>
            <returns>ReadOnlyCollection of IPort objects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IConnectable.GetConnectablePorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of connectable (free) ports that can be established with a connection given a
            port type.
            An empty collection is returned if all the ports of the connectable are connected.
            </summary>
            <param name="eType">PortType enumerated value.</param>
            <returns>The collection of Connectable ports.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IConnectable.GetConnectedPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of used ports; i.e., returns the collection of ports that are already
            connected to another port through a connection object given an port type. An empty collection
            is returned if all the ports of the connectable are free.
            </summary>
            <param name="eType">PortType enumerated value.</param>
            <returns>ReadOnlyCollection of IPort objects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IConnectable.IsConnectedTo(Ingr.SP3D.Common.Middle.IConnectable,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IConnection}@)">
            <summary>
            Returns the collection of connection objects for a connectable. If there are no connected ports,
            then an empty collection is returned.
            </summary>
            <param name="oConnectable">IConnectable object.</param>
            <param name="oConnectionEnum">ReadOnlyCollection of IConnection objects.</param>
            <returns></returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IConnection">
            <summary>
            Interface IConnection definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IConnection.GetPorts(Ingr.SP3D.Common.Middle.PortType)">
            <summary>
            Returns the collection of ports associated to this object.
            </summary>
            <param name="eType">PortType enumerated value.</param>
            <returns>ReadOnlyCollection of IPort objects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IConnection.FindPort(Ingr.SP3D.Common.Middle.IConnectable)">
            <summary>
            Returns the other port of the connection given a connectable.
            </summary>
            <param name="oParent">IConnectable object.</param>
            <returns>IPort object.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IDistributionConnectable">
            <summary>
            Interface IDistributionConnectable definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IDistributionConnectable.CanPortbeDeleted(Ingr.SP3D.Common.Middle.IDistributionPort)">
            <summary>
            Returns True if this port can be deleted. The ports that are defined by the part are non-deletable
            and returns False in those cases.
            </summary>
            <param name="oPort">IDistributionPort</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IDistributionConnection">
            <summary>
            Interface IDistributionConnection definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IDistributionConnection.GetOtherPort(Ingr.SP3D.Common.Middle.IDistributionPort)">
            <summary>
            Gets the other port.
            </summary>
            <param name="oPort">Distribution port object.</param>
            <returns>Returns the other port.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IDistributionConnection.AddConnectionPart(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds the connection part.
            </summary>
            <param name="oPart">BusinessObject.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IDistributionConnection.AddConnectionParts(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Adds connection parts.
            </summary>
            <param name="oParts">ReadOnlyCollection of BusinessObject.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IDistributionConnection.RemoveConnectionPart(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes the connection part.
            </summary>
            <param name="oPart">BusinessObject.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IDistributionConnection.RemoveConnectionParts(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Removes connection parts.
            </summary>
            <param name="oParts">ReadOnlyCollection of BusinessObject.</param>
            <returns>Long value.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IDistributionConnection.ConnectionParts">
            <summary>
            Returns the ConnectionParts as ReadOnlyCollection of BusinessObject.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IDistributionConnection.Location">
            <summary>
            Gets or sets the location of the distribution connection.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IDistributionPort">
            <summary>
            Interface IDistributionPort definition.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IPort">
            <summary>
            Interface IPort definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPort.Connections">
            <summary>
            Gets the collection of connection objects associated to this port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPort.Connectable">
            <summary>
            Gets the parent Connectable object associated to this port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPort.PortType">
            <summary>
            Gets the port type of this port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IDistributionPort.Location">
            <summary>
            Gets or sets the location of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IDistributionPort.NormalVector">
            <summary>
            Gets or sets the normal vector of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IDistributionPort.RadialVector">
            <summary>
            Gets or sets the radial vector of the distribution port.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IDistributionPort.IsConnected">
            <summary>
            Returns True if the port is connected to another port through a connection object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IDistributionPort.PortStatus">
            <summary>
            Returns the distribution port status.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IGraphic">
            <summary>
            Implementator has a graphic representation.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.INameRule">
            <summary>
            Interface INameRule definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.INameRule.ActiveNameRule">
            <summary>
            Gets or sets the name rule on an object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IPortGeometry">
            <summary>
            Interface IPortGeometry definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPortGeometry.Geometry">
            <summary>
            Gets the port geometry.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IPartOccurrence">
            <summary>
            IPartOccurrence interface definition. Should be implemented by all wrappers whose COM BusinessObjects aggregate 
            part occurrence and hence allow a custom part to be set on the BO.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPartOccurrence.Part">
            <summary>
            Gets or sets part occurrences for a catalog part.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISystemChild">
            <summary>
            Interface ISystemChild definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISystemChild.SystemParent">
            <summary>
            Gets or sets the system parent to the child object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISpaceChild">
            <summary>
            Interface ISpaceChild definition.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISpaceChild.SpaceParent">
            <summary>
            Gets or sets the space parent to the child object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IWBSProject">
            <summary>
            Interface IWBSProject definition.
            </summary>
            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSProject.AddToProject(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Assigns the item child to a project.
            </summary>
            <param name="oItemChild">IWBSItemChild object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSProject.RemoveFromProject(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Removes the item child from the assigned project.
            </summary>
            <param name="oItemChild">IWBSItemChild object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IWBSProject.BelongsToProject(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Returns whether the item child belongs to the project or not.
            True means the object belongs to the project; False means the object does not belong to this project
            </summary>
            <param name="oItemChild">IWBSItemChild object.</param>
            <returns>Boolean</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSProject.ProjectChildren">
            <summary>
            Returns the collection of objects claimed to a project.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSProject.ProjectStatus">
             <summary>
            Get/Set of property Project Status 
             </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IWBSProject.ProjectPurpose">
             <summary>
            Get/Set of property Project Purpose
             </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IPart">
            <summary>
            IPart class definition.
            </summary>
            
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPart.PortDefinitions">
            <summary>
            The property returns the read-only collection of port definitions associated to the part.
            Returns an empty collection when there are no ports.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPart.PartClass">
            <summary>
            Gets the part class of a part.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPart.PartNumber">
            <summary>
            Gets the catalog part number.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPart.PartDescription">
            <summary>
            Gets the part description.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPart.MirrorBehaviorOption">
            <summary>
            Gets the part mirror behavior option.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IEDIData">
            <summary>
            Interface to support Electronic Data Interchange. 
            Needs to be realized on all objects which support import-export to external applications.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEDIData.OriginOid">
            <summary>
            Gets or sets the oid associated to the object in the application of origin.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEDIData.OriginAppName">
            <summary>
            Gets or sets the name of the application of origin.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEDIData.OriginAppDesc">
            <summary>
            Gets or sets the description associated to the application of origin.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEDIData.OriginAppId">
            <summary>
            Gets or sets the ID associated to the application of origin.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEDIData.EDIFlag">
            <summary>
            Future use - Electronic Data Interchange flag.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISpoolableObject">
            <summary>
            Interface ISpoolableObject definition. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISpoolableObject.Spools">
            <summary>
            Returns the Spool objects under the SpoolableObject.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ILogicalDistribPort">
            <summary>
            Interface ILogicaldistributionPort.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ILogicalDistribPort.DisconnectLogicalConnection">
            <summary>
            Disconnects the logicalconnection.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISplit">
            <summary>
            Interface to be implemented by all split entities.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISplit.Results">
            <summary>
            Read-only collection of systems or parts resulting from a split.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISplit.SplitType">
            <summary>
            Gets or sets the type of split.  For non-marine entities, set is currently not supported and 
            get always returns design SplitType.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ISplittable">
            <summary>
            Interface to be implemented by entities which want to support split operations.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISplittable.AddSplitters(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Adds the splitter objects on the splitting entity. 
            </summary>
            <param name="splitters">Collection of business objects which will split the entity.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISplittable.AddSplitter(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds the splitter object on the splitting entity.  
            </summary>
            <param name="splitter">The business object which will split the entity.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISplittable.RemoveAllSplitters">
            <summary>
            Removes all splitters from an entity. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISplittable.RemoveSplitter(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes a splitter from an entity. If a splitter already splits an object, it removes it from the split result.
            </summary>
            <param name="splitter">The business object that is splitting the entity which will be removed.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISplittable.GetSplit(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets the split object from the splitting entity given the splitter. 
            </summary>
            <param name="splitter">The business object that is splitting the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ISplittable.GetSplitConnections(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Returns particular split/logical connection resulting from a given splitter.
            </summary>
            <param name="splitter">The business object that is splitting the entity.</param>
            <returns>ReadOnlyCollection of Connection objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISplittable.Splits">
            <summary>
            Gets the split objects from the splitting entity. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ISplittable.SplitConnections">
            <summary>
            Read-only collection of all split/logical connections currently on the splittable entity. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IAnalysisChild">
            <summary>
            Interface to be implemented by all analysis classes.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IAnalysisChild.AnalysisParent">
            <summary>
            Returns the analysis parent object. Cannot move this object to a new parent.
            </summary>
            <value>The analysis parent.</value>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1">
            <summary>
            ReadOnlyDictionary generic dictionary that allows only access to existing members - not additions or deletions.
            </summary>
            <typeparam name="T">string</typeparam>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Returns true if the dictionary contains the candidate object.
            </summary>
            <param name="oKeyValue">The object to use in testing for membership.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.ContainsKey(System.String)">
            <summary>
            Returns true if the dictionary contains the candidate key.
            </summary>
            <param name="sKey">The key to test for membership.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Returns true if the object is found, and returns the object.
            </summary>
            <param name="sKey">Key string value.</param>
            <param name="oValue">T</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.ToString">
            <summary>
            Returns the name of the dictionary.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.Add(System.String,`0)">
            <summary>
            Adds the object with the given key.
            </summary>
            <param name="sKey">The object to add.</param>
            <param name="oValue">The key to use.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.Remove(System.String)">
            <summary>
            Remove the object using the key.
            </summary>
            <param name="sKey">Key to use.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.Clear">
            <summary>
            Clear the dictionary of all members.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.Count">
            <summary>
            Gets the current count of objects in the dictionary.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.Values">
            <summary>
            Gets the collection of values.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ReadOnlyDictionary`1.Keys">
            <summary>
            Gets the collection of keys.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Spool">
            <summary>
            Abstract class upon which Spool class wrappers are built.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Spool.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the spool base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Spool.Finalize">
            <summary>
            Destructor for the spool base class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Spool.AddAssemblyChild(Ingr.SP3D.Common.Middle.IAssemblyChild)">
            <summary>
            Adds the specified object as a child to parent object.
            </summary>
            <param name="oChild">IAssemblyChild</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Spool.SetUserDefinedName(System.String)">
             <summary>
             Sets the name of an item.
             </summary>
             <param name="Name">The new name string.</param>
            <example>This example explains how to set the name.
            <code>
             'Define Spool. 
             Dim oSpool As Spool = Nothing
             oSpool.SetUserDefinedName("Spool-01")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Spool.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Spool.GetNameRuleHelper">
            <summary>
            Private utility method to get and manage the name rule helper object.
            </summary>
            <returns>m_oSystemChildHelper - Occurrence to the name rule helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.SpoolID">
            <summary>
            Gets or sets the SpoolID property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.OverSized">
            <summary>
            Gets or sets the OverSized property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.SpoolableObject">
            <summary>
            Gets the SpoolableObject of the spool.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.AssemblyChildren">
            <summary>
            Returns the collection of IAssemblyChild objects of the parent object. An empty list is returned if there are
            no children for the parent object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.AssemblyParent">
            <summary>
            Gets or sets the Assembly parent to the child object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.Name">
             <summary>
             Gets the read-only name.
             </summary>
            <example>This example explains how to get the name.
            <code>
             'Define Spool. 
             Dim oSpool As Spool = Nothing
             Dim sName As String
             sName = oSpool.Name
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.ActiveNameRule">
             <summary>
             Gets or sets the active name rule assigned to a spool.
             </summary>
             <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
             <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
             <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <example>This example explains how to get or set the active name rule.
            <code>
             'Define Spool. 
             Dim oSpool As Spool = Nothing
             Dim oActiveNameRule As BusinessObject
             'Get the active name rule. 
             oActiveNameRule = oSpool.ActiveNameRule 
             ' Set the active name rule. 
             oSpool.ActiveNameRule = oActiveNameRule 
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Spool.WBSItemParents">
            <summary>
            Returns the collection of WBS parents.
            </summary>
            <example>This example explains how to get WBSItemParents of a spool.
            <code>
            'Declare RouteSpool. 
            Dim oSpool As PipeSpool = Nothing 'This can be a DuctSpool or a PenetrationSpool also.
            'Get WBSItemParents from Spool. 
            Dim oWBSParentsCollection As ReadOnlyCollection(Of IWBSItem) = oSpool.WBSItemParents 
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">
            <summary>
            This exception is raised by parent classes when the child passed in
            is not of the appropriate type. This derives from CmnException.
            It has two overloaded constructors.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException.#ctor(System.String)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile.
            </summary>
            <param name="message">A string value that will be set as the message to be logged.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException.#ctor(System.Int32,System.String)">
            <summary>
            This constructor sets the passed-in parameter as the message to be logged in a logfile.
            </summary>
            <param name="nID">An integer value that will be set as the message to be logged.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">
            <summary>
            Failed because the interface is not supported by the given BusinessObject object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes the CmnSupportsInterfaceException class. 
            </summary>
            <param name="iErrNo">Integer error number.</param>
            <param name="sDefaultString">Default string.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">
            <summary>
            Helper is in invalid state as the reference to the business object has been lost.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException.#ctor(System.String)">
            <summary>
            Initializes the CmnHelperInvalidStateException class. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">
            <summary>
            Failed because the user has no access.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoAccessException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoAccessException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes the CmnNoAccessException class.
            </summary>
            <param name="iErrNo">Integer error number.</param>
            <param name="sDefaultString">Default string.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">
            <summary>
            Failed because of an invalid object type.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes the CmnInvalidObjectTypeException class.
            </summary>
            <param name="iErrNo">Integer error number.</param>
            <param name="sDefaultString">Default string.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException">
            <summary>
            Failed because of an invalid argument.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidArgumentException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes the CmnInvalidArgumentException class.
            </summary>
            <param name="iErrNo">Integer error number.</param>
            <param name="sDefaultString">Default string.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException">
            <summary>
            This exception is raised by parent classes when the AccessDenied error is encountered. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>            
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnAccessDeniedException.#ctor">
            <summary>
            This constructor uses the string defined in the resource file to construct a message for the exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchObjectException">
            <summary>
            This exception is raised by parent classes when NoObject error is encountered. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoSuchObjectException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>            
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoSuchObjectException.#ctor">
            <summary>
            This constructor uses the string defined in the resource file to construct a message for the exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnObjectModifiedException">
            <summary>
            This exception is raised by parent classes when ObjectModified error is encountered. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnObjectModifiedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>            
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnObjectModifiedException.#ctor">
            <summary>
            This constructor uses the string defined in the resource file to construct a message for the exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">
            <summary>
            This exception is raised by parent classes when NotInWorkingStatus error is encountered. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>            
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException.#ctor">
            <summary>
            This constructor uses the string defined in the resource file to construct a message for the exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotBindToSourceException">
            <summary>
            This exception is raised by parent classes when CannotBindToSource error is encountered. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotBindToSourceException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>            
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotBindToSourceException.#ctor">
            <summary>
            This constructor uses the string defined in the resource file to construct a message for the exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnMSDTCNotEnabledException">
            <summary>
            This exception is raised by parent classes when MSDTCNotEnabled error is encountered. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMSDTCNotEnabledException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>            
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnMSDTCNotEnabledException.#ctor">
            <summary>
            This constructor uses the string defined in the resource file to construct a message for the exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoSpecRelationshipException">
            <summary>
            This exception is raised when attempting to remove a specification from a
            system that has no specification relationships.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoSpecRelationshipException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            This constructor sets the passed-in parameter as an inner exception. It uses 
            the string defined in the resource file to construct a message for the exception.
            </summary>            
            <param name="inner">COMException that will be set as an inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoSpecRelationshipException.#ctor">
            <summary>
            This constructor uses the string defined in the resource file to construct a message for the exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException">
            <summary>
            This exception will be raised when a database with the same name exists already.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDatabaseWithTheSameNameExistsException.#ctor">
            <summary>
            Database with the same name exists already.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException">
            <summary>
            This exception is thrown when there is a failure to delete a database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToDropDataBaseException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToDropDataBaseException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadTablesAndViewsException">
            <summary>
            This exception is thrown when there is a failure to load tables and views in a database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadTablesAndViewsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadTablesAndViewsException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadTablesAndViewsException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToLoadTablesAndViewsException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToExecuteQueryException">
            <summary>
            This exception will be raised when an unexpected failure occurs while executing a database query.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToExecuteQueryException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToExecuteQueryException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToExecuteQueryException.#ctor">
            <summary>
            Constructor to catch any unexpected exceptions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogException">
            <summary>
            This exception will be raised when any unexpected failure occurs while creating the catalog.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="oEx">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogException.#ctor">
            <summary>
            Constructor to catch any unexpected exceptions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantException">
            <summary>
            This exception will be raised when any unexpected failure occurs in the RestorePlant method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="oEx">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor to take exception and error message as input.
            </summary>
            <param name="sErrorMsg">Error message.</param>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantException.#ctor">
            <summary>
            Constructor to catch any unexpected exceptions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToBackUpPlantException">
            <summary>
            This exception will be raised with any unexpected failure in the BackUpPlant method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToBackUpPlantException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToBackUpPlantException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="oEx">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToBackUpPlantException.#ctor">
            <summary>
            Constructor to catch any unexpected exceptions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnOracleServerDoesnotHaveWritePermissions">
            <summary>
            Oracle server does not have write permissions.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnOracleServerDoesnotHaveWritePermissions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreCatalogException">
            <summary>
            This exception will be raised when there is a failure to restore the catalog.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreCatalogException.#ctor(System.Exception)">
            <summary>
            Constructor to catch all exceptions.
            </summary>
            <param name="oEx">Exception</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestoreCatalogException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogDataBaseException">
            <summary>
            This exception will be raised when there is failure creating the catalog database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogDataBaseException.#ctor(System.Exception)">
            <summary>
            Constructor to catch all exceptions.
            </summary>
            <param name="oEx">Exception</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogDataBaseException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exceptions.
            </summary>
            <param name="oComEx">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogDataBaseException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogSchemaException">
            <summary>
            This exception will be raised when there is a failure to create the catalog schema database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogSchemaException.#ctor(System.Exception)">
            <summary>
            Constructor to catch all exceptions.
            </summary>
            <param name="oEx">Exception</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateCatalogSchemaException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPlantDoesnotBelongToActiveSite">
            <summary>
            Plant does not belong to the active site. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPlantDoesnotBelongToActiveSite.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetDefaultFileLocationException">
            <summary>
            This exception will be raised with an unexpected failure while getting the default file location.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetDefaultFileLocationException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetDefaultFileLocationException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetDefaultFileLocationException.#ctor">
            <summary>
            Constructor to catch any unexpected exceptions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePlantException">
            <summary>
            This exception will be raised when an unexpected failure occurs while creating a new plant.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePlantException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePlantException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreatePlantException.#ctor">
            <summary>
            Constructor to catch any unexpected exceptions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFileExistsWithSameNameException">
            <summary>
            This exception will be raised when a file with the same name exists at specified location.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFileExistsWithSameNameException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateProjectManagementObject">
            <summary>
            This exception will be raised when there is failure to create the project management object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateProjectManagementObject.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">Inner COMException.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToCreateProjectManagementObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadOracleSchemaOrDB">
            <summary>
            This exception will be raised if there is a failure to load the oracle database from the dump file.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadOracleSchemaOrDB.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to take inner COM exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToLoadOracleSchemaOrDB.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength">
            <summary>
            This exception will be raised when the length of the database name exceeds maximum length (SqlServer = 128, Oracle = 32).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDataBaseNameExceedsMaximumLength.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToReadBCFFile">
            <summary>
            This exception will be raised if there is a failure to read the backup configuration file.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToReadBCFFile.#ctor(System.Exception)">
            <summary>
            Constructor to catch the inner Exception.
            </summary>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToReadBCFFile.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite">
            <summary>
            This exception will be thrown if the catalog already exists in the selected site.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCatalogWithSameNameExistsInThisSite.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantForSelectiveModelObjectsRecovery">
            <summary>
            This exception will be raised when any unexpected failure occurs in RestorePlantForSelectiveModelObjectsRecovery.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantForSelectiveModelObjectsRecovery.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">Inner COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantForSelectiveModelObjectsRecovery.#ctor(System.Exception)">
            <summary>
            Constructor to catch an unexpected exception.
            </summary>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantForSelectiveModelObjectsRecovery.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGenerateViewsException">
            <summary>
            Unexpected failure trying to generate views.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGenerateViewsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGenerateViewsException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGenerateViewsException.#ctor">
            <summary>
            Failed to generate views.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCatalogDoesNotBelogsToSite">
            <summary>
            Catalog does not belong to the site.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCatalogDoesNotBelogsToSite.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPlantExistsWithSameName">
            <summary>
            Plant with same name exists in the site.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPlantExistsWithSameName.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantAsCopyException">
            <summary>
            This exception will be raised when any unexpected failure occurs in RestorePlantAsCopy method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantAsCopyException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Constructor to catch COM exception.
            </summary>
            <param name="inner">COM exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantAsCopyException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="oEx">Exception object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantAsCopyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor to take exception and error message as input.
            </summary>
            <param name="sErrorMsg">Error message.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToRestorePlantAsCopyException.#ctor">
            <summary>
            Constructor to catch any unexpected exceptions.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIncorrectCodelistValueException">
            <summary>
            This exception will be raised when trying to set an incorrect codelist value.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIncorrectCodelistValueException.#ctor">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectException">
            <summary>
            This exception will be raised when there us a failure in casting $1 to IJDObject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJDObjectException.#ctor(System.String[])">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailBOException">
            <summary>
            This exception will be raised when there us a failure in casting $1 to BO.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailBOException.#ctor(System.String[])">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToOpenRegistryKey">
            <summary>
            This exception will be raised when there was a Failure in opening a registry key
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToOpenRegistryKey.#ctor(System.String[])">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToCastObjectToAssemblyOutputsCopyBehavior">
            <summary>
            This exception will be raised when there was a Failure in casting object to AssemblyOutputsCopyBehavior
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToCastObjectToAssemblyOutputsCopyBehavior.#ctor">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJExposeErrorsException">
            <summary>
            This exception will be raised when there was a Failure in casting $1 to IJExposeError.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJExposeErrorsException.#ctor(System.String[])">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPlantIsNullException">
            <summary>
            This exception will be raised when the Private BO's connection is neither plant nor site And the plant is null 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPlantIsNullException.#ctor">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFeatureTypeException">
            <summary>
            This exception will be raised when the Feature Type of the LineFeature doesnot exist.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFeatureTypeException.#ctor">
            <summary>
            Constructor to catch incorrect codelist value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValue">
            <summary>
            PropertyValue provides access to the value of a specific BusinessObject property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValue.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            PropertyValue constructor that uses PropertyInfo.
            </summary>
            <param name="oPropertyInfo">PropertyInfo reference.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValue.#ctor(System.String,System.String)">
            <summary>
            PropertyValue constructor that uses InterfaceName and PropertyName.
            </summary>
            <param name="sInterfaceName">InterfaceName reference.</param>
            <param name="sPropertyname">PropertyName reference.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValue.SetPropertyInfo(Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Internal method that allows setting the property descriptor.
            </summary>
            <param name="oPropInfo">Reference to the property descriptor.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValue.ValidateArguments(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.SP3DPropType)">
            <summary>
            Checks to make sure arguments are valid.
            </summary>
            <param name="oPropInfo">The PropertyInfo for the property to be set.</param>
            <param name="iPropType">Property type: string, double, etc.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Argument null exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValue.ToString">
            <summary>
            Returns PropertyValue as string.
            For PropertyValueString, returns the string value as it is.
            For PropertyValueCodelist, returns the ShortString value.
            For PropertyValueBoolean, returns "True" or "False" string.
            For PropertyValueDateTime, returns string as per system's current locale.
            For PropertyValueDouble, returns the formatted value if the UOMType is not undefined.
            For PropertyValueInt, PropertyValueShort, and PropertyValueFloat, returns the value formatted as string as it is.
            </summary>
            <returns>System.string</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValue.ReadOnly">
            <summary>
            Returns true if the property is read-only by the caller. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValue.PropertyInfo">
            <summary>
            Read-only access to the description of this property.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValue.Valid">
            <summary>
            Returns true if the property is valid. Read-only.
            </summary>
            <returns>True or false.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueInt">
            <summary>
            PropertyValue typed as int.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueInt.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Nullable{System.Int32})">
            <summary>
            Constructor that uses PropertyInfo.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="iValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueInt.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Constructor that uses names.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="iValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueInt.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueInt.
            </summary>
            <returns>Int value or a null value.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueShort">
            <summary>
            PropertyValue typed as short.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueShort.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Nullable{System.Int16})">
            <summary>
            Constructor that uses PropertyInfo.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="iValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueShort.#ctor(System.String,System.String,System.Nullable{System.Int16})">
            <summary>
            Constructor that uses names.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="iValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueShort.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueShort.
            </summary>
            <returns>Short (System.Int16) value or a null value.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueString">
            <summary>
            PropertyValue typed as string.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueString.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.String)">
            <summary>
            Constructor that uses PropertyInfo.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="sValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueString.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that uses names.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="sValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueString.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueString.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueDouble">
            <summary>
            PropertyValue typed as double.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueDouble.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Nullable{System.Double})">
            <summary>
            Constructor that uses PropertyInfo.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="dValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueDouble.#ctor(System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Constructor that uses names.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="dValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueDouble.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueDouble.
            </summary>
            <returns>Double value or a null value.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueFloat">
            <summary>
            PropertyValue typed as float.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueFloat.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Nullable{System.Single})">
            <summary>
            Constructor that uses PropertyInfo.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="fValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueFloat.#ctor(System.String,System.String,System.Nullable{System.Single})">
            <summary>
            Constructor that uses names.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="fValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueFloat.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueFloat.
            </summary>
            <returns>Float (System.Single) value or a null value.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueBoolean">
            <summary>
            PropertyValue typed as boolean.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueBoolean.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Nullable{System.Boolean})">
            <summary>
            Constructor that uses PropertyInfo.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="bValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueBoolean.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Constructor that uses names.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="bValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueBoolean.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueBoolean.
            </summary>
            <returns>Boolean (System.Boolean) value or a null value.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueCodelist">
            <summary>
            PropertyValue typed as codelist value.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueCodelist.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,Ingr.SP3D.Common.Middle.Services.CodelistItem)">
            <summary>
            Constructor that uses property information and CodelistItem.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="oValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueCodelist.#ctor(System.String,System.String,Ingr.SP3D.Common.Middle.Services.CodelistItem)">
            <summary>
            Constructor that uses interface name, property name, and CodelistItem.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="oValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueCodelist.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Int32)">
            <summary>
            Constructor that uses property information and a codelist value.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="iValue">Codelist value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCodelistItemNotAMemberException">Raised if passed in iValue is not a member of codelistinfo for this property.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueCodelist.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor that uses interface name, property name, and codelist value.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="iValue">Codelist value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCodelistItemNotAMemberException">Raised if passed in iValue is not a member of codelistinfo for this property.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueCodelist.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueCodelist.
            </summary>
            <returns>Int value that represents the codelistitem.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyValueDateTime">
            <summary>
            PropertyValue typed as DateTime.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueDateTime.#ctor(Ingr.SP3D.Common.Middle.Services.PropertyInformation,System.Nullable{System.DateTime})">
            <summary>
            Constructor that uses PropertyInfo.
            </summary>
            <param name="oPropInfo">PropertyInfo reference.</param>
            <param name="oValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
            <exception cref="T:System.ArgumentNullException">Raised if property information is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyValueDateTime.#ctor(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Constructor that uses names.
            </summary>
            <param name="sInterfaceName">Name of the interface.</param>
            <param name="sPropertyName">Name of the property.</param>
            <param name="oValue">Initial value.</param>
            <exception cref="T:System.ArgumentException">Raised when the property type does not match the datatype.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyValueDateTime.PropValue">
            <summary>
            Gets or sets the PropValue on PropertyValueDateTime.
            </summary>
            <returns>Datetime or null value.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyValueException">
            <summary>
            Raised when the error is encountered while accessing the property value from COM.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyValueException.#ctor">
            <summary>
            Initializes a new instance of the CmnInvalidPropertyValueException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnInvalidPropertyValueException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="sDefString">The additional string information to be displayed.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCannotAccessSQLorMetadataException">
            <summary>
            Raised if SQL or Metadata properties cannot be accessed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotAccessSQLorMetadataException.#ctor">
            <summary>
            Initializes a new instance of the CmnCannotAccessSQLorMetadataException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCannotAccessSQLorMetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnCannotAccessSQLorMetadataException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="sDefString">The additional string information to be displayed.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException">
            <summary>
            Raised if the class information is not available for this business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnClassInfoNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the CmnClassInfoNotAvailableException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException">
            <summary>
            Raised if the queried interface information is not available for this business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInterfaceInfoNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the CmnInterfaceInfoNotAvailableException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException">
            <summary>
            Raised if the queried property information is not available for this business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPropertyInfoNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the CmnPropertyInfoNotAvailableException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPropertyViolationException">
            <summary>
            Raised if attempt to set the value on a read-only property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPropertyViolationException.#ctor">
            <summary>
            Initializes a new instance of the CmnReadOnlyPropertyViolationException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException">
            <summary>
            Raised if fail to get the attribute from COM.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetAttributeFromCOMException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToGetAttributeFromCOMException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCodelistItemNotAMemberException">
            <summary>
            Raised if the codelistitem passed in is not a member of codelistinfo for this property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCodelistItemNotAMemberException.#ctor">
            <summary>
            Initializes a new instance of the CmnCodelistItemNotAMemberException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException">
            <summary>
            Raised if fail to set the property value on the property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException.#ctor">
            <summary>
            Initializes a new instance of the CmnSetPropertyValueFailedException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSetPropertyValueFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnSetPropertyValueFailedException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyTypeException">
            <summary>
            Raised if the property type is undefined.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyTypeException.#ctor">
            <summary>
            Initializes a new instance of the CmnInvalidPropertyTypeException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnInvalidPropertyTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnInvalidPropertyTypeException class.
            </summary>
            <param name="sDefString">The additional string information to be displayed.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnProxyWriteFailException">
            <summary>
            Raised if an attempt is made to write to a proxy.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnProxyWriteFailException.#ctor">
            <summary>
            Initializes a new instance of the CmnProxyWriteFailException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Private.CommonHelper">
            <summary>
            CommonHelper is a support class that shall be used to trap generic exceptions raised from COM classes to 
            return equivalent CmnExceptions
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.CommonHelper.GetCommonException(System.Runtime.InteropServices.COMException)">
            <summary>
            Get an equivalent CmnException for the given COMException.
            </summary>
            <param name="exception">Given COMException.</param>
            <returns>Equivalent CmnException</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Object corresponding to moniker does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoDatabaseException">Database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaDatabaseException">Schema database does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoServerException">Server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSchemaServerException">Schema server does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseAccessDeniedException">Database access denied.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnOutOfDateSiteDatabaseException">Site database is out of date. Update Site and Site Schema.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.BusinessObjectEx1">
            <summary>
            BusinessObjectEx1 is a temporary .NET BusinessObject that supports ISystem, ISystemChild and 
            IWBSItemChild interfaces.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObjectEx1.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.BusinessObjectEx1 
            class with PrivateBusinessObject.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObjectEx1.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds the supplied ISystemChild object as a child of this system.
            </summary>
            <param name="oChild">Child object that is of ISystemChild type.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObjectEx1.SystemChildren">
            <summary>
            Gets the system children.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of ISystemChild objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObjectEx1.SystemParent">
            <summary>
            Gets or sets a system parent.
            </summary>
            <returns>System parent as Ingr.SP3D.Common.Middle.ISystem.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObjectEx1.WBSItemParents">
            <summary>
            Gets WBSItem parents for this item.
            </summary>
            <returns>A System.Collections.ObjectModel.ReadOnlyCollection of IWBSItem objects.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.BusinessObjectEx2">
            <summary>
            BusinessObjectEx2 is a temporary .NET BusinessObject that supports ISystemChild and IWBSItemChild 
            interfaces.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObjectEx2.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Initializes a new instance of Ingr.SP3D.Common.Middle.BusinessObjectEx2
            class with PrivateBusinessObject.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObjectEx2.SystemParent">
            <summary>
            Gets or sets a system parent.
            </summary>
            <returns>System parent as Ingr.SP3D.Common.Middle.ISystem.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObjectEx2.WBSItemParents">
            <summary>
            Gets WBSItem parents for this item.
            </summary>
            <returns>A System.Collections.ObjectModel.ReadOnlyCollection of IWBSItem objects.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.BusinessObjectEx3">
            <summary>
            BusinessObjectEx3 is a temporary .NET BusinessObject that supports IWBSItemChild interface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.BusinessObjectEx3.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Initializes a new instance of Ingr.SP3D.Common.Middle.BusinessObjectEx3
            class with PrivateBusinessObject.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.BusinessObjectEx3.WBSItemParents">
            <summary>
            WBSItem parents for this item.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.UnitType">
            <summary>
            UnitType defines a unit of measure type for interaction with the UOM service.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Undefined">
            <summary>
            Undefined unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Distance">
            <summary>
            Distance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Angle">
            <summary>
            Angle unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Mass">
            <summary>
            Mass unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Time">
            <summary>
            Time unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Temperature">
            <summary>
            Temperature unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricCurrent">
            <summary>
            ElectricCurrent unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.LuminousIntensity">
            <summary>
            LuminousIntensity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.AmountOfSubstance">
            <summary>
            AmountOfSubstance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.SolidAngle">
            <summary>
            SolidAngle unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.AngularAcceleration">
            <summary>
            AngularAcceleration unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.AngularMomentum">
            <summary>
            AngularMomentum unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.AngularVelocity">
            <summary>
            AngularVelocity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Area">
            <summary>
            Area unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.BodyForce">
            <summary>
            BodyForce unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.CoefficientOfThermalExpansion">
            <summary>
            CoefficientOfThermalExpansion unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Density">
            <summary>
            Density unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricalCapacitance">
            <summary>
            ElectricalCapacitance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricalConductance">
            <summary>
            ElectricalConductance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricalFieldStrength">
            <summary>
            ElectricalFieldStrength unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricalInductance">
            <summary>
            ElectricalInductance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricalPotential">
            <summary>
            ElectricalPotential unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricalResistance">
            <summary>
            ElectricalResistance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Energy">
            <summary>
            Energy unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Enthropy">
            <summary>
            Enthropy unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.FilmCoefficient">
            <summary>
            FilmCoefficient unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Force">
            <summary>
            Force unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ForcePerArea">
            <summary>
            ForcePerArea unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ForcePerDistance">
            <summary>
            ForcePerDistance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Frequency">
            <summary>
            Frequency unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.HeatCapacity">
            <summary>
            HeatCapacity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.HeatFluxPerArea">
            <summary>
            HeatFluxPerArea unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.HeatFluxPerDistance">
            <summary>
            HeatFluxPerDistance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.HeatSource">
            <summary>
            HeatSource unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Illuminance">
            <summary>
            Illuminance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.LinearAcceleration">
            <summary>
            LinearAcceleration unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.LinearPerAngular">
            <summary>
            LinearPerAngular unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.LinearVelocity">
            <summary>
            LinearVelocity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.LuminousFlux">
            <summary>
            LuminousFlux unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MagneticFieldStrength">
            <summary>
            MagneticFieldStrength unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MagneticFlux">
            <summary>
            MagneticFlux unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MagneticFluxDensity">
            <summary>
            MagneticFluxDensity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MassFlowRate">
            <summary>
            MassFlowRate unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MassMomentOfInertia">
            <summary>
            MassMomentOfInertia unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MassPerArea">
            <summary>
            MassPerArea unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MassPerLength">
            <summary>
            MassPerLength unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Momentum">
            <summary>
            Momentum unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.PerDistance">
            <summary>
            PerDistance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Power">
            <summary>
            Power unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ElectricCharge">
            <summary>
            ElectricCharge unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.RadiantIntensity">
            <summary>
            RadiantIntensity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.RotationalStiffness">
            <summary>
            RotationalStiffness unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.SecondMomentOfArea">
            <summary>
            SecondMomentOfArea unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ThermalConductivity">
            <summary>
            ThermalConductivity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.DynamicViscosity">
            <summary>
            DynamicViscosity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.KinematicViscosity">
            <summary>
            KinematicViscosity unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Volume">
            <summary>
            Volume unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.VolumeFlowRate">
            <summary>
            VolumeFlowRate unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Scalar">
            <summary>
            Scalar unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.ForcePerAreaPerLength">
            <summary>
            ForcePerAreaPerLength unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Moment">
            <summary>
            Momentunit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.FirstMomentOfArea">
            <summary>
            FirstMomentOfArea unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.TorsionalWarpingConstant">
            <summary>
            TorsionalWarpingConstant unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Slope">
            <summary>
            Slope unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Enum">
            <summary>
            Enumerator unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.Npd">
            <summary>
            Nominal pipe diameter unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.MomentPerDistance">
            <summary>
            MomentPerDistance unit type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitType.WireGauge">
            <summary>
            WireGauge unit type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.UnitName">
            <summary>
            UnitName defines all individual unit names.
            </summary> 
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.UseDefault">
            <summary>
            When passed as an argument to Format Unit or SetDefaultUnits, uses the default name for primary, secondary or tertiary unit.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_METER">
            <summary>
            DISTANCE_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_NANOMETER">
            <summary>
            DISTANCE_NANOMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_MILLIMETER">
            <summary>
            DISTANCE_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_CENTIMETER">
            <summary>
            DISTANCE_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_KILOMETER">
            <summary>
            DISTANCE_KILOMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_INCH">
            <summary>
            DISTANCE_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_FOOT">
            <summary>
            DISTANCE_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_YARD">
            <summary>
            DISTANCE_YARD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_MILE">
            <summary>
            DISTANCE_MILE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_TENTH">
            <summary>
            DISTANCE_TENTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_HUNDREDTH">
            <summary>
            DISTANCE_HUNDREDTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_THOUSANDTH">
            <summary>
            DISTANCE_THOUSANDTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_ROD">
            <summary>
            DISTANCE_ROD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_POLE">
            <summary>
            DISTANCE_POLE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_LINK">
            <summary>
            DISTANCE_LINK unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_CHAIN">
            <summary>
            DISTANCE_CHAIN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_POINT">
            <summary>
            DISTANCE_POINT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_FURLONG">
            <summary>
            DISTANCE_FURLONG unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_RADIAN">
            <summary>
            ANGLE_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_DEGREE">
            <summary>
            ANGLE_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_MINUTE">
            <summary>
            ANGLE_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_SECOND">
            <summary>
            ANGLE_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_GRADIAN">
            <summary>
            ANGLE_GRADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_REVOLUTION">
            <summary>
            ANGLE_REVOLUTION unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_KILOGRAM">
            <summary>
            MASS_KILOGRAM unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_GRAM">
            <summary>
            MASS_GRAM unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MILLIGRAM">
            <summary>
            MASS_MILLIGRAM unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MEGAGRAM">
            <summary>
            MASS_MEGAGRAM unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_GRAIN">
            <summary>
            MASS_GRAIN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_SLUG">
            <summary>
            MASS_SLUG unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_POUND_MASS">
            <summary>
            MASS_POUND_MASS unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_SLINCH">
            <summary>
            MASS_SLINCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_OUNCE">
            <summary>
            MASS_OUNCE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_METRIC_TON">
            <summary>
            MASS_METRIC_TON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_LONG_TON">
            <summary>
            MASS_LONG_TON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_SHORT_TON">
            <summary>
            MASS_SHORT_TON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_SECOND">
            <summary>
            TIME_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_MINUTE">
            <summary>
            TIME_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_HOUR">
            <summary>
            TIME_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_DAY">
            <summary>
            TIME_DAY unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_WEEK">
            <summary>
            TIME_WEEK unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_YEAR">
            <summary>
            TIME_YEAR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_MILLISECOND">
            <summary>
            TIME_MILLISECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_NANOSECOND">
            <summary>
            TIME_NANOSECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TEMPERATURE_KELVIN">
            <summary>
            TEMPERATURE_KELVIN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TEMPERATURE_FAHRENHEIT">
            <summary>
            TEMPERATURE_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TEMPERATURE_CELCIUS">
            <summary>
            TEMPERATURE_CELCIUS unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TEMPERATURE_RANKINE">
            <summary>
            TEMPERATURE_RANKINE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRIC_CURRENT_AMPERE">
            <summary>
            ELECTRIC_CURRENT_AMPERE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LUMINOUS_INTENSITY_CANDELA">
            <summary>
            LUMINOUS_INTENSITY_CANDELA unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AMOUNT_OF_SUBSTANCE_MOLE">
            <summary>
            AMOUNT_OF_SUBSTANCE_MOLE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SOLID_ANGLE_STERADIAN">
            <summary>
            SOLID_ANGLE_STERADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_ACCELERATION_RADIAN_PER_SQ_SECOND">
            <summary>
            ANGULAR_ACCELERATION_RADIAN_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_ACCELERATION_DEGREE_PER_SQ_SECOND">
            <summary>
            ANGULAR_ACCELERATION_DEGREE_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_ACCELERATION_CYCLE_PER_SQ_SECOND">
            <summary>
            ANGULAR_ACCELERATION_CYCLE_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_MOMENTUM_KILOGRAM_SQ_METER_PER_SECOND">
            <summary>
            ANGULAR_MOMENTUM_KILOGRAM_SQ_METER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_RADIAN_PER_SECOND">
            <summary>
            ANGULAR_VELOCITY_RADIAN_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_RADIAN_PER_MINUTE">
            <summary>
            ANGULAR_VELOCITY_RADIAN_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_RADIAN_PER_HOUR">
            <summary>
            ANGULAR_VELOCITY_RADIAN_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_CYCLE_PER_SECOND">
            <summary>
            ANGULAR_VELOCITY_CYCLE_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_CYCLE_PER_MINUTE">
            <summary>
            ANGULAR_VELOCITY_CYCLE_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_CYCLE_PER_HOUR">
            <summary>
            ANGULAR_VELOCITY_CYCLE_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_DEGREE_PER_SECOND">
            <summary>
            ANGULAR_VELOCITY_DEGREE_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_DEGREE_PER_MINUTE">
            <summary>
            ANGULAR_VELOCITY_DEGREE_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_VELOCITY_DEGREE_PER_HOUR">
            <summary>
            ANGULAR_VELOCITY_DEGREE_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_METER">
            <summary>
            AREA_SQUARE_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_MILLIMETER">
            <summary>
            AREA_SQUARE_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_CENTIMETER">
            <summary>
            AREA_SQUARE_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_KILOMETER">
            <summary>
            AREA_SQUARE_KILOMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_INCH">
            <summary>
            AREA_SQUARE_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_FOOT">
            <summary>
            AREA_SQUARE_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_YARD">
            <summary>
            AREA_SQUARE_YARD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_MILE">
            <summary>
            AREA_SQUARE_MILE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_SQUARE_ACRE">
            <summary>
            AREA_SQUARE_ACRE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_ACRE">
            <summary>
            AREA_ACRE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.BODY_FORCE_NEWTON_PER_CU_METER">
            <summary>
            BODY_FORCE_NEWTON_PER_CU_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.BODY_FORCE_NEWTON_PER_CU_CENTIMETER">
            <summary>
            BODY_FORCE_NEWTON_PER_CU_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.BODY_FORCE_NEWTON_PER_CU_MILLIMETER">
            <summary>
            BODY_FORCE_NEWTON_PER_CU_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.BODY_FORCE_KILONEWTON_PER_CU_METER">
            <summary>
            BODY_FORCE_KILONEWTON_PER_CU_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.BODY_FORCE_POUND_FORCE_PER_CU_INCH">
            <summary>
            BODY_FORCE_POUND_FORCE_PER_CU_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.BODY_FORCE_POUND_FORCE_PER_CU_FOOT">
            <summary>
            BODY_FORCE_POUND_FORCE_PER_CU_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.COEFFICIENT_OF_THERMAL_EXPANSION_PER_KELVIN">
            <summary>
            COEFFICIENT_OF_THERMAL_EXPANSION_PER_KELVIN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.COEFFICIENT_OF_THERMAL_EXPANSION_PER_CELCIUS">
            <summary>
            COEFFICIENT_OF_THERMAL_EXPANSION_PER_CELCIUS unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.COEFFICIENT_OF_THERMAL_EXPANSION_PER_FAHRENHEIT">
            <summary>
            COEFFICIENT_OF_THERMAL_EXPANSION_PER_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.COEFFICIENT_OF_THERMAL_EXPANSION_PER_RANKINE">
            <summary>
            COEFFICIENT_OF_THERMAL_EXPANSION_PER_RANKINE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DENSITY_KILOGRAM_PER_CU_METER">
            <summary>
            DENSITY_KILOGRAM_PER_CU_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DENSITY_KILOGRAM_PER_CU_MILLIMETER">
            <summary>
            DENSITY_KILOGRAM_PER_CU_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DENSITY_KILOGRAM_PER_CU_CENTIMETER">
            <summary>
            DENSITY_KILOGRAM_PER_CU_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DENSITY_POUND_MASS_PER_CU_FOOT">
            <summary>
            DENSITY_POUND_MASS_PER_CU_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DENSITY_POUND_MASS_PER_CU_INCH">
            <summary>
            DENSITY_POUND_MASS_PER_CU_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DENSITY_SLUG_PER_CU_FOOT">
            <summary>
            DENSITY_SLUG_PER_CU_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DENSITY_SLINCH_PER_CU_INCH">
            <summary>
            DENSITY_SLINCH_PER_CU_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRICAL_CAPACITANCE_FARAD">
            <summary>
            ELECTRICAL_CAPACITANCE_FARAD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRICAL_CONDUCTANCE_SIEMENS">
            <summary>
            ELECTRICAL_CONDUCTANCE_SIEMENS unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRICAL_FIELD_STRENGTH_VOLT_PER_METER">
            <summary>
            ELECTRICAL_FIELD_STRENGTH_VOLT_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRICAL_POTENTIAL_VOLT">
            <summary>
            ELECTRICAL_POTENTIAL_VOLT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRICAL_RESISTANCE_OHM">
            <summary>
            ELECTRICAL_RESISTANCE_OHM unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_JOULE">
            <summary>
            ENERGY_JOULE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_MICRO_JOULE">
            <summary>
            ENERGY_MICRO_JOULE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_KILOJOULE">
            <summary>
            ENERGY_KILOJOULE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_WATT_SECOND">
            <summary>
            ENERGY_WATT_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_WATT_HOUR">
            <summary>
            ENERGY_WATT_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_KILOWATT_HOUR">
            <summary>
            ENERGY_KILOWATT_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_INCH_POUND_FORCE">
            <summary>
            ENERGY_INCH_POUND_FORCE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_FOOT_POUND_FORCE">
            <summary>
            ENERGY_FOOT_POUND_FORCE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_BTU">
            <summary>
            ENERGY_BTU unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_ERG">
            <summary>
            ENERGY_ERG unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENERGY_ELECTRON_VOLT">
            <summary>
            ENERGY_ELECTRON_VOLT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENTHROPY_JOULE_PER_KELVIN">
            <summary>
            ENTHROPY_JOULE_PER_KELVIN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FILM_COEFFICIENT_WATT_PER_SQ_METER_KELVIN">
            <summary>
            FILM_COEFFICIENT_WATT_PER_SQ_METER_KELVIN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FILM_COEFFICIENT_BTU_PER_HOUR_SQ_FOOT_FAHRENHEIT">
            <summary>
            FILM_COEFFICIENT_BTU_PER_HOUR_SQ_FOOT_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FILM_COEFFICIENT_FOOT_POUND_PER_SQ_FOOT_FAHRENHEIT">
            <summary>
            FILM_COEFFICIENT_FOOT_POUND_PER_SQ_FOOT_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FILM_COEFFICIENT_INCH_POUND_PER_SQ_INCH_FAHRENHEIT">
            <summary>
            FILM_COEFFICIENT_INCH_POUND_PER_SQ_INCH_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_NEWTON">
            <summary>
            FORCE_NEWTON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_NANONEWTON">
            <summary>
            FORCE_NANONEWTON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_MILLINEWTON">
            <summary>
            FORCE_MILLINEWTON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_KILONEWTON">
            <summary>
            FORCE_KILONEWTON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_POUND_FORCE">
            <summary>
            FORCE_POUND_FORCE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_DYNE">
            <summary>
            FORCE_DYNE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_KIP">
            <summary>
            FORCE_KIP unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_PASCAL">
            <summary>
            FORCE_PER_AREA_PASCAL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIPASCAL">
            <summary>
            FORCE_PER_AREA_MILLIPASCAL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KILOPASCAL">
            <summary>
            FORCE_PER_AREA_KILOPASCAL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MEGAPASCAL">
            <summary>
            FORCE_PER_AREA_MEGAPASCAL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_POUND_FORCE_PER_SQ_INCH">
            <summary>
            FORCE_PER_AREA_POUND_FORCE_PER_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KIP_PER_SQ_INCH">
            <summary>
            FORCE_PER_AREA_KIP_PER_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_POUND_FORCE_PER_SQ_FOOT">
            <summary>
            FORCE_PER_AREA_POUND_FORCE_PER_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KIP_PER_SQ_FOOT">
            <summary>
            FORCE_PER_AREA_KIP_PER_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_BAR">
            <summary>
            FORCE_PER_AREA_BAR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIBAR">
            <summary>
            FORCE_PER_AREA_MILLIBAR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_ATMOSPHERE">
            <summary>
            FORCE_PER_AREA_ATMOSPHERE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_NEWTON_PER_METER">
            <summary>
            FORCE_PER_DISTANCE_NEWTON_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_NEWTON_PER_MILLIMETER">
            <summary>
            FORCE_PER_DISTANCE_NEWTON_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_NEWTON_PER_CENTIMETER">
            <summary>
            FORCE_PER_DISTANCE_NEWTON_PER_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_KILONEWTON_PER_METER">
            <summary>
            FORCE_PER_DISTANCE_KILONEWTON_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_POUND_FORCE_PER_INCH">
            <summary>
            FORCE_PER_DISTANCE_POUND_FORCE_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_POUND_FORCE_PER_FOOT">
            <summary>
            FORCE_PER_DISTANCE_POUND_FORCE_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_KIP_PER_INCH">
            <summary>
            FORCE_PER_DISTANCE_KIP_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_KIP_PER_FOOT">
            <summary>
            FORCE_PER_DISTANCE_KIP_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_DYNE_PER_METER">
            <summary>
            FORCE_PER_DISTANCE_DYNE_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_DISTANCE_DYNE_PER_MILLIMETER">
            <summary>
            FORCE_PER_DISTANCE_DYNE_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FREQUENCY_PER_SECOND">
            <summary>
            FREQUENCY_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FREQUENCY_PER_MINUTE">
            <summary>
            FREQUENCY_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FREQUENCY_PER_HOUR">
            <summary>
            FREQUENCY_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_CAPACITY_JOULE_PER_KILOGRAM_KELVIN">
            <summary>
            HEAT_CAPACITY_JOULE_PER_KILOGRAM_KELVIN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_CAPACITY_BTU_PER_POUND_MASS_FAHRENHEIT">
            <summary>
            HEAT_CAPACITY_BTU_PER_POUND_MASS_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_AREA_WATT_PER_SQ_METER">
            <summary>
            HEAT_FLUX_PER_AREA_WATT_PER_SQ_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_AREA_KILOWATT_PER_SQ_METER">
            <summary>
            HEAT_FLUX_PER_AREA_KILOWATT_PER_SQ_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_AREA_INCH_POUND_FORCE_PER_SECOND_SQ_INCH">
            <summary>
            HEAT_FLUX_PER_AREA_INCH_POUND_FORCE_PER_SECOND_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_AREA_FOOT_POUND_FORCE_PER_SECOND_SQ_FOOT">
            <summary>
            HEAT_FLUX_PER_AREA_FOOT_POUND_FORCE_PER_SECOND_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_AREA_BTU_PER_HOUR_SQ_FOOT">
            <summary>
            HEAT_FLUX_PER_AREA_BTU_PER_HOUR_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_AREA_HORSEPOWER_P_PER_SQ_FOOT">
            <summary>
            HEAT_FLUX_PER_AREA_HORSEPOWER_P_PER_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_DISTANCE_WATT_PER_METER">
            <summary>
            HEAT_FLUX_PER_DISTANCE_WATT_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_DISTANCE_KILOWATT_PER_METER">
            <summary>
            HEAT_FLUX_PER_DISTANCE_KILOWATT_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_DISTANCE_MICROWATT_PER_METER">
            <summary>
            HEAT_FLUX_PER_DISTANCE_MICROWATT_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_DISTANCE_MICROWATT_PER_MILLIMETER">
            <summary>
            HEAT_FLUX_PER_DISTANCE_MICROWATT_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_DISTANCE_INCH_POUND_FORCE_PER_SECOND_INCH">
            <summary>
            HEAT_FLUX_PER_DISTANCE_INCH_POUND_FORCE_PER_SECOND_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_DISTANCE_BTU_PER_HOUR_FOOT">
            <summary>
            HEAT_FLUX_PER_DISTANCE_BTU_PER_HOUR_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_FLUX_PER_DISTANCE_HORSEPOWER_PER_FOOT">
            <summary>
            HEAT_FLUX_PER_DISTANCE_HORSEPOWER_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_SOURCE_WATT_PER_CU_METER">
            <summary>
            HEAT_SOURCE_WATT_PER_CU_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_SOURCE_KILOWATT_PER_CU_METER">
            <summary>
            HEAT_SOURCE_KILOWATT_PER_CU_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_SOURCE_INCH_POUND_FORCE_PER_SECOND_CU_INCH">
            <summary>
            HEAT_SOURCE_INCH_POUND_FORCE_PER_SECOND_CU_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_SOURCE_FOOT_POUND_FORCE_PER_SECOND_CU_FOOT">
            <summary>
            HEAT_SOURCE_FOOT_POUND_FORCE_PER_SECOND_CU_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_SOURCE_BTU_PER_HOUR_CU_FOOT">
            <summary>
            HEAT_SOURCE_BTU_PER_HOUR_CU_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.HEAT_SOURCE_HORSEPOWER_PER_CU_FOOT">
            <summary>
            HEAT_SOURCE_HORSEPOWER_PER_CU_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ILLUMINANCE_LUX">
            <summary>
            ILLUMINANCE_LUX unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_METER_PER_SQ_SECOND">
            <summary>
            LINEAR_ACCELERATION_METER_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_KILOMETER_PER_SQ_SECOND">
            <summary>
            LINEAR_ACCELERATION_KILOMETER_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_MILLIMETER_PER_SQ_SECOND">
            <summary>
            LINEAR_ACCELERATION_MILLIMETER_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_CENTIMETER_PER_SQ_SECOND">
            <summary>
            LINEAR_ACCELERATION_CENTIMETER_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_INCH_PER_SQ_SECOND">
            <summary>
            LINEAR_ACCELERATION_INCH_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_FOOT_PER_SQ_SECOND">
            <summary>
            LINEAR_ACCELERATION_FOOT_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_MILE_PER_SQ_SECOND">
            <summary>
            LINEAR_ACCELERATION_MILE_PER_SQ_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_MILE_PER_SQ_HOUR">
            <summary>
            LINEAR_ACCELERATION_MILE_PER_SQ_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_ACCELERATION_KILOMETER_PER_SQ_HOUR">
            <summary>
            LINEAR_ACCELERATION_KILOMETER_PER_SQ_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_METER_PER_RADIAN">
            <summary>
            LINEAR_PER_ANGULAR_METER_PER_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_METER_PER_REVOLUTION">
            <summary>
            LINEAR_PER_ANGULAR_METER_PER_REVOLUTION unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_MILLIMETER_PER_REVOLUTION">
            <summary>
            LINEAR_PER_ANGULAR_MILLIMETER_PER_REVOLUTION unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_INCH_PER_REVOLUTION">
            <summary>
            LINEAR_PER_ANGULAR_INCH_PER_REVOLUTION unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_FOOT_PER_REVOLUTION">
            <summary>
            LINEAR_PER_ANGULAR_FOOT_PER_REVOLUTION unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_METER_PER_SECOND">
            <summary>
            LINEAR_VELOCITY_METER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_MILLIMETER_PER_SECOND">
            <summary>
            LINEAR_VELOCITY_MILLIMETER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_CENTIMETER_PER_SECOND">
            <summary>
            LINEAR_VELOCITY_CENTIMETER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_KILOMETER_PER_SECOND">
            <summary>
            LINEAR_VELOCITY_KILOMETER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_KILOMETER_PER_HOUR">
            <summary>
            LINEAR_VELOCITY_KILOMETER_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_INCH_PER_SECOND">
            <summary>
            LINEAR_VELOCITY_INCH_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_FOOT_PER_SECOND">
            <summary>
            LINEAR_VELOCITY_FOOT_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_MILE_PER_SECOND">
            <summary>
            LINEAR_VELOCITY_MILE_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_MILE_PER_HOUR">
            <summary>
            LINEAR_VELOCITY_MILE_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LUMINOUS_FLUX_LUMEN">
            <summary>
            LUMINOUS_FLUX_LUMEN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MAGNETIC_FIELD_STRENGTH_AMPERE_PER_METER">
            <summary>
            MAGNETIC_FIELD_STRENGTH_AMPERE_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MAGNETIC_FLUX_WEBER">
            <summary>
            MAGNETIC_FLUX_WEBER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MAGNETIC_FLUX_DENSITY_TESLA">
            <summary>
            MAGNETIC_FLUX_DENSITY_TESLA unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_FLOW_RATE_KILOGRAM_PER_SECOND">
            <summary>
            MASS_FLOW_RATE_KILOGRAM_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_FLOW_RATE_GRAM_PER_SECOND">
            <summary>
            MASS_FLOW_RATE_GRAM_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_FLOW_RATE_MEGAGRAM_PER_SECOND">
            <summary>
            MASS_FLOW_RATE_MEGAGRAM_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_FLOW_RATE_POUND_MASS_PER_SECOND">
            <summary>
            MASS_FLOW_RATE_POUND_MASS_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_FLOW_RATE_SLUG_PER_SECOND">
            <summary>
            MASS_FLOW_RATE_SLUG_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_FLOW_RATE_SLINCH_PER_SECOND">
            <summary>
            MASS_FLOW_RATE_SLINCH_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_KILOGRAM_SQ_METER">
            <summary>
            MASS_MOMENT_OF_INERTIA_KILOGRAM_SQ_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_KILOGRAM_SQ_MILLIMETER">
            <summary>
            MASS_MOMENT_OF_INERTIA_KILOGRAM_SQ_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_GRAM_SQ_MILLIMETER">
            <summary>
            MASS_MOMENT_OF_INERTIA_GRAM_SQ_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_GRAM_SQ_CENTIMETER">
            <summary>
            MASS_MOMENT_OF_INERTIA_GRAM_SQ_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_SLUG_SQ_FOOT">
            <summary>
            MASS_MOMENT_OF_INERTIA_SLUG_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_SLUG_SQ_INCH">
            <summary>
            MASS_MOMENT_OF_INERTIA_SLUG_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_SLINCH_SQ_INCH">
            <summary>
            MASS_MOMENT_OF_INERTIA_SLINCH_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_POUND_MASS_SQ_INCH">
            <summary>
            MASS_MOMENT_OF_INERTIA_POUND_MASS_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_MOMENT_OF_INERTIA_POUND_MASS_SQ_FOOT">
            <summary>
            MASS_MOMENT_OF_INERTIA_POUND_MASS_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_KILOGRAM_PER_SQ_METER">
            <summary>
            MASS_PER_AREA_KILOGRAM_PER_SQ_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_KILOGRAM_PER_SQ_MILLIMETER">
            <summary>
            MASS_PER_AREA_KILOGRAM_PER_SQ_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_GRAM_PER_SQ_MILLIMETER">
            <summary>
            MASS_PER_AREA_GRAM_PER_SQ_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_GRAM_PER_SQ_CENTIMETER">
            <summary>
            MASS_PER_AREA_GRAM_PER_SQ_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_SLUG_PER_SQ_INCH">
            <summary>
            MASS_PER_AREA_SLUG_PER_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_SLUG_PER_SQ_FOOT">
            <summary>
            MASS_PER_AREA_SLUG_PER_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_SLINCH_PER_SQ_INCH">
            <summary>
            MASS_PER_AREA_SLINCH_PER_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_POUND_MASS_PER_SQ_INCH">
            <summary>
            MASS_PER_AREA_POUND_MASS_PER_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_AREA_POUND_MASS_PER_SQ_FOOT">
            <summary>
            MASS_PER_AREA_POUND_MASS_PER_SQ_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_KILOGRAM_PER_METER">
            <summary>
            MASS_PER_LENGTH_KILOGRAM_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_KILOGRAM_PER_MILLIMETER">
            <summary>
            MASS_PER_LENGTH_KILOGRAM_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_GRAM_PER_MILLIMETER">
            <summary>
            MASS_PER_LENGTH_GRAM_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_GRAM_PER_CENTIMETER">
            <summary>
            MASS_PER_LENGTH_GRAM_PER_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_SLUG_PER_INCH">
            <summary>
            MASS_PER_LENGTH_SLUG_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_SLUG_PER_FOOT">
            <summary>
            MASS_PER_LENGTH_SLUG_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_SLINCH_PER_INCH">
            <summary>
            MASS_PER_LENGTH_SLINCH_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_POUND_MASS_PER_INCH">
            <summary>
            MASS_PER_LENGTH_POUND_MASS_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MASS_PER_LENGTH_POUND_MASS_PER_FOOT">
            <summary>
            MASS_PER_LENGTH_POUND_MASS_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENTUM_KILOGRAM_METER_PER_SECOND">
            <summary>
            MOMENTUM_KILOGRAM_METER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_METER">
            <summary>
            PER_DISTANCE_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_NANOMETER">
            <summary>
            PER_DISTANCE_PER_NANOMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_MILLIMETER">
            <summary>
            PER_DISTANCE_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_CENTIMETER">
            <summary>
            PER_DISTANCE_PER_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_KILOMETER">
            <summary>
            PER_DISTANCE_PER_KILOMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_INCH">
            <summary>
            PER_DISTANCE_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_FOOT">
            <summary>
            PER_DISTANCE_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_YARD">
            <summary>
            PER_DISTANCE_PER_YARD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_MILE">
            <summary>
            PER_DISTANCE_PER_MILE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_TENTH">
            <summary>
            PER_DISTANCE_PER_TENTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_HUNDREDTH">
            <summary>
            PER_DISTANCE_PER_HUNDREDTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.PER_DISTANCE_PER_MIL">
            <summary>
            PER_DISTANCE_PER_MIL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.POWER_WATT">
            <summary>
            POWER_WATT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.POWER_KILOWATT">
            <summary>
            POWER_KILOWATT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.POWER_MICROWATT">
            <summary>
            POWER_MICROWATT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.POWER_INCH_POUND_FORCE_PER_SECOND">
            <summary>
            POWER_INCH_POUND_FORCE_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.POWER_FOOT_POUND_FORCE_PER_SECOND">
            <summary>
            POWER_FOOT_POUND_FORCE_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.POWER_BTU_PER_HOUR">
            <summary>
            POWER_BTU_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.POWER_HORSEPOWER">
            <summary>
            POWER_HORSEPOWER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRIC_CHARGE_COULOMB">
            <summary>
            ELECTRIC_CHARGE_COULOMB unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.RADIANT_INTENSITY_WATT_PER_STERADIAN">
            <summary>
            RADIANT_INTENSITY_WATT_PER_STERADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_NEWTON_METER_PER_RADIAN">
            <summary>
            ROTATIONAL_STIFFNESS_NEWTON_METER_PER_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_NEWTON_METER_PER_DEGREE">
            <summary>
            ROTATIONAL_STIFFNESS_NEWTON_METER_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_NEWTON_MILLIMETER_PER_RADIAN">
            <summary>
            ROTATIONAL_STIFFNESS_NEWTON_MILLIMETER_PER_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_NEWTON_MILLIMETER_PER_DEGREE">
            <summary>
            ROTATIONAL_STIFFNESS_NEWTON_MILLIMETER_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_KILONEWTON_METER_PER_RADIAN">
            <summary>
            ROTATIONAL_STIFFNESS_KILONEWTON_METER_PER_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_KILONEWTON_METER_PER_DEGREE">
            <summary>
            ROTATIONAL_STIFFNESS_KILONEWTON_METER_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_POUND_FORCE_INCH_PER_RADIAN">
            <summary>
            ROTATIONAL_STIFFNESS_POUND_FORCE_INCH_PER_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_POUND_FORCE_INCH_PER_DEGREE">
            <summary>
            ROTATIONAL_STIFFNESS_POUND_FORCE_INCH_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_POUND_FORCE_FOOT_PER_RADIAN">
            <summary>
            ROTATIONAL_STIFFNESS_POUND_FORCE_FOOT_PER_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ROTATIONAL_STIFFNESS_POUND_FORCE_FOOT_PER_DEGREE">
            <summary>
            ROTATIONAL_STIFFNESS_POUND_FORCE_FOOT_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SECOND_MOMENT_OF_AREA_METER_TO_FOURTH">
            <summary>
            SECOND_MOMENT_OF_AREA_METER_TO_FOURTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SECOND_MOMENT_OF_AREA_MILLIMETER_TO_FOURTH">
            <summary>
            SECOND_MOMENT_OF_AREA_MILLIMETER_TO_FOURTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SECOND_MOMENT_OF_AREA_CENTIMETER_TO_FOURTH">
            <summary>
            SECOND_MOMENT_OF_AREA_CENTIMETER_TO_FOURTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SECOND_MOMENT_OF_AREA_INCH_TO_FOURTH">
            <summary>
            SECOND_MOMENT_OF_AREA_INCH_TO_FOURTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SECOND_MOMENT_OF_AREA_FOOT_TO_FOURTH">
            <summary>
            SECOND_MOMENT_OF_AREA_FOOT_TO_FOURTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.THERMAL_CONDUCTIVITY_WATT_PER_METER_CELCIUS">
            <summary>
            THERMAL_CONDUCTIVITY_WATT_PER_METER_CELCIUS unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.THERMAL_CONDUCTIVITY_KILOWATT_PER_METER_CELCIUS">
            <summary>
            THERMAL_CONDUCTIVITY_KILOWATT_PER_METER_CELCIUS unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.THERMAL_CONDUCTIVITY_BTU_PER_HOUR_FAHRENHEIT">
            <summary>
            THERMAL_CONDUCTIVITY_BTU_PER_HOUR_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.THERMAL_CONDUCTIVITY_INCH_POUND_FORCE_PER_SECOND_INCH_FAHRENHEIT">
            <summary>
            THERMAL_CONDUCTIVITY_INCH_POUND_FORCE_PER_SECOND_INCH_FAHRENHEIT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DYNAMIC_VISCOSITY_PASCAL_SECOND">
            <summary>
            DYNAMIC_VISCOSITY_PASCAL_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DYNAMIC_VISCOSITY_KILOPASCAL_SECOND">
            <summary>
            DYNAMIC_VISCOSITY_KILOPASCAL_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DYNAMIC_VISCOSITY_MEGAPASCAL_SECOND">
            <summary>
            DYNAMIC_VISCOSITY_MEGAPASCAL_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DYNAMIC_VISCOSITY_POUND_FORCE_SECOND_PER_SQ_INCH">
            <summary>
            DYNAMIC_VISCOSITY_POUND_FORCE_SECOND_PER_SQ_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.KINEMATIC_VISCOSITY_SQ_METER_PER_SECOND">
            <summary>
            KINEMATIC_VISCOSITY_SQ_METER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.KINEMATIC_VISCOSITY_SQ_MILLIMETER_PER_SECOND">
            <summary>
            KINEMATIC_VISCOSITY_SQ_MILLIMETER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.KINEMATIC_VISCOSITY_SQ_CENTIMETER_PER_SECOND">
            <summary>
            KINEMATIC_VISCOSITY_SQ_CENTIMETER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.KINEMATIC_VISCOSITY_SQ_INCH_PER_SECOND">
            <summary>
            KINEMATIC_VISCOSITY_SQ_INCH_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.KINEMATIC_VISCOSITY_SQ_FOOT_PER_SECOND">
            <summary>
            KINEMATIC_VISCOSITY_SQ_FOOT_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_CU_METER">
            <summary>
            VOLUME_CU_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_CU_MILLIMETER">
            <summary>
            VOLUME_CU_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_LITER">
            <summary>
            VOLUME_LITER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_MILLILITER">
            <summary>
            VOLUME_MILLILITER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_CU_INCH">
            <summary>
            VOLUME_CU_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_CU_FOOT">
            <summary>
            VOLUME_CU_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_CU_YARD">
            <summary>
            VOLUME_CU_YARD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_GALLON">
            <summary>
            VOLUME_GALLON unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_QUART">
            <summary>
            VOLUME_QUART unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_PINT">
            <summary>
            VOLUME_PINT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLUID_OUNCE">
            <summary>
            VOLUME_FLUID_OUNCE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.UNIT_NOT_SET">
            <summary>
            UNIT_NOT_SET unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SCALAR_NULL">
            <summary>
            SCALAR_NULL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_METER_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_CU_METER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_MILLIMETER_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_CU_MILLIMETER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_LITER_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_LITER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_MILLILITER_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_MILLILITER_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_INCH_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_CU_INCH_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_FOOT_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_CU_FOOT_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_YARD_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_CU_YARD_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_GALLON_PER_SECOND">
            <summary>
            VOLUME_FLOW_RATE_GALLON_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_GALLON_PER_MINUTE">
            <summary>
            VOLUME_FLOW_RATE_GALLON_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRICAL_INDUCTANCE_HENRY">
            <summary>
            ELECTRICAL_INDUCTANCE_HENRY unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_DEGREE_SYMBOL">
            <summary>
            ANGLE_DEGREE_SYMBOL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_MINUTE_SYMBOL">
            <summary>
            ANGLE_MINUTE_SYMBOL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGLE_SECOND_SYMBOL">
            <summary>
            ANGLE_SECOND_SYMBOL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_FOOT_SYMBOL">
            <summary>
            DISTANCE_FOOT_SYMBOL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DISTANCE_INCH_SYMBOL">
            <summary>
            DISTANCE_INCH_SYMBOL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.AREA_HECTARE">
            <summary>
            AREA_HECTARE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_NEWTON_PER_SQ_MILLIMETER">
            <summary>
            FORCE_PER_AREA_NEWTON_PER_SQ_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DYNAMIC_VISCOSITY_POISE">
            <summary>
            DYNAMIC_VISCOSITY_POISE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.DYNAMIC_VISCOSITY_CENTIPOISE">
            <summary>
            DYNAMIC_VISCOSITY_CENTIPOISE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_CU_CENTIMETER">
            <summary>
            VOLUME_CU_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ANGULAR_MOMENTUM_POUND_MASS_SQ_FOOT_PER_SECOND">
            <summary>
            ANGULAR_MOMENTUM_POUND_MASS_SQ_FOOT_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ELECTRICAL_FIELD_STRENGTH_VOLT_PER_FOOT">
            <summary>
            ELECTRICAL_FIELD_STRENGTH_VOLT_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENTUM_POUND_MASS_FOOT_PER_SECOND">
            <summary>
            MOMENTUM_POUND_MASS_FOOT_PER_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MAGNETIC_FIELD_STRENGTH_AMPERE_PER_FOOT">
            <summary>
            MAGNETIC_FIELD_STRENGTH_AMPERE_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_METER_PER_MINUTE">
            <summary>
            VOLUME_FLOW_RATE_CU_METER_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_METER_PER_HOUR">
            <summary>
            VOLUME_FLOW_RATE_CU_METER_PER_HOUR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_PASCAL_PER_METER">
            <summary>
            FORCE_PER_AREA_PASCAL_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIPASCAL_PER_METER">
            <summary>
            FORCE_PER_AREA_MILLIPASCAL_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KILOPASCAL_PER_METER">
            <summary>
            FORCE_PER_AREA_KILOPASCAL_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MEGAPASCAL_PER_METER">
            <summary>
            FORCE_PER_AREA_MEGAPASCAL_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_POUND_FORCE_PER_SQ_INCH_PER_INCH">
            <summary>
            FORCE_PER_AREA_POUND_FORCE_PER_SQ_INCH_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KIP_PER_SQ_INCH_PER_INCH">
            <summary>
            FORCE_PER_AREA_KIP_PER_SQ_INCH_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_POUND_FORCE_PER_SQ_FOOT_PER_FOOT">
            <summary>
            FORCE_PER_AREA_POUND_FORCE_PER_SQ_FOOT_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KIP_PER_SQ_FOOT_PER_FOOT">
            <summary>
            FORCE_PER_AREA_KIP_PER_SQ_FOOT_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_BAR_PER_METER">
            <summary>
            FORCE_PER_AREA_BAR_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIBAR_PER_METER">
            <summary>
            FORCE_PER_AREA_MILLIBAR_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_ATMOSPHERE_PER_METER">
            <summary>
            FORCE_PER_AREA_ATMOSPHERE_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_NEWTON_PER_CU_MILLIMETER">
            <summary>
            FORCE_PER_AREA_NEWTON_PER_CU_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIMETERS_OF_WATER_PER_METER">
            <summary>
            FORCE_PER_AREA_MILLIMETERS_OF_WATER_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_INCHES_OF_WATER_PER_FOOT">
            <summary>
            FORCE_PER_AREA_INCHES_OF_WATER_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIMETERS_OF_WATER">
            <summary>
            FORCE_PER_AREA_MILLIMETERS_OF_WATER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_INCHES_OF_WATER">
            <summary>
            FORCE_PER_AREA_INCHES_OF_WATER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_NEWTON_METER">
            <summary>
            MOMENT_NEWTON_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_DECA_NEWTON_METER">
            <summary>
            MOMENT_DECA_NEWTON_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_HECTO_NEWTON_METER">
            <summary>
            MOMENT_HECTO_NEWTON_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_KILO_NEWTON_METER">
            <summary>
            MOMENT_KILO_NEWTON_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_MEGA_NEWTON_METER">
            <summary>
            MOMENT_MEGA_NEWTON_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_TERA_NEWTON_METER">
            <summary>
            MOMENT_TERA_NEWTON_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_KILOGRAM_FORCE_METER">
            <summary>
            MOMENT_KILOGRAM_FORCE_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_TONNE_FORCE_METER">
            <summary>
            MOMENT_TONNE_FORCE_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_POUND_FOOT">
            <summary>
            MOMENT_POUND_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_POUND_INCH">
            <summary>
            MOMENT_POUND_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_TON_UK_FOOT">
            <summary>
            MOMENT_TON_UK_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_TON_US_FOOT">
            <summary>
            MOMENT_TON_US_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FIRST_MOMENT_OF_AREA_METER_TO_THIRD">
            <summary>
            FIRST_MOMENT_OF_AREA_METER_TO_THIRD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FIRST_MOMENT_OF_AREA_MILLIMETER_TO_THIRD">
            <summary>
            FIRST_MOMENT_OF_AREA_MILLIMETER_TO_THIRD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FIRST_MOMENT_OF_AREA_CENTIMETER_TO_THIRD">
            <summary>
            FIRST_MOMENT_OF_AREA_CENTIMETER_TO_THIRD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FIRST_MOMENT_OF_AREA_INCH_TO_THIRD">
            <summary>
            FIRST_MOMENT_OF_AREA_INCH_TO_THIRD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FIRST_MOMENT_OF_AREA_FOOT_TO_THIRD">
            <summary>
            FIRST_MOMENT_OF_AREA_FOOT_TO_THIRD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TORSIONAL_WARPING_CONSTANT_METER_TO_SIXTH">
            <summary>
            TORSIONAL_WARPING_CONSTANT_METER_TO_SIXTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TORSIONAL_WARPING_CONSTANT_MILLIMETER_TO_SIXTH">
            <summary>
            TORSIONAL_WARPING_CONSTANT_MILLIMETER_TO_SIXTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TORSIONAL_WARPING_CONSTANT_CENTIMETER_TO_SIXTH">
            <summary>
            TORSIONAL_WARPING_CONSTANT_CENTIMETER_TO_SIXTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TORSIONAL_WARPING_CONSTANT_INCH_TO_SIXTH">
            <summary>
            TORSIONAL_WARPING_CONSTANT_INCH_TO_SIXTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TORSIONAL_WARPING_CONSTANT_FOOT_TO_SIXTH">
            <summary>
            TORSIONAL_WARPING_CONSTANT_FOOT_TO_SIXTH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_LITER_PER_MINUTE">
            <summary>
            VOLUME_FLOW_RATE_LITER_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.VOLUME_FLOW_RATE_CU_FOOT_PER_MINUTE">
            <summary>
            VOLUME_FLOW_RATE_CU_FOOT_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_VELOCITY_FOOT_PER_MINUTE">
            <summary>
            LINEAR_VELOCITY_FOOT_PER_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.TIME_FORTNIGHT">
            <summary>
            TIME_FORTNIGHT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_ANGLE_RADIAN">
            <summary>
            SLOPE_ANGLE_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_ANGLE_DEGREE">
            <summary>
            SLOPE_ANGLE_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_ANGLE_MINUTE">
            <summary>
            SLOPE_ANGLE_MINUTE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_ANGLE_SECOND">
            <summary>
            SLOPE_ANGLE_SECOND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_PERCENT">
            <summary>
            SLOPE_PERCENT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_PER_THOUSAND">
            <summary>
            SLOPE_PER_THOUSAND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_SEPARATOR">
            <summary>
            SLOPE_RATIO_SEPARATOR unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_METER_IN_METER">
            <summary>
            SLOPE_RATIO_METER_IN_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_CENTIMETER_IN_METER">
            <summary>
            SLOPE_RATIO_CENTIMETER_IN_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_CENTIMETER_IN_CENTIMETER">
            <summary>
            SLOPE_RATIO_CENTIMETER_IN_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_MILLIMETER_IN_METER">
            <summary>
            SLOPE_RATIO_MILLIMETER_IN_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_MILLIMETER_IN_CENTIMETER">
            <summary>
            SLOPE_RATIO_MILLIMETER_IN_CENTIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_MILLIMETER_IN_MILLIMETER">
            <summary>
            SLOPE_RATIO_MILLIMETER_IN_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_YARD_IN_YARD">
            <summary>
            SLOPE_RATIO_YARD_IN_YARD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_FOOT_IN_YARD">
            <summary>
            SLOPE_RATIO_FOOT_IN_YARD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_FOOT_IN_FOOT">
            <summary>
            SLOPE_RATIO_FOOT_IN_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_INCH_IN_YARD">
            <summary>
            SLOPE_RATIO_INCH_IN_YARD unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_INCH_IN_FOOT">
            <summary>
            SLOPE_RATIO_INCH_IN_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.SLOPE_RATIO_INCH_IN_INCH">
            <summary>
            SLOPE_RATIO_INCH_IN_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_EACH">
            <summary>
            ENUM_EACH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_PER_TEN">
            <summary>
            ENUM_PER_TEN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_PER_HUNDRED">
            <summary>
            ENUM_PER_HUNDRED unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_PERCENT">
            <summary>
            ENUM_PERCENT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_PER_THOUSAND">
            <summary>
            ENUM_PER_THOUSAND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_TEN">
            <summary>
            ENUM_TEN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_HUNDRED">
            <summary>
            ENUM_HUNDRED unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_THOUSAND">
            <summary>
            ENUM_THOUSAND unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_DOZEN">
            <summary>
            ENUM_DOZEN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.ENUM_PER_DOZEN">
            <summary>
            ENUM_PER_DOZEN
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_MILLIMETER_PER_RADIAN">
            <summary>
            LINEAR_PER_ANGULAR_MILLIMETER_PER_RADIAN unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_METER_PER_DEGREE">
            <summary>
            LINEAR_PER_ANGULAR_METER_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_MILLIMETER_PER_DEGREE">
            <summary>
            LINEAR_PER_ANGULAR_MILLIMETER_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.LINEAR_PER_ANGULAR_INCH_PER_DEGREE">
            <summary>
            LINEAR_PER_ANGULAR_INCH_PER_DEGREE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_PASCAL_GAUGE">
            <summary>
            FORCE_PER_AREA_PASCAL_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIPASCAL_GAUGE">
            <summary>
            FORCE_PER_AREA_MILLIPASCAL_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KILOPASCAL_GAUGE">
            <summary>
            FORCE_PER_AREA_KILOPASCAL_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MEGAPASCAL_GAUGE">
            <summary>
            FORCE_PER_AREA_MEGAPASCAL_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_POUND_FORCE_PER_SQ_INCH_GAUGE">
            <summary>
            FORCE_PER_AREA_POUND_FORCE_PER_SQ_INCH_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KIP_PER_SQ_INCH_GAUGE">
            <summary>
            FORCE_PER_AREA_KIP_PER_SQ_INCH_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_POUND_FORCE_PER_SQ_FOOT_GAUGE">
            <summary>
            FORCE_PER_AREA_POUND_FORCE_PER_SQ_FOOT_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_KIP_PER_SQ_FOOT_GAUGE">
            <summary>
            FORCE_PER_AREA_KIP_PER_SQ_FOOT_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_BAR_GAUGE">
            <summary>
            FORCE_PER_AREA_BAR_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIBAR_GAUGE">
            <summary>
            FORCE_PER_AREA_MILLIBAR_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_NEWTON_PER_SQ_MILLIMETER_GAUGE">
            <summary>
            FORCE_PER_AREA_NEWTON_PER_SQ_MILLIMETER_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_MILLIMETERS_OF_WATER_GAUGE">
            <summary>
            FORCE_PER_AREA_MILLIMETERS_OF_WATER_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.FORCE_PER_AREA_INCHES_OF_WATER_GAUGE">
            <summary>
            FORCE_PER_AREA_INCHES_OF_WATER_GAUGE unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.NPD_INCH">
            <summary>
            NPD_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.NPD_MILLIMETER">
            <summary>
            NPD_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_NEWTON_METER_PER_METER">
            <summary>
            MOMENT_PER_DISTANCE_NEWTON_METER_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_NEWTON_METER_PER_MILLIMETER">
            <summary>
            MOMENT_PER_DISTANCE_NEWTON_METER_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_NEWTON_MILLIMETER_PER_METER">
            <summary>
            MOMENT_PER_DISTANCE_NEWTON_MILLIMETER_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_KILONEWTON_METER_PER_MILLIMETER">
            <summary>
            MOMENT_PER_DISTANCE_KILONEWTON_METER_PER_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_KILONEWTON_MILLIMETER_PER_METER">
            <summary>
            MOMENT_PER_DISTANCE_KILONEWTON_MILLIMETER_PER_METER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_POUND_FORCE_FOOT_PER_INCH">
            <summary>
            MOMENT_PER_DISTANCE_POUND_FORCE_FOOT_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_POUND_FORCE_INCH_PER_INCH">
            <summary>
            MOMENT_PER_DISTANCE_POUND_FORCE_INCH_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_POUND_FORCE_FOOT_PER_FOOT">
            <summary>
            MOMENT_PER_DISTANCE_POUND_FORCE_FOOT_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_POUND_FORCE_INCH_PER_FOOT">
            <summary>
            MOMENT_PER_DISTANCE_POUND_FORCE_INCH_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_KIP_FORCE_FOOT_PER_FOOT">
            <summary>
            MOMENT_PER_DISTANCE_KIP_FORCE_FOOT_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_KIP_FORCE_FOOT_PER_INCH">
            <summary>
            MOMENT_PER_DISTANCE_KIP_FORCE_FOOT_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_KIP_FORCE_INCH_PER_FOOT">
            <summary>
            MOMENT_PER_DISTANCE_KIP_FORCE_INCH_PER_FOOT unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.MOMENT_PER_DISTANCE_KIP_FORCE_INCH_PER_INCH">
            <summary>
            MOMENT_PER_DISTANCE_KIP_FORCE_INCH_PER_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.WIRE_GAUGE_AWG">
            <summary>
            WIRE_GAUGE_AWG unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.WIRE_GAUGE_MILLIMETER">
            <summary>
            WIRE_GAUGE_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.WIRE_GAUGE_INCH">
            <summary>
            WIRE_GAUGE_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.WIRE_GAUGE_MIL">
            <summary>
            WIRE_GAUGE_MIL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.WIRE_GAUGE_CIRCULAR_MIL">
            <summary>
            WIRE_GAUGE_CIRCULAR_MIL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.WIRE_GAUGE_KILO_CIRCULAR_MIL">
            <summary>
            WIRE_GAUGE_KILO_CIRCULAR_MIL unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.WIRE_GAUGE_SQUARE_MILLIMETER">
            <summary>
            WIRE_GAUGE_SQUARE_MILLIMETER unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.NPD_NATIVE_INCH">
            <summary>
            NPD_NATIVE_INCH unit name.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UnitName.NPD_NATIVE">
            <summary>
            NPD_NATIVE unit name.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.PrecisionType">
            <summary>
            PrecisionType enumerator definitions.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PrecisionType.PRECISIONTYPE_DECIMAL">
            <summary>
            PRECISIONTYPE_DECIMAL precision type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PrecisionType.PRECISIONTYPE_FRACTIONAL">
            <summary>
            PRECISIONTYPE_FRACTIONAL precision type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.PrecisionType.PRECISIONTYPE_SCIENTIFIC">
            <summary>
            PRECISIONTYPE_SCIENTIFIC precision type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.UOMManager">
             <summary>
             UOMManager facilitates conversion of database units to and from units of measure.
             </summary>
             <example>This is an example for UOMManager class methods and properties.
             <code>
             Public Class UOMManager
              Public Sub New()
            
                'Getting the UOM manager from the MiddleServiceProvider. 
                Dim oUOMManager As UOMManager = MiddleServiceProvider.UOMMgr
            
                'Getting the default primary unit of a given unit type. 
                'Getting the default primary unit of distance type.
                Dim eDistanceUnitType As UnitType = UnitType.Distance
                Dim eDistancePrimaryUnitName As UnitName
                eDistancePrimaryUnitName = oUOMManager.GetDefaultPrimaryUnit(eDistanceUnitType)
            
                'Getting the default secondary unit of a given unit type. 
                'Getting the default secondary unit of distance type.
                Dim eDistanceSecondaryUnitName As UnitName
                eDistanceSecondaryUnitName = oUOMManager.GetDefaultSecondaryUnit(eDistanceUnitType)
            
                'Getting the default tertiary unit of a given unit type. 
                'Getting the default tertiary unit of distance unit type.
                Dim eDistanceTertiaryUnitName As UnitName
                eDistanceTertiaryUnitName = oUOMManager.GetDefaultTertiaryUnit(eDistanceUnitType)
            
                'Converting the given units into database units using the ParseUnit method. 
                'Passing 10mm to the ParseUnit method parses this into 0.01m (db units); assuming database units as meters.
                Dim sParseString As String = "10 mm"
                Dim dParsedValue As Double
                dParsedValue = oUOMManager.ParseUnit(eDistanceUnitType, sParseString)
            
                'Setting the default units for a unit type. 
                'Setting default units for distance; meter as primary unit, centimeter as secondary unit, and millimeter as tertiary unit. 
                oUOMManager.SetDefaultUnits(eDistanceUnitType, UnitName.DISTANCE_METER, UnitName.DISTANCE_CENTIMETER, UnitName.DISTANCE_MILLIMETER)
            
                'Calling the FormatUnit method with unit type and unit value as inputs. 
                Dim sFormatDistanceString1 As String
                Dim dDistanceValue1 As Double = 100.132
                'This should be formatted into 100 m, 13 cm, and 2 mm. 
                sFormatDistanceString1 = oUOMManager.FormatUnit(eDistanceUnitType, dDistanceValue1)
            
                'Calling the FormatUnit method with unit type, unit value, primary, secondary, and tertiary units as inputs. 
                Dim sFormatDistanceString2 As String
                sFormatDistanceString2 = oUOMManager.FormatUnit(eDistanceUnitType, 100, UnitName.DISTANCE_FOOT, UnitName.DISTANCE_INCH, UnitName.UNIT_NOT_SET)
            
                'Converting a given unit value into database units with the given unit type.
                'Calling the ConvertUnitToDBU method with unit type and unit value as Inputs. 
                Dim dConvertUnitToDBU1 As Double
                '30 feet is converted to database units.
                dConvertUnitToDBU1 = oUOMManager.ConvertUnitToDBU(eDistanceUnitType, 30)
            
                'Converting a given unit value into database units with given unit type and unit name.
                'Calling the ConvertUnitToDBU method with unit type, unit value, and unit name as inputs. 
                Dim dConvertUnitToDBU2 As Double
                '100 cm is converted to DBU (meters). 
                dConvertUnitToDBU2 = oUOMManager.ConvertUnitToDBU(eDistanceUnitType, 100, UnitName.DISTANCE_CENTIMETER)
            
                'Converting a given database value into a default unit.
                'Calling the ConvertDBUtoUnit method with unit type and unit value as inputs.
            
                'Setting the default primary unit for distance as feet.
                oUOMManager.SetDefaultUnits(eDistanceUnitType, UnitName.DISTANCE_FOOT, UnitName.UNIT_NOT_SET, UnitName.UNIT_NOT_SET)
                Dim dConvertDBUToUnit1 As Double
                '100 m is converted to feet. 
                dConvertDBUToUnit1 = oUOMManager.ConvertDBUtoUnit(eDistanceUnitType, 100)
            
                'Converting a given database value into a specified unit name given the unit type.
                'Calling the ConvertDBUtoUnit method with unit type, unit value, and unit name as inputs. 
                Dim dConvertDBUToUnit2 As Double
                '100 m is converted to centimeters. 
                dConvertDBUToUnit2 = oUOMManager.ConvertDBUtoUnit(eDistanceUnitType, 100, UnitName.DISTANCE_CENTIMETER)
            
                'Getting TransactionManager from the MiddleServiceProvider. 
                Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                'Creating an equipment. 
                Dim oEquipment As Equipment = Nothing
                oEquipment = New Equipment("PUMP 001A-E", Nothing) 'Null system indicates that the equipment is created under the project root. 
            
                'Getting ILocalCoordinateSystem interface and setting the position of equipment. 
                'Setting the position of the equipment. 
                Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEquipment, ILocalCoordinateSystem)
                Dim oPos As New Position()
                oPos.X = 3
                oPos.Y = 3
                oPos.Z = 3
                oEqpCS.Origin = oPos
                oEquipment.SetPropertyValue("CommonMiddleTestEqp.SOMBusinessObject01", "IJNamedItem", "Name")
            
                'Committing the transaction.
                oTransactionMgr.Commit("Place Equipment1")
            
                'Setting the shaft diameter and shaft length properties. 
                oEquipment.SetPropertyValue(0.2, "IJUAShaftDimensions", "ShaftDiameter")
                oEquipment.SetPropertyValue(1, "IJUAShaftDimensions", "ShaftLength")
            
                'Committing the transaction. 
                oTransactionMgr.Commit("Change Dimensions")
            
                Dim dShaftDiaProperty As PropertyValue = oEquipment.GetPropertyValue("IJUAShaftDimensions", "ShaftDiameter")
                Dim dShaftDiaPropValDouble As PropertyValueDouble = DirectCast(dShaftDiaProperty, PropertyValueDouble)
            
                'Using the FormatUnit method with PropertyValueDouble as input. 
                'Setting the default primary unit for distance as feet.
                oUOMManager.SetDefaultUnits(eDistanceUnitType, UnitName.DISTANCE_FOOT, UnitName.UNIT_NOT_SET, UnitName.UNIT_NOT_SET)
                Dim sFormatDistanceString3 As String
                'Converts 0.2 m into feet, which is the default unit set.
                sFormatDistanceString3 = oUOMManager.FormatUnit(dShaftDiaPropValDouble)
            
                'Using the FormatUnit method with PropertyValueDouble, primary, secondary, and tertiary unit names as input. 
                Dim sFormatDistanceString4 As String
                'Converts 0.2 into inches. 
                sFormatDistanceString4 = oUOMManager.FormatUnit(dShaftDiaPropValDouble, UnitName.DISTANCE_INCH, UnitName.UNIT_NOT_SET, UnitName.UNIT_NOT_SET)
            
                Dim dShaftLengthProperty As PropertyValue = oEquipment.GetPropertyValue("IJUAShaftDimensions", "ShaftLength")
                Dim dShaftLengthPropValDouble As PropertyValueDouble = DirectCast(dShaftLengthProperty, PropertyValueDouble)
            
                'Using the ConvertDBUtoUnit method with PropertyValueDouble as input. 
                'Setting the default primary unit for distance as feet.
                oUOMManager.SetDefaultUnits(eDistanceUnitType, UnitName.DISTANCE_FOOT, UnitName.UNIT_NOT_SET, UnitName.UNIT_NOT_SET)
                Dim dConvertDBUToUnit3 As Double
                'Converts 1 m into feet, which is the default unit set.
                dConvertDBUToUnit3 = oUOMManager.ConvertDBUtoUnit(dShaftLengthPropValDouble)
            
                'Using the ConvertDBUtoUnit method with PropertyValueDouble and unit name as input. 
                Dim dConvertDBUToUnit4 As Double
                'Converts 1 m into km. 
                dConvertDBUToUnit4 = oUOMManager.ConvertDBUtoUnit(dShaftLengthPropValDouble, UnitName.DISTANCE_KILOMETER)
            
                'Getting an occurence of a unit format object.
                Dim oUOMFormat As UOMFormat = oUOMManager.GetDefaultUnitFormat(UnitType.Distance)
            
                'Setting an occurence of a unit format object.
                oUOMManager.SetDefaultUnitFormat(UnitType.Distance, oUOMFormat)
            
                'Getting the decimal precision.
                Dim iDecimalPrecision As Short = oUOMFormat.DecimalPrecision
            
                'Setting the decimal precision. Valid values are within the range of 0 to 15.
                oUOMFormat.DecimalPrecision = CShort(4)
            
                'Getting the fractional precision.
                Dim iFractionalPrecision As Short = oUOMFormat.FractionalPrecision
            
                'Setting the fractional precision.  Valid values are 2, 4, 8, 16, 32, 64, 94, and 128. 
                oUOMFormat.FractionalPrecision = 8
            
                'Getting the leading zero flag.
                Dim boolLeadingZero As Boolean = oUOMFormat.LeadingZero
            
                'Setting the leading zero flag.
                oUOMFormat.LeadingZero = False
                oUOMFormat.LeadingZero = True
            
                'Getting the precision type.
                Dim iPrecisionType As PrecisionType = oUOMFormat.PrecisionType
            
                'Setting the precision type.
                oUOMFormat.PrecisionType = PrecisionType.PRECISIONTYPE_DECIMAL
                oUOMFormat.PrecisionType = PrecisionType.PRECISIONTYPE_FRACTIONAL
                oUOMFormat.PrecisionType = PrecisionType.PRECISIONTYPE_SCIENTIFIC
            
                'Getting the reduce fraction flag.
                Dim boolReduceFraction As Boolean = oUOMFormat.ReduceFraction
            
                'Setting the reduce fraction flag.
                oUOMFormat.ReduceFraction = False
                oUOMFormat.ReduceFraction = True
            
                'Getting the trailing zeros flag.
                Dim boolTrailingZeros As Boolean = oUOMFormat.TrailingZeros
            
                'Setting the trailing zeros flag.
                oUOMFormat.TrailingZeros = False
                oUOMFormat.TrailingZeros = True
            
                'Getting the units displayed flag.
                Dim boolUnitsDisplayed As Boolean = oUOMFormat.UnitsDisplayed
            
                'Setting the units displayed flag.
                oUOMFormat.UnitsDisplayed = False
                oUOMFormat.UnitsDisplayed = True
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UOMManager.E_FAIL">
            <summary>
            Constant for E_FAIL.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.UOMManager.m_oUOM">
            <summary>
            Private member variable to access UOM methods through COM.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.Cleanup">
            <summary>
            Internal method for clean-up.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.ConvertDBUtoUnit(Ingr.SP3D.Common.Middle.Services.UnitType,System.Double)">
            <summary>
            Converts a number expressed in internal database units into the default unit of measure.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
            <param name="dDBU">The DBU value to be converted.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnUOMConvertDBUtoUnitException">This exception is thrown when
            ConvertDBUtoUnit call fails.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.ConvertDBUtoUnit(Ingr.SP3D.Common.Middle.Services.UnitType,System.Double,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            Converts a number expressed in internal database units into the specified unit of measure,
            overriding the default unit for this type.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
            <param name="dDBU">The DBU value to be converted.</param>
            <param name="iUnitName">Target unit name (i.e., FEET) which must be of type iUnitType.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnUOMConvertDBUtoUnitException">This exception is thrown when 
            ConvertDBUtoUnit call fails.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.ConvertDBUtoUnit(Ingr.SP3D.Common.Middle.PropertyValueDouble)">
            <summary>
            Takes a PropertyValueDouble as input and converts it into the specified unit of measure.
            </summary>
            <param name="oPropValueDbl">Input PropertyValueDouble.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.ConvertDBUtoUnit(Ingr.SP3D.Common.Middle.PropertyValueDouble,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            Takes a PropertyValueDouble as input and converts it into the specified unit of measure,
            overriding the default unit for this type.
            </summary>
            <param name="oPropValueDbl">Input PropertyValueDouble.</param>
            <param name="iUnitName">Target unit name (i.e., FEET) which must be of type iUnitType.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnUOMConvertDBUtoUnitException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.ConvertUnitToDBU(Ingr.SP3D.Common.Middle.Services.UnitType,System.Double)">
            <summary>
            Converts a number expressed in units of measure into internal database units.
            </summary>
            <param name="iUnitType">Input unit type (i.e., DISTANCE, etc.).</param>
            <param name="dUnitValue">Input unit value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.ConvertUnitToDBU(Ingr.SP3D.Common.Middle.Services.UnitType,System.Double,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            Converts a number expressed in units of measure into internal database units, overiding default units.
            </summary>
            <param name="iUnitType">Input unit type (i.e., DISTANCE, etc.).</param>
            <param name="dUnitValue">Input unit value.</param>
            <param name="iUnitName">Input unit name (i.e., FEET), which must be of iUnitType.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.ParseUnit(Ingr.SP3D.Common.Middle.Services.UnitType,System.String)">
            <summary>
            Parses a text expression in the context of the specified unit type (iUnitType) and returns the value
            in database units.
            </summary>
            <param name="iUnitType">Unit type used to interpret the string.</param>
            <param name="sParseString">String to parse.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.FormatUnit(Ingr.SP3D.Common.Middle.Services.UnitType,System.Double)">
            <summary>
            Formats the supplied database unit into a string, using default units set for the unit type.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
            <param name="dUnitValue">Input unit value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.FormatUnit(Ingr.SP3D.Common.Middle.PropertyValueDouble)">
            <summary>
            Converts the supplied PropertyValueDouble into database unit and formats it into a string,
            using default units set for the unit type.
            </summary>
            <param name="oPropValueDbl">Input PropertyValueDouble.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.FormatUnit(Ingr.SP3D.Common.Middle.Services.UnitType,System.Double,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            Formats the supplied database unit into a string, using default units set for the unit type,
            overiding default units.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
            <param name="dUnitValue">Input unit value.</param>
            <param name="iPrimaryUnit">Target primary unit name (i.e., FEET) which must be of type iUnitType.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.FormatUnit(Ingr.SP3D.Common.Middle.Services.UnitType,System.Double,Ingr.SP3D.Common.Middle.Services.UnitName,Ingr.SP3D.Common.Middle.Services.UnitName,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            Formats the supplied database unit into a string, using default units set for the unit type,
            overiding default units.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
            <param name="dUnitValue">Input unit value.</param>
            <param name="iPrimaryUnit">Target primary unit name (i.e., FEET) which must be of type iUnitType.</param>
            <param name="iSecondaryUnit">Target secondary unit name (i.e., INCH) which must be of type iUnitType.</param>
            <param name="iTertiaryUnit">Target tertiary unit name which must be of type iUnitType.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.FormatUnit(Ingr.SP3D.Common.Middle.PropertyValueDouble,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            This override allows the caller to override default units. When UnitName.UseDefault is specified
            as argument for iPrimaryUnit, the default unit name is used for that unit range.
            </summary>
            <param name="oPropValueDbl">Input PropertyValueDouble.</param>
            <param name="iPrimaryUnit">Target primary unit name (i.e., FEET) which must be of type iUnitType.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.FormatUnit(Ingr.SP3D.Common.Middle.PropertyValueDouble,Ingr.SP3D.Common.Middle.Services.UnitName,Ingr.SP3D.Common.Middle.Services.UnitName,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            This override allows the caller to override default units. When UnitName.UseDefault is specified
            as argument for iPrimaryUnit, iSecondaryUnit or iTertiaryUnit, the default unit name is used for that unit range.
            </summary>
            <param name="oPropValueDbl">Input PropertyValueDouble.</param>
            <param name="iPrimaryUnit">Target primary unit name (i.e., FEET) which must be of type iUnitType.</param>
            <param name="iSecondaryUnit">Target secondary unit name (i.e., INCH) which must be of type iUnitType.</param>
            <param name="iTertiaryUnit">Target tertiary unit name which must be of type iUnitType.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.SetDefaultUnits(Ingr.SP3D.Common.Middle.Services.UnitType,Ingr.SP3D.Common.Middle.Services.UnitName,Ingr.SP3D.Common.Middle.Services.UnitName,Ingr.SP3D.Common.Middle.Services.UnitName)">
            <summary>
            Sets the default units for a specified unit type. You must pass a valid Primary Unit.
            This is a middle tier object, and default UOMs are not stored. For the
            stand-alone executable, call the <b>SetDefaultUnits</b> method.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
            <param name="iPrimaryUnit">Target primary unit name (i.e., FEET) which must be of type iUnitType.</param>
            <param name="iSecondaryUnit">Target secondary unit name (i.e., INCH) which must be of type iUnitType.</param>
            <param name="iTertiaryUnit">Target tertiary unit name which must be of type iUnitType.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.GetDefaultPrimaryUnit(Ingr.SP3D.Common.Middle.Services.UnitType)">
            <summary>
            Returns the current default primary unit name for the specified unit type.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.GetDefaultSecondaryUnit(Ingr.SP3D.Common.Middle.Services.UnitType)">
            <summary>
            Returns the current default secondary unit name for the specified unit type.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.GetDefaultTertiaryUnit(Ingr.SP3D.Common.Middle.Services.UnitType)">
            <summary>
            Returns the current default tertiary unit name for the specified unit type.
            </summary>
            <param name="iUnitType">Target unit type (i.e., DISTANCE, etc.).</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.GetDefaultUnitFormat(Ingr.SP3D.Common.Middle.Services.UnitType)">
            <summary>
            Gets the default unit format object for the selected unit type from the UOM manager.
            </summary>
            <param name="iUnitType">Type of the default unit format object to get.</param>
            <returns>UOMFormat</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMManager.SetDefaultUnitFormat(Ingr.SP3D.Common.Middle.Services.UnitType,Ingr.SP3D.Common.Middle.Services.UOMFormat)">
            <summary>
            Sets the default unit format object for the selected unit type from the UOM manager.
            </summary>
            <param name="iUnitType">Type of the default unit format object to be set.</param>
            <param name="oDefaultUnitFormat">Default unit format object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.UOMFormat">
            <summary>
            Units of measure format class.  Used to set formats to be used by the UOM manager class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.UOMFormat.#ctor(UnitsOfMeasureServicesLib.UomVBFormat)">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.COMUOMFormat">
            <summary>
            Internal property to provide access to the COM UOMFormat object.  Not available to users of
            CommonMiddle and not intended for use by any component other than the UOMManager class.
            </summary>
            <returns>COM UOMFormat object - IJUomVBFormat.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.ReduceFraction">
            <summary>
            Causes the UOM manager to reduce fractions or not reduce fractions.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.LeadingZero">
            <summary>
            Causes the UOM manager to display or not display leading zeros.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.TrailingZeros">
            <summary>
            Causes the UOM manager to display or not display trailing zeros.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.UnitsDisplayed">
            <summary>
            Causes the UOM manager to display or not display the units of a measurement.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.PrecisionType">
            <summary>
            Selects the precision type to be used for display by the UOM manager.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.FractionalPrecision">
            <summary>
            Selects the fractional precision to be used for display by the UOM manager.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.UOMFormat.DecimalPrecision">
            <summary>
            Selects the decimal precision to be used for display by the UOM manager.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMUnitNameInvalidException">
            <summary>
            Raised when the passed in primary unit name fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMUnitNameInvalidException.#ctor">
            <summary>
            Initializes a new instance of the CmnUOMUnitNameInvalidException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMPropertyValueNullException">
            <summary>
            Raised when the property value is null fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMPropertyValueNullException.#ctor">
            <summary>
            Initializes a new instance of the CmnUOMPropertyValueNullException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMConvertDBUtoUnitException">
            <summary>
            Raised when conversion of internal database units into
            the default unit of measure fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMConvertDBUtoUnitException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMConvertDBUtoUnitException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMConvertUnitToDBUException">
            <summary>
            Raised when conversion of the default unit of measure
            to internal database units fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMConvertUnitToDBUException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMConvertUnitToDBUException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMParseUnitException">
            <summary>
            Raised when parsing the unit type fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMParseUnitException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMParseUnitException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMFormatUnitException">
            <summary>
            Raised when formatting the database unit fails. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMFormatUnitException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMFormatUnitException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMSetDefaultUnitsException">
            <summary>
            Raised when setting the default units fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMSetDefaultUnitsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMSetDefaultUnitsException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultPrimaryUnitException">
            <summary>
            Raised when getting the default primary unit fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultPrimaryUnitException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMGetDefaultPrimaryUnitException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultSecondaryUnitException">
            <summary>
            Raised when getting the default secondary unit fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultSecondaryUnitException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMGetDefaultSecondaryUnitException class with a
            reference to the inner COMException that is the cause of this exception. 
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultTertiaryUnitException">
            <summary>
            Raised when getting the default tertiary unit fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultTertiaryUnitException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMGetDefaultTertiaryUnitException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultUnitFormatException">
            <summary>
            Raised when getting the default unit format fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMGetDefaultUnitFormatException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMGetDefaultUnitFormatException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMSetDefaultUnitFormatException">
            <summary>
            Raised when setting the default unit format fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMSetDefaultUnitFormatException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMSetDefaultUnitFormatException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMSetFractionalPrecisionException">
            <summary>
            Raised when setting the fractional precision fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMSetFractionalPrecisionException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMSetFractionalPrecisionException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUOMSetDecimalPrecisionException">
            <summary>
            Raised when setting the decimal precision fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUOMSetDecimalPrecisionException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnUOMSetDecimalPrecisionException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.RangeBoxIntersectionType">
            <summary>
            Enumerated constants to aid in which type of intersection is returned.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.RangeBoxIntersectionType.Inside">
            <summary>
            Input object is inside the OrientedRangeBox.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.RangeBoxIntersectionType.Outside">
            <summary>
            Input object is outside the OrientedRangeBox.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.RangeBoxIntersectionType.Overlap">
            <summary>
            Input object is overlapping the OrientedRangeBox.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.RangeBox">
             <summary>
             The RangeBox represents a box around an object in three-dimensional Cartesian
             space. It is defined by two diagonal points (m_low and m_high).
             </summary>
             <example>This is an example for RangeBox methods and properties.
             <code>
             Public Class RangeBox
               Public Sub New()
            
                'Create a RangeBox object with default values.
                Dim oRBox1 As New RangeBox()
            
                'Create a range box using low position and high position.
                Dim oPosLow As New Position(1, 1, 1)
                Dim oPosHigh As New Position(3, 3, 3)
                Dim oRBox2 As New RangeBox(oPosLow, oPosHigh)
            
                'Create a range box using an existing RangeBox object.
                Dim oRBoxCopy As New RangeBox(oRBox2)
            
                'Check whether two RangeBox objects are equal or not.
                'Using Equals() method on RangeBox.
                Dim bEqual As Boolean = False
                If oRBoxCopy.Equals(oRBox2) Then
                    bEqual = True
                Else
                    bEqual = False
                End If
            
                'Using operator '='.
                If oRBoxCopy = oRBox2 Then
                    bEqual = True
                Else
                    bEqual = False
                End If
            
                'Using operator '<![CDATA[<>]]>'.
                If oRBoxCopy <![CDATA[<>]]> oRBox2 Then
                    bEqual = False
                Else
                    bEqual = True
                End If
            
                'Get properties, High, Low, and IsNull. 
                'Get the low position of RangeBox.
                oPosLow = oRBoxCopy.Low
            
                'Get the high position of RangeBox.
                oPosHigh = oRBoxCopy.High
            
                'Check whether the RangeBox object is null.
                Dim bRBoxNull As Boolean = False
                If oRBoxCopy.IsNull Then
                    bRBoxNull = True
                End If
            
                'Check whether the given position is in the RangeBox object.
                Dim bIsPosInRBox As Boolean = False
                Dim oPos As New Position(1, 2, 2)
                If oRBoxCopy.Contains(oPos) Then
                    bIsPosInRBox = True
                End If
            
                'Get all corners of the RangeBox using the GetCorners() method. 
                Dim oRColl_Pos As ReadOnlyCollection(Of Position) = Nothing
                oRBoxCopy.GetCorners(oRColl_Pos)
            
                'Transform the RangeBox using operator '*'.
                Dim oRBoxTrans As RangeBox
                Dim oMatrix As New Matrix4X4()
                oMatrix.Scale(2)
                oRBoxTrans = oRBoxCopy * oMatrix
            
                'Get the union and intersection of the two given range boxes.
                'Using operator '+' to get the union of two range boxes.
                Dim oRBox4 As New RangeBox(New Position(2, 2, 2), New Position(5, 5, 5))
                Dim oRBox5 As RangeBox
                oRBox5 = oRBoxCopy + oRBox4
                'Using the Intersect() method to get the intersection of the two given range boxes.
                oRBox5 = oRBoxCopy.Intersect(oRBox4)
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.#ctor">
            <summary>
            Default constructor, which constructs a NULL box.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructs a RangeBox from low position to high position.
            </summary>
            <param name="posLow">Position</param>
            <param name="posHigh">Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.#ctor(Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Constructs a RangeBox from a RangeBox.
            </summary>
            <param name="oRangeBox">RangeBox</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.op_Multiply(Ingr.SP3D.Common.Middle.RangeBox,Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms a RangeBox.
            </summary>
            <param name="oRangeBox">Range box</param>
            <param name="oMatrix4x4">4x4 transformation matrix.</param>
            <returns>Returns a transformed RangeBox.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid Arguments.</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>G4x4 Matrix and Matrix4x4 as Column Major</term>
            </listheader>
              <item>
                <description>| 0  4   8  12 |</description>
              </item>
              <item>
                <description>| 1  5   9  13 |</description>
              </item>
              <item>
                <description>| 2  6  10  14 |</description>
              </item>
              <item>
                <description>| 3  7  11  15 |</description>
              </item>
            </list>
            <para>12, 13, and 14 elements represent the translation.</para>
            <para>Mathmetically, we should put position or vector on the right 
            when performing a transformation, so that a position or vector 
            is represented in a one-dimensional column (similarly for RangeBox).</para>
            <para>However, we put position or vector on the left to follow the 
            GTransf customs. Also only by putting on the left, we get 
            the automatic implementation of *=.</para>
            <para>***The internal implementation is still performed as if
            position or vector is on the right.</para>
             </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.op_Addition(Ingr.SP3D.Common.Middle.RangeBox,Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Union of two boxes.
            </summary>
            <param name="oRangeBox1">RangeBox</param>
            <param name="oRangeBox2">RangeBox</param>
            <returns>RangeBox</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.Intersect(Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Finds the intersection between two boxes and returns the intersection box.
            If there is no intersection, then the NULL box is returned.
            </summary>
            <param name="oRangeBox2">RangeBox</param>
            <returns>RangeBox</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.Intersects(Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Determines if two boxes intersect or not.
            </summary>
            <param name="oRangeBox2">RangeBox</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.GetCorners(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Gets the eight corners of the box.
            Corners are defined as follows:
            <para>Bottom Face = Low.z (Start at Low and move CCW wrt Z)</para>
            <para>Top Face = High.z</para>
            <para>Bottom Face</para>
            <para>(Low.X, Low.Y, Low.Z) (High.X, Low.Y, Low.Z), (High.X, High.Y, Low.Z), (Low.X, High.Y, Low.Z)</para>
            <para>Top Face</para>
            <para>(Low.X, Low.Y, High.Z) (High.X, Low.Y, High.Z), (High.X, High.Y, High.Z), (Low.X, High.Y, High.Z)</para>
            </summary>
            <param name="colPos">ReadOnlyCollection of Position</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.Contains(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Returns True if the position contains the candidate object.
            </summary>
            <param name="posIn">Position</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.Contains(Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Returns True if the range box contains the candidate object.
            </summary>
            <param name="oRangeBox">RangeBox</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.Equals(System.Object)">
            <summary>
            Determines whether the specified range box is equal to the current range box.
            </summary>
            <param name="obj">object</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.GetHashCode">
            <summary>
            Returns the hash code for the current business object.
            </summary>
            <returns>integer</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.op_Inequality(Ingr.SP3D.Common.Middle.RangeBox,Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Returns whether two range boxes are not equal.
            </summary>
            <param name="lhs">Left-hand side of !=.</param>
            <param name="rhs">Right-hand side of !=.</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.op_Equality(Ingr.SP3D.Common.Middle.RangeBox,Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Returns whether two range boxes are equal in value.
            </summary>
            <param name="lhs">Left-hand side of ==.</param>
            <param name="rhs">Right-hand side of ==.</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.Max(System.Double,System.Double)">
            <summary>
            Internal function used to determine the maximum of 2 values.
            </summary>
            <param name="dVal1">double</param>
            <param name="dVal2">double</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RangeBox.Min(System.Double,System.Double)">
            <summary>
            Internal function used to determine the minimum of 2 values.
            </summary>
            <param name="dVal1">double</param>
            <param name="dVal2">double</param>
            <returns></returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RangeBox.Low">
            <summary>
            Property to get the low position.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RangeBox.High">
            <summary>
            Property to get the high position.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RangeBox.IsNull">
            <summary>
            Property to check if a RangeBox is null.
            A null range box is defined as a box where high is less than low.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.OrientedRangeBox">
            <summary>
            The OrientedRangeBox represents a box oriented wrt an orthogonal system.  It is NOT necessarily aligned with the 
            coordinate axis.  It is defined by a base point and 3 vectors which have length defining the box.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.#ctor">
            <summary>
            Default constructor, which constructs a box centered at Origin with coordinate axis.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Constructs a OrientedRangeBox from a base position, and 3 vectors.
            </summary>
            <param name="posOrigin">Position</param>
            <param name="vec1">Vector</param>
            <param name="vec2">Vector</param>
            <param name="vec3">Vector</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.#ctor(Ingr.SP3D.Common.Middle.OrientedRangeBox)">
            <summary>
            Constructs a OrientedRangeBox from an OrientedRangeBox.
            </summary>
            <param name="oOrientedRangeBox">Oriented Range Box.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.Intersects(Ingr.SP3D.Common.Middle.OrientedRangeBox)">
            <summary>
            Determines if two oriented boxes intersect or not.
            </summary>
            <param name="oRangeBox2">OrientedRangeBox</param>
            <returns>RangeBoxIntersectionType ::  0: inside, 1: outside, 2: overlapping</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.Intersects(Ingr.SP3D.Common.Middle.RangeBox)">
            <summary>
            Determines if "this" oriented box intersects with a rangebox.
            </summary>
            <param name="oRangeBox2">RangeBox</param>
            <returns>RangeBoxIntersectionType ::  0: inside, 1: outside, 2: overlapping</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.Intersects(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines if a Position is in/out/on the OrientedRangeBox.
            </summary>
            <param name="oPos">Position</param>
            <returns>RangeBoxIntersectionType ::  0: inside, 1: outside, 2: on</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.Intersects(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Determines if a Position is in/out/on the OrientedRangeBox.
            </summary>
            <param name="oObjs">Collection of Business Objects</param>
            <returns>RangeBoxIntersectionType ::  0: inside, 1: outside, 2: on</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.GetHashCode">
            <summary>
            Returns the hash code for the current business object.
            </summary>
            <returns>integer</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.Equals(System.Object)">
            <summary>
            Determines whether the specified range box is equal to the current range box.
            </summary>
            <param name="obj">object</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.op_Inequality(Ingr.SP3D.Common.Middle.OrientedRangeBox,Ingr.SP3D.Common.Middle.OrientedRangeBox)">
            <summary>
            Returns whether two range boxes are not equal.
            </summary>
            <param name="lhs">Left-hand side of !=.</param>
            <param name="rhs">Right-hand side of !=.</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.op_Equality(Ingr.SP3D.Common.Middle.OrientedRangeBox,Ingr.SP3D.Common.Middle.OrientedRangeBox)">
            <summary>
            Returns whether two range boxes are equal in value.
            </summary>
            <param name="lhs">Left-hand side of ==.</param>
            <param name="rhs">Right-hand side of ==.</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.op_Multiply(Ingr.SP3D.Common.Middle.OrientedRangeBox,Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms an OrientedRangeBox.
            </summary>
            <param name="oOrientedRangeBox">OrientedRange box</param>
            <param name="oMatrix4x4">4x4 transformation matrix.</param>
            <returns>Returns a transformed OrientedRangeBox.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid Arguments.</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>G4x4 Matrix and Matrix4x4 as Column Major</term>
            </listheader>
              <item>
                <description>| 0  4   8  12 |</description>
              </item>
              <item>
                <description>| 1  5   9  13 |</description>
              </item>
              <item>
                <description>| 2  6  10  14 |</description>
              </item>
              <item>
                <description>| 3  7  11  15 |</description>
              </item>
            </list>
            <para>12, 13, and 14 elements represent the translation.</para>
            <para>Mathmetically, we should put position or vector on the right 
            when performing a transformation, so that a position or vector 
            is represented in a one-dimensional column (similarly for RangeBox).</para>
            <para>However, we put position or vector on the left to follow the 
            GTransf customs. Also only by putting on the left, we get 
            the automatic implementation of *=.</para>
            <para>***The internal implementation is still performed as if
            position or vector is on the right.</para>
             </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.OrientedRangeBox.GetCorners(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Gets the eight corners of the box.
            Corners are defined as follows:
            <para>Face1:: Pt1 = Origin, Pt2 = Origin + Sides[0], Pt3 = Pt2 + Sides[1], Pt4 = Pt3 - Sides[0]</para>
            <para>Face2 = Pt1 = Origin + Sides[2], Pt2 = Pt1 + Sides[0], Pt3 = Pt2 + Sides[1], Pt4 = Pt3 - Sides[0]</para>
            </summary>
            <param name="colPos">ReadOnlyCollection of Position</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.OrientedRangeBox.Origin">
            <summary>
            Property to get the low position.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.OrientedRangeBox.Sides">
            <summary>
            Property to get the high position.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SpaceHierarchyHelper">
            <summary>
            Conglomerated by the .NET BusinessObject to implement the SpaceHierarchy membership.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SpaceHierarchyHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor used by the conglomerating .NET BusinessObject.
            </summary>
            <param name="oWrapper">The parent .NET BusinessObject.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SpaceHierarchyHelper.Finalize">
            <summary>
            Destructor for the SpaceHierarchyHelper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SpaceHierarchyHelper.AddSpaceChild(Ingr.SP3D.Common.Middle.ISpaceChild)">
            <summary>
            Adds the specified object as a child to the parent object.
            </summary>
            <param name="oChild">ISpaceChild as the child object.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SpaceHierarchyHelper.SpaceChildren">
            <summary>
            Gets the collection of ISpaceChild objects of the parent object. An empty list is returned if there are
            no children for the parent object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SpaceHierarchyHelper.SpaceParent">
            <summary>
            Gets or sets the space parent to the child object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.NamedItemHelper">
            <summary>
            Helper class for INamedItem.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NamedItemHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor for the NamedItem helper class.
            </summary>
            <param name="oObject">BusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NamedItemHelper.Finalize">
            <summary>
            Destructor for the NamedItem helper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NamedItemHelper.SetUserDefinedName(System.String)">
            <summary>
            Method to set the name of an item.  This implementation removes any existing
            relationship with a name rule, which in most cases is appropriate when giving
            an object a user-defined name.
            
            This method must be overwritten by classes for which this is not the appropriate
            behavior.
            </summary>
            <param name="Name">The new name string.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.NamedItemHelper.Name">
            <summary>
            Read-only Name property.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterParameter">
            <summary>
            This is the base class for all FilterParameter classes, used to supply parameters to a parametric criteria.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterParameter.#ctor(Ingr.SP3D.Common.Middle.ParameterType)">
            <summary>
            Creates a FilterParameter of specified type.
            </summary>
            <param name="oParaType">ParameterType</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.FilterParameter.FilterParameterType">
            <summary>
            The type of the FilterParameter.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ObjTypeParameter">
            <summary>
            The filter parameter class for BOC Node.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ObjTypeParameter.#ctor">
            <summary>
            Default constructor for object type filter parameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ObjTypeParameter.BOCInfo">
            <summary>
            BOCInformation of the object type filter parameter. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ObjTypeParameter.BOCPath">
            <summary>
            BOCPath of the object type filter parameter.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.HierarchyParameter">
            <summary>
            The filter parameter class for parametric hierarchical criteria.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HierarchyParameter.#ctor(Ingr.SP3D.Common.Middle.HierarchyTypes)">
            <summary>
            Constructor with the type of the hierarchy type parameter.
            </summary>
            <param name="eHierType">HierarchyTypes</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchyParameter.HierObjCollection">
            <summary>
            Collection of BusinessObjects included in a hierarchy filter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HierarchyParameter.HierObjType">
            <summary>
            HierarchyType; example: System, Assembly, WBS, etc.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyParameter">
            <summary>
            The filter parameter class for parametric property criteria.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PropertyParameter.#ctor(System.String,Ingr.SP3D.Common.Middle.Services.SP3DPropType)">
            <summary>
            Constructor with property name and property type specified.
            </summary>
            <param name="strPropName">String value specifying property name.</param>
            <param name="ePropTyp">SP3DPropType specifying PropertyValue type.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyParameter.PropName">
            <summary>
            Name of the property used in defining a property filter. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyParameter.PropValueLow">
            <summary>
            The lower bound PropertyValue of a PropertyValueRange criteria.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyParameter.PropValueHigh">
            <summary>
            The higher bound PropertyValue of a PropertyValueRange criteria.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyParameter.ValueType">
            <summary>
            The type of the property; example: Integer, String, Double, etc. Read-only.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PropertyParameter.PropOperator">
            <summary>
            The property comparison operator; example: EQ, GT, LT, GE, GT, etc.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ReferenceParameter">
            <summary>
            The filter parameter class for parametric References criteria.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ReferenceParameter.#ctor">
            <summary>
            Default reference parameter contructor.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ReferenceParameter.ReferenceFileNames">
            <summary>
            The collection of reference file names.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ReferenceParameter.ForeignReferences">
            <summary>
            The collection of reference file objects.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.RefPlaneParameter">
            <summary>
            The filter parameter class for parametric ReferencePlanes criteria.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RefPlaneParameter.#ctor">
            <summary>
            Default reference plane constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RefPlaneParameter.#ctor(Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane)">
            <summary>
            Constructor used to define a RefPlaneParameter with Top/Bottom, Right/Left, and Front/Back planes.
            </summary>
            <param name="RefPlaneTop">Top plane</param>
            <param name="RefPlaneBottom">Bottom plane</param>
            <param name="RefPlaneRight">Right plane</param>
            <param name="RefPlaneLeft">Left plane</param>
            <param name="RefPlaneFront">Fron plane</param>
            <param name="RefPlaneBack">Back plane</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RefPlaneParameter.RefPlaneTop">
            <summary>
            The top plane.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RefPlaneParameter.RefPlaneBottom">
            <summary>
            The bottom plane.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RefPlaneParameter.RefPlaneRight">
            <summary>
            The right plane.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RefPlaneParameter.RefPlaneLeft">
            <summary>
            The left plane.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RefPlaneParameter.RefPlaneFront">
            <summary>
            The front plane.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RefPlaneParameter.RefPlaneBack">
            <summary>
            The back plane.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ParameterType">
            <summary>
            Enumerator of the filter parameter types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.ObjectType">
            <summary>
            ObjType type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.Property">
            <summary>
            Property type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.Hierarchy">
            <summary>
            Hierarchy type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.Volume_RefPlane">
            <summary>
            Volume by RefPlane type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.Volume_NamedSpace">
            <summary>
            Volume by NamedSpace type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.Reference">
            <summary>
            Reference file type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.PDS_Discipline">
            <summary>
            PDS discipline type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.PDS_LevelString">
            <summary>
            PDS level string type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ParameterType.PDS_Category">
            <summary>
            PDS categoy type
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.HierarchyTypes">
            <summary>
            Hierarchy types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.HierarchyTypes.System">
            <summary>
            System type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.HierarchyTypes.Assembly">
            <summary>
            Assembly type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.HierarchyTypes.WBS">
            <summary>
            WBS type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.HierarchyTypes.Analysis">
            <summary>
            Analysis type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.HierarchyTypes.Space">
            <summary>
            Space type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.HierarchyTypes.PermissionGroup">
            <summary>
            PermissionGroup type
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.HierarchyTypes.Volume_NamedSpace">
            <summary>
            Volume by NamedSpace type
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.QueryLanguage">
            <summary>
            Query language identifier for DBCommand.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.QueryLanguage.SQL">
            <summary>
            SQL type for both SQL Server and Oracle DBs.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PropertyComparisonOperators">
            <summary>
            PropertyData comparision operators.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.EQ">
            <summary>
            Equal operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.NE">
            <summary>
            Not equal operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.GT">
            <summary>
            Greater than operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.LE">
            <summary>
            Less than or equal operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.LT">
            <summary>
            Less than operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.GE">
            <summary>
            Greater than or equal operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.LIKE">
            <summary>
            LIKE operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PropertyComparisonOperators.NOTLIKE">
            <summary>
            NOT LIKE operator
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.VolumeReferencePlaneTypes">
            <summary>
            ReferencePlaneTypes used with VolumeByRefPlanes criteria.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.VolumeReferencePlaneTypes.xmin">
            <summary>
            xmin reference plane type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.VolumeReferencePlaneTypes.ymin">
            <summary>
            ymin reference plane type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.VolumeReferencePlaneTypes.zmin">
            <summary>
            zmin reference plane type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.VolumeReferencePlaneTypes.xmax">
            <summary>
            xmax reference plane type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.VolumeReferencePlaneTypes.ymax">
            <summary>
            ymax reference plane type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.VolumeReferencePlaneTypes.zmax">
            <summary>
            zmax reference plane type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CompoundFilterOperators">
            <summary>
            Logical operators used in combining simple filters.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CompoundFilterOperators.Or">
            <summary>
            Or operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CompoundFilterOperators.And">
            <summary>
            And  operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CompoundFilterOperators.Not">
            <summary>
            Not operator.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CompoundFilterOperators.OpenParen">
            <summary>
            Open parenthesis; must be matched with a CloseParen.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CompoundFilterOperators.CloseParen">
            <summary>
            Close parenthesis; must be matched with a OpenParen.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.OriginOrDestination">
            <summary>
            Indicates the origin or destination side of a relation collection.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.OriginOrDestination.Origin">
            <summary>
            The collection is the origin.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.OriginOrDestination.Destination">
            <summary>
            The collection is the destination.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.RangeValueComparisonOperators">
            <summary>
            Operators for PropertyValue range criteria.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.RangeValueComparisonOperators.Between">
            <summary>
            Between operator
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.RangeValueComparisonOperators.NoBetween">
            <summary>
            Not Between operator
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CrossSectionNotPlanarException">
            <summary>
            Raised when the given cross section is not a planar cross section.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CrossSectionNotPlanarException.#ctor(System.String)">
            <summary>
             Instantiates when the given cross section is not a planar cross section.
            </summary>
            <param name="strMessage"> The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CrossSectionNotPerpendicularToPrimary">
            <summary>
            Raised when the given projection vector is not perpendicular to the given cross section.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CrossSectionNotPerpendicularToPrimary.#ctor(System.String)">
            <summary>
             Instantiates when the given projection vector is not perpendicular to the given cross section.
            </summary>
            <param name="strMessage"> The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.VerticesAreSelfIntersectingException">
            <summary>
            Raised when the given list of vertices are self-intersecting.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.VerticesAreSelfIntersectingException.#ctor(System.String)">
            <summary>
             Instantiates when the given list of vertices are self-intersecting.
            </summary>
            <param name="strMessage"> The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CrossSectionIsNotClosedException">
            <summary>
            Raised when the given cross section is not closed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CrossSectionIsNotClosedException.#ctor(System.String)">
            <summary>
             Instantiates when the given cross section is not closed.
            </summary>
            <param name="strMessage"> The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.AssemblyOutput">
            <summary>
            Class implementation for a single CustomAssembly output object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.IAssemblyOutputInternal">
            <summary>
            Public interface used to bridge the communication between the assembly outputs of
            the custom assembly and the CustomAssemblyWrapper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.IAssemblyOutputInternal.InitializeProperties(System.Int32)">
            <summary>
            Internal functionality - do not use.
            <para>Initializes the assembly output properties.</para>
            </summary>
            <param name="assemblyOutputProperties">Output properties value.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.IAssemblyOutputInternal.AddNotificationDescription(System.Int32,System.String,System.Boolean)">
            <summary>
            Internal functionality - do not use.
            <para>Adds a notification interface description to an assembly output.</para>
            </summary>
            <param name="index">Index value.</param>
            <param name="interfaceId">Interface identifier string.</param>
            <param name="isOutputInterface">Indicates whether it is an output interface.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.IAssemblyOutputInternal.GetNotificationDescriptions(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Internal functionality - do not use.
            <para>Returns the the interface notification descriptions for the Custom Assembly output.</para>
            </summary>
            <param name="indicies">List indexes.</param>
            <param name="interfaceIds">List interface strings.</param>
            <param name="interfaceOutputs">Indicates the List interface outputs.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.IAssemblyOutputInternal.RelationshipClsid">
            <summary>
            Internal functionality - do not use.
            <para>Gets or sets the output relationshsip GUID (Assemblymembers_R or
            AssemblyMembes_1R relation).</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.IAssemblyOutputInternal.Properties">
            <summary>
            Internal functionality - do not use.
            <para>Returns properties of the assembly output.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.IAssemblyOutputInternal.OutputPrivate">
            <summary>
            Internal functionality - do not use.
            <para>Sets the geometric output on the assembly output object.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.System#IDisposable#Dispose">
            <summary>
            Method to release internal held pointers
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.Delete">
            <summary>
            Deletes the current assembly output object (i.e, for removing an output when it
            is no longer needed).
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.Output">
            <summary>
            Returns and sets the geometric assembly output. Returns nothing if the output was removed
            or has not been created. Check the "HasBeenDeletedByUser" property to determine if the output
            should be re-generated or was intentionally deleted by the user.
            <para><b>Note:</b>This property cannot be set to nothing. Call the Delete method to remove an
            output.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyCannotSetOutputToNullException">Provided assembly output cannot be a null object (to remove an object use the Delete method.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyOutputAlreadyExistsException">Assembly output already exists. To replace an existing output, call the Delete method on the output first.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNonPersistentOutputException">Provided assembly output must be a persistent object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyOutputRemovedByUserException">Output was intentionally delete by the user so re-assigning a new output is not allowed without first acknowledging that the user's intent is being overriden by resetting the "HasBeenDeletedByUser" property first.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.Name">
            <summary>
            Returns the read-only name of the assembly output.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.Index">
            <summary>
            Returns the read-only unique assembly output index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.CanDeleteIndependently">
            <summary>
            Declares that the assembly output can be removed by the interactive user
            independently from the parent CustomAssembly. 
            <para>By default, the interactive user cannot
            remove an output unless the entire CustomAssembly is deleted.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.HasBeenDeletedByUser">
            <summary>
            Returns whether the user deleted the output of the CustomAssembly.
            It is only possible to delete an output (without deleting the parent
            CustomAssembly itself) when the CanDeleteIndependently property is True.
            Setting this property to true allows the creator of the Custom Assembly
            to resurrect an output that the user deleted.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutput.Ingr#SP3D#Common#Middle#Services#IAssemblyOutputInternal#RelationshipClsid">
            <summary>
            Internal interface used to communicate with the CustomAssemblyWrapper.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.AssemblyOutputs">
            <summary>
            Class implementation for a variable CustomAssembly output (i.e., collection of similar outputs).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.AssemblyOutputs.#ctor(Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition,System.String,System.Int32,System.Boolean)">
            <summary>
            Internal constructor to create an AssemblyOutputs collection object.
            </summary>
            <param name="AssemblyDefinition"></param>
            <param name="AssemblyOutputName"></param>
            <param name="AssemblyIndex"></param>
            <param name="enableDisplaySemantic"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.AssemblyOutputs.System#IDisposable#Dispose">
            <summary>
            Method to release internal held pointers
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutputs.Name">
            <summary>
            Returns the read-only name of the assembly output collection.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutputs.Index">
            <summary>
            Returns the read-only unique assembly output index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutputs.Ingr#SP3D#Common#Middle#Services#IAssemblyOutputInternal#RelationshipClsid">
            <summary>
            Internal interface used to communicate with the CustomAssemblyWrapper.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SP3DProject">
            <summary>
            Corresponds to an EFW project. NOT IMPLEMENTED IN INITIAL RELEASE!
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SurfaceHelper">
            <summary>
            Helper class to implement ISurface.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Initializes a new instance of the SurfaceHelper class with the supplied named BusinessObject.
            </summary>
            <param name="surface">Surface object as BusinessObject.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IJSurface interface is not supported by given business object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.GetCOMBO">
            <summary>
            Gets COM object for entity BusinessObject.
            </summary>
            <returns>COM object of entity BusinessObject as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.IsSurface(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Checks if the provided business object input is a surface or not.
            </summary>
            <param name="oBO">Business Object</param>
            <returns>Boolean value indicating whether the object is a surface or not.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.IsPointOn(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Determines whether a given point is on this surface.
            </summary>
            <param name="pos">Point to determine whether on this surface.</param>
            <returns>If True, then the point is on the surface; if False, then the point is not on the surface.</returns>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the IsPointOn method.
            <code>
            Dim bIsPointOn As Boolean = oSurface.IsPointOn(New Position(1.5, 0, 0))
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.ScopeNormal(Ingr.SP3D.Common.Middle.SurfaceScopeType@,Ingr.SP3D.Common.Middle.Vector@)">
            <summary>
            Determines the planarity of the surface and normal.
            </summary>
            <param name="eScope">SurfaceScopeType defining the planarity of the surface.</param>
            <param name="vecNormal">Normal vector.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <example>This is an example of the ScopeNormal method.
            <code>
            Dim eScope As SurfaceScopeType
            Dim oVecNormal As Vector
            oSurface.ScopeNormal(eScope, oVecNormal)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.ProjectPoint(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a point on the surface along vector from given point.
            </summary>
            <param name="pos">Position in which to project to curve.</param>
            <param name="vecProj">Vector to project along. Optional argument, if null,
                                  then the function projects along vector normal to curve.</param>
            <returns>Position - projected point.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the ProjectPoint method.
            <code>
            Dim oPos As New Position(1, 1, 0)
            Dim oVecProj As New Vector(0, 0, 1)
            Dim oProjectPoint As Position = oSurface.ProjectPoint(oPos, oVecProj)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.ProjectPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Finds a point on the surface along normal vector from the given point.
            </summary>
            <param name="pos">Position in which to project to curve.</param>
            <returns>Position - projected point.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the ProjectPoint method.
            <code>
            Dim oPos As New Position(1, 1, 0)
            Dim oProjectPoint As Position = oSurface.ProjectPoint(oPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.OutwardNormalAtPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            This method finds the outward normal at a given point.
            </summary>
            <param name="pos">Position in which to find the outward normal.</param>
            <returns>Vector - outward normal.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the OutwardNormalAtPoint method.
            <code>
            Dim oPos As New Position(1, 1, 0)
            Dim oOutwardNormal As Vector = oSurface.OutwardNormalAtPoint(oPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.DistanceBetween(Ingr.SP3D.Common.Middle.Point3d,System.Double@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            This method determines the distance between this surface and an input point.
            </summary>
            <param name="point3d">Input point.</param>
            <param name="minDist">Output minimum distance.</param>
            <param name="posSrcPos">Point at minimum distance on this surface.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of DistanceBetween method.
            <code>
            Dim oPoint3d As New Point3d(1.5, 0, 0)
            Dim dDist As Double
            Dim posSrcPos As Position
            oSurface.DistanceBetween(oPoint3d, dDist, posSrcPos)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.DistanceBetween(Ingr.SP3D.Common.Middle.ICurve,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and an input curve.
            </summary>
            <param name="inCurve">Input curve.</param>
            <param name="dist">Output minimum distance.</param>
            <param name="posSrcPos">Point at minimum distance on this surface.</param>
            <param name="posInPos">Point at minimum distance on input curve.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of DistanceBetween method.
            <code>
            Dim dDist As Double
            Dim posSrcPos, posInPos As Position
            oSurface.DistanceBetween(oInCurve, dDist, posSrcPos, posInPos)
            </code>
            </example>    
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.DistanceBetween(Ingr.SP3D.Common.Middle.ISurface,System.Double@,Ingr.SP3D.Common.Middle.Position@,Ingr.SP3D.Common.Middle.Position@)">
            <summary>
            Finds the distance between this surface and an input surface.
            </summary>
            <param name="inSurface">Input surface.</param>
            <param name="dist">Output minimum distance.</param>
            <param name="posSrcPos">Point at minimum distance on this surface.</param>
            <param name="posInPos">Point at minimum distance on input surface.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the DistanceBetween method.
            <code>
            Dim dDist As Double 
            Dim oPosSrcPos, oPosInPos As Position 
            oSurface.DistanceBetween(oInSurface, dDist, oPosSrcPos, oPosInPos)
            </code>
            </example>           
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.Intersect(Ingr.SP3D.Common.Middle.ICurve,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            This method finds the intersection between this surface and an input curve.
            </summary>
            <param name="inCurve">Input curve.</param>
            <param name="colCurves">Output collection of curves.  
                                    Note that this could be a collection of Point3d objects.</param>
            <param name="eIntersectCode">GeometryIntersectionType describing type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the Intersect method.
            <code>
            Dim eIntersectCode As GeometryIntersectionType
            Dim colCurves As Collection(Of BusinessObject) = Nothing
            oSurface.Intersect(oInCurve, colCurves, eIntersectCode)
            </code>
            </example>           
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.Intersect(Ingr.SP3D.Common.Middle.ISurface,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve}@,Ingr.SP3D.Common.Middle.GeometryIntersectionType@)">
            <summary>
            Intersects this surface and input surface.
            </summary>
            <param name="inSurface">Input surface.</param>
            <param name="colCurves">Output collection of curves
                                    Note that this could be a collection of Point3D objects.</param>
            <param name="eIntersectCode">GeometryIntersectionType describing type of intersection.</param>
            <exception cref="T:System.ArgumentNullException">Exception if arguments are null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the Intersect method.
            <code>
            Dim eIntersectCode As GeometryIntersectionType
            Dim colCurves As Collection(Of ICurve) = Nothing
            oSurface.Intersect(oInSurface, colCurves, eIntersectCode)
            </code>
            </example>    
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.Centroid(Ingr.SP3D.Common.Middle.Line3d,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position}@)">
            <summary>
            Finds one or more centroids of this surface.
            </summary>
            <param name="line">Optional. If given, it helps locate which centroid to return.</param>
            <param name="colCentroids">Multiple centroids are returned only when a projection can be broken.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the Centroid method.
            <code>
            oSurface.Centroid(oLine, colCentroids)
            </code>
            </example>    
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.LocatedCentroids(Ingr.SP3D.Common.Middle.Line3d)">
            <summary>
            Finds the centroids of the surface faces.  Surface will be broken into separate surface/faces and the input line will 
            locate which faces are desired to have the centroid returned.  If more than one face is located, then centroids will 
            be ordered with regard to the face which is closest to line root point.  Note: That only the projection surface is working for this method.
            </summary>
            <param name="oLine">Line input for locating the centroids. </param>
            <returns>The collection of Position objects.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.Centroids">
            <summary>
            Finds one or more centroids of the surface.
            For a projection surface it breaks into faces and returns all centroids.
            </summary>
            <returns>All centroid positions.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SurfaceHelper.Centroid">
            <summary>
            Finds the Centroid of the surface.
            </summary>
            <returns>The position of the centroid.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SurfaceHelper.uForm">
            <summary>
            Gets the closure of the surface in U-direction.
            </summary>
            <returns>Enumerated value of this surface closure.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SurfaceHelper.vForm">
            <summary>
            Gets the closure of the surface in V-direction.
            </summary>
            <returns>Enumerated value of this surface closure.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">SurfaceHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Input">
            <summary>
            Base class for the symbol input classes which aids in the construction of
            a symbol input.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Input.m_nIndex">
            <summary>
            Index
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Input.m_sName">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Input.m_sDescription">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Input.m_eInputType">
            <summary>
            Input type.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Input.m_bOptionalInput">
            <summary>
            Optional Input
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Input.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Input constructor.
            </summary>
            <param name="index">Index value.</param>
            <param name="name">Name of input.</param>
            <param name="description">Description of input.</param>
            <param name="optional">Whether optional.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Input.Index">
            <summary>
            Gets or sets the symbol parameter input index.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Input.Name">
            <summary>
            Gets or sets the symbol parameter input name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Input.Description">
            <summary>
            Gets or sets the symbol input parameter description.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Input.Type">
            <summary>
            Returns the symbol input type (i.e., Double, Sting, Object, or CatalogPart)
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Input.Optional">
            <summary>
            Returns a boolean indicating whether the input is optional.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputDouble">
             <summary>
             InputDouble class used to declare double input parameter field variables in a CustomSymbolDefinition
             class. These field variables must be preceded by the InputDoubleAttribute to declare the name and
             description of the parameter input. With this defining attribute, the declared field variable is
             automatically constructed and will be populated with the current parameter data to include its
             current value.
             </summary>
             <example> This is an example of using InputDouble to declare a double input parameter with its defining InputDoubleAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 <![CDATA[<]]>InputDouble(2, "ImpellerWidth", "Impeller Width", 0.3)<![CDATA[>]]> _
                     Public m_dblImpellerWidth As InputDouble
            
                 Protected Overrides Sub ConstructOutputs()
                     ' local variable will have the current value of the impeller width input parameter
                      Dim impellerWidth As Double = m_dblImpellerWidth.Value
                     
                 End Sub
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputDouble.#ctor(System.Int32,System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Constructor for an InputDouble class.
            </summary>
            <param name="index">Symbol parameter index.</param>
            <param name="name">Name of the symbol parameter.</param>
            <param name="description">Description of the symbol parameter.</param>
            <param name="defaultValue">Symbol parameter default double value.</param>
            <param name="optional">Indicates whether the symbol parameter is optional.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputDouble.GetInputInfo(System.Int32@,System.String@,System.String@,System.Double@,System.Boolean@)">
            <summary>
            Returns the symbol parameter object information.
            </summary>
            <param name="index">Symbol parameter index.</param>
            <param name="name">Name of the symbol parameter.</param>
            <param name="description">Description of the symbol parameter.</param>
            <param name="defaultDoubleValue">Symbol parameter default double value.</param>
            <param name="optional">Indicates whether the symbol parameter is optional.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputDouble.DefaultValue">
            <summary>
            Gets or sets default value of the input parameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputDouble.Value">
            <summary>
            Gets or sets the value of the input parameter.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputString">
             <summary>
             InputString class used to declare string input parameter field variables in a CustomSymbolDefinition
             class. These field variables must be preceded by the InputStringAttribute to declare the name and
             description of the parameter input. With this defining attribute, the declared field variable is
             automatically constructed and will be populated with the current parameter data to include its
             current value.
             </summary>
             <example> This is an example of using InputString to declare a string input parameter with its defining InputStringAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 <![CDATA[<]]>InputString(2, "Shape", "Shape", "Rectangle")<![CDATA[>]]> _
                     Public m_sShape As InputString
            
                 Protected Overrides Sub ConstructOutputs()
                     ' local variable will have the current value of the shape input parameter
                      Dim sShape As String = m_sShape.Value
                     
                 End Sub
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputString.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor for InputString to create an InputString parameter using code rather than declaring a field variable.
            </summary>
            <param name="index">Symbol parameter index.</param>
            <param name="name">Name of the symbol parameter.</param>
            <param name="description">Description of the symbol parameter.</param>
            <param name="defaultString">Symbol parameter default string value.</param>
            <param name="optional">Indicates whether the symbol parameter is optional.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputString.GetInputInfo(System.Int32@,System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            Returns the associated string parameter data.
            </summary>
            <param name="index">Symbol parameter index.</param>
            <param name="name">Name of the symbol parameter.</param>
            <param name="description">Description of the symbol parameter.</param>
            <param name="defaultStringValue">Symbol parameter default string value.</param>
            <param name="optional">Indicates whether the symbol parameter is optional.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputString.DefaultString">
            <summary>
            Gets or sets the default value for the parameter input.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputString.Value">
            <summary>
            Gets or sets the current parameter value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputObject">
             <summary>
             InputObject class used to declare object input parameter field variables in a CustomSymbolDefinition
             class. These field variables must be preceded by the InputObjectAttribute to declare the name and
             description of the parameter input. With this defining attribute, the declared field variable is
             automatically constructed and will be populated with the current parameter data to include its
             current value.
             </summary>
             <example> This is an example for using InputObject to declare an object input parameter with its defining InputObjectAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 ' declare an optional object input
                 <![CDATA[<]]>InputObject(2, "MemberPart", "Structural member part", True)<![CDATA[>]]> _
                     Public m_oMemberPart As InputObject
            
                 Protected Overrides Sub ConstructOutputs()
                     ' local variable will have the current input parameter object associated to MemberPart
                      Dim oMemberPart As Object = m_oMemberPart.Value
                     
                 End Sub
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputObject.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Constructor for an InputObject parameter input.
            </summary>
            <param name="index">Symbol parameter index.</param>
            <param name="name">Name of the symbol parameter.</param>
            <param name="description">Description of the symbol parameter.</param>
            <param name="optional">Indicates whether the symbol parameter is optional.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputObject.GetInputInfo(System.Int32@,System.String@,System.String@,System.Boolean@)">
            <summary>
            Returns the parameter information for this object input parameter.
            </summary>
            <param name="index">Symbol parameter index.</param>
            <param name="name">Name of the symbol parameter.</param>
            <param name="description">Description of the symbol parameter.</param>
            <param name="optional">Indicates whether the symbol parameter is optional.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputObject.Value">
            <summary>
            Gets or sets the object parameter value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.InputCatalogPart">
             <summary>
             InputCatalogPart class used to declare the catalog part input parameter field variable
             in a CustomSymbolDefinition class. These field variables must be preceded by the 
             InputCatalogPartAttribute to declare the name and description of the parameter input. 
             With this defining attribute, the declared field variable is automatically constructed
             and will be populated with the current parameter data to include its
             current value.
             </summary>
             <example> This is an example of using InputCatalogPart with its defining InputCatalogPartAttribute.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 <![CDATA[<]]>InputCatalogPart(1)<![CDATA[>]]> _
                     Public m_oCatalogPart As InputCatalogPart
            
                 Protected Overrides Sub ConstructOutputs()
                     ' local variable will have the current calalog part object
                      Dim oCatalogPart As Double = m_oCatalogPart.Value
                     
                 End Sub
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputCatalogPart.#ctor(System.Int32)">
            <summary>
            Constructor for the InputCatalogPart class.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.InputCatalogPart.GetInputInfo(System.Int32@,System.String@,System.String@)">
            <summary>
            Returns the catalog part input parameter information.
            </summary>
            <param name="index">Symbol parameter index.</param>
            <param name="name">Name of the symbol parameter.</param>
            <param name="description">Description of the symbol parameter.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.InputCatalogPart.Value">
            <summary>
            Gets or sets the catalog part value.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Private.CustomSymbolDefinitionHelper">
            <summary>
            Internal public class to bridge the communication between the .Net symbol wrapper and the
            custom symbol definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.CustomSymbolDefinitionHelper.#ctor(System.Object)">
            <summary>
            Custom Symbol definition helper constructor to bridge the communication between the 
            wrapper and CustomSymbolDefintion
            </summary>
            <param name="symbolDefinition"></param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition">
            <summary>
            CustomAssembly base class definition from which all custom user custom assemblies
            must inherit.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition">
             <summary>
             Abstract class from which all .NET symbols derive to provide the basic symbol behavior.
             In most cases you should not inherit directly from this class but should use the Smart 3D
             application-specific definition which provides extended behavior to interact with the
             existing client.
             
             A class inheriting from this should have three basic sections: declaration of inputs;
             declaration of aspects and outputs; and the implementation of the symbol within the overridden
             ConstructOutputs method.
             </summary>
             <example> This is an example of using CustomSymbolDefinition.
             <code>
             
                 Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
             
             #Region "Definition of Inputs"
             
                     <![CDATA[<]]>InputCatalogPart(1)<![CDATA[>]]> _
                         Public m_oCatalogPart As InputCatalogPart
                     <![CDATA[<]]>InputDouble(2, "PierRadius", "Pier Radius", 1)<![CDATA[>]]> _
                         Public m_dPierRadius As InputDouble
                    <![CDATA[<]]>InputDouble(3, "PierHeight", "Pier Height", 1)<![CDATA[>]]> _
                         Public m_dPierHeight As InputDouble
             
             #End Region
             
             #Region "Definition of Aspects and their outputs"
             
                     'SimplePhysical Aspect
                     <![CDATA[<]]>SymbolOutput("Pier", "Pier Geometry")<![CDATA[>]]> _
                     <![CDATA[<]]>Aspect("SimplePhysical", "Simple Physical Aspect", AspectID.SimplePhysical)<![CDATA[>]]> _
                         Public m_oSimplePhysicalAspect As AspectDefinition
             
             #End Region
             
             #Region "Construction of outputs of all aspects"
             
                     Protected Overrides Sub ConstructOutputs()
                         '========================================
                         ' Construction of Simple Physical Aspect
                         '========================================
                         Dim oNormalVector As Vector = New Vector(0.0, 0.0, 1.0)
                         Dim oConnection As SP3DConnection = OccurrenceConnection
                         Dim oCircle As Circle3d = New Circle3d(New Position(0, 0, 0), oNormalVector, m_dPierRadius.Value)
                         Dim oProjection3d As Projection3d = New Projection3d(oConnection, oCircle, oNormalVector, m_dPierHeight.Value, True)
             
                         'Adding the created geomerty to the SimplePhysical aspect  
                         m_oSimplePhysicalAspect.Outputs("Pier") = oProjection3d
             
                     End Sub
             
             #End Region
             
                 End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.#ctor">
            <summary>
            Default constructor for the CustomSymbolDefinition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.ConstructOutputs">
            <summary>
            Implemented by the final inheriting concrete class which constructs
            the symbol outputs for all aspects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.AddOutputObject(System.String,System.String,System.Object)">
            <summary>
            An advanced developer method which adds output objects to the symbol output collection.
            Overriding this method is not recommended and you should delegate the implementation to
            this method if overridden.
            </summary>
            <param name="repName">Representation name.</param>
            <param name="outputName">Symbol output name.</param>
            <param name="outputObj">Symbol output object associated to the provided name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.IncreaseAspectDefArraySize">
            <summary>
            Increases size of AspectDefArray ( probably the array needs to be
            replaced by a collection ).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.IncreaseOutputDefArraySize">
            <summary>
            Increases size of OutputDefintion Array ( probably the array needs to be
            replaced by a collection ).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.AddOutputsToOutputCollection(System.String)">
            <summary>
            Output objects in the Symbol Output array will be added to
            output collection object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.ReadInputs">
            <summary>
            Reads input definitions from fields and their attributes of derived symbol.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.ReadAspects">
            <summary>
            Reads aspect definitions from fields and their attributes of derived symbol.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.ReadVariableOutputsAttribute">
            <summary>
            Reads VariableOutputs Attribute defined on a derived class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.LogMiddleError(System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Method to log middle tier error. Currently not being used.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.InstantiateDefinition(System.String,System.Object,System.Object)">
            <summary>
            Methods of  will be used to Instantiate / Initialize the symbol definition.
            InvokeRepresentation is also used to create outputs of each aspect.
            These methods will be called by symbol subsystem.
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.InitializeSymbolDefinition(System.Object@)">
            <summary>
            Initialize symbol definition.
            </summary>
            <param name="oSymbolDef"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.SetInput(System.Reflection.FieldInfo,System.Type,System.Array@)">
            <summary>
            This private method sets the values of the input field.
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.InvokeRepresentation(System.Object,System.String,System.Object,System.Array@)">
            <summary>
            This method gets called when the Symbol machinery is evaluating a Symbol.
            Your implementation should read the inputs, interpret them and generate the outputs for this representation.
            </summary>
            <param name="pSymbolOccurrence"> The Symbol Occurrence which is being evaluated</param>
            <param name="repName"> The Representation being evaluated</param>
            <param name="pOutputColl">The Outputs collection, to which the implementation adds the outputs created</param>
            <param name="arrayOfInputs">The Inputs to the Symbol</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.GetDefinitionName(System.Object)">
            <summary>
            Get Definition Name.
            </summary>
            <param name="definitionParameters">definition Parameters Object</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.SetRepDuringGame(System.Object)">
            <summary>
            Symbol subsystem calls this method during computation of a representation
            and sets current representation. The current representation wiil be used when required.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.SetInputs(System.Array@)">
            <summary>
            Symbol subsystem calls this method.
            Given inputs will be set as values of the input fields.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.DefinitionName">
            <summary>
            Returns the unique definition name for the symbol definition. This returned name
            is unique across all the symbols in the catalog.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CustomSymbolDefinition.OccurrenceConnection">
            <summary>
            Returns the symbol occurrence connection.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal">
            <summary>
            Internal interface to communicate with the private CustomAssembly wrapper.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.Initialize">
            <summary>
            Internal functionality - do not use.
            <para>Initializes the assembly occurrence outputs. Must be
            called after the symbol
            that is set when the Custom Assembly semantic evaluates.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.InputsReplaced(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject},System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject},System.Boolean)">
            <summary>
            Internal functionality - do not use.
            <para>Initiates the custom evaluation method.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.ReadAssemblyOutputs">
            <summary>
            Internal functionality - do not use.
            <para>Reads the assembly output declarations in the custom user code.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.AddNotificationDescription(System.Int32,System.String,System.Boolean)">
            <summary>
            Internal functionality - do not use.
            <para>Adds an interface notification description to the Custom Assembly.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.GetNotificationDescriptions(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Internal functionality - do not use.
            <para>Retrieves the notification descriptions for the Custom Assembly.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.OnPreLoad(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor})">
            <summary>
            Internal functionality - do not use.
            OnPreLoad gets called immediately before the properties are loaded in the property page control. 
            Its default implementation calls the simpler IsPropertyReadOnly method, which allows the developer
            to set a property read-only on an individual basis. However, in cases where the entire context of properties
            is needed then override this method instead.
            </summary>
            <param name="businessObject">Occurrence or member output business object.</param>
            <param name="colAllDisplayedValues">Read-only collection of all properties displayed in the property page control.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.OnPropertyChange(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor},Ingr.SP3D.Common.Middle.Services.PropertyDescriptor,Ingr.SP3D.Common.Middle.PropertyValue,System.String@)">
            <summary>
            Internal functionality - do not use.
            OnPropertyChange is called each time a property is modified. Any custom validation should be
            done here. Its default implementation calls the IsPropertyValid method, which provides
            the validation of the properties on an individual basis. However, if a developer requires the 
            context of all the properties to make this decision then this method should be overridden
            by the developer rather than the simpler IsPropertyValid method.
            </summary>
            <param name="businessObject">Business object symbol or member output.</param>
            <param name="colAllDisplayedValues">Read-only collection of all properties displayed in the property pages control.</param>
            <param name="propertyToChange">Property being modified.</param>
            <param name="newPropertyValue">New property value.</param>
            <param name="errorMessage">Returned error message to post to the user as to why the property is invalid. A non-empty string must be provided when the property is invalid (indicated by the function return value).</param>
            <returns>Returns a boolean indicating if the property value valid.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.CustomAssemblyOccurrence">
            <summary>
            Internal functionality - do not use.
            <para>Sets the Custom Assembly occurrence for the evaluation.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.Outputs">
            <summary>
            Internal functionality - do not use.
            <para>Retrieves the collection of assembly outputs.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ICustomAssemblyInternal.CopyAssemblyOutputBehavior">
            <summary>
            Internal functionality - do not use.
            <para>Gets or sets the assembly output copy behavior.</para>
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.#ctor">
            <summary>
            Public constructor to create a CustomAssembly definition
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.GetDefinitionName(System.Object)">
            <summary>
            Overridden internal interface method which returns the symbol definition name.
            </summary>
            <param name="definitionParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.InitializeSymbolDefinition(System.Object@)">
            <summary>
            Overridden internal interface method which initializes the symbol definition.
            </summary>
            <param name="ppSymbolDefDisp"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.InstantiateDefinition(System.String,System.Object,System.Object)">
            <summary>
            Overridden internal interface method which instatiates the symbol definition.
            </summary>
            <param name="CodeBase"></param>
            <param name="definitionParameters"></param>
            <param name="pResourceMgr"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.InvokeRepresentation(System.Object,System.String,System.Object,System.Array@)">
            <summary>
            Overridden internal interface method which initiates the construction of the symbol outputs.
            </summary>
            <param name="pSymbolOccurrence"></param>
            <param name="pRepName"></param>
            <param name="pOutputColl"></param>
            <param name="arrayOfInputs"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.ReadNotificationAttributes">
            <summary>
            Private method that reads the OutputNotification attributes decorating the 
            custom assembly to construct the appropriate Property descriptors
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.AddAssemblyOutputInterfaceNotification(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Private method to add otuput interface ntification descriptions to an assembly output given a name.
            </summary>
            <param name="Name"></param>
            <param name="DispId"></param>
            <param name="InterfaceId"></param>
            <param name="IsOutputInterface"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.InitializeSymbolInputs">
            <summary>
            Private method to initialize the symbol inputs.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.InterfaceToIID(System.String)">
            <summary>
            Kludge to get the IID of the interface given its name but this is only a fixed set
            </summary>
            <param name="interfaceName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.GenerateDefaultIfNoAspects(System.Object@)">
            <summary>
            Method to generate the default physical aspect when no aspects are declared on the symbol.
            An aspect is required if we expect to invoke the ConstructOutputs on the symbol such that
            a symbol flavor can be generated.
            </summary>
            <param name="symbolDef"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.EvaluateAssembly">
            <summary>
            This method is expected to be overridden by the inheriting class to construct and re-evaluate
            the custom assembly outputs.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.IsPropertyReadOnly(System.String,System.String,System.String)">
            <summary>
            Indicates whether a property is read-only during the pre-load of the property pages.
            Override this method to modify the read-only state of a property
            which is defined in the  metadata as read/write. 
            
            Note: User classes that override the OnPreload method, which provides a context
            of all the properties, results in this method not being invoked.
            The developer has a choice to use this simpiler means of making a property read-only or
            overriding the more complex OnPreLoad method.
            </summary>
            <param name="assemblyOutputName"> Name of the assembly output.</param>
            <param name="interfaceName"> Interface name of the property.</param>
            <param name="propertyName"> Name of the property.</param>
            <returns> A Boolean defining whether read-only.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.IsPropertyValid(System.String,System.String,System.String,System.Object,System.String@)">
            <summary>
            Indicates whether a property is valid during the modification of the property
            within the property pages. Override this method to validate a single property
            without the context of any other modified properties.
            
            Note: User classes that override the OnPropertyChange method, which provides a 
            context of all the properties, results in this method not being invoked.
            The developer has a choice to use this simpiler means of validating a property or
            implementing the more complex OnPropertyChange method.
            </summary>
            <param name="assemblyOutputName"> Name of the assembly output or null string for the parent assembly.</param>
            <param name="interfaceName"> Interface name for the property being validated.</param>
            <param name="propertyName"> Name of the property being validated.</param>
            <param name="propertyValue"> New property value being proposed.</param>
            <param name="errorMessage"> Returned error message for the user to indicate why the property is not valid.</param>
            <returns>Boolean indicating whether the property is valid or not.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.OnPreLoad(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor})">
            <summary>
            OnPreLoad gets called immediately before the properties are loaded in the property page control. 
            Its default implementation calls the simpler IsPropertyReadOnly method, which allows the developer
            to set a property read-only on an individual basis. However, in cases where the entire context of properties
            is needed then override this method instead. By overriding this method the IsPropertyReadOnly method will
            not be invoked.
            </summary>
            <param name="businessObject">Occurrence or member output business object.</param>
            <param name="colAllDisplayedValues">Read-only collection of all properties displayed in the property page control.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.OnPropertyChange(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor},Ingr.SP3D.Common.Middle.Services.PropertyDescriptor,Ingr.SP3D.Common.Middle.PropertyValue,System.String@)">
            <summary>
            OnPropertyChange is called each time a property is modified. Any custom validation should be
            done here. Its default implementation calls the IsPropertyValid method, which provides
            the validation of the properties on an individual basis. However, if a developer requires the 
            context of all the properties to make this decision then this method should be overridden
            by the developer rather than the simpler IsPropertyValid method. By overrididing this method
            the IsPropertyValid method will not be invoked.
            </summary>
            <param name="businessObject">Business object symbol or member output.</param>
            <param name="colAllDisplayedValues">Read-only collection of all properties displayed in the property pages control.</param>
            <param name="propertyToChange">Property being modified.</param>
            <param name="newPropertyValue">New property value.</param>
            <param name="errorMessage">Property validation error message to post to the user.</param>
            <returns>Returns a boolean to indicate if the property is valid. If an invalid property is returned, an error
            message is also required.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.GetAssemblyOutput(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Returns the assembly output given a reference to the business object output.
            </summary>
            <param name="Output">The output business object whose related assembly output is being requested.</param>
            <returns>The assembly output related to the provided business output object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyArgumentException">Null value provided for BusinessObject <i>Output</i> argument.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CustomAssemblyNoAssemblyOutputForBOException">No AssemblyOutput exists for the provided BusinessObject.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.Ingr#SP3D#Common#Middle#Services#ICustomAssemblyInternal#OnPreLoad(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor})">
            <summary>
            OnPreLoad gets called immediately before the properties are loaded in the property page control. 
            Its default implementation calls the simpler IsPropertyReadOnly method, which allows the developer
            to set a property read-only on an individual basis. However, in cases where the entire context of properties
            is needed then override this method instead.
            </summary>
            <param name="businessObject">Occurrence or member output business object.</param>
            <param name="colAllDisplayedValues">Read-only collection of all properties displayed in the property page control.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.Ingr#SP3D#Common#Middle#Services#ICustomAssemblyInternal#OnPropertyChange(Ingr.SP3D.Common.Middle.BusinessObject,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.Services.PropertyDescriptor},Ingr.SP3D.Common.Middle.Services.PropertyDescriptor,Ingr.SP3D.Common.Middle.PropertyValue,System.String@)">
            <summary>
            Implemntation of the internal OnPropertyChange method which is called each time a property
            is modified. 
            </summary>
            <param name="businessObject">Business object symbol or member output.</param>
            <param name="colAllDisplayedValues">Read-only collection of all properties displayed in the property pages control.</param>
            <param name="propertyToChange">Property being modified.</param>
            <param name="newPropertyValue">New property value.</param>
            <param name="errorMessage">Returned error message.</param>
            <returns>Returns a boolaean to idnciate if the property is valid.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.OccurrenceConnection">
            <summary>
            Accesses the read-only connection associated to the symbol occurrence.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.CustomAssemblyDefinition.Occurrence">
            <summary>
            Returns the read-only CustomAssembly occurrence for the S3D business
            object instance.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.BOToElementConverter">
            <summary>
            Converter collection to convert a collection of BusinessObjects to IMSCoreCollections.IJElements.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.#ctor">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOToElementConverter class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.#ctor(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOToElementConverter 
            class with a collection of BusinessObjects.
            </summary>
            <param name="oBusinessObjects">Systems.Collections.ObjectModel.Collection of BusinessObjects.</param>
            <exception cref="T:System.ArgumentNullException">oBusinessObjects is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.Add(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds an object to the end of Ingr.SP3D.Common.Middle.Services.BOToElementConverter.
            </summary>
            <param name="oBusinessObject">The Ingr.SP3D.Common.Middle.BusinessObject to be added 
            at the end of Ingr.SP3D.Common.Middle.Services.BOToElementConverter collection.</param>
            <exception cref="T:System.ArgumentNullException">oBusinessObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.Clear">
            <summary>
            Clears or removes all items from Ingr.SP3D.Common.Middle.Services.BOToElementConverter collection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.RemoveAt(System.Int32)">
            <summary>
            Removes the Ingr.SP3D.Common.Middle.Services.BOToElementConverter item at the specified index.
            </summary>
            <param name="iIndex">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">iIndex is not a valid index in the Ingr.SP3D.Common.Middle.Services.BOToElementConverter.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.Count">
            <summary>
            Gets the number of elements contained in Ingr.SP3D.Common.Middle.Services.BOToElementConverter collection.
            </summary>
            <returns>The number of elements contained in Ingr.SP3D.Common.Middle.Services.BOToElementConverter collection.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.Elements">
            <summary>
            Gets IMSCoreCollections.IJElements.
            </summary>
            <returns>IMSCoreCollections.IJElements as System.Object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJElementsException">Failed to create IJElements collection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJElementsAddException">Failed to add an object to IJElements collection.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOToElementConverter.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="iIndex">The zero-based index of the element to get.</param>
            <returns>The element at the specified index as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">iIndex is not a valid index in the Ingr.SP3D.Common.Middle.Services.BOToElementConverter.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ElementToBOConverter">
            <summary>
            Converter collection to convert IMSCoreCollections.IJElements to a collection of BusinessObjects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ElementToBOConverter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of Ingr.SP3D.Common.Middle.Services.ElementToBOConverter class 
            with IMSCoreCollections.IJElements.
            </summary>
            <param name="oIJElements">IMSCoreCollections.IJElements as System.Object is wrapped by the new collection.</param>
            <exception cref="T:System.ArgumentNullException">oIJElements is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.ElementToBOConverter.GetBOs">
            <summary>
            Gets a read-only collection of BusinessObjects for each of the elements in 
            IMSCoreCollections.IJElements used in the constructor.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of BusinessObjects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">ResourceManager on IJDObject returned null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ElementToBOConverter.Count">
            <summary>
            Gets the number of elements contained in the IMSCoreCollections.IJElements.
            </summary>
            <returns>The number of elements contained in the IMSCoreCollections.IJElements.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ElementToBOConverter.Elements">
            <summary>
            Gets IMSCoreCollections.IJElements.
            </summary>
            <returns>IMSCoreCollections.IJElements as System.Object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ElementToBOConverter.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="iIndex">The zero-based index of the element to get.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">iIndex is not a valid index in the IMSCoreCollections.IJElements.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">ResourceManager on IJDObject returned null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomGetSystemMonikerException">Failed to get SystemMoniker from IJDPom interface.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter">
            <summary>
            Converter collection to convert a collection of BusinessObjects to IMSCoreCollections.IJDObjectCollection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.#ctor">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.#ctor(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter 
            class with a collection of BusinessObjects.
            </summary>
            <param name="oBusinessObjects">System.Collections.ObjectModel.Collection of BusinessObjects.</param>
            <exception cref="T:System.ArgumentNullException">oBusinessObjects is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.Add(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds an object to the end of Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.
            </summary>
            <param name="oBusinessObject">The Ingr.SP3D.Common.Middle.BusinessObject to be added 
            at the end of Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter collection.</param>
            <exception cref="T:System.ArgumentNullException">oBusinessObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.Clear">
            <summary>
            Clears or removes all items from Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter collection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.RemoveAt(System.Int32)">
            <summary>
            Removes the Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter item at the specified index.
            </summary>
            <param name="iIndex">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">iIndex is not a valid index in Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter collection.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.Count">
            <summary>
            Gets the number of JDObjects contained in Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter collection.
            </summary>
            <returns>The number of JDObjects contained in Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter collection.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.JObjects">
            <summary>
            Gets IMSCoreCollections.IJDObjectCollection.
            </summary>
            <returns>IMSCoreCollections.IJDObjectCollection as System.Object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectCollectionAddException">Failed to add an object to IJDObjectCollection.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter.Item(System.Int32)">
            <summary>
            Gets the BusinessObject at the specified index.
            </summary>
            <param name="iIndex">The zero-based index of the BusinessObject to get.</param>
            <returns>The Ingr.SP3D.Common.Middle.BusinessObject at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">iIndex is not a valid index in Ingr.SP3D.Common.Middle.Services.BOToJObjectConverter collection.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.JObjectToBOConverter">
            <summary>
            Converter collection to convert a collection of IMSCoreCollections.IJDObjectCollection to 
            a collection of BusinessObjects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.JObjectToBOConverter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of Ingr.SP3D.Common.Middle.Services.JObjectToBOConverter class 
            with IMSCoreCollections.IJDObjectCollection.
            </summary>
            <param name="oIJDObjectCollection">IMSCoreCollections.IJDObjectCollection as System.Object is wrapped by 
            the new collection.</param>
            <exception cref="T:System.ArgumentNullException">oIJDObjectCollection is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.JObjectToBOConverter.GetBOs">
            <summary>
            Gets a read-only collection of BusinessObjects for each of the JObjects in 
            IMSCoreCollections.IJDObjectCollection used in the constructor.
            </summary>
            <returns>System.Collections.ObjectModel.ReadOnlyCollection of BusinessObjects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">ResourceManager on IJDObject returned null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.JObjectToBOConverter.Count">
            <summary>
            Gets the number of JObjects contained in IMSCoreCollections.IJDObjectCollection.
            </summary>
            <returns>The number of JObjects contained in IMSCoreCollections.IJDObjectCollection 
            as System.long.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.JObjectToBOConverter.JObjects">
            <summary>
            Gets IMSCoreCollections.IJDObjectCollection.
            </summary>
            <returns>IMSCoreCollections.IJDObjectCollection as System.Object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.JObjectToBOConverter.Item(System.Int32)">
            <summary>
            Gets the BusinessObject at the specified index.
            </summary>
            <param name="iIndex">The one-based index of the JObject to get.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">iIndex is not a valid index in IMSCoreCollections.IJDObjectCollection.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">ResourceManager on IJDObject returned null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomGetSystemMonikerException">Failed to get SystemMoniker from IJDPom interface.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJElementsException">
            <summary>
            This exception is thrown when a COM exception occurs creating IMSCoreCollections.IJElements collection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJElementsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnIJElementsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJElementsAddException">
            <summary>
            This exception is thrown when a COM exception occurs calling IMSCoreCollections.IJElements.Add method.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJElementsAddException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnIJElementsAddException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPomGetSystemMonikerException">
            <summary>
            This exception is thrown when a COM exception occurs calling IJDPom.get_SystemMoniker.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPomGetSystemMonikerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnPomGetSystemMonikerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectCollectionAddException">
            <summary>
            This exception is thrown when a COM exception occurs calling 
            IMSCoreCollections.IJDObjectCollection.Add.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJDObjectCollectionAddException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnIJDObjectCollectionAddException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGenericUtilPutObjectMonikerException">
            <summary>
            This exception is thrown when a COM exception occurs calling 
            CmnAppGenericUtils.PutObjectMoniker.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGenericUtilPutObjectMonikerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnGenericUtilPutObjectMonikerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters">
            <summary>
            COM converters class to convert BusinessObject to IMSEntitySupport.IJDObject and vice-versa.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertBOToCOMBO(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Converts BusinessObject into a COM business object.
            </summary>
            <param name="oBusinessObject">Ingr.SP3D.Common.Middle.BusinessObject.</param>
            <returns>A COM business object that is IMSEntitySupport.IJDObject as System.object.</returns>
            <exception cref="T:System.ArgumentNullException">oBusinessObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertCOMBOToBO(System.Object)">
            <summary>
            Converts an IMSEntitySupport.IJDObject to BusinessObject.
            </summary>
            <param name="oJObject">COM business object (IJDObject) as System.object.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:System.ArgumentNullException">oJObject is null.</exception>
            <exception cref="T:System.ArgumentException">oJObject is not IJDObject.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseIDFromIJDPomException">Failed to get databaseID from IJDPom.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMapFileNotFoundException">Map file (S3DAPIClassMap.dat) not found or user has no read access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidMapEntriesException">One or more entries in S3DAPIClassMap.dat are invalid.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertSOMMathToCOM(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Converts .NET Math.Vector object to an equivalent COM Vector object.
            </summary>
            <param name="oVector">.NET Math.Vector object.</param>
            <returns>AutoMath.DVector</returns>
            <exception cref="T:System.ArgumentNullException">oVector is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertSOMMathToCOM(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Converts .NET Position object to an equivalent COM Position object.
            </summary>
            <param name="oPosition">.NET Math.Position object.</param>
            <returns>AutoMath.DPosition</returns>
            <exception cref="T:System.ArgumentNullException">oPosition is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertSOMMathToCOM(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Converts .NET Math.Matrix4X4 Object to an equivalent COM DT4x4 object.
            </summary>
            <param name="oMatrix4x4">.NET Math.Matrix4X4 object.</param>
            <returns>AutoMath.DT4x4</returns>
            <exception cref="T:System.ArgumentNullException">oMatrix4x4 is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertCOMVectorToVector(System.Object)">
            <summary>
            Converts COM Vector object to an equivalent .NET Math.Vector object.
            </summary>
            <param name="oVector">AutoMath.DVector</param>
            <returns>Vector</returns>
            <exception cref="T:System.ArgumentNullException">oVector is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertCOMPositionToPosition(System.Object)">
            <summary>
            Converts COM Position object to an equivalent .NET Math.Position object.
            </summary>
            <param name="oPosition">AutoMath.DPosition</param>
            <returns>Position</returns>
            <exception cref="T:System.ArgumentNullException">oPosition is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.COMConverters.ConvertCOMMatrix4X4ToMatrix4X4(System.Object)">
            <summary>
            Converts COM DT4x4 object to an equivalent .NET Math.Matrix4X4 object.
            </summary>
            <param name="oMatrix4x4">AutoMath.DT4x4</param>
            <returns>Matrix4X4</returns>
            <exception cref="T:System.ArgumentNullException">oMatrix4x4 is null.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities">
            <summary>
            Middle utilities class for internal use only.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetBusinessObjectForMoniker(RESPOMLib.IMoniker)">
            <summary>
            Gets BusinessObject for IMoniker.
            </summary>
            <param name="oIMoniker">RESPOMLib.IMoniker.</param>
            <returns>Ingr.SP3D.Common.Middle.BusinessObject.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetMonikerForBusinessObject(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Gets IMoniker for BusinessObject.
            </summary>
            <param name="oBusinessObject">Ingr.SP3D.Common.Middle.BusinessObject.</param>
            <returns>RESPOMLib.IMoniker.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetProxySourceClsid(PROXYLib.IJDProxy)">
            <summary>
            Gets clsid of source object for proxy.
            </summary>
            <param name="oIJDProxy">Proxy object as ProxyLib.IJDProxy.</param>
            <returns>proxy source clsid as System.string.</returns>
            <exception cref="T:System.ArgumentNullException">oIJProxy is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoProxySourceObjectException">Failed to bind proxy source.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIPersistGetClassIdException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetProxySourceClsid(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Gets clsid of source object for proxy of PrivateBusinessObject.
            </summary>
            <param name="oPrivateBusinessObject">Ingr.SP3D.Common.Middle.PrivateBusinessObject.</param>
            <returns>proxy source clsid as System.string when PrivateBusinessObject.IsProxy is true; otherwise returns a blank string.</returns>
            <exception cref="T:System.ArgumentNullException">oPrivateBusinessObject is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.TrimExtension(System.String)">
            <summary>
            Removes extension for assembly names that are not full names and don't contain path information.
            </summary>
            <param name="sAssemblyName">AssemblyName as System.string.</param>
            <returns>System.string.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetActivePlant">
            <summary>
            Gets the active plant.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.Plant.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnActiveSiteNullException">No active site. Site is not initialized.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnActivePlantNullException">No active plant. Plant is not initialized.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetSiteDBProviderNameFromRegistry">
            <summary>
            Gets site DB provider name from registry.
            </summary>
            <returns>System.string.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingRegistryKeyException">Missing registry key.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetSiteNameFromRegistry(System.String@)">
            <summary>
            Gets site name from registry.
            </summary>
            <returns>System.string.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingRegistryKeyException">Missing registry key.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetSiteSchemaNameFromRegistry">
            <summary>
            Gets site schema name from registry.
            </summary>
            <returns>System.string.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnMissingRegistryKeyException">Missing registry key.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetSP3DConnectionFromResourceManager(System.Object)">
            <summary>
            Gets SP3DConnection from ResourceManager(RespomLib.IJDPOM).
            </summary>
            <param name="oResourceManager">ResourceManager(RespomLib.IJDPOM)</param>
            <returns>Ingr.SP3D.Common.Middle.Services.SP3DConnection.</returns>
            <exception cref="T:System.ArgumentNullException">oResourceManager is null.</exception>
            <exception cref="T:System.ArgumentException">oResourceManager is not RESPOMLib.IJDPOM.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDatabaseIDFromIJDPomException">Failed to get databaseID from IJDPom.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.GetResourceManagerFromSP3DConnection(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Gets ResourceManager(RespomLib.IJDPOM).
            </summary>
            <param name="oSP3DConnection">SP3DConnection</param>
            <returns>ResourceManager(RespomLib.IJDPOM) as an object.</returns>
            <exception cref="T:System.ArgumentNullException">oSP3DConnection is null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.MiddleUtilities.SetNamedObject(Ingr.SP3D.Common.Middle.BusinessObject,System.String)">
            <summary>
            Assigns a unique name to a Business object.
            </summary>
            <param name="oBusObj">BusinessObject</param>
            <param name="sName">object name</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnGenericUtilPutObjectMonikerException">Failed to add name to an object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnTransientObjectException">Invalid argument - Cann't assign name to transient object.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Link">
            <summary>
             A link is use to access an instance of a relationship. A Link has a set of properties, 
             and connects two objects: an origin object, and a destination object. 
             Each Link conforms to a particular relationship type. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Link.Target">
            <summary>
            Returns the Target BusinessObject.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Link.Name">
            <summary>
            Returns the Link name.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.RelationCollection">
            <summary>
            Manages the objects in a relationship, either on the Origin or the Destination side.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RelationCollection.SetRelationshipInfo(Ingr.SP3D.Common.Middle.Services.RelationshipInformation)">
            <summary>
            Internal method to allow setting realtionship info reference.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RelationCollection.SetSide(Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination)">
            <summary>
            Internal method to allow specificying origin or destination.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RelationCollection.SetSource(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Internal method to allow specificying Source BO.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RelationCollection.GetProxiesForRelatedObjects(IMSEntitySupport.IJDObject)">
            <summary>
            Gets related objects of proxy source object as proxies (using class data).
            </summary>
            <param name="oProxySourceIJDObject">Proxy source that has be used to navigate the relationship.</param>
            <returns>Collection of business objects that are proxies.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.RelationCollection.GetTargetBOMonikers(IMSEntitySupport.IJDObject)">
            <summary>
            Gets target BOMonikers for the specified source IJDObject using class data.
            </summary>
            <param name="oSourceIJDObject">Source IJDObject.</param>
            <returns>BOMonikers.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RelationCollection.RelationshipInfo">
            <summary>
            The relationship description for this set of connections.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RelationCollection.Side">
            <summary>
            Which side of the relationship this connection object is maintaining.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RelationCollection.Links">
            <summary>
             A list of Links (relationship Instance).
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException"></exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RelationCollection.TargetObjects">
            <summary>
            The list of objects in this role.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException"></exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.RelationCollection.Source">
            <summary>
            Source BusinessObject to which this RelationshipCollection is attached.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipEnumerationFailedException">
            <summary>
            This exception is raised if Relationship access failed.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnRelationshipEnumerationFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnRelationshipEnumerationFailedException class. 
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException">
            <summary>
            This exception is raised if Relationship is not found .
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoSuchRelationshipFoundException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoSuchRelationshipFoundException class. 
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipInsertFailedException">
            <summary>
            This exception is raised if Relationship Insert failed. Insert Adds a relationship between the 
            source object containing this collection of relationships and the given target object. 
            This method could only be used when the origin side of the relationship supports ordering.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnRelationshipInsertFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnRelationshipInsertFailedException class. 
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnObjectsNotWithinSameDBException">
            <summary>
            This exception is raised when DBContainment flag on relation metadata is 
            WITHIN_DB and a relation is being created between objects belonging to different databases. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnObjectsNotWithinSameDBException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnObjectsNotWithinSameDBException class. 
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipAddfailedException">
            <summary>
            This exception is raised when while adding a relationship failed. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnRelationshipAddfailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnRelationshipAddfailedException class. 
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnRelationshipRemovefailedException">
            <summary>
            This exception is raised when Remove Relationship failed. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnRelationshipRemovefailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnRelationshipRemovefailedException class.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnRoleNameException">
            <summary>
            This exception is raised when the role name provided does not match the origin or destination
            rolenames of a relationship.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnRoleNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnRoleNameException class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Private.RelationshipManagementHelper">
            <summary>
             A helper class which will be exposed to private namespace such that only AppDeveloper could 
             use it to manage relationship. It takes an BusinessObj(BOBase) and calls it's internal relationship mgmt methods.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.RelationshipManagementHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
             Constructor to get the Relationship Mgmt helper .
            </summary>
            <param name="oBOB"> BusinessObject's whose relationship will be modified.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.RelationshipManagementHelper.AddToRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,System.String,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds to relationship.
            </summary>
            <param name="oRelationshipInfo">RelationshipInformation.</param>
            <param name="iOrigOrDest">OriginOrDestination.</param>
            <param name="sLinkName">Link name.</param>
            <param name="boBase">BusinessObject.</param>
            <returns>Returns RelationCollection object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.RelationshipManagementHelper.AddToRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.Int32,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds to relationship.
            </summary>
            <param name="oRelationshipInfo">RelationshipInformation.</param>
            <param name="iIndex">Index.</param>
            <param name="boBase">BusinessObject,</param>
            <returns>Returns RelationCollection object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.RelationshipManagementHelper.RemoveFromRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,Ingr.SP3D.Common.Middle.Services.RelationshipInformation.OriginOrDestination,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes from relationship.
            </summary>
            <param name="oRelationshipInfo">RelationshipInformation.</param>
            <param name="iOrigOrDest">OriginOrDestination.</param>
            <param name="boBase">BusinessObject</param>
            <returns>int.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Private.RelationshipManagementHelper.RemoveFromRelationshipInternal(Ingr.SP3D.Common.Middle.Services.RelationshipInformation,System.Int32)">
            <summary>
            Removes from relationship.
            </summary>
            <param name="oRelationshipInfo">RelationshipInformation.</param>
            <param name="iIndex">Index.</param>
            <returns>int.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AllowableSpecsHelper">
            <summary>
            Class AllowableSpecsHelper is the helper class for adding to,
            removing from, replacing, resetting, and getting the specifications
            assigned to a business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor for the AllowableSpecs helper class.
            </summary>
            <param name="oSystem">Business Object whose allowable 
            specifications are to be manipulated.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.Finalize">
            <summary>
            Destructor for the AllowableSpecs helper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.AddAllowableSpec(Ingr.SP3D.Common.Middle.SpecificationBase)">
            <summary>
            Adds a specification to the collection of specifications assigned
            to the business object.
            </summary>
            <param name="oSpecification">Specification object to be added.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectException">Failed to cast COM object to IJDObject.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.RemoveAllowableSpec(Ingr.SP3D.Common.Middle.SpecificationBase)">
            <summary>
            Removes a specification from the collection of specifications assigned
            to a business object.
            </summary>
            <param name="oSpecification">Specification object to be removed.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.ReplaceAllowableSpecs(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.SpecificationBase})">
            <summary>
            Replaces the collection of specification objects assigned to a business
            object with a different collection.
            </summary>
            <param name="oSpecifications">Collection of specification objects to
            be assigned to the business object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.ResetToParentSpecs">
            <summary>
            Resets the collection of specification objects assigned to the business
            object such that when complete, the specifications assigned will be the
            same as those assigned to the parent of the business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.VerifyParentSpecs(Ingr.SP3D.Common.Middle.ISystem,Ingr.SP3D.Common.Middle.SpecificationBase)">
            <summary>
            Private method that verifies that a specification is assigned to the parent of
            the current system.  If a specification is assigned to a system it must also
            be assigned to each of the systems above it in the system hierarchy.  This
            method recursively does that.
            </summary>
            <param name="oSystem">System whose parent is to be checked.</param>
            <param name="oSpecification">Specification to be assigned.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AllowableSpecsHelper.AllowableSpecs">
            <summary>
            Gets the collection of specifications assigned to a business object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddAllowableSpecException">
            <summary>
            Failed to add allowable specification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddAllowableSpecException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToAddAllowableSpecException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddAllowableSpecException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToAddAllowableSpecException class
            with the message for the resource ID and default string.
            </summary>
            <param name="iErrNo">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToRemoveAllowableSpecException">
            <summary>
            Failed to remove allowable specification.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToRemoveAllowableSpecException.#ctor(System.Runtime.InteropServices.COMException)">
             <summary>
            Initializes a new instance of the CmnFailToRemoveAllowableSpecException class with a reference to the inner
             COMException that is the cause of this exception. 
             </summary>
             <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToRemoveAllowableSpecException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToRemoveAllowableSpecException class
            with the message for the resource ID and default string.
            </summary>
            <param name="iErrNo">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAllowableSpecsException">
            <summary>
            Failed to get allowable specifications.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAllowableSpecsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetAllowableSpecsException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAllowableSpecsException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetAllowableSpecsException class
            with the message for the resource ID and default string.
            </summary>
            <param name="iErrNo">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToReplaceAllowableSpecsException">
            <summary>
            Failed to replace allowable specifications.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToReplaceAllowableSpecsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToReplaceAllowableSpecsException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">CmnFailToReplaceAllowableSpecsException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToReplaceAllowableSpecsException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToReplaceAllowableSpecsException class
            with the message for the resource ID and default string.
            </summary>
            <param name="iErrNo">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToResetAllowableSpecsException">
            <summary>
            Failed to reset to specifications of parent system.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToResetAllowableSpecsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToResetAllowableSpecsException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToResetAllowableSpecsException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToResetAllowableSpecsException class
            with the message for the resource ID and default string.
            </summary>
            <param name="iErrNo">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string to be used if ResourceID is not found at runtime.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AnalysisHierarchyHelper">
            <summary>
            Conglomerated by the .NET BusinessObject to implement the analysis hierarchy membership.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AnalysisHierarchyHelper.GetCOMBO">
            <summary>
            Gets COM object for entity BusinessObject.
            </summary>
            <returns>COM object of entity BusinessObject as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">Raised when AnalysisHierarchyHelper is in invalid state, as the reference to the business object has been lost.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AnalysisHierarchyHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor used by conglomerating .NET BusinessObject.
            </summary>
            <param name="analysisObject">Analysis object as BusinessObject.</param>
            <exception cref="T:System.ArgumentNullException">Raised when null argument passed in.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IJAnalysisParent or IJAnalysisChild interface is not supported by given business object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.AnalysisHierarchyHelper.AddAnalysisChild(Ingr.SP3D.Common.Middle.IAnalysisChild)">
            <summary>
            Adds the object as child object to this parent.
            </summary>
            <param name="analysisChild">The analysis child.</param>
            <exception cref="T:System.ArgumentNullException">Raised when null argument passed in.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when the base object does not implement valid analysis hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Raised when the child passed in is not of the appropriate type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Raised when the user has no access.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddAnalysisChildException">Raised when failed to add a analysis hierarchy child.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
            <example>This is an example of the AddAnalysisChild method.
            <code>
            'assign proper analysis parent and child object.
            Dim analysisChild As IAnalysisChild = Nothing
            Dim analysisParent As IAnalysisParent = Nothing
            
            analysisParent.AddAnalysisChild(analysisChild)
            </code>
            </example>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AnalysisHierarchyHelper.AnalysisParent">
            <summary>
            Read-only property to get the analysis parent of the analysis child object.
            It will return nothing if there is no analysis parent found for the analysis child object.  
            </summary>
            <exception cref="T:System.InvalidOperationException">Raised when the base object does not implement valid analysis hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisParentException">Raised when failed to return the analysis hierarchy parent.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.AnalysisHierarchyHelper.AnalysisChildren">
            <summary>
            Returns the collection of analysis children of the parent object. 
            An empty collection will be returned if there are no children for the parent object.
            </summary>
            <exception cref="T:System.InvalidOperationException">Raised when the base object does not implement valid analysis hierarchy.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisChildrenException">Raised when failed to get the analysis hierarchy children.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisChildrenException">
            <summary>
            Failed to get the analysis hierarchy children.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisChildrenException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetAnalysisChildrenException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisChildrenException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetAnalysisChildrenException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddAnalysisChildException">
            <summary>
            Failed to add a analysis hierarchy child.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddAnalysisChildException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToAddAnalysisChildException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddAnalysisChildException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToAddAnalysisChildException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisParentException">
            <summary>
            Failed to return the analysis hierarchy parent of a business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisParentException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetAnalysisParentException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetAnalysisParentException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetAnalysisParentException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.RuleVersionAttribute">
            <summary>
            Attribute decorating a rule class to define a rule class's version number. This attribute
            will be accessed during model re-synchronization to determine whether a rule needs to be
            re-evaluated as a result of a change to the rule code.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.RuleVersionAttribute.#ctor(System.String)">
            <summary>
            Instantiates a new rule version attribute.
            </summary>
            <param name="ruleVersionNumber">Rule version number string.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.RuleVersionAttribute.Version">
            <summary>
            Returns the rule version number.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Matrix4X4">
             <summary>
             Matrix4X4 is the object equivalent to a COM DT4x4 object.
             This is a column major matrix.
             <para>Rotation is stored in elements ([0],[1],[2]) ([4],[5],[6]) ([8],[9],[10]).</para>
             <para>Translation is stored in elements [12],[13],[14].</para>
             </summary>
             <example> 
             <code>
             Public Class Matrix4x4
               Public Sub New()
            
                Dim dtol As Double = 0.00001
            
                'Create an identity matrix.
                Dim oMatrix As New Matrix4X4()
                If IsIdentity(oMatrix) Then
                    System.Diagnostics.Debug.Print("Tested identity constructor.")
                End If
            
                'Create a new matrix from a double array.
                Dim dblArr As Double() = New Double(15) {1, 0, 0, 0, 0, 1, _
                0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
                Dim bIsReadOnly As Boolean
                bIsReadOnly = False
                Dim oMatrix1 As New Matrix4X4(dblArr, bIsReadOnly)
            
                'Create the Matrix4x4 using an existing Matrix4x4 as input. 
                Dim oMatrixCopy As Matrix4X4
                oMatrixCopy = New Matrix4X4(oMatrix)    'Create a copy of oMatrix.
            
                'Get the array of doubles from the matrix.
                Dim arrMatrix As Array = oMatrix.[Get]()
            
                'Get the double array.
                Dim dblMatrix As Double() = New Double(15) {}
                oMatrix.[Get](dblMatrix)
            
                'Set the matrix value at an index.
                oMatrix1.SetIndexValue(0, 100)  'Set the first element in double array or [0,0] in the matrix [i,j]
            
                'Get the matrix value at an index.
                Dim dblVal As Double
                dblVal = oMatrix1.GetIndexValue(0) 'Get the first element in double array or [0,0] in the matrix [i,j].
            
                'Check if two matrices are unequal.
                Dim bAreMatricesEqual As Boolean
                bAreMatricesEqual = oMatrix <![CDATA[<>]]> oMatrix1
            
                'Check if two matrices are equal.
                bAreMatricesEqual = oMatrix = oMatrix1
            
                'Check if a matrix is identical to another matrix.
                If oMatrix.Equals(oMatrixCopy) Then
                    System.Diagnostics.Debug.Print("We are indentical.")
                End If
            
                'Get the hashcode of a matrix.
                Dim iHashCode As Integer = oMatrix.GetHashCode()
            
                'Create the matrix inverse.
                oMatrix.Invert()
            
                'Multiply a matrix by another matrix.
                oMatrix.MultiplyMatrix(oMatrix1)
            
                'Rotate a matrix.
                oMatrix.Rotate(-0.5236, New Vector(1, 0, 0))    'Rotate -30 deg about X-axis. 
            
                'Transform a vector by the matrix.
                Dim oVec As New Vector(0, 0, 1) 'Z-vector.
                Dim oVecRot As Vector = oMatrix.Transform(oVec)
            
                'Transform a position by the matrix.
                Dim oPos As New Position(0, 0, 1)
                Dim oPosRot As Position = oMatrix.Transform(oPos)
            
                'Scale a matrix.
                oMatrix.Scale(2)          'Scale by a factor of 2.
            
                'Get the current scale factor.
                Dim iScale As Double = oMatrix.ScaleFactor
            
                'Set the matrix to indentity.
                oMatrix1.SetIdentity()
                If IsIdentity(oMatrix1) Then
                    System.Diagnostics.Debug.Print("Tested SetIdentity.")
                End If
            
                'Translate a matrix by a vector.
                oMatrix1.Translate(New Vector(100, 200, 300))   'Translate by (100, 200, 300).
            
                'Set the matrix to another matrix.
                oMatrix.[Set](dblArr)
            
                'Set the array to a matrix.
                oMatrix1.[Set](arrMatrix)
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.#ctor">
            <summary>
            Constructs a Matrix4X4 object and sets the identity matrix on it. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.#ctor(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Constructs a Matrix4X4 object and initializes to input Matrix4X4.
            </summary>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.#ctor(System.Double[],System.Boolean)">
            <summary>
            Constructs an immutable Matrix4X4 object and initializes with pMatrix.
            </summary>
            <param name="pMatrix">Input set of sixteen doubles.</param>
            <param name="bReadOnly">Ability to make the class immutable.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Set(System.Double[])">
            <summary>
            Sets the column-major matrix elements by an array of sixteen double values.
            </summary>
            <param name="pMatrix">The standard 3x3 rotation matrix is defined by pMatrix values(0-2,4-6,8-10). 
            The translation components are defined by pMatrix values (12-14). 
            The shear components are defined by pMatrix values (3,7,11). 
            The Weight value is defined by value (15). </param>
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Set(System.Array@)">
            <summary>
            Sets the matrix elements with values from the input SAFEARRAY.
            </summary>
            <param name="pMatrix">Input array.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Get(System.Double[]@)">
            <summary>
            Gets the matrix definition by a column-major array of sixteen double values.
            </summary>
            <param name="pMatrix">Returns a Double array. A standard 3x3 rotation matrix is defined by pMatrix values(0-2,4-6,8-10). 
            The translation components are defined by pMatrix values(12-14). 
            The shear components are defined by pMatrix values(3,7,11). 
            The Weight value is defined by value(15). </param>
            <returns>double array</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Get">
            <summary>
            Gets the matrix elements as an output in System.Array format.
            </summary>
            <returns>System.Array</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.SetIdentity">
            <summary>
            Sets the matrix to the identity matrix: no rotation, scaling or translation.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Rotate(System.Double,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Rotates the matrix by the input angle in radians about the input axis vector.
            </summary>
            <param name="angle">Angle to be rotated.</param>
            <param name="pVec">Input axis vector.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Rotate(System.Double,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Rotates the matrix by the input angle in radians about the input axis vector with original at given Center.
            </summary>
            <param name="angle">Angle to be rotated.</param>
            <param name="pVec">Input axis vector.</param>
            <param name="pCen">Input center point.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Scale(System.Double)">
            <summary>
            Scales the matrix by the input scale value.
            </summary>
            <param name="scale">Scale value as a Double.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.MultiplyMatrix(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Multiplies the matrix with input matrix.
            </summary>
            <param name="pMatrix">Input Matrix4X4.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.GetIndexValue(System.Int32)">
            <summary>
            Gets the matrix element values by index.
            </summary>
            <param name="index">Index of the element.</param>
            <returns>Element at the given index.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.SetIndexValue(System.Int32,System.Double)">
            <summary>
            Sets the matrix element values by index.
            </summary>
            <param name="index">Index of the element.</param>
            <param name="pValue">Value of the element.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Transform(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns a vector transformed by the matrix.
            </summary>
            <param name="pVec">The input Vector to be transformed.</param>
            <returns>Transformed Vector</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Transform(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Returns a position transformed by the matrix.
            </summary>
            <param name="pPos">The input Position to be transformed.</param>
            <returns>Transformed Position</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Translate(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Applies a vector translation to the matrix. 
            </summary>
            <param name="pTrans">Translation vector.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">Cannot change a read-only matrix.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.Equals(System.Object)">
            <summary>
            Function which overrides the business object and checks if two matrices are equal.
            </summary>
            <param name="obj">object</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.GetHashCode">
            <summary>
            Provided when we override the Equals method.
            </summary>
            <returns>Summing the diagonals and adding the translation.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.op_Inequality(Ingr.SP3D.Common.Middle.Matrix4X4,Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Returns whether two matrices are not equal.
            </summary>
            <param name="lhs">Left-hand side of !=.</param>
            <param name="rhs">Right-hand side of !=.</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.op_Equality(Ingr.SP3D.Common.Middle.Matrix4X4,Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Returns whether two matrices are equal in value.
            </summary>
            <param name="lhs">Left-hand side of ==.</param>
            <param name="rhs">Right-hand side of ==.</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Matrix4X4.MakeOrthogonal">
            <summary>
            Makes the rotation part of the 4x4 matrix exactly orthogonal.  The rotation part of the matrix 
            has to be <i>almost</i> orthogonal to begin with.
            </summary>
            <returns>Matrix4X4</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Matrix4X4.ScaleFactor">
            <summary>
            Gets the scale factor of the matrix - i.e., the length a vector will change.
            <para>This algorithm only handles rigid body type transforms.</para>
            </summary>
            <returns>Scale factor</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception">
            <summary>
            Raised if an attempt is made to set a value on a read-only matrix.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnReadOnlyMatrix4X4Exception.#ctor">
            <summary>
            Initializes a new instance of the CmnReadOnlyMatrix4X4Exception class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PlaneHelper">
            <summary>
            Helper class to implement IPlane.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IPlane">
            <summary>
            Default interface definition for IPlane.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the sphere.
            </summary>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="i">Integer</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the sphere.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="i">Integer</param>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries.
            This removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IPlane.AddHole(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a hole to one or more existing boundaries.
            </summary>
            <param name="iCS">Complex string defining a hole.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPlane.RootPoint">
            <summary>
            Gets or sets the root point.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPlane.Normal">
            <summary>
            Gets or sets the plane normal.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPlane.UDirection">
            <summary>
            Gets or sets the plane U-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPlane.VDirection">
            <summary>
            Gets or sets the V-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPlane.Reversed">
            <summary>
            Gets or sets the Reversed property.  Get reverses the V-direction of the plane.
            Normally (Reversed=False) the V-direction is determined by the normal X U-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IPlane.BoundaryCount">
            <summary>
            Returns the number of boundaries.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Initializes a new instance of the PlaneHelper class with the supplied named BusinessObject.
            </summary>
            <param name="plane">Plane object as BusinessObject.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">IJPlane interface is not supported by given business object.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.GetCOMBO">
            <summary>
            Gets COM object for entity BusinessObject.
            </summary>
            <returns>COM object of entity BusinessObject as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.IsPlane(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Checks if the provided business object input is a plane or not.
            </summary>
            <param name="oBO">Business Object</param>
            <returns>Boolean value indicating whether the object is a plane or not.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the plane.
            </summary>
            <param name="complexString">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the AddBoundary method.
            <code>
            oPlane.AddBoundary(oCS)
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="i">Integer</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the RemoveBoundary method.
            <code>
            oPlane.RemoveBoundary(1)
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the plane.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the RemoveAllBoundaries method.
            <code>
            oPlane.RemoveAllBoundaries()
            </code>
            </example>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="complexString">Output boundary.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the GetBoundary method.
            <code>
            Dim oCS As ComplexString3d
            oPlane.GetBoundary(1, oCS)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            <para>Note: This method is not adding a boundary, but replacing the boundary which is at index i.</para>
            </summary>
            <param name="i">Integer</param>
            <param name="complexString">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the SetBoundary method.
            <code>
            oPlane.SetBoundary(1, oCS)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colComplexString">Collection of ComplexString3d objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the GetBoundaries method.
            <code>
            oPlane.GetBoundaries(colComplexString)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries and removes any previous boundaries.
            </summary>
            <param name="colComplexString">Collection of ComplexString3d objects.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the SetBoundaries method.
            <code>
            oPlane.SetBoundaries(oCS)
            </code>
            </example> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PlaneHelper.AddHole(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a hole to one or more existing boundaries.
            </summary>
            <param name="complexString">ComplexString3d defining a hole.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
            <example>This is an example of the AddHole method.
            <code>
            oPlane.AddHole(oCS)
            </code>
            </example>         
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PlaneHelper.RootPoint">
            <summary>
            Gets or sets the root point.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PlaneHelper.Normal">
            <summary>
            Gets or sets the plane normal.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PlaneHelper.UDirection">
            <summary>
            Gets or sets the plane U-direction.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PlaneHelper.VDirection">
            <summary>
            Gets the V-direction.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PlaneHelper.Reversed">
            <summary>
            Gets or sets the Reversed property. Get reverses the V-direction of the plane.
            Normally (Reversed=False) the V-direction is determined by the normal X U-direction.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PlaneHelper.BoundaryCount">
            <summary>
            Returns the number of boundaries.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHelperInvalidStateException">PlaneHelper is in invalid state as the reference to the business object has been lost.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Plane3d">
             <summary>
             Class definition for Plane3d.
             </summary>
             <example> This is an example for Plane3d methods and properties.
             <code>
             Public Class Plane3d
               Public Sub New()
                
                 ' Create a Plane3d object using a collection of points.
                 ' Create a collection of positions to be used later. 
                 Dim pos1 As Position, pos2 As Position, pos3 As Position
                 pos1 = New Position(0, 0, 0)
                 pos2 = New Position(10, 0, 0)
                 pos3 = New Position(10, 10, 0)
            
                 Dim oCollPos As New Collection(Of Position)()
                 oCollPos.Add(pos1)
                 oCollPos.Add(pos2)
                 oCollPos.Add(pos3)
            
                 ' The points are not closed, so this should create an infinite plane. 
                 Dim oPlane3d As New Plane3d(oCollPos)
            
                 ' Create a plane using a complex string. 
                 Dim oComplexString3d As ComplexString3d
                 Dim oPlane3dComplexString As Plane3d
                 Dim oBoundaryColl As Collection(Of ComplexString3d)
                 oBoundaryColl = Nothing
                 oPlane3d.GetBoundaries(oBoundaryColl)   'Get the complex string from the boundary collection of an existing plane.
                 oComplexString3d = oBoundaryColl(0)     'Get the first complex string from the boundary collection.
            
                 oPlane3dComplexString = New Plane3d(oComplexString3d)
            
                 ' Create a plane using point and vector. 
                 Dim oPosPt As New Position(10, 10, 10)
                 Dim oVecNorm As New Vector(0, 0, 1)         'Normal along the Z-axis. 
            
                 Dim oPlane3dPtVec As New Plane3d(oPosPt, oVecNorm)
            
                 ' Create the Plane3d object using an existing Plane3d object as input. 
                 Dim oPlane3dCopy As Plane3d
                 oPlane3dCopy = New Plane3d(oPlane3d)      'Create a copy of oPlane3d.
            
                 ' Create a connection to the model database.
                 Dim oConn As SP3DConnection = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 Dim oPlane3dConn As New Plane3d(oConn, oCollPos)
            
                 ' Create a plane using a complex string. 
                 Dim oPlane3dComplexStringConn As New Plane3d(oConn, oComplexString3d)
            
                 ' Create a plane using point and vector. 
                 Dim oPlane3dPtVecConn As New Plane3d(oConn, oPosPt, oVecNorm)
            
                 ' Check the boundary count of a plane.
                 Dim iBoundaryCount As Integer
                 iBoundaryCount = oPlane3d.BoundaryCount
            
                 ' Get the collection of boundaries from a plane. 
                 Dim oBoundaryColl1 As Collection(Of ComplexString3d)
                 oBoundaryColl1 = Nothing
                 oPlane3d.GetBoundaries(oBoundaryColl1)
            
                 ' Set the normal on a plane.
                 oVecNorm.X = 1            ' Modify the vector direction. 
                 oPlane3dPtVec.Normal = oVecNorm
            
                 ' Get the normal for a plane.
                 Dim oVecNormOut As Vector
                 oVecNormOut = oPlane3dPtVec.Normal
            
                 ' Set the root point of the plane.
                 oPosPt.X = 1                ' Modify the position. 
                 oPlane3dPtVec.RootPoint = oPosPt
            
                 ' Get the root point of the plane.
                 Dim oRootPt As Position
                 oRootPt = oPlane3dPtVec.RootPoint
            
                 ' Get the reversed (V-direction) property. 
                 Dim bIsReversed As Boolean = oPlane3d.Reversed
            
                 Dim bIsReversedOpp As Boolean   ' Reverse the Reversed property.
                 If bIsReversed = True Then
                     bIsReversedOpp = False
                 Else
                     bIsReversedOpp = True
                 End If
                 ' Set the opposite reversed (V-direction) direction. 
                 oPlane3d.Reversed = bIsReversedOpp
            
                 ' Get the V-direction of the plane.
                 Dim oVecV As Vector = oPlane3d.VDirection
            
                 ' Set the U-direction for the plane.
                 Dim oVecU As New Vector(-1, 0, 0)   ' X-direction vector is the U-direction.
                 oPlane3d.UDirection = oVecU
            
                 ' Get the U-direction on the plane.
                 Dim oVecUOut As Vector = oPlane3d.UDirection
            
                 ' Get the range box of the plane.
                 Dim oRangeBox As RangeBox = oPlane3d.Range
                 Dim oLowPos As Position = oRangeBox.Low
                 Dim oHighPos As Position = oRangeBox.High
            
                 ' Check whether the plane is identical to another plane.
                 If oPlane3d.Equals(oPlane3dCopy) Then
                     System.Diagnostics.Debug.Print("We are identical.")
                 End If
            
                 ' Add a boundary to an existing plane.
                 oPlane3dPtVec.AddBoundary(oComplexString3d)
            
                 ' Adding a hole (internal boundary) in the plane.
                 Dim pos11 As New Position(5, 5, 0)
                 Dim pos12 As New Position(7.5, 5, 0)
                 Dim pos13 As New Position(7.5, 7.5, 0)
                 Dim oCollCurves As New Collection(Of ICurve)()
                 oCollCurves.Add(New Line3d(pos11, pos12))
                 oCollCurves.Add(New Line3d(pos12, pos13))
                 oCollCurves.Add(New Line3d(pos13, pos11))
                 Dim oComplexString3dHole As New ComplexString3d(oCollCurves)    ' ComplexString3d for the hole boundary.
                 oPlane3dPtVec.AddHole(oComplexString3dHole)
            
                 ' Get the boundary of the plane at a given index.
                 Dim oComplexString3dOut As ComplexString3d
                 oComplexString3dOut = Nothing
                 oPlane3dPtVec.GetBoundary(1, oComplexString3dOut)   ' Get the first boundary.
            
                 ' Remove the boundary at an index.
                 oPlane3dPtVec.RemoveBoundary(2)   ‘ Remove the 2nd boundary (the inner boundary).
            
                 ' Remove all boundaries.
                 oPlane3dPtVec.RemoveAllBoundaries()
            
                 ' Set the boundary by replacing the existing boundary. 
                 oPlane3d.SetBoundary(1, oComplexString3dHole)
            
                 Dim oCollComplexString3D As New Collection(Of ComplexString3d)()
                 oCollComplexString3D.Add(oComplexString3d)
                 oCollComplexString3D.Add(oComplexString3dHole)
            
                 oPlane3dPtVec.SetBoundaries(oCollComplexString3D)
            
                 ' Redefine Plane3d by a collection of positions.
                 Dim oCollPosHole As New Collection(Of Position)()
                 oCollPosHole.Add(pos11)
                 oCollPosHole.Add(pos12)
                 oCollPosHole.Add(pos13)
                 oPlane3dCopy.DefineByPoints(oCollPosHole)
            
                 ' Redefine by complex string.
                 oPlane3dComplexString.DefineByOuterBdry(oComplexString3dHole)
            
                 ' Redefine by point and vector. 
                 oPlane3dComplexString.DefineByPointNormal(pos11, oVecNorm)
            
                 ' Set a plane to another plane.
                 oPlane3d.[Set](oPlane3dComplexString)
            
                 ' Transform a plane.
                 Dim oMatrix As New Matrix4X4()
                 oMatrix.SetIndexValue(12, 100)  ' Set the X-translation component of the matrix to 100.
                 ' Translate by 100.
                 oPlane3d.Transform(oMatrix)
            
                End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Plane3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(Ingr.SP3D.Common.Middle.Plane3d)">
            <summary>
            Constructor used to copy an existing Plane3d.
            </summary>
            <param name="oPlane">A Plane3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oPlane cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position})">
            <summary>
            Constructor used to create a persistent Plane3d by a set of points.
            These points define the boundary of the plane.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="colPts">Input set of points.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colPts cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position})">
            <summary>
            Constructor used to create a transient Plane3d by a set of points.
            These points define the boundary of the plane.
            </summary>
            <param name="colPts">Input collection of points.</param>
            <exception cref="T:System.ArgumentNullException">colPts cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Constructor used to create an infinite persistent plane by a point and normal.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posPt">Point</param>
            <param name="vecNorm">Normal vector.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posPt cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Constructor used to create an infinite transient plane by a point and normal.
            </summary>
            <param name="posPt">Point</param>
            <param name="vecNorm">Normal</param>
            <exception cref="T:System.ArgumentNullException">posPt cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Constructor which creates a persistent plane given a complex string.
            The complex string will be the boundary of the plane.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="iCS">Input ComplexString3d.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.#ctor(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Constructor which creates a transient plane given a complex string.
            The complex string will be the boundary of the plane.
            </summary>
            <param name="iCS">Input ComplexString3d.</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create plane.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.Set(Ingr.SP3D.Common.Middle.Plane3d)">
            <summary>
            Sets this plane equal to an existing plane.
            </summary>
            <param name="oPlane3d">Existing Plane3d.</param>
            <exception cref="T:System.ArgumentNullException">oPlane3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.DefineByPoints(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position})">
            <summary>
            Redefines the plane with a new set of points.
            </summary>
            <param name="colPoints">Input collection of points.</param>
            <exception cref="T:System.ArgumentNullException">colPoints cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByPoints exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.DefineByPointNormal(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Redefines the plane as an infinite plane defined by a point and a normal.
            </summary>
            <param name="posPt">Position point.</param>
            <param name="vecNorm">Normal vector.</param>
            <exception cref="T:System.ArgumentNullException">posPt cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByPointNormal exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.DefineByOuterBdry(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Redefines the plane by the input complex string.
            </summary>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByOuterBdry exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the plane.
            </summary>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="i">Integer</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the plane.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            <para>Note: This method is not adding a boundary, but replacing the boundary which is at index i.</para>
            </summary>
            <param name="i">Integer</param>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries 
            and removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.AddHole(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a hole to one or more existing boundaries.
            </summary>
            <param name="iCS">ComplexString3d defining a hole.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this plane by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Plane3d.ConvertPositionArray(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.Position},System.Array@)">
            <summary>
            Private routine to convert routine a collection of positions to System array.
            </summary>
            <param name="colPts">Collection of Position objects.</param>
            <param name="arPoints">System.Array</param>        
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Plane3d.RootPoint">
            <summary>
            Gets or sets the root point.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Plane3d.Normal">
            <summary>
            Gets or sets the plane normal.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Plane3d.UDirection">
            <summary>
            Gets or sets the plane U-direction.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Plane3d.VDirection">
            <summary>
            Gets the V-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Plane3d.Reversed">
            <summary>
            Gets or sets the Reversed property. Get reverses the V-direction of the plane.
            Normally (Reversed=False) the V-direction is determined by the normal X U-direction.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Plane3d.BoundaryCount">
            <summary>
            Returns the number of boundaries.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Plane3d.Range">
            <summary>
            Finds the range box of this plane.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IEllipticalArc">
            <summary>
            Interface definition for IEllipticalArc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.Circumference">
            <summary>
            Gets the circumference.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.MajorRadius">
            <summary>
            Gets or sets the major radius of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.MinorRadius">
            <summary>
            Gets or sets the minor radius of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.MinorMajorRatio">
            <summary>
            Gets or sets the minor major ratio of this elliptical arc.
            <para>MinorMajorRatio is defined by minor radius / major radius.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.StartAngle">
            <summary>
            Gets or sets the starting angle of this elliptical arc.
            The starting angle is measured from the major axis.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.SweepAngle">
            <summary>
            Gets or sets the sweep angle of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.Center">
            <summary>
            Gets or sets the center of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.StartPoint">
            <summary>
            Gets or sets the start point of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.EndPoint">
            <summary>
            Gets or sets the end point of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.Normal">
            <summary>
            Gets or sets the normal of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.MajorAxis">
            <summary>
            Gets or sets the major axis of this elliptical arc.
            <para>Note: This is the UNIT vector and does not contain the length of the
            major radius.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IEllipticalArc.MinorAxis">
            <summary>
            Gets or sets the minor axis of this elliptical arc.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.EllipticalArc3d">
             <summary>
             EllipticalArc3d class definition. 
             </summary>
             <example> This is an example for EllipticalArc3d class methods and properties.
             <code>
             Public Class EllipticalArc3d
               Public Sub New()
            
                 Dim oEllipticalArc As EllipticalArc3d = Nothing
            
                 'Create a 1m radius, 90 degree elliptical arc rotating about 1,0,0. 
                 Dim vZero As New Vector(0, 0, 0)
                 Dim vMajor As New Vector(1, 0, 0)
                 Dim vNorm As New Vector(0, 0, 1)
                 Dim pZero As New Position(0, 0, 0)
                 Dim pTwo As New Position(2, 2, 2)
                 Dim oP1 As New Position(1, 0, 0)
                 Dim oP2 As New Position(0.2929, 0.7071, 0)
                 Dim oP3 As New Position(1, 1, 0)
                 Dim dStartAngle As Double = 0
                 Dim dSweepAngle As Double = 1.5
                 Dim dRatio As Double = 0.5
                 oEllipticalArc = New EllipticalArc3d(oP1, vNorm, vMajor, dRatio, dStartAngle, dSweepAngle)
                 If oEllipticalArc Is Nothing Then
                     SOMUtils.LogResults("Failed to create an EllipticalArc3d.")
            
                 End If
            
                 'Get the center. 
                 Dim pPOS As New Position(0, 0, 0)
                 
                 pPOS = oEllipticalArc.Center
                 If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                     SOMUtils.LogResults("EllipticalArc center not returned.")
            
                 End If
                 Dim pPOS1 As New Position(0, 0, 0)
                 'Set the center. 
                 oEllipticalArc.Center = pPOS1
                 If SOMUtils.AreTheyEqual(oEllipticalArc.Center, pZero) Then
                     oEllipticalArc.Center = pPOS
                 Else
                     SOMUtils.LogResults("EllipticalArc center not returned.")
            
                 End If
            
                 'Get the circumference. 
                 Dim dDBL As Double = 0
                 
                 dDBL = oEllipticalArc.Circumference
                 If dDBL = 0 Then
                     SOMUtils.LogResults("EllipticalArc circumference failed.")
            
                 End If
            
                 'Get the endpoint. 
                 pPOS = New Position(0, 0, 0)
                 
                 pPOS = oEllipticalArc.EndPoint
                 If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                     SOMUtils.LogResults("EllipticalArc endpoint not returned.")
            
                 End If
                 pPOS1 = New Position(1.7071, 0.7071, 0)
                 'Set the endpoint. 
                 oEllipticalArc.MinorMajorRatio = 1
                 oEllipticalArc.EndPoint = pPOS1
                 If SOMUtils.AreTheyEqual(oEllipticalArc.EndPoint, pPOS1) Then
                     oEllipticalArc.MinorMajorRatio = 0.5
                     oEllipticalArc.EndPoint = pPOS
                 Else
                     SOMUtils.LogResults("EllipticalArc endpoint not returned.")
            
                 End If
            
                 'Get the major axis.
                 Dim vVEC As New Vector(0, 0, 0)
                  
                 vVEC = oEllipticalArc.MajorAxis
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("EllipticalArc major axis failed.")
            
                 End If
                 Dim vVEC1 As New Vector(0.7071, 0.7071, 0)
                 'Set the major axis. 
                 oEllipticalArc.MajorAxis = vVEC1
                 If SOMUtils.AreTheyEqual(oEllipticalArc.MajorAxis, vVEC1) Then
                     'Reset to original. 
                     oEllipticalArc.MajorAxis = vVEC
                 Else
                     SOMUtils.LogResults("EllipticalArc major axis set failed.")
            
                 End If
            
                 'Get the major radius.
                 dDBL = 0
                 
                 dDBL = oEllipticalArc.MajorRadius
                 If SOMUtils.AreTheyEqual(dDBL, 0) Then
                     SOMUtils.LogResults("EllipticalArc major radius failed.")
            
                 End If
                 'Set the major radius. 
                 oEllipticalArc.MajorRadius = 1.5
                 If SOMUtils.AreTheyEqual(oEllipticalArc.MajorRadius, 1.5) Then
                     'Reset. 
                     oEllipticalArc.MajorRadius = dDBL
                 Else
                     SOMUtils.LogResults("Setting EllipticalArc major radius failed.")
            
                 End If
            
                 'Get the minor axis.
                 vVEC = New Vector(0, 0, 0)
                 
                 vVEC = oEllipticalArc.MinorAxis
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("EllipticalArc minor axis failed.")
            
                 End If
                 vVEC1 = New Vector(0.7071, 0.7071, 0)
                 'Set the minor axis. 
                 oEllipticalArc.MinorAxis = vVEC1
                 If SOMUtils.AreTheyEqual(oEllipticalArc.MinorAxis, vVEC1) Then
                     'Reset. 
                     oEllipticalArc.MinorAxis = vVEC
                 Else
                     SOMUtils.LogResults("EllipticalArc minor axis set failed.")
            
                 End If
            
                 'Get the minor major ratio. 
                 dDBL = 0
                 
                 dDBL = oEllipticalArc.MinorMajorRatio
                 If dDBL = 0 Then
                     SOMUtils.LogResults("EllipticalArc minor major ratio failed.")
            
                 End If
                 'Switch elliptical arc to a circle. 
                 oEllipticalArc.MinorMajorRatio = 1
                 If oEllipticalArc.MinorMajorRatio <![CDATA[<>]]> 1 Then
                     SOMUtils.LogResults("EllipticalArc minor major ratio failed.")
            
                 End If
                 'Switch back to an elliptical shape. 
                 oEllipticalArc.MinorMajorRatio = 0.5
            
            
                 'Get the minor radius. 
                 dDBL = 0
                  
                 dDBL = oEllipticalArc.MinorRadius
                 If SOMUtils.AreTheyEqual(dDBL, 0) Then
                     SOMUtils.LogResults("EllipticalArc minor radius failed.")
            
                 End If
                 'Set the minor radius.
                 oEllipticalArc.MinorRadius = 1.5
                 If SOMUtils.AreTheyEqual(oEllipticalArc.MinorRadius, 1.5) Then
                     'Reset minor radius. 
                     oEllipticalArc.MinorRadius = dDBL
                 Else
                     SOMUtils.LogResults("Setting EllipticalArc minor radius failed.")
            
                 End If
            
                 'Get the normal. 
                 vVEC = New Vector(0, 0, 0)
                 
                 vVEC = oEllipticalArc.Normal
                 If SOMUtils.AreTheyEqual(vVEC, vZero) Then
                     SOMUtils.LogResults("EllipticalArc normal failed.")
            
                 End If
                 vVEC1 = New Vector(0, 0, -1)
                 'Set the normal. 
                 oEllipticalArc.Normal = vVEC1
                 If SOMUtils.AreTheyEqual(oEllipticalArc.Normal, vVEC1) Then
                     'Reset back to original.
                     oEllipticalArc.Normal = vVEC
                 Else
                     SOMUtils.LogResults("EllipticalArc normal set failed.")
            
                 End If
            
                 'Get the range.
                 Dim rRNG As New RangeBox(oP2, oP2)
                 rRNG = oEllipticalArc.Range
                 If SOMUtils.AreTheyEqual(rRNG.Low, rRNG.High) Then
                     SOMUtils.LogResults("EllipticalArc range failed.")
            
                 End If
            
                 'Get the start angle.
                 dDBL = 1
                  
                 dDBL = oEllipticalArc.StartAngle
                 If SOMUtils.AreTheyEqual(dDBL, 1) Then
                     SOMUtils.LogResults("EllipticalArc start angle failed.")
            
                 End If
                 'Set the start angle. 
                 oEllipticalArc.StartAngle = 0.5
                 If SOMUtils.AreTheyEqual(oEllipticalArc.StartAngle, 0.5) Then
                     'Reset start angle.
                     oEllipticalArc.StartAngle = dDBL
                 Else
                     SOMUtils.LogResults("Setting EllipticalArc start angle failed.")
            
                 End If
            
                 'Get the start point.
                 pPOS = pTwo
                 
                 pPOS = oEllipticalArc.StartPoint
                 If SOMUtils.AreTheyEqual(pPOS, pTwo) Then
                     SOMUtils.LogResults("EllipticalArc start point get failed.")
            
                 End If
                 oEllipticalArc.MinorMajorRatio = 1
                 pPOS1 = New Position(0.2929, 0.7071, 0)
                 'Set the start point. 
                 oEllipticalArc.StartPoint = pPOS1
                 If SOMUtils.AreTheyEqual(oEllipticalArc.StartPoint, pPOS1) Then
                     'Reset back to original.
                     oEllipticalArc.StartPoint = pPOS
                     oEllipticalArc.MinorMajorRatio = 0.5
                 Else
                     SOMUtils.LogResults("EllipticalArc start point set failed.")
            
                 End If
            
                 'Get the sweep angle.
                 dDBL = 0
                  
                 dDBL = oEllipticalArc.SweepAngle
                 If SOMUtils.AreTheyEqual(dDBL, 0) Then
                     SOMUtils.LogResults("EllipticalArc sweep angle failed.")
            
                 End If
                 'Set the sweep angle. 
                 oEllipticalArc.SweepAngle = 0.5
                 If SOMUtils.AreTheyEqual(oEllipticalArc.SweepAngle, 0.5) Then
                     'Reset the sweep angle.
                     oEllipticalArc.SweepAngle = dDBL
                 Else
                     SOMUtils.LogResults("EllipticalArc sweep angle failed.")
            
                 End If
            
                 'Get the transform.
                 Dim mMat4 As New Matrix4X4()
                 mMat4.SetIdentity()
                 vVEC = New Vector(1, 1, 1)
                 mMat4.Translate(vVEC)
                 oEllipticalArc.Transform(mMat4)
                 'Get the start point and check whether it is 0,0,0. 
                 pPOS = pTwo
                 pPOS = oEllipticalArc.Center
                 If SOMUtils.AreTheyEqual(pPOS, pTwo) Then
                     SOMUtils.LogResults("EllipticalArc transform failed.")
            
                 End If
            
                 'Define by center, normal, major axis, and ratio.
                 oP1.[Set](2, 0, 1)
                 oEllipticalArc.DefineByCenterNormalMajAxisRatioAngle(oP1, vNorm, vMajor, dRatio, dStartAngle, dSweepAngle)
                 oP2.[Set](2, 0, 1)
                 'Check the new position. 
                 If Not SOMUtils.AreTheyEqual(oEllipticalArc.Center, oP2) OrElse Not SOMUtils.AreTheyEqual(oEllipticalArc.MajorRadius, 1) Then
                     SOMUtils.LogResults("EllipticalArc center, normal, major axis, and ratio failed.")
            
                 End If
            
                 'Set the elliptical arc.
                 oP1.[Set](1, 1, 0)
                 dDBL = 2
                 Dim oEllipticalArc1 As New EllipticalArc3d(oP1, vNorm, vMajor, dRatio, dStartAngle, dSweepAngle)
                 oEllipticalArc1.[Set](oEllipticalArc)
                 If Not SOMUtils.AreTheyEqual(oEllipticalArc.Center, oEllipticalArc1.Center) OrElse Not SOMUtils.AreTheyEqual(oEllipticalArc.MajorRadius, oEllipticalArc1.MajorRadius) Then
                     SOMUtils.LogResults("EllipticalArc set failed.")
            
                 Else
                     oEllipticalArc1.Delete()
                 End If
            
                 'Test constructors. 
                 oEllipticalArc1 = New EllipticalArc3d(oEllipticalArc)
                 If Not SOMUtils.AreTheyEqual(oEllipticalArc1.Center, oEllipticalArc.Center) OrElse Not SOMUtils.AreTheyEqual(oEllipticalArc1.MajorRadius, oEllipticalArc.MajorRadius) Then
                     SOMUtils.LogResults("Construct elliptical arc from elliptical arc failed.")
            
                 Else
                     oEllipticalArc1.Delete()
                 End If
            
                 oP1.[Set](1, 0, 1)
                 Dim oConn As SP3DConnection
                 dDBL = 1
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 oEllipticalArc1 = New EllipticalArc3d(oConn, oP1, vNorm, vMajor, dRatio, dStartAngle, _
                 dSweepAngle)
                 If Not SOMUtils.AreTheyEqual(oEllipticalArc1.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oEllipticalArc1.MajorRadius, dDBL) Then
                     SOMUtils.LogResults("Construct elliptical arc by connection, center, normal, and radius failed.")
            
                 Else
                     oEllipticalArc1.Delete()
                 End If
            
                 'Delete the original elliptical arc. 
                 oEllipticalArc.Delete()
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArc3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create EllipticalArc3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArc3d.#ctor(Ingr.SP3D.Common.Middle.EllipticalArc3d)">
            <summary>
            Constructor used to copy an existing elliptical arcd3d.
            </summary>
            <param name="oEllipticalArc">An EllipticalArc3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oEllipticalArc cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterNormalMajAxisRatioAngle exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArc3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a persistent elliptical arc given the following input.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posCenter">Elliptical arc center.</param>
            <param name="vecNorm">Normal to the elliptical arc.</param>
            <param name="vecMajorAxis">The major axis of the elliptical arc.
            Note: This vector contains the length of the major radius.</param>
            <param name="dMinorMajorRatio">The minor major ratio, which is minor radius / major radius.</param>
            <param name="dStartAngle">The starting angle, which is measured from the major axis.</param>
            <param name="dSweepAngle">The sweep angle.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecMajorAxis cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterNormalMajAxisRatioAngle exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArc3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a transient elliptical arc given the following input.
            </summary>
            <param name="posCenter">Elliptical arc center.</param>
            <param name="vecNorm">Normal to the elliptical arc.</param>
            <param name="vecMajorAxis">The major axis of the elliptical arc.
            Note: This vector contains the length of the major radius.</param>
            <param name="dMinorMajorRatio">The minor major ratio, which is minor radius / major radius.</param>
            <param name="dStartAngle">The starting angle, which is measured from the major axis.</param>
            <param name="dSweepAngle">The sweep angle.</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecMajorAxis cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCenterNormalMajAxisRatioAngle exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArc3d.Set(Ingr.SP3D.Common.Middle.EllipticalArc3d)">
            <summary>
            Sets this elliptical arc equal to an existing elliptical arc.
            </summary>
            <param name="oEllipticalArc3d">Existing EllipticalArc3d.</param>
            <exception cref="T:System.ArgumentNullException">oEllipticalArc3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArc3d.DefineByCenterNormalMajAxisRatioAngle(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Redefines the elliptical arc by given information.
            </summary>
            <param name="posCenter">Elliptical arc center.</param>
            <param name="vecNorm">Normal to the elliptical arc.</param>
            <param name="vecMajorAxis">The major axis of the elliptical arc.
            Note: This vector contains the length of the major radius.</param>
            <param name="dMinorMajorRatio">The minor major ratio, which is minor radius / major radius.</param>
            <param name="dStartAngle">The starting sngle, which is measured from the major axis.</param>
            <param name="dSweepAngle">The sweep angle.</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecNorm cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecMajorAxis cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.EllipticalArc3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this elliptical arc by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.MajorRadius">
            <summary>
            Gets or sets the major radius of this elliptical arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.MinorRadius">
            <summary>
            Gets or sets the minor radius of this elliptical arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.MinorMajorRatio">
            <summary>
            Gets or sets the minor major ratio of this elliptical arc.
            <para>MinorMajorRatio is defined by minor radius / major radius.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.StartAngle">
            <summary>
            Gets or sets the starting angle of this elliptical arc.
            The starting angle is measured from the major axis.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.SweepAngle">
            <summary>
            Gets or sets the sweep angle of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.Circumference">
            <summary>
            Gets the circumference.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.Center">
            <summary>
            Gets or sets the center of this elliptical arc.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.StartPoint">
            <summary>
            Gets or sets the start point of this elliptical arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.EndPoint">
            <summary>
            Gets or sets the end point of this elliptical arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.Normal">
            <summary>
            Gets or sets the normal of this elliptical arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.MajorAxis">
            <summary>
            Gets or sets the major axis of this elliptical arc.
            <para>Note: This is the UNIT vector and does not contain the length of the
            major radius.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.MinorAxis">
            <summary>
            Gets or sets the minor axis of this elliptical arc.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.EllipticalArc3d.Range">
            <summary>
            Finds the range box of this elliptical arc.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IComplexString">
            <summary>
            Main interface for ComplexString3d.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IComplexString.GetCurves(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve}@)">
            <summary>
            Gets the complex string curves.
            </summary>
            <param name="colCurves">Collection of all the curves.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IComplexString.SetCurve(System.Int32,Ingr.SP3D.Common.Middle.ICurve)">
            <summary>
            Sets a particular curve within the complex string.
            </summary>
            <param name="i">Index into the complex string of which curve to set. Index starts at 1
            to CurveCount.</param>
            <param name="aCurve">ICurve to replace curve at the index.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IComplexString.GetCurve(System.Int32,Ingr.SP3D.Common.Middle.ICurve@)">
            <summary>
            Gets a particular curve within the complex string.
            </summary>
            <param name="i">Index into the complex string of which curve to get. Index starts at 1
            to CurveCount.</param>
            <param name="aCurve">Output ICurve which is at the index.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IComplexString.AddCurve(Ingr.SP3D.Common.Middle.ICurve,System.Boolean)">
            <summary>
            Adds a curve to the complex string.
            </summary>
            <param name="aCurve">Curve to add.</param>
            <param name="end">Curve can only be added at the beginning or end;
                              0 - beginning, 1 - end.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IComplexString.RemoveCurve(System.Boolean)">
            <summary>
            Removes a curve in the ComplexString3d.
            </summary>
            <param name="end">Curve can only be removed at the beginning or end;
                              0 - beginning, 1 - end.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IComplexString.CurveCount">
            <summary>
            Gets the number of curves in the complex string.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ComplexString3d">
             <summary>
             ComplexString Class derived from Curve3d BusinessObject.
             </summary>
             <example> This is an example for ComplexString3d methods and properties.    
            <code>
             Public Class ComplexString3d
               Public Sub New()
                
                 ' Create ComplexString3d object using a collection of curves (or lines).
                 ' Create continuous lines (or curves).
                 Dim oLine1 As New Line3d(New Position(0, 0, 0), New Position(2, 0, 0))
                 Dim oLine2 As New Line3d(New Position(2, 0, 0), New Position(2, 2, 0))
                 Dim oLine3 As New Line3d(New Position(2, 2, 0), New Position(0, 0, 0))
            
                  ' Add these continuous lines into the collection.
                  Dim oCollCurves_1 As New Collection(Of ICurve)()
                  oCollCurves_1.Add(oLine1)
                  oCollCurves_1.Add(oLine2)
                  oCollCurves_1.Add(oLine3)
            
                  ' Create the ComplexString3d object using a collection of curves.
                  Dim oCString3d_1 As New ComplexString3d(oCollCurves_1)
            
                  ' Similarly create other ComplexString3d objects with addtional connection info.
                  ' Create continuous lines (or curves).
                  Dim oLine4 As New Line3d(New Position(0, 0, 0), New Position(2, 2, 0))
                  Dim oLine5 As New Line3d(New Position(2, 2, 0), New Position(0, 2, 0))
                  Dim oLine6 As New Line3d(New Position(0, 2, 0), New Position(0, 0, 0))
            
                  ' Add these continuous lines into collection.
                  Dim oCollCurves_2 As New Collection(Of ICurve)()
                  oCollCurves_2.Add(oLine4)
                  oCollCurves_2.Add(oLine5)
                  oCollCurves_2.Add(oLine6)
            
                  ' Get SP3DConnection.
                  Dim oConn As SP3DConnection
                  oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
            
                  ' Create the ComplexString3d object using connection and a collection of curves. 
                  Dim oCString3d_2 As New ComplexString3d(oConn, oCollCurves_2)
            
                  ' Create the ComplexString3d object using an existing ComplexString3d object.
                  Dim oCString3dCopy As New ComplexString3d(oCString3d_2)
                  
                  ' Get the count using CurveCount property.
                  Dim iCurveCount As Integer
                  iCurveCount = oCString3d_1.CurveCount
            
                  ' Remove the curve; if  True, then remove the curve at the end.
                  ' If False, then remove the curve at the beginning.
                  oCString3d_1.RemoveCurve(True)
                  
                  ' Get all the curves of the ComplexString3d.
                  Dim oCollCurvesTest As Collection(Of ICurve)
                  oCollCurvesTest = Nothing
            
                  oCString3d_1.GetCurves(oCollCurvesTest)
            
                  ' Return the specified index curve of the ComplexString3d object.
                  Dim oCurveTest As ICurve = Nothing
                  oCString3d_1.GetCurve(1, oCurveTest)
            
                  ' Add the curve to the ComplexString3d. 
                  ' If True, then add the curve at the end; else add at the beginning.
                  oCString3d_1.AddCurve(oLine4, True)
            
                  ' Set the curve at the given index of the ComplexString3d object.
                  oCString3d_1.SetCurve(3, oLine4)
            
                  ' Set all the values of the existing ComplexString3d object into another.
                  oCString3dCopy.[Set](oCString3d_2)
            
                  ' Transform the ComplexString3d object.
                  Dim oMatrix As New Matrix4X4()
                  oMatrix.Scale(2)
                  oCString3d_1.Transform(oMatrix)
            
                  ' Define the curves of the ComplexString3d object.
                  oCString3d_1.DefineByCurves(oCollCurves_2)
            
                  ' Get the range. 
                  Dim oRBox As RangeBox
                  oRBox = oCString3d_1.Range
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for creating a complex string from internal PBO returned from query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.#ctor(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Constructor which copies a given ComplexString3d.
            </summary>
            <param name="oComplexString">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">oComplexString cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCurves exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve})">
            <summary>
            Constructor which creates a persistent ComplexString3d from a given set of curves.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="colCurves">Collection of ICurves.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">colCurves cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCurves exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.#ctor(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve})">
            <summary>
            Constructor which creates a transient ComplexString3d from a given set of curves.
            </summary>
            <param name="colCurves">Collection of ICurves.</param>
            <exception cref="T:System.ArgumentNullException">colCurves cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByCurves exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.BSplineCurve3d,System.Double)">
            <summary>
            Constructor which creates a persistent ComplexString3d from a given B-spline.  The B-spline will be
            stroked with lines/arcs for output into the ComplexString.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="oBSplineCurve">BSplineCurve3d</param>
            <param name="tol">Input tolerance used in fitting the lines and arcs to the B-spline curve.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.#ctor(Ingr.SP3D.Common.Middle.BSplineCurve3d,System.Double)">
            <summary>
            Constructor which creates a transient ComplexString3d from a given B-spline.  The B-spline will be
            stroked with lines/arcs for output into the ComplexString.
            </summary>
            <param name="oBSplineCurve">BSplineCurve3d</param>
            <param name="tol">Input tolerance used in fitting the lines and arcs to the B-spline curve.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.#ctor(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve},System.Boolean)">
            <summary>
            Creates a (immutable) ComplexString3d from a collection of curves.
            </summary>
            <param name="colCurves">Collection of ICurve objects.</param>
            <param name="bReadOnly">Boolean</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.Set(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets this object equal to a given ComplexString3d.
            </summary>
            <param name="oCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">oBSplineSurface3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.DefineByCurves(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve})">
            <summary>
            Redefines this complex string given a set of curves.
            </summary>
            <param name="colCurves">Collection of ICurve objects.</param>
            <exception cref="T:System.ArgumentNullException">colCurves cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByCurves exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.GetCurves(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ICurve}@)">
            <summary>
            Gets the complex string curves.
            </summary>
            <param name="colCurves">Collection of all the curves.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.SetCurve(System.Int32,Ingr.SP3D.Common.Middle.ICurve)">
            <summary>
            Sets a particular curve within the complex string.
            </summary>
            <param name="i">Index into the complex string of which curve to set. Index starts at 1
            to CurveCount.</param>
            <param name="aCurve">ICurve to replace the curve at index.</param>
            <exception cref="T:System.ArgumentNullException">aCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.GetCurve(System.Int32,Ingr.SP3D.Common.Middle.ICurve@)">
            <summary>
            Gets a particular curve within the complex string.
            </summary>
            <param name="i">Index into the complex string of which curve to get. Index starts at 1
            to CurveCount.</param>
            <param name="aCurve">Output ICurve which is at index.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.AddCurve(Ingr.SP3D.Common.Middle.ICurve,System.Boolean)">
            <summary>
            Adds a curve to the complex string.
            </summary>
            <param name="aCurve">ICurve to add.</param>
            <param name="end">Curve can only be added at the beginning or end;
                              false/0 - beginning, true/1 - end.</param>
            <exception cref="T:System.ArgumentNullException">aCurve cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.RemoveCurve(System.Boolean)">
            <summary>
             Removes a curve in the complex string.
            </summary>
            <param name="end">Curve can only be removed at the beginning or end;
                              0 - beginning, 1 - end.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ComplexString3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this complex string by a given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComplexString3d.CurveCount">
            <summary>
            Gets the number of curves in the complex string.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ComplexString3d.Range">
            <summary>
            Finds the range box of this complex string.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.SQLSite">
            <summary>
            The SQL site that contains plants and a catalog.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SpecificationBase">
            <summary>
            Specification base class. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SpecificationBase.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Private constructor for the SpecificationBase base class.
            </summary>
            <param name="oBOP">Private business object</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SpecificationBase.Finalize">
            <summary>
            Destructor for the SpecificationBase base class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SpecificationBase.SpecificationName">
            <summary>
            Gets the specification name.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SpecificationBase.DisplayName">
            <summary>
            Gets the specifications's display name. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ConstructionType">
            <summary>
             Enumerator for construction types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ConstructionType.Basic">
            <summary>
             Basic sketch.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ConstructionType.Planar">
            <summary>
            Planer sketch.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ConstructionType.Closed">
            <summary>
            Closed sketch.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ConstructionType.BSpline">
            <summary>
            Bspline sketch. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Sketch3D">
            <summary>
            Sketch3D is wrapper for a persistent object which encapsulates data required for manipulating a sketch path. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sketch3D.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create a Sketch3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sketch3D.#ctor(Ingr.SP3D.Common.Middle.Services.Model)">
            <summary>
            Constructor for the persistent instance of a Sketch3d.
            </summary>
            <param name="oModelConnection">Model Connection.</param>
            <exception cref="T:System.ArgumentNullException">oModelConnection cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dFactoryException">Failed to create the COM Sketch3dFactory.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dException">Failed to create COM Sketch3d.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sketch3D.#ctor(Ingr.SP3D.Common.Middle.Sketch3D)">
            <summary>
            Constructor for persistent instance of a Sketch3d copied from another Sketch3D instance.
            </summary>
            <param name="oSketch">Sketch3D instance.</param>
            <exception cref="T:System.ArgumentNullException">oSketch cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dFactoryException">Failed to create COM Sketch3dFactory.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dException">Failed to create COM Sketch3d.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sketch3D.Evaluate">
            <summary>
            Computes the curve segment. After calling Evaluate, 
            gets the segments by calling the Curves property.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dComputeCurveSegmentsException">ComputeCurveSegments function on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sketch3D.GetSketchPoints(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.SketchPoint}@)">
            <summary>
            Gets a collection of sketch points associated with this Sketch3d object.
            </summary>
            <param name="SketchPoints">Output collection of sketch points.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetCacheTurnPointsException">CacheTurnPoints method on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sketch3D.SetSketchPoints(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.SketchPoint})">
            <summary>
            Sets a modified collection of sketch points to this Sketch3d object.
            </summary>
            <param name="SketchPoints">Input collection of sketch points.</param>
            <exception cref="T:System.ArgumentNullException">Sketch points cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dSetTurnPointsException">SetTurnPoints method on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Sketch3D.ModifySketchingPlane(Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane)">
            <summary>
            Updates the parent for assoc points and needs the old plane to identify the correct parent.
            </summary>
            <param name="Oldplane">Old plane as IPlane.</param>
            <param name="Newplane">New plane as IPlane.</param>
            <exception cref="T:System.ArgumentNullException">Old plane cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">New plane cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dModifySketchingPlaneException">ModifySketchingPlane method on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sketch3D.CoordinateSystem">
            <summary>
             Gets or sets the coordinate system value.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sketch3D.ConstructionType">
            <summary>
            Gets or sets the construction type of the Sketch3D.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sketch3D.ComplexString">
            <summary>
            Gets a complex string representing input points and parameters. 
            Always returns a complex string after performing a compute.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetComplexStringException">GetComplexString property on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sketch3D.Curves">
            <summary>
            Gets the segments without computing.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetCurveSegmentsException">GetCurveSegments property on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sketch3D.ComplexStrings">
            <summary>
            Gets a read-only collection of complex strings after performing a compute.
                 Note: Complex strings are separated based on “Split”.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetComplexStringsException">Get ComplexStringCollection property on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Sketch3D.BSplineCurves">
            <summary>
            Gets a read-only collection of transient BsplineCurves from Sketch3d.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetBsplineCurveException">GetGBspCurveFromSketch property on COM IJDSketch3d interface failed.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dFactoryException">
            <summary>
            This exception is thrown when Sketch3dFactory cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dFactoryException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dFactoryException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dException">
            <summary>
            This exception is thrown when Sketch3d cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetCurveSegmentsException">
            <summary>
            This exception is thrown when IJDSketch3d.GetCurveSegments fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetCurveSegmentsException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetComplexStringException">
            <summary>
            This exception is thrown when IJDSketch3d.GetComplexString fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetComplexStringException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dComputeCurveSegmentsException">
            <summary>
            This exception is thrown when IJDSketch3d.ComputeCurveSegments fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dComputeCurveSegmentsException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetCacheTurnPointsException">
            <summary>
            This exception is thrown when IJDSketch3d.CacheTurnPoints method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetCacheTurnPointsException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dSetTurnPointsException">
            <summary>
            This exception is thrown when IJDSketch3d.SetTurnPoints method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dSetTurnPointsException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dModifySketchingPlaneException">
            <summary>
            This exception is thrown when IJDSketch3d.ModifySketchingPlane method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dModifySketchingPlaneException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetComplexStringsException">
            <summary>
            This exception is thrown when IJDSketch3d.ComplexStringCollection method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetComplexStringsException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetBsplineCurveException">
            <summary>
            This exception is thrown when IJDSketch3d.GetGBspCurveFromSketch method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketch3dGetBsplineCurveException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.NominalDiameter">
            <summary>
            Describes nominal diameter and unit type.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.NominalDiameter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.NominalDiameter.Size">
            <summary>
            Gets or sets the nominal diameter.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.NominalDiameter.Units">
            <summary>
            Gets or sets the unit type.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SystemHelper">
            <summary>
            SystemHelper is the helper for ISystem system hierarchy methods.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SystemHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Default constructor for SystemHelper.
            </summary>
            <param name="oSystem">Pointer to the parent business object, to be saved
            for use by the methods of this helper class.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">Business object does not 
            support IJDesignParent interface.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SystemHelper.Finalize">
            <summary>
            Destructor for the System helper class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SystemHelper.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds a wrapped business object as a system hierarchy child.
            </summary>
            <param name="oChild">Wrapped business object to be added as a child.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException">Failed to add the system hierarchy child.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SystemHelper.SystemChildren">
            <summary>
            Gets a collection of the system hierarchy children.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemChildrenException">
            Failed to get the system hierarchy children.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SystemChildHelper">
            <summary>
            SystemChildHelper is the helper for ISystemChild system hierarchy methods.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SystemChildHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Default constructor for SystemChildHelper.
            </summary>
            <param name="oSystemChild">Pointer to the child business object, to be saved
            for use by the methods of this helper class.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSupportsInterfaceException">
            Business object does not support IJDesignChild interface.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SystemChildHelper.Finalize">
            <summary>
            Destructor for the SystemChild helper class.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SystemChildHelper.SystemParent">
            <summary>
            Gets or sets the system hierarchy parent.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToSetSystemParentException">
            Failed to return the system hierarchy parent.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToSetSystemParentException">
            Failed to set the system hierarchy parent.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemChildrenException">
            <summary>
            Failed to get the system hierarchy children.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemChildrenException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetSystemChildrenException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemChildrenException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetSystemChildrenException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException">
            <summary>
            Failed to add a system hierarchy child.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToAddSystemChildException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToAddSystemChildException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemParentException">
            <summary>
            Failed to return the system hierarchy parent of a business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemParentException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToGetSystemParentException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemParentException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToGetSystemParentException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailToSetSystemParentException">
            <summary>
            Failed to set the system hierarchy parent of a business object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToSetSystemParentException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailToSetSystemParentException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailToSetSystemParentException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFailToSetSystemParentException class.
            </summary>
            <param name="iErrNo">integer</param>
            <param name="sDefaultString">string</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.AccessControlIDs">
            <summary>
            Describes the various access control possibilities: NoAccess, Read, Update, etc.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.NoAccess">
            <summary>
            No access for the user. Used as default.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.Read">
            <summary>
            Mask value to indicate read (Query) access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.Update">
            <summary>
            Mask value to indicate update (modify) access permitted. 
            Anyone with update permission can move the status from Working to In Review.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.Delete">
            <summary>
            Mask value to indicate delete access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.Create">
            <summary>
            Mask value to indicate create access permitted. 
            Anyone with create permission can move the status from Rejected to Working.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.Write">
            <summary>
            Mask value to indicate write access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.SystemObject">
            <summary>
            Mask value to indicate System Object access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.Approval">
            <summary>
            Mask value to indicate approval access permitted. 
            Anyone with approval permission can move the status to any status.  
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.ReadUpdate">
            <summary>
            Mask value to indicate read or update access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.ReadDelete">
            <summary>
            Mask value to indicate read or delete access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.ReadCreate">
            <summary>
            Mask value to indicate read or create access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.UpdateDelete">
            <summary>
            Mask value to indicate update or delete access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.UpdateCreate">
            <summary>
            Mask value to indicate update or create access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.DeleteCreate">
            <summary>
            Mask value to indicate delete or create access permitted.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.AccessControlIDs.FullAccess">
            <summary>
            Mask value to indicate full access permitted.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ApprovalStatusIDs">
            <summary>
            Describes the various approval status values possible for the business object.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ApprovalStatusIDs.Working">
            <summary>
            Mask value to indicate the business object has approval state as working.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ApprovalStatusIDs.InReview">
            <summary>
            Mask value to indicate the business object has approval state as in-review.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ApprovalStatusIDs.Rejected">
            <summary>
            Mask value to indicate the business object has approval state as rejected.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ApprovalStatusIDs.Approved">
            <summary>
            Mask value to indicate the business object has approval state as approved.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ItemAssignment">
            <summary>
            Enumerator for WBSItem assignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ItemAssignment.System">
            <summary>
            System item assignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ItemAssignment.Assembly">
            <summary>
            Assembly item assignment.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.ItemAssignment.Manual">
            <summary>
            Manual item assignment.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSProject">
             <summary>
             .NET wrapper for WBSProject.
             </summary>
             <example>This is an example for WBSProject class methods and properties. 
             <code>
                
             Public Class WBSProject
               Public Sub New()
            
                'Create a WBS project object. 
                Dim oWBSProject As IWBSProject = New WBSProject()
            
                'Adds (claim) a WBSItemChild object to a project.
                Dim oWBSItemChild As IWBSItemChild = Nothing  'This would be set to an existing WBSItemChild object.
                oWBSProject.AddToProject(oWBSItemChild)
            
                'Gets the collection of children that have been added to (claimed by) the project.
                Dim oProjChildrenCol As ReadOnlyCollection(Of BusinessObject) = oWBSProject.ProjectChildren
            
                'Checks whether a WBSItemChild object has been added to (claimed by) project.
                Dim bBelongsToProject As Boolean = oWBSProject.BelongsToProject(oWBSItemChild)
            
                'Removes (unclaims) a WBSItemChild object from a project.
                oWBSProject.RemoveFromProject(oWBSItemChild)
            
                Dim oWBSItem1 As IWBSItem = TryCast(oWBSProject, IWBSItem)
                Dim oWBSItem2 As IWBSItem = Nothing  'This would be set to an existing WBSItem object.
                Dim oWBSParent As IWBSParent = TryCast(oWBSItem1, IWBSParent)
                Dim oWBSChild As IWBSChild = TryCast(oWBSItem2, IWBSChild)
            
                'Adds a WBSChild object to a parent project in the WBS hierarchy.
                oWBSParent.AddWBSChild(oWBSChild)
            
                'Gets the collection of WBSChild objects that are WBS hierarchy children of the project.
                Dim oWBSChildrenCol As ReadOnlyCollection(Of IWBSChild) = oWBSParent.WBSChildren
            
                'Gets the WBS hierarchy parent of the project.
                oWBSParent = oWBSChild.WBSParent
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create WBSProject from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.#ctor">
            <summary>
            Constructor for persistent instance of WBSProject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.AddWBSChild(Ingr.SP3D.Common.Middle.IWBSChild)">
            <summary>
            Adds the specified child object to the parent.
            </summary>
            <param name="oChild">IWBSChild</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.AddToProject(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Adds a child to the BelongsToProject relationship.
            </summary>
            <param name="oItemChild">IWBSItemChild</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.BelongsToProject(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Determines whether the child is related by the BelongsToProject relationship already.
            </summary>
            <param name="oItemChild">IWBSItemChild</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.RemoveFromProject(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Removes a child from the BelongsToProject relationship.
            </summary>
            <param name="oItemChild">IWBSItemChild</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.Correlate(Ingr.SP3D.Common.Middle.BusinessObject,System.Boolean,Ingr.SP3D.Common.Middle.ECorrelationStatus@)">
            <summary>
            Correlates the SP3D object to the design basis object.  The bUpdateSP3DObject argument 
            allows the mapped properties of the SP3D object to be updated.   
            The correlation status is returned.
            </summary>
            <param name="oDesignBasis">The Design Basis object.</param>
            <param name="UpdateSP3DObject">Update the SP3D object.</param>
            <param name="Status">Correlation status.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">Failed due to invalid object type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToCorrelateException">Failed due to correlate status.</exception>
            <returns>Status</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.UnCorrelate(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes the correlation relationship for the SP3D object.
            </summary>
            <returns>nothing</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToUnCorrelateException">Failed due to uncorrelated status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.UpdateCorrelationStatus">
            <summary>
            Compares the mapped properties and determines the correlation status.
            </summary>
            <returns>ECorrelationStatus</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToUpdateCorrelateException">Failed to update correlate status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.GetPropertyComparison(System.Boolean)">
            <summary>
            Returns the collection of property comparison objects and a 
            boolean that indicates if all of the properties match.
            </summary>
            <param name="bPropertyMatch">Indicates if all of the properties match.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetPropertyComparisonException">Failed to get the property comparison.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.GetTopologyComparison(System.Boolean)">
            <summary>
            Returns the collection of topology comparison objects and a 
            boolean that indicates if the topology matches.
            </summary>
            <param name="bPropertyMatch">Indicates if the topology matches.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetTopologyComparisonException">Failed to get the topology comparison.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.IsValidDesignBasis(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Determines if the specified design basis object is valid for the SP3D object.
            </summary>
            <param name="oDesignBasis">Design Basis object</param>
            <returns>boolean</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedIsValidDesignBasisException"></exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.MatchesDesignBasis(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            This method will return the Design Basis object that has the best match with the SP3D object.
            Exceptions:
            InvalidObjectType – The design basis object is not a valid type for the SP3D object.
            </summary>
            <param name="oDesignBasis">ReadOnlyCollection of BusinessObjects.</param>
            <returns>BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedMatchesDesignBasisException">Failed to find the best match.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSProject.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of an object.
            </summary>
            <param name="Name">The new name.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.WBSChildren">
            <summary>
            Returns a collection of IWBSChild items that are children of the parent object.  
            An empty collection will be returned if there are no children.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.ProjectChildren">
            <summary>
            Gets children related by the BelongsToProject relationship.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.ProjectStatus">
            <summary>
            Get/Set WBSProject property ProjectStatus
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Raised if WBSProject is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetProjectStatusException">Raised if WBSProject property project status cannot be set.</exception>   
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.ProjectPurpose">
            <summary>
            Get/Set WBSProject property ProjectPurpose
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Raised if WBSProject is not in working status.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetPurposeException">Raised if WBSProject property project purpose cannot be set.</exception>   
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.WBSParent">
            <summary>
            WBSItem parent for this item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.DesignBasisObject">
            <summary>
            This is a read-only property that returns the Design Basis object.
            </summary>
            <returns>BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetDesignBasisException">Failed to get the design basis object.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.SafeToDelete">
            <summary>
            Read-only property that indicates whether the object can be deleted without causing 
            the deletion of children, whose design basis correlation shows they should belong to 
            a different parent.  This property will actually attempt to move these children to the
            correct parent.  A value of False will be returned if any children cannot be moved 
            successfully.
            </summary>
            <returns>boolean</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedSafeToDeleteException">Failed to be deleted safely.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.NamedItemHelperObj">
            <summary>
            Private utility method for managing the existence of the NamedItemHelper object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSProject.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.WBSItem">
             <summary>
             .NET wrapper for the WBSItem.
             </summary>
             <example>This is an example for WBSItem class methods and properties. 
             <code>
             Public Class WBSItem
               Public Sub New()
            
                'Creates a WBS item object using the standard constructor.
                Dim oWBSProject As IWBSProject = New WBSProject() 'This would be set to an existing WBSProject object.
                Dim oClassInfo As ClassInformation = Nothing
                Dim oItemAssignment As ItemAssignment = ItemAssignment.System
                Dim oWBSProjectParent As IWBSParent = TryCast(oWBSProject, IWBSParent)
                Dim oWBSItem As IWBSItem = New WBSItem(oWBSProjectParent, oClassInfo, False, oItemAssignment)
            
                'Creates a WBS item object using the copy constructor.
                Dim oAnotherWBSItem As IWBSItem = New WBSItem(oWBSProjectParent, False, oItemAssignment)
            
                Dim oWBSItem1 As IWBSItem = Nothing  'This would be set to an existing WBSItem object.
                Dim oWBSItem2 As IWBSItem = Nothing  'This would be set to an existing WBSItem object.
                Dim oWBSParent As IWBSParent = TryCast(oWBSItem1, IWBSParent)
                Dim oWBSChild As IWBSChild = TryCast(oWBSItem2, IWBSChild)
            
                'Adds a WBSChild object to a parent item in the WBS hierarchy.
                oWBSParent.AddWBSChild(oWBSChild)
            
                'Gets the collection of WBSChild objects that are WBS hierarchy children of the item.
                Dim oWBSChildrenCol As ReadOnlyCollection(Of IWBSChild) = oWBSParent.WBSChildren
            
                'Gets the WBS hierarchy parent of the item.
                oWBSParent = oWBSChild.WBSParent
            
                'Adds a child item to a parent item in the WBS hierarchy.
                oWBSItem1.AddWBSItemChild(oWBSItem2)
            
                'Gets the collection of WBSItem objects that are children of a parent in the WBS hierarchy.
                Dim oWBSItemChildCol As ReadOnlyCollection(Of IWBSItemChild) = oWBSItem1.WBSItemChildren
            
                'Removes a child item from a parent item in the WBS hierarchy.
                oWBSItem1.RemoveWBSItemChild(oWBSItem2)
            
                'Removes a set of children from a parent item in the WBS hierarchy.
                oWBSItem1.RemoveWBSItemChildren(oWBSItemChildCol)
            
                'Adds a set of children to a parent item in the WBS hierarchy.
                oWBSItem1.AddWBSItemChildren(oWBSItemChildCol)
            
                'Assigns all children of a parent object that matches the WBS assignment.
                oWBSItem1.UpdateWBSItemAssignment()
            
                'Validates that the object's system or assembly parents are not in conflict
                'with the WBSItemAssignment property which would prevent assigning the specific
                'object to this WBSItem.
                Dim oInvalidChildrenList As New List(Of IWBSItemChild)()
                Dim oInvalidChildrenCol As New ReadOnlyCollection(Of IWBSItemChild)(oInvalidChildrenList)
                Dim oWBSItemChild As IWBSItemChild = Nothing 'This would be set to an existing WBSItemChild object.
                oWBSItem1.ValidateChildren(oWBSItemChild, oInvalidChildrenCol)
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create WBSItem from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.#ctor(Ingr.SP3D.Common.Middle.IWBSParent,Ingr.SP3D.Common.Middle.Services.ClassInformation,System.Boolean,Ingr.SP3D.Common.Middle.ItemAssignment)">
            <summary>
            Constructor for persistent instance of WBSItem.
            </summary>
            <param name="parent">IWBSParent</param>
            <param name="classInfo">ClassInformation</param>
            <param name="Exclusive">boolean</param>
            <param name="enumAssignment">ItemAssignment</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.#ctor(Ingr.SP3D.Common.Middle.IWBSParent,System.Boolean,Ingr.SP3D.Common.Middle.ItemAssignment)">
            <summary>
            Constructor for persistent instance of WBSItem.
            </summary>
            <param name="parent">IWBSParent</param>
            <param name="Exclusive">boolean</param>
            <param name="enumAssignment">ItemAssignment</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.AddWBSChild(Ingr.SP3D.Common.Middle.IWBSChild)">
            <summary>
            Adds the specified child object to the parent.
            </summary>
            <param name="oChild">IWBSChild</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.Correlate(Ingr.SP3D.Common.Middle.BusinessObject,System.Boolean,Ingr.SP3D.Common.Middle.ECorrelationStatus@)">
            <summary>
            Correlates the SP3D object to the design basis object.  The bUpdateSP3DObject argument 
            allows the mapped properties of the SP3D object to be updated.   
            The correlation status is returned.
            </summary>
            <param name="oDesignBasis">The design basis object</param>
            <param name="UpdateSP3DObject">Update the SP3D Object.</param>
            <param name="Status">Correlation status</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">Invalid object type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToCorrelateException">Failed to correlate.</exception>
            <returns>nothing</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.UnCorrelate(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes the correlation relationship for the SP3D object.
            </summary>
            <returns>nothing</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToUnCorrelateException">Failed to uncorrelate.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.UpdateCorrelationStatus">
            <summary>
            Compares the mapped properties and determines the correlation status.
            </summary>
            <returns>ECorrelationStatus</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToUpdateCorrelateException">Failed to update the correlation status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.GetPropertyComparison(System.Boolean)">
            <summary>
            Returns the collection of property comparison objects and a 
            boolean that indicates whether all of the properties match.
            </summary>
            <param name="bPropertyMatch">Indicates if all of the properties match.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetPropertyComparisonException">Failed to get the propery comparison.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.GetTopologyComparison(System.Boolean)">
            <summary>
            Returns the collection of topology comparison objects and a 
            boolean that indicates whether the topology matches.
            </summary>
            <param name="bPropertyMatch">Indicates if the topology matches.</param>
            <returns>ReadOnlyCollection of BusinessObjects.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetTopologyComparisonException">Failed to get the topology comparison status.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.IsValidDesignBasis(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Determines if the specified design basis object is valid for the SP3D object.
            </summary>
            <param name="oDesignBasis">design basis object</param>
            <returns>boolean</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedIsValidDesignBasisException">Failed the isvalid design basis evaluation.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.MatchesDesignBasis(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            This method will return the design basis object that has the best match with the SmartPlant 3D object.
            Exceptions:
            InvalidObjectType – The design basis object is not a valid type for the SP3D object.
            </summary>
            <param name="oDesignBasis">ReadOnlyCollection of BusinessObjects.</param>
            <returns>BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedMatchesDesignBasisException">Failed to find the best design basis match.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.AddWBSItemChild(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Adds the specified child to the WBSItem..
            </summary>
            <param name="oChild">The IWBSItemChild to add.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Failed due to invalid child type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Failed due to no access allowed.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.AddWBSItemChildren(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild})">
            <summary>
            Adds the specified children to the WBSItem.
            </summary>
            <param name="oChildren">The set of children to add.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidChildTypeException">Failed due to invalid child type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Failed due to no access.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.RemoveWBSItemChild(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Removes the specified child from the WBSItem.
            </summary>
            <param name="oChild">The child to be removed.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Failed due to no access.</exception>            
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.RemoveWBSItemChildren(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild})">
            <summary>
            Removes the specified children from the WBSItem.
            </summary>
            <param name="oChildren">The set of children to remove.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Failed due to no access.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.UpdateWBSItemAssignment">
            <summary>
            Updates WBSItem assigments. This method will assign all children of 
            a parent object that matches the WBSAssignment.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">Failed due to no access.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.ValidateParents(Ingr.SP3D.Common.Middle.IWBSItemChild)">
            <summary>
            Validates if the object's system or assembly parents are in conflict with the 
            WBSItemAssignment property which would prevent assigning the specific object 
            to this WBSItem.
            </summary>
            <param name="oChild">The child whose parents are to be validated.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.ValidateChildren(Ingr.SP3D.Common.Middle.IWBSItemChild,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.IWBSItemChild}@)">
            <summary>
            Validates if the object's system or assembly children are in conflict with the 
            WBSItemAssignment property which would prevent assigning the specific object 
            to this WBSItem.
            If a conflict exists then the set of invalid children are returned in the 
            ReadOnlyCollection.
            </summary>
            <param name="oChild">The child to be validated.</param>
            <param name="oInvalidChildren">The ReadOnlyCollection of invalid children.</param>
            <returns>WBSValidateChildrenStatus</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.WBSItem.SetUserDefinedName(System.String)">
            <summary>
            Sets the user-defined name of an object.
            </summary>
            <param name="Name">The new name.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.WBSChildren">
            <summary>
            Returns a collection of IWBSChild items that are children of the parent object.  
            An empty collection will be returned if there are no children.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.WBSParent">
            <summary>
            WBSItem parent for this item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.DesignBasisObject">
            <summary>
            This is a read-only property that returns the design basis object.
            </summary>
            <returns>BusinessObject</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetDesignBasisException">Failed to get Design Basis object.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.SafeToDelete">
            <summary>
            Read-only property that indicates whether the object can be deleted without causing 
            the deletion of children, whose design basis correlation shows they should belong to 
            a different parent.  This property will actually attempt to move these children to the
            correct parent.  A value of False will be returned if any children cannot be moved 
            successfully.
            </summary>
            <returns>boolean</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailedSafeToDeleteException">Failed whether the object is safe to delete.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.WBSItemChildren">
            <summary>
            Returns a collection of the objects that are children of the parent object.
            An empty collection will be returned if there are no children.
            </summary>
            <returns>ReadOnlyCollection of IWBSItemChilds objects.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.Exclusive">
            <summary>
            Get/Set WBSItem property Exclusive
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.WBSAssignment">
            <summary>
            Get/Set WBSItem property WBSAssignment
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.WBSType">
            <summary>
            Get/Set WBSItem property WBSType
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.WBSPurpose">
            <summary>
            Get/Set WBSItem property WBSPurpose
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.Project">
            <summary>
            Get WBSItem property Project
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.NamedItemHelperObj">
            <summary>
            Private utility method for managing the existance of the NamedItemHelper object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.Name">
            <summary>
            Gets the name of an object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.WBSItem.Spools">
            <summary>
            Gets the Spool objects under SpoolableObject.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSProjectCreationFailedException">
            <summary>
            This exception is raised if creation of WBSProject fais.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSProjectCreationFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnWBSProjectCreationFailedException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSItemCreationFailedException">
            <summary>
            This exception is raised if creation of WBSItem fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSItemCreationFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnWBSItemCreationFailedException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnProjectChangeDeniedFailedException">
            <summary>
            This exception is raised if WBSProject Change is denied.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnProjectChangeDeniedFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnProjectChangeDeniedFailedException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnProjectChildAlreadyAssignedException">
            <summary>
            This exception is raised if ProjectChild is already assigned.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnProjectChildAlreadyAssignedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnProjectChildAlreadyAssignedException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnExclusivityConflictException">
            <summary>
            This exception is raised if exclusivity is in conflict.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnExclusivityConflictException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnExclusivityConflictException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSProjectfailedException">
            <summary>
            This exception is raised if an unknown COMException from WBSProject is encountered - refer HR value.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSProjectfailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnWBSProjectfailedException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetProjectStatusException">
            <summary>
            This exception is raised if the WBSProject property project status cannot be set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetProjectStatusException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnWBSSetProjectStatusException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetProjectStatusException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="inner">Exception object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnWBSSetProjectPurposeException">
            <summary>
            This exception is raised if the WBSProject property project purpose cannot be set.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetProjectPurposeException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnWBSSetProjectPurposeException class with a reference to the inner
            COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnWBSSetProjectPurposeException.#ctor(System.Exception)">
            <summary>
            Constructor to catch system exceptions.
            </summary>
            <param name="inner">Exception object.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PDSFilterDefinition">
            <summary>
            Defines a PDS filter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.#ctor">
            <summary>
            Default PDS filter constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddObjectType(System.String)">
            <summary>
            Adds a PDS object type to a filter definition by BOC node path. 
            </summary>
            <param name="sBOCPath">string</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddObjectType(Ingr.SP3D.Common.Middle.Services.BOCInformation)">
            <summary>
            Adds a PDS object type to a filter definition by BOCInformation object.
            </summary>
            <param name="oBOCInfo">BOCInformation</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddWhereProperty(Ingr.SP3D.Common.Middle.PropertyValue,Ingr.SP3D.Common.Middle.PropertyComparisonOperators)">
            <summary>
            Adds a PDS property to a filter definition with value and comparison operator.
            </summary>
            <param name="oPropValue">PropertyValue</param>
            <param name="iOperator">PropertyComparisonOperators</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddParametricWhereProperty(Ingr.SP3D.Common.Middle.Services.PropertyInformation)">
            <summary>
            Adds a PDS property to a parametric filter definition with a PropertyInformation object.
            </summary>
            <param name="oPropertyInfo">PropertyInformation</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddDiscipline(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.PDSDiscipline})">
            <summary>
            Adds a PDS discipline collection to a filter definition.
            </summary>
            <param name="oDisciplines">Collection of PDSDiscipline objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddParametricDiscipline">
            <summary>
            Adds a PDS discipline (collection) to a parametric filter definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddDesignArea(Ingr.SP3D.Common.Middle.PDSDiscipline,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.PDSDesignArea})">
            <summary>
            Adds a PDS design area collection to a filter definition by PDS discipline
            </summary>
            <param name="pDiscipline">PDSDiscipline</param>
            <param name="oDesignAreas">Collection of PDSDesignArea objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddDesignFile(Ingr.SP3D.Common.Middle.PDSDesignArea,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.PDSDesignFile})">
            <summary>
            Adds a PDS design file collection to a filter definition by PDS design area.
            </summary>
            <param name="oDesignArea">PDSDesignArea</param>
            <param name="oFiles">Collection of PDSDesignFile objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddLevels(Ingr.SP3D.Common.Middle.PDSDesignFile,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.PDSLevel})">
            <summary>
            Adds a PDS design level collection to a filter definition by PDS design file.
            </summary>
            <param name="oDesignFile">PDSDesignFile</param>
            <param name="oLevels">Collection of PDSLevel objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PDSFilterDefinition.AddCategories(Ingr.SP3D.Common.Middle.PDSLevel,System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.PDSCategory})">
            <summary>
            Adds a PDS category collection to a filter definition by PDS design category.
            </summary>
            <param name="oLevel">PDSLevel</param>
            <param name="oCategories">Collection of PDSCategory objects.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PDSDiscipline">
            <summary>
            Defines a PDS discipline.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PDSDesignArea">
            <summary>
            Defines a PDS design area.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PDSDesignFile">
            <summary>
            Defines a PDS design file.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PDSLevel">
            <summary>
            Defines PDS levels.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PDSCategory">
            <summary>
            Defines PDS categories.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Position">
             <summary>
             Position object equivalent to a COM DPosition object.
             </summary>
             <example>
             <code>
             Public Class Position
               Public Sub New()
            
                'Create the position with default values.
                Dim oPos_1 As New Position()
                'Create the position using x, y, z.
                Dim x, y, z As Double
                x = 2
                y = 2
                z = 2
                'Create the position using x, y, z.
                Dim oPos_2 As New Position(x, y, z)
            
                'Create the position using an existing Position object. 
                Dim oPosCopy As New Position(oPos_2)
            
                'Check whether two Position objects are equal or not
                'by using the Equals method on Position.
                Dim bEqual As Boolean = False
                If oPosCopy.Equals(oPos_2) Then
                    bEqual = True
                Else
                    bEqual = False
                End If
            
                'Using operator '='.
                If oPosCopy = oPos_2 Then
                    bEqual = True
                Else
                    bEqual = False
                End If
            
                'Using operator '<![CDATA[<>]]>'.
                If oPos_1 <![CDATA[<>]]> oPos_2 Then
                    bEqual = False
                Else
                    bEqual = True
                End If
            
                'To set the x, y, z values of Position.
                oPos_1.X = 1
                oPos_1.Y = 1
                oPos_1.Z = 1
            
                'Using the Set() method.
                x = 4
                y = 4
                z = 4
                oPos_1.Set(x, y, z)
            
                'To get the x, y, z values of using the Get() method.
                oPos_1.[Get](x, y, z)
            
                'Get the values of x, y, z.
                x = oPos_1.X
                y = oPos_1.Y
                z = oPos_1.Z
            
                'Create a vector between two positions.
                'Using the Subtract() method. 
                Dim oVecRes As Vector
                oVecRes = oPos_1.Subtract(oPos_2)
            
                'Using operator '-'.
                oVecRes = oPos_1 - oPos_2
            
                'Transform the position using operator '*'.
                Dim oMatrix As New Matrix4X4()
                oMatrix.Scale(2)
                oPos_1 = oPos_1 * oMatrix
            
                'To return the offset position from the given input vector and position.
                oPos_1 = oPos_1.Offset(oVecRes)
            
                'To find the distance between two points.
                Dim dDist As Double = 0
                dDist = oPos_1.DistanceToPoint(oPos_2)
                
                'To get the hash code using the GetHashCode() method. 
                Dim iHashcode As Integer
                iHashcode = oPos_1.GetHashCode()
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Position object and initializes x, y, and z components of Position with the input values.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.#ctor(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructs a Position object and initializes it with values from the input Position object.
            </summary>
            <param name="inputPos">Input Position object from which to initialize.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.#ctor">
            <summary>
            Constructs a Position object and initializes x, y, and z components of Position to zero. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructs an immutable Position object and initializes x, y, and z components of Position with the input values.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
            <param name="bReadOnly">Class is immutable.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.Set(System.Double,System.Double,System.Double)">
            <summary>
            Sets the x, y, and z components.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPositionException">Cannot change the read-only position.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.Get(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the x, y, and z components.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.Offset(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Creates an offset Position object from the input Vector object.
            </summary>
            <param name="pvec">An input vector from which the offset is to be obtained.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            <returns>Position offset by the input vector.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.Subtract(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Returns the vector from this position to the input position (Position).
            </summary>
            <param name="pPos1">The starting position for the vector.</param>
            <returns>Vector</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.DistanceToPoint(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Returns the distance from the input Position object.
            </summary>
            <param name="pPos2">The input DPosition point from which to determine the distance.</param>
            <returns>Distance between positions.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.op_Subtraction(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Returns the vector from lhs position to the rhs position Ex: Res = lhs-rhs.
            </summary>
            <param name="lhs">Position on the left-hand side of the operator.</param>
            <param name="rhs">Position on the right-hand side of the operator.</param>
            <returns>Vector object.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.op_Inequality(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Returns the result of two positions by comparing x, y, and z components. It is a value-based comparison.
            </summary>
            <param name="lhs">Position on the left-hand side of operator.</param>
            <param name="rhs">Position on the right-hand side of operator.</param>
            <returns>Returns a value-based comparison results of either True or False.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.op_Equality(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Returns the result of two positions by comparing x, y, and z components. != and == are to be implemented in sets.
            </summary>
            <param name="lhs">Position on the left-hand side of the operator.</param>
            <param name="rhs">Position on the right-hand side of the operator.</param>
            <returns>Returns a value-based comparison results of either True or False.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.op_Multiply(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Returns a Position object transformed by the input matrix.
            </summary>
            <param name="lhs">Position on the left-hand side of operator.</param>
            <param name="pMatrix">Transformation matrix.</param>
            <returns>Position</returns>
            /// <remarks>
            <list type="table">
            <listheader>
            <term>G4x4 Matrix and Matrix4x4 as Column Major</term>
            </listheader>
              <item>
                <description>| 0  4   8  12 |</description>
              </item>
              <item>
                <description>| 1  5   9  13 |</description>
              </item>
              <item>
                <description>| 2  6  10  14 |</description>
              </item>
              <item>
                <description>| 3  7  11  15 |</description>
              </item>
            </list>
            <para>12, 13, and 14 elements represent the translation.</para>
            <para>Mathmetically, we should put position or vector on the right 
            when performing a transformation, so that a position or vector 
            is represented in a one-dimensional column (similarly for RangeBox).</para>
            <para>However, we put position or vector on the left to follow the 
            GTransf customs. Also only by putting on the left, we get 
            the automatic implementation of *=.</para>
            <para>***The internal implementation is still performed as if
            position or vector is on the right.</para>
             </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.Equals(System.Object)">
            <summary>
            Returns the result of two positions by comparing x, y, and z components. != and == are to be implemented in sets
            </summary>
            <param name="obj">Positions that need to be compared.</param>
            <returns>Returns value-based comparison results of either True or False.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.GetHashCode">
            <summary>
            Needs to be over-written when operator is == is overloaded.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Position.CopyPosOut(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x">double</param>
            <param name="y">double</param>
            <param name="z">double</param>
            <returns>Position</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">X, Y, or Z value is larger than the maximum allowed.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Position.X">
            <summary>
            Gets or sets the X-value.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPositionException">Cannot change the read-only X position property.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Position.Y">
            <summary>
            Gets or sets the Y-value.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPositionException">Cannot change the read-only Y position property.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Position.Z">
            <summary>
            Gets or sets the Z-value.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPositionException">Cannot change the read-only Z position property.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPositionException">
            <summary>
            Raised when an attempt is made to set a position  on a read-only property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnReadOnlyPositionException.#ctor">
            <summary>
            Initializes a new instance of the CmnReadOnlyPositionException class. 
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.NameRuleHelper">
            <summary>
            NameRuleHelper class that implements INameRule.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.NameRuleHelper class
            with the supplied named BusinessObject.
            </summary>
            <param name="oNamedItem">Named item as Ingr.SP3D.Common.Middle.BusinessObject.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.CreateNameRuleAE">
            <summary>
            Creates name rule active entity object.
            </summary>
            <returns>Name rule active entity as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCreateNameRuleAEException">Failed to create name rule active entity.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.GetComObjectEntity">
            <summary>
            Gets COM object for entity BusinessObject.
            </summary>
            <returns>COM object of entity BusinessObject as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailBOException">Failed to cast Weak Ref to BO.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.GetComActiveEntity">
            <summary>
            Gets COM object for active entity.
            </summary>
            <returns>COM object for active entity as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperGetItemException">Failed to get item from DCollectionHelper.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.GetComNameRuleHolder(System.Object)">
            <summary>
            Gets COM name rule holder object.
            </summary>
            <param name="oComObjectAE">COM active entity object as System.object.</param>
            <returns>name rule holder as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperGetItemException">Failed to get item from DCollectionHelper.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.GetComModelResourceManager">
            <summary>
            Gets COM resource manager for model connection.
            </summary>
            <returns>ResourceManager of COM model connection as RESPOMLib.IJDPOM.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.GetRelationCollection(IMSRelation.DRelationHelper,System.Guid,System.String)">
            <summary>
            Gets relation collection which contains objects related by the interface and rolename supplied.
            </summary>
            <param name="oDRelationHelper">DRelationHelper as IMSRelation.DRelationHelper.</param>
            <param name="oInterfaceGuid">Guid of interface as System.Guid.</param>
            <param name="sRoleName">Rolename as System.string.</param>
            <returns>Relation collection as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDRelHelperGetColRelationsException">Failed to get relations collection from DRelationHelper.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.RemoveNameRule(IMSRelation.DCollectionHelper)">
            <summary>
            Removes name rule association from COM business object's relation collection.
            </summary>
            <param name="oDCollectionHelper">DCollectionHelper as IMSRelation.DCollectionHelper.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperGetItemException">Failed to get item from DCollectionHelper.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectRemoveException">IJDObject.Remove failed.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperRemoveException">Failed to remove object from DCollectionHelper.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectException">Failed to cast COM object to IJDObject.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.NameRuleHelper.SetNameRule(System.Object,Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Sets name rule associatioin to COM business object's relation collection.
            </summary>
            <param name="oComObjectEntity">COM business object as System.object.</param>
            <param name="oNameRuleHolder">NameRuleHolder as Ingr.SP3D.Common.Middle.BusinessObject.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectPermissionGroupException">Failed to set permission group on IJDObject interface.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperRemoveException">Failed to remove object from DCollectionHelper.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperAddException">Failed to add object to DCollectionHelper.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnJRevisionAddException">JRevision.Add failed.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectException">Failed to cast COM object to IJDObject.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.NameRuleHelper.ActiveNameRule">
            <summary>
            Gets or sets active name rule.
            </summary>
            <returns>Active name rule as Ingr.SP3D.Common.Middle.BusinessObject.</returns>
            <exception cref="T:System.InvalidOperationException">The base object does not support this operation.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnInvalidObjectTypeException">The object is not a name rule object.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoAccessException">The user does not have access to read or modify the object.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDRelHelperGetColRelationsException">
            <summary>
            This exception is thrown when a COM exception occurs calling DRelationHelper.get_CollectionRelations.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDRelHelperGetColRelationsException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnDRelHelperGetColRelationsException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperAddException">
            <summary>
            This exception is thrown when a COM exception occurs calling DCollectionHelper.Add.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDColHelperAddException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnDColHelperAddException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperGetItemException">
            <summary>
            This exception is thrown when a COM exception occurs calling DCollectionHelper.get_Item.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDColHelperGetItemException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnDColHelperGetItemException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnDColHelperRemoveException">
            <summary>
            This exception is thrown when a COM exception occurs calling DCollectionHelper.Remove.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnDColHelperRemoveException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnDColHelperRemoveException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectRemoveException">
            <summary>
            This exception is thrown when a COM exception occurs calling IJDObject.Remove.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJDObjectRemoveException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnIJDObjectRemoveException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCreateNameRuleAEException">
            <summary>
            This exception is thrown when a COM exception occurs calling IJNameRuleAEFactory.CreateNameRuleAE.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCreateNameRuleAEException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnCreateNameRuleAEException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnJRevisionAddException">
            <summary>
            This exception is thrown when a COM exception occurs calling JRevision.AddConnection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnJRevisionAddException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnJRevisionAddException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnIJDObjectPermissionGroupException">
            <summary>
            This exception is thrown when a COM exception occurs while using IJDObjectAE.PermissionGroup property.
            </summary>    
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnIJDObjectPermissionGroupException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnIJDObjectPermissionGroupException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ITorus">
            <summary>
            Default interface definition for Torus3d.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITorus.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the torus.
            </summary>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITorus.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="index">Index of the boundary to remove.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITorus.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the torus.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITorus.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="index">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITorus.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="index">Index of boundary to set.</param>
            <param name="iCS">ComplexString3d boundary.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITorus.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ITorus.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries 
            and removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.MajorRadius">
            <summary>
            Gets or sets the major radius.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.MinorRadius">
            <summary>
            Gets or sets the minor radius.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.Center">
            <summary>
            Gets or sets the center.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.Normal">
            <summary>
            Gets or sets the normal (axis) of the torus.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.OriginDir">
            <summary>
            Gets or sets the origin direction of the torus.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.ReverseV">
            <summary>
            Gets or sets reverse V.  Default direction for the V-parameterization is counter clockwise around the axis.
            If ReverseV = True, then V-parametrization is clockwise.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.Solid">
            <summary>
            Gets or sets whether solid or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.Capped">
            <summary>
            Gets or sets whether capped or not;
            only if torus is a partial torus.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ITorus.BoundaryCount">
            <summary>
            Gets the number of boundaries.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Torus3d">
             <summary>
             Class definition for Torus3d.
             </summary>
             <example> This is an example for Torus3d methods and properties.
             <code>   
             Public Class Torus3d
               Public Sub New()
            
                 ' Create the Torus3d object.
                 Dim oPos As New Position(0, 0, 0)
                 Dim oVecAxis As New Vector(0, 0, 1)
                 Dim oVecOrigin As New Vector(1, 0, 0)
                 Dim dMajorRad As Double = 1
                 Dim dMinorRad As Double = 0.5
                 Dim bSolid As Boolean = False
                 Dim dSweepAngle As Double = 0.3
            
                 ' Create a Torus3d object using center position, normal vector, origin direction, 
                 ' major, minor radius. and solid.
                 Dim oTorus3d_1 As New Torus3d(oPos, oVecAxis, oVecOrigin, dMajorRad, dMinorRad, bSolid)
            
                 ' Create a Torus3d object using center position, normal vector, origin direction, 
                 ' major, minor radius, solid, and sweep angle.
                 Dim oTorus3d_2 As New Torus3d(oPos, oVecAxis, oVecOrigin, dMajorRad, dMinorRad, dSweepAngle, _
                 bSolid)
            
                 ' Create a Torus3d object using existing an Torus3d object.
                 Dim oTorus3dCopy As New Torus3d(oTorus3d_1)
            
                 ' Set all propreties of the Torus3d object into another Torus3d.
                 oTorus3dCopy.[Set](oTorus3d_2)
            
                 ' Create the boundaries for Torus3d object.
            
                 ' Create the continuous Line3d. 
                 Dim oLine3d_1 As New Line3d(New Position(0, 0, -2), New Position(2, 0, -2))
                 Dim oLine3d_2 As New Line3d(New Position(2, 0, -2), New Position(2, 2, 2))
                 Dim oLine3d_3 As New Line3d(New Position(2, 2, 2), New Position(0, 2, 2))
                 Dim oLine3d_4 As New Line3d(New Position(0, 2, 2), New Position(0, 0, -2))
            
                 Dim oLine3d_5 As New Line3d(New Position(0, 0, -4), New Position(4, 0, -4))
                 Dim oLine3d_6 As New Line3d(New Position(4, 0, -4), New Position(4, 4, 4))
                 Dim oLine3d_7 As New Line3d(New Position(4, 4, 4), New Position(0, 4, 4))
                 Dim oLine3d_8 As New Line3d(New Position(0, 4, 4), New Position(0, 0, -4))
            
                 ' Add these lines into the collection.
                 Dim oCollCurve_1 As New Collection(Of ICurve)()
                 Dim oCollCurve_2 As New Collection(Of ICurve)()
                 oCollCurve_1.Add(oLine3d_1)
                 oCollCurve_1.Add(oLine3d_2)
                 oCollCurve_1.Add(oLine3d_3)
                 oCollCurve_1.Add(oLine3d_4)
            
                 oCollCurve_2.Add(oLine3d_5)
                 oCollCurve_2.Add(oLine3d_6)
                 oCollCurve_2.Add(oLine3d_7)
                 oCollCurve_2.Add(oLine3d_8)
            
                 ' Create the ComplexString3d objects.
                 Dim oCString_1 As New ComplexString3d(oCollCurve_1)
                 Dim oCString_2 As New ComplexString3d(oCollCurve_2)
            
                 ' Add these objects into the collection.
                 Dim oCollCStrings As New Collection(Of ComplexString3d)()
                 oCollCStrings.Add(oCString_1)
                 oCollCStrings.Add(oCString_2)
            
                 ' Set the boundaries for the given Torus3d object.
                 oTorus3d_2.SetBoundaries(oCollCStrings)
            
                 ' Get all boundaries of the Torus3d object.
                 Dim oCollCStingsTest As Collection(Of ComplexString3d)
                 oCollCStingsTest = Nothing
                 oTorus3d_2.GetBoundaries(oCollCStingsTest)
            
                 ' Get the specified index boundary of the Torus3d object.
                 Dim oCSTest_1 As ComplexString3d
                 oCSTest_1 = Nothing
                 oTorus3d_2.GetBoundary(1, oCSTest_1)
            
                 ' Set the specified index boundary of the Torus3d object.
                 oTorus3d_2.SetBoundary(2, oCSTest_1)
            
                 ' Remove the specified index boundary of the Torus3d object.
                 oTorus3d_2.RemoveBoundary(2)
            
                 ' Remove all boundaries of the Torus3d object.
                 oTorus3d_2.RemoveAllBoundaries()
            
                 ' Add the boundary at the end of the Torus3d object.
                 oTorus3d_2.AddBoundary(oCString_1)
            
                 ' Transform the Torus3d object.
                 Dim oMatrix As New Matrix4X4()
                 oMatrix.Scale(2)
                 oTorus3d_2.Transform(oMatrix)
            
                 ' Define by axis, center, and radius.
                 Dim oPosTest As New Position(1, 1, 1)
                 Dim oVecAxisTest As New Vector(0, 0, 1)
                 Dim oVecOriginTest As New Vector(1, 0, 0)
                 Dim dMajorRadTest As Double = 2
                 Dim dMinorRadTest As Double = 1.5
                 Dim bSolidTest As Boolean = True
                 Dim dSweepAngleTest As Double = 0.4
            
                 oTorus3d_2.DefineByAxisCenterRadius(oPosTest, oVecAxisTest, oVecOrigin, dMajorRadTest, dMinorRadTest, bSolidTest)
            
                 ' Define by axis, center, radius, and sweep.
                 oTorus3d_1.DefineByAxisCenterRadiusSweep(oPosTest, oVecAxisTest, oVecOriginTest, dMajorRadTest, dMinorRadTest, dSweepAngleTest, _
                 bSolidTest)
            
                 ' Get whether capped.
                 Dim bCapped As Boolean
                 bCapped = oTorus3d_2.Capped
            
                 ' Get the center position of the Torus3d object.
                 Dim oPosCenterTest As Position
                 oPosCenterTest = oTorus3d_2.Center
            
                 ' Set the center position of the Torus3d object.
                 oTorus3d_2.Center = New Position(0, 0, 0)
            
                 ' Get the normal vector.
                 Dim oVecNorTest As Vector
                 oVecNorTest = oTorus3d_2.Normal
            
                 ' Set the normal vector.
                 oTorus3d_2.Normal = New Vector(0, 1, 0)
            
                 ' Get the origin direction vector.
                 Dim oVecOrgTest As Vector
                 oVecOrgTest = oTorus3d_2.OriginDir
            
                 ' Set the origin direction vector.
                 oTorus3d_2.OriginDir = New Vector(0, 1, 0)
            
                 ' Get the range.
                 Dim oRBox As RangeBox
                 oRBox = oTorus3d_2.Range
            
                 ' Get whether is a solid.
                 bSolidTest = oTorus3d_2.Solid
            
                 ' Get whether reverse V.
                 Dim bReversVTest As Boolean
                 bReversVTest = oTorus3d_2.ReverseV
            
                 ' Get the major radius.
                 dMajorRadTest = oTorus3d_2.MajorRadius
            
                 ' Set the major radius.
                 oTorus3d_2.MajorRadius = dMajorRadTest
            
                 ' Get the minor radius.
                 dMinorRadTest = oTorus3d_2.MinorRadius
            
                 ' Set the major radius.
                 oTorus3d_2.MinorRadius = dMinorRadTest
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Torus3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.#ctor(Ingr.SP3D.Common.Middle.Torus3d)">
            <summary>
            Constructor used to copy an existing Torus3d.
            </summary>
            <param name="oTorus">A Torus3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oTorus cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create torus.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor used  to create a persistent full Torus3d.
            </summary>
            <remarks>Note: If major radius is less than minor radius and
                      major radius is greater than 0, then = apple torus.
                      If major radius is less than 0, then = lemon torus.</remarks>
            <param name="oConnection">SP3D connection.</param>
            <param name="posCenter">Center of the torus.</param>
            <param name="vecAxis">Axis of the torus.</param>
            <param name="vecOrig">Origin direction vector. Points from center to the origin of the UV parameter space.</param>
            <param name="dMajorRadius">Major radius.</param>
            <param name="dMinorRadius">Minor radius.</param>
            <param name="Solid">Whether a solid (or hollow).</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecOrig cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create torus.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor used to create a transient full Torus3d.
            </summary>
            <remarks>Note: If major radius is less than minor radius and
                      major radius is greater than 0, then = apple torus.
                      If major radius is less than 0, then = lemon torus.</remarks>
            <param name="posCenter">Center of the torus.</param>
            <param name="vecAxis">Axis of the torus.</param>
            <param name="vecOrig">Origin direction vector.  Points from center to the origin of the UV parameter space.</param>
            <param name="dMajorRadius">Major radius.</param>
            <param name="dMinorRadius">Minor radius.</param>
            <param name="Solid">Whether solid (or hollow).</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecOrig cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create torus.</exception>  
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor used  to create a persistent partial torus.
            </summary>
            <param name="oConnection">SP3D connection.</param>
            <param name="posCenter">Center of torus.</param>
            <param name="vecAxis">Axis of torus.</param>
            <param name="vecOrig">Origin direction vector.  Points from center to the origin of the UV parameter space.</param>
            <param name="dMajorRadius">Major radius.</param>
            <param name="dMinorRadius">Minor radius.</param>
            <param name="dSweepAngle">Sweep angle of the torus.</param>
            <param name="Solid">Whether solid (or hollow).</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecOrig cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create torus.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor used to create a transient partial torus.
            </summary>
            <param name="posCenter">Center of torus.</param>
            <param name="vecAxis">Axis of torus.</param>
            <param name="vecOrig">Origin direction vector.  Points from center to the origin of the UV parameter space.</param>
            <param name="dMajorRadius">Major radius.</param>
            <param name="dMinorRadius">Minor radius.</param>
            <param name="dSweepAngle">Sweep angle of torus.</param>
            <param name="Solid">Whether solid (or hollow).</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecOrig cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create torus.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.Set(Ingr.SP3D.Common.Middle.Torus3d)">
            <summary>
            Sets this torus equal to an existing torus.
            </summary>
            <param name="oTorus3d">Existing Torus3d.</param>
            <exception cref="T:System.ArgumentNullException">oTorus3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.DefineByAxisCenterRadius(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Boolean)">
            <summary>
            Redefines this torus by new data for a full torus.
            </summary>
            <param name="posCenter">New center.</param>
            <param name="vecAxis">New axis.</param>
            <param name="vecOrig">New origin direction.</param>
            <param name="dMajorRadius">New major radius.</param>
            <param name="dMinorRadius">New minor radius.</param>
            <param name="Solid">Whether solid.</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecOrig cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByAxisCenterRadius exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.DefineByAxisCenterRadiusSweep(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Redefines this torus by new data for a partial torus.
            </summary>
            <param name="posCenter">New center.</param>
            <param name="vecAxis">New axis.</param>
            <param name="vecOrig">New origin direction.</param>
            <param name="dMajorRadius">New major radius.</param>
            <param name="dMinorRadius">New minor radius.</param>
            <param name="dSweepAngle">New sweep angle.</param> 
            <param name="Solid">Whether solid.</param>
            <exception cref="T:System.ArgumentNullException">posCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecOrig cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByAxisCenterRadiusSweep exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the torus.
            </summary>
            <param name="iCS">ComplexString3d boundary.</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="i">Index boundary to remove.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the torus.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="i">Index boundary to set.</param>
            <param name="iCS">ComplexString3d boundary.</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries 
            and removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:System.ArgumentNullException">colCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Torus3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this torus by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.Center">
            <summary>
            Gets or sets the center.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.MajorRadius">
            <summary>
            Gets or sets the major radius.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.MinorRadius">
            <summary>
            Gets or sets the minor radius.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.OriginDir">
            <summary>
            Gets or sets the origin direction of the torus.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.Normal">
            <summary>
            Gets or sets the normal (axis) of the torus.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.ReverseV">
            <summary>
            Gets or sets reverse V.  Default direction for the V-parameterization is counter clockwise around the axis.
            If ReverseV = True, then V-parameterization is clockwise.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.Capped">
            <summary>
            Gets or sets whether capped or not;
            only if torus is a partial torus.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.Solid">
            <summary>
            Gets or sets whether solid or not.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.BoundaryCount">
            <summary>
            Gets the number of boundaries.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Torus3d.Range">
            <summary>
            Gets the range box of this torus.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.InvalidCSMatrixException">
            <summary>
            Raised when a matrix does not represent a valid coordinate system.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.InvalidParentException">
            <summary>
            Raised when failed to get the parent.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CoordinateSystem">
             <summary>
             The coordinate system .NET object.
             </summary>
             <example>This is an example for CoordinateSystem class methods and properties.
             <code>
             Public Class CoordinateSystem
               Public Sub New()
            
                  'Creating a new coordinate system given a model connection and type of coordinate system. 
            
                  'Getting the model connection.
                  Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                  Dim oPlantModel As Model = oSiteMgr.ActiveSite.ActivePlant.PlantModel
                  Dim oRootObj As BusinessObject = DirectCast(oPlantModel.RootSystem, BusinessObject)
                  Dim oModelConn As SP3DConnection = oRootObj.DBConnection
            
                  'Creating a new persistent coordinate system constructor of other type (other than ship or grid).
                  'Declaring a coordinate system type variable of other type. Other type refers to a type of coordinate system other than ship or grid.
                  Dim eOtherType As CoordinateSystem.CoordinateSystemType = CoordinateSystem.CoordinateSystemType.Other
                  Dim oNewCoordinateSystem As New CoordinateSystem(oModelConn, eOtherType)
                 
                  'Creating a transient grid type coordinate system that is not persisted.
                  Dim eGridType As CoordinateSystem.CoordinateSystemType = CoordinateSystem.CoordinateSystemType.Grids
                  Dim oGridCoordinateSystem As New CoordinateSystem(eGridType)
             
                  'Creating a transient ship type coordinate system that is not persisted. 
                  Dim eShipType As CoordinateSystem.CoordinateSystemType = CoordinateSystem.CoordinateSystemType.Ship
                  Dim oShipCoordinateSystem As New CoordinateSystem(eShipType)
                
                  'Creating a transient other type (other than grid or ship) coordinate system that is not persisted. 
                  Dim oOtherCoordinateSystem As New CoordinateSystem(eOtherType)
            
                  'Getting the allowed hand of a coordinate system.
                  Dim eAllowedHnd As CoordinateSystem.CoordinateSystemHand = oNewCoordinateSystem.AllowedHand
            
                  'Setting the allowed hand of a coordinate system.
                  'Setting the allowed hand to left hand.
                  Dim eLeftHand As CoordinateSystem.CoordinateSystemHand = CoordinateSystem.CoordinateSystemHand.LeftHand
                  oNewCoordinateSystem.AllowedHand = eLeftHand
            
                  'Setting the allowed hand to left hand. 
                  Dim eRightHand As CoordinateSystem.CoordinateSystemHand = CoordinateSystem.CoordinateSystemHand.RightHand
                  oNewCoordinateSystem.AllowedHand = eRightHand
            
                  'Getting the hand of the coordinate system.
                  'Calling the Hand property on the coordinate system.
                  Dim eHand As CoordinateSystem.CoordinateSystemHand
                  eHand = oNewCoordinateSystem.Hand
            
                  'Getting the coordinate system matrix. 
                  'Calling the Matrix property on the coordinate system. 
                  Dim oCoordinateSystemMatrix As New Matrix4X4()
                  oCoordinateSystemMatrix = oNewCoordinateSystem.Matrix
                 
                  'Getting the X-vector of the coordinate system.
                  Dim vXAxis As New Vector()
                  vXAxis = oNewCoordinateSystem.X
               
                  'Getting the Y-vector of the coordinate system.
                  Dim vYAxis As New Vector()
                  vYAxis = oNewCoordinateSystem.Y
            
                  'Getting the Z-vector of the coordinate system.
                  Dim vZAxis As New Vector()
                  vZAxis = oNewCoordinateSystem.Z
                  
                  'Getting the type of the coordinate system.
                  Dim oGridSystemType As CoordinateSystem.CoordinateSystemType
                  oGridSystemType = oGridCoordinateSystem.Type
            
                  'Getting the origin of the coordinate system.
                  Dim oGridSystemOrigin As Position = oGridCoordinateSystem.Origin
            
                  'Setting the origin of the coordinate system.
                  Dim oGridSystemNewOrigin As New Position(1, 1, 1)
                  oGridCoordinateSystem.Origin = oGridSystemNewOrigin
            
                  'Rotate a coordinate system. 
                  Dim oCurrentCoordinateSystemMatrix As New Matrix4X4()
                  oCurrentCoordinateSystemMatrix = oNewCoordinateSystem.Matrix
                  'Angle by which the coordinate system is rotated. 
                  Dim dAngle As Double = 1.5
                  'Z-axis by which the coordinate system is rotated. 
                  Dim dVector As New Vector(0, 0, 1)
                  'Rotating a coordinate system by an angle of dAngle about dVector.
                  oCurrentCoordinateSystemMatrix.Rotate(dAngle, dVector)
                  'Setting the rotated matrix on a coordinate system.
                  oNewCoordinateSystem.Matrix = oCurrentCoordinateSystemMatrix
            
                  'Getting the WBSItemParents of the coordinate system.
                  Dim oReadOnlyWBSParentCol As ReadOnlyCollection(Of IWBSItem)
                  oReadOnlyWBSParentCol = oNewCoordinateSystem.WBSItemParents
            
                  'Adding a system child of a coordinate system.
                  'Adding an Equipment object as system child.
            
                  Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
                  'Creating an equipment. 
                  Dim oEqp1 As Equipment = Nothing
                  oEqp1 = New Equipment("PUMP 001A-E", Nothing) 'Null system indicates that Equipment is created under project root. 
                  'Getting ILocalCoordinateSystem interface and setting the position of equipment. 
                  'Setting the position of the equipment. 
            
                  Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEqp1, ILocalCoordinateSystem)
                  Dim oPos As New Position()
                  oPos.X = 3
                  oPos.Y = 3
                  oPos.Z = 3
                  oEqpCS.Origin = oPos
            
                  'Committing the transaction.
                  oTransactionMgr.Commit("Placing Equipment")
            
                  'Adding equipment as a system hierarchy child.
                  'Calling AddSystemChild() on CoordinateSystem. 
                  Dim oSysChild As ISystemChild = DirectCast(oEqp1, ISystemChild)
                  oNewCoordinateSystem.AddSystemChild(oSysChild)
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor to wrap an existing coordinate system.
            </summary>
            <param name="oBOP">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.CreateCoordinateSystem(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemType)">
            <summary>
            Private function to create COM BO coordinate system.
            </summary>
            <param name="oConnection">Input connection.</param>
            <param name="oCSType">Coordinate system type.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemType)">
            <summary>
            Constructor for persistent instance.
            </summary>
            <param name="oConnection">Input connection.</param>
            <param name="oCSType">Coordinate system type.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.#ctor(Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemType)">
            <summary>
            Constructor for transient instance.
            </summary>
            <param name="oCSType">Coordinate system type.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.SetOrientation(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Sets the orientation of the coordinate system object.
            </summary>
            <param name="xAxisNew">X-axis of the coordinate system that needs to be set.</param>
            <param name="yAxisNew">Y-axis of the coordinate system that needs to be set.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.Ingr#SP3D#Common#Middle#ITransform#Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms the coordinate system with the given Matrix4X4.
            </summary>
            <param name="oT4x4">Transformation matrix by which the coordinate system is transformed.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.AddSystemChild(Ingr.SP3D.Common.Middle.ISystemChild)">
            <summary>
            Adds a wrapped business object as a system hierarchy child.
            </summary>
            <param name="oChild">Wrapped business object to be added as a child.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToAddSystemChildException">
            Failed to add the system hierarchy child.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.SetUserDefinedName(System.String)">
             <summary>
             Sets the name of an item.
             </summary>
             <param name="Name">The new name string.</param>
            <example>This example explains how to set the name.
            <code>
             'Define CoordinateSystem. 
             Dim oCoordinateSystem As CoordinateSystem = Nothing
             oCoordinateSystem.SetUserDefinedName("CoordinateSystem-101")
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.CoordinateSystem.GetNamedItemHelper">
            <summary>
            Private utility method to get and manage the named item helper object.
            </summary>
            <returns>m_oNamedItemHelper - Occurrence of the named item helper object.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.WBSItemChildHelperObj">
            <summary>
            Returns the WBSItemChild helper.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Type">
            <summary>
            Gets the coordinate system type.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.AllowedHand">
            <summary>
            Gets or sets the coordinate system hand allowed.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Hand">
            <summary>
            Gets the coordinate system hand.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Matrix">
            <summary>
            Gets or sets the matrix of the coordinate system.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Origin">
            <summary>
            Gets or sets the local coordinate system origin.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.XAxis">
            <summary>
            Local coordinate system X-axis.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.YAxis">
            <summary>
            Local coordinate system Y-axis.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.ZAxis">
            <summary>
            Local coordinate system Z-axis.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Ingr#SP3D#Common#Middle#IRange#Range">
            <summary>
            Gets the range of the coordinate system.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Ingr#SP3D#Common#Middle#ISystemChild#SystemParent">
            <summary>
            Gets or sets the system parent associated to the coordinate system.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.InvalidParentException">Parent is not found for this coordinate system, or it has more than one parent associated.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Ingr#SP3D#Common#Middle#ISystem#SystemChildren">
            <summary>
            Gets a collection of the system hierarchy children.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFailToGetSystemChildrenException">
            Failed to get the system hierarchy children.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.WBSItemParents">
            <summary>
            Gets the WBSItem parents for this item.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.CoordinateSystem.Name">
             <summary>
             Gets the read-only name.
             </summary>
            <example>This example explains how to get the name.
            <code>
             'Define CoordinateSystem. 
             Dim oCoordinateSystem As CoordinateSystem = Nothing
             Dim sName As String
             sName = CoordinateSystem.Name
            </code>
            </example>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemType">
            <summary>
            Coordinate system enumerated types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemType.Grids">
            <summary>
            The type = grids.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemType.Ship">
            <summary>
            The type = ship.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemType.Other">
            <summary>
            The type = Other (Other than grids and ship coordinate system).
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemHand">
            <summary>
            Coordinate system hand enumerated types.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemHand.RightHand">
            <summary>
            Right-handed coordinate system. 
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemHand.LeftHand">
            <summary>
            Left-handed coordinate system.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.CoordinateSystem.CoordinateSystemHand.RightAndLeftHand">
            <summary>
            Right-handed and left-handed coordinate system.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.WrapperProgIDAttribute">
            <summary>
            Summary description for SP3DWrapperProgIdAttribute.
            This attribute specifies wapper progID that needs to be created for a
            .NET symbol or .NET Custom Assembly Definition. This attribute can be used
            by other .NET assemblies which need to be accessed thorugh a wrapper.
            Wrapper object is a .NET component that is registered as COM object.
            Its main purpose is to instantiate a .NET class since COM world cannot
            directly instantiate a .NET class. Wrapper class creates .NET class
            during initialization and then redirects all the methods to .NET class.
            Wrapper doesn't implement any methods except Initialize which creates
            .NET class.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.WrapperProgIDAttribute.m_sProgID">
            <summary>
            Stores the ProgId
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.WrapperProgIDAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="progID">Argument ProgID string in the format ProjectName.ClassName</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.WrapperProgIDAttribute.ProgId">
            <summary>
            Gets the ProgId
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Vector">
             <summary>
             Vector object equivalent to a COM DVector object.
             </summary>
             <example>
             <code>
             Public Class Vector
               Public Sub New()
            
                'Create the Vector object. 
                Dim dX As Double, dY As Double, dZ As Double, dLength As Double
                dX = 20
                dY = 20
                dZ = 20
                'Create the Vector object with default values.
                Dim oVector1 As New Vector()
            
                'Create the Vector object using x, y, z.
                Dim oVector2 As New Vector(dX, dY, dZ)
            
                'Create the Vector object using x, y, z and bReadonly.
                Dim bReadonly As Boolean = True
                Dim oVectorRead As New Vector(dX, dY, dZ, bReadonly)
            
                'Create the Vector object using an existing vector.
                Dim oVectorCopy As New Vector(oVector2)
            
                'Set the values of x, y, z on oVector1.
                oVector1.X = 10
                oVector1.Y = 10
                oVector1.Z = 10
            
                'Get the values of x, y, z and length properties of oVector1.
                dX = oVector1.X
                dY = oVector1.Y
                dZ = oVector1.Z
                dLength = oVector1.Length
            
                Dim oVectorRes As New Vector()
                Dim dAngle As Double = 0, dDotValue As Double = 0
            
                'Addition by using the Add() method or operator '+'.
                oVectorRes = oVector1.Add(oVector2)
                oVectorRes = oVector1 + oVector2
            
                'Subtraction by using the Subtract() method or operator '-'.
                oVectorRes = oVector1.Subtract(oVector2)
                oVectorRes = oVector1 - oVector2
            
                'Cross product by using the Cross() method or operator '*'.
                oVectorRes = oVector1.Cross(oVector2)
                oVectorRes = oVector1 * oVector2
                
                'Dot product by using the Dot() method or operator 'Mod'.
                dDotValue = oVector1.Dot(oVector2)
                dDotValue = oVector1 Mod oVector2
            
                'Set the x, y, z values of a vector using the Set() method. 
                oVector1.[Set](40, 40, 40)
            
                'Scale the vector using the Scale() method. 
                oVector1.Scale(2)
            
                'Get the angle between two vectors using the Angle() method.
                dAngle = oVector1.Angle(oVector1, oVector2)
            
                'Compare the two vectors using Equal() method, operator '=', or '<![CDATA[<>]]>'.
            
                Dim bEqual As Boolean
                If oVectorCopy.Equals(oVector2) Then
                    bEqual = True
                Else
                    bEqual = False
                End If
            
                'Using operator '='.
                If oVectorCopy = oVector2 Then
                    bEqual = True
                Else
                    bEqual = False
                End If
            
                'Using operator '<![CDATA[<>]]>'.
                If oVectorCopy <![CDATA[<>]]> oVector1 Then
                    bEqual = False
                Else
                    bEqual = True
                End If
            
                'Transform the vector using given matrix.
                Dim oMatrix As New Matrix4X4()
                oMatrix.Scale(2)
                oVectorRes = oVector1 * oMatrix
            
                'Get the hash code using GetHashCode() method. 
                Dim iHCode As Integer
                iHCode = oVector1.GetHashCode()
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.#ctor">
            <summary>
            Constructs a Vector object and initializes x, y, and z components of vector to zero. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Vector object and initializes x, y, and z components of vector with the input values.
            </summary>
            <param name="xx">X component.</param>
            <param name="yy">Y component.</param>
            <param name="zz">Z component.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.#ctor(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Constructs a Vector object and initializes it with values from the input vector.
            </summary>
            <param name="inputVec">Input vector from which to initialize.</param>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructs a Vector object and initializes x, y, and z components of vector with the input values.
            </summary>
            <param name="xx">X component.</param>
            <param name="yy">Y component.</param>
            <param name="zz">Z component.</param>
            <param name="bReadOnly">Class is immutable.</param> 
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Scale(System.Double)">
            <summary>
            Scales the vector by the input value.
            </summary>
            <param name="scaleFactor">Scale factor.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyVectorException">Vector class is read-only.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Set(System.Double,System.Double,System.Double)">
            <summary>
            Sets the x, y, and z components.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyVectorException">Cannot change the read-only vector.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Get(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the x, y, and z components.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Cross(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the right-hand rule vector cross product of the input vector.
            </summary>
            <param name="rhs">Input vector.</param>
            <returns>Cross product with the input vector.</returns>
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Dot(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the scalar dot product value of the input vector.
            </summary>
            <param name="rhs">Input vector.</param>
            <returns>Dot product with the input vector.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Add(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the vector addition of the input vector.
            </summary>
            <param name="rhs">Input vector.</param>
            <returns>Result of addition with input vector.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Subtract(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the vector subtraction from the input vector.
            </summary>
            <param name="rhs">Input vector.</param>
            <returns>Returns the vector subtraction from the input vector.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Angle(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the angle between two vectors (range of angle is 0-2PI).
            </summary>
            <param name="rhs">Vector on the right-hand side.</param>
            <param name="norm">The normal vector.</param>
            <returns>Angle between two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">Values are invalid.</exception>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.IsCollinear(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns whether this vector and input vector is collinear.
            </summary>
            <param name="rhs">Input vector.</param>
            <returns>True if the two vectors are collinear.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.IsOrthogonal(Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns whether this vector and the input vector is orthogonal.
            </summary>
            <param name="rhs">Input vector.</param>
            <returns>True if the two vectors are orthogonal.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.GetOrthogonalVector">
            <summary>
            Returns an orthogonal Vector.
            </summary>
            <returns>A vector which is orthogonal to "this" vector.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.op_Addition(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the vector by adding the two input vectors, for example, Res = lfs+rhs.
            </summary>
            <param name="lhs">Vector on the left-hand side of operator.</param>
            <param name="rhs">Vector on the right-hand side of operator.</param>
            <returns>Returns the vector addition of the two input vectors.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.op_Subtraction(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the vector by subtracting the two input vectors, for example, Res = lfs-rhs.
            </summary>
            <param name="lhs">Vector on the left-hand side of operator.</param>
            <param name="rhs">Vector on the right-hand side of operator.</param>
            <returns>Returns the vector subtraction of lhs from the rhs vector.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.op_Modulus(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the dot product value of input vectors, for example, Res = lfs%rhs.
            </summary>
            <param name="lhs">Vector on the left-hand side of operator.</param>
            <param name="rhs">Vector on the right-hand side of operator.</param>
            <returns>Returns the Dot Product of lhs and rhs vector.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.op_Multiply(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the cross product value of input vectors, for example, Res = lfs*rhs.
            </summary>
            <param name="lhs">Vector on the left-hand side of operator.</param>
            <param name="rhs">Vector on the right-hand side of operator.</param>
            <returns>Returns the Cross Product of lhs and rhs vector.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.op_Inequality(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the result of two vectors by comparing x, y, and z components. It is a value-based comparison.
            </summary>
            <param name="lhs">Vector on the left-hand side of operator.</param>
            <param name="rhs">Vector on the right-hand side of operator.</param>
            <returns>Returns a value-based comparison results either of True or False.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.op_Equality(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Returns the result of two vectors by comparing x, y, and z components. != and == are to be implemented in sets.
            </summary>
            <param name="lhs">Vector on the left-hand side of operator.</param>
            <param name="rhs">Vector on the right-hand side of operator.</param>
            <returns>Returns value-based comparison results of either True or False.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.op_Multiply(Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Returns a vector transformed by the input matrix.
            </summary>
            <param name="lhs">Vector on the left-hand side of operator.</param>
            <param name="pMatrix">Transformation matrix.</param>
            <returns>Returns the vector Transformed by the input matrix.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid arguments.</exception>
            /// <remarks>
            <list type="table">
            <listheader>
            <term>G4x4 Matrix and Matrix4x4 as Column Major</term>
            </listheader>
              <item>
                <description>| 0  4   8  12 |</description>
              </item>
              <item>
                <description>| 1  5   9  13 |</description>
              </item>
              <item>
                <description>| 2  6  10  14 |</description>
              </item>
              <item>
                <description>| 3  7  11  15 |</description>
              </item>
            </list>
            <para>12, 13, and 14 elements represent the translation.</para>
            <para>Mathmetically, we should put position or vector on the right 
            when performing a transformation, so that a position or vector 
            is represented in a one-dimensional column (similarly for RangeBox).</para>
            <para>However, we put position or vector on the left to follow the 
            GTransf customs. Also only by putting on the left, we get 
            the automatic implementation of *=.</para>
            <para>***The internal implementation is still performed as if
            position or vector is on the right.</para>
             </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.Equals(System.Object)">
            <summary>
            Returns the result of two vectors by comparing x, y, and z components. != and == are to be implemented in sets.
            </summary>
            <param name="obj">Vector that needs to be compared.</param>
            <returns>Returns value-based comparison results of either True or False.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Vector.GetHashCode">
            <summary>
            Needs to be over-written when operator == is overloaded.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Vector.Length">
            <summary>
            Gets or sets the vector length from the input value. If set to 1, the vector is normalized.
            </summary>
            <returns>Length of the vector.</returns>
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Vector.X">
            <summary>
            Gets or sets the X-value.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyVectorException">X is read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">Values are invalid.</exception>        
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Vector.Y">
            <summary>
            Gets or sets the Y-value.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyVectorException">Y is read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">Values are invalid.</exception>        
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Vector.Z">
            <summary>
            Gets or sets the Z-value.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyVectorException">Z is read-only.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">Values are invalid.</exception>                
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnReadOnlyVectorException">
            <summary>
            Raised if there is an attempt to set the value on a read-only vector. 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnReadOnlyVectorException.#ctor">
            <summary>
            Initializes a new instance of the CmnReadOnlyVectorException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException">
            <summary>
            Raised when values are invalid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnValueInvalidException.#ctor">
            <summary>
            Initializes a new instance of the CmnValueInvalidException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetFilterFolderFromFolderPath(System.String)">
            <summary>
            
            </summary>
            <param name="sFolderPath">The path the Folder. e.g. "My Filters\\MyFolder1\\MySubFolder11"</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetNextLevelFolderFromFolderHierByName(GSCADMiddleFilters.IJFilterFolder,System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="oParentFolder"></param>
            <param name="sstrParsedFolderPath"></param>
            <param name="iLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetGDInterfaceNamesStringFromBOCNode(Ingr.SP3D.Common.Middle.Services.BOCInformation)">
            <summary>
            Return a concatenated string of GD interfaces of a given BOC node.
            </summary>
            <param name="oBOCNode">BOCInformation</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetTypedCOMObjects(System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.HierarchyTypes,System.Boolean@)">
            <summary>
            Returns a collection of COM objects that support a set of interfaces according to filter types
            it also returns a flag telling if there are any other type of objects in the pased in collection of objects (BusinessObject)
            </summary>
            <param name="lSOMObjs"></param>
            <param name="eHierType"></param>
            <param name="bTypeMismatch"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetRefAttachFileObjectsFromRefFileName(System.Collections.ObjectModel.Collection{System.String},System.Boolean@)">
            <summary>
            This method returns a collection of RefAttachFile objects given a list of RefFile names
            </summary>
            <param name="ReferenceFileNames"></param>
            <param name="bTypeMismatch"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetPDSHierObjects(System.Collections.Generic.List{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            returns a collection of COM objects that support PDS hierarchy
            </summary>
            <param name="HierObjectCol"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetAdapterProgIDByType(Ingr.SP3D.Common.Middle.HierarchyTypes)">
            <summary>
            Gets the AdapterID corresponding to COM filter types
            </summary>
            <param name="eHierType"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetSP3DMiddleFitlerTypeBySOMType(Ingr.SP3D.Common.Middle.HierarchyTypes)">
            <summary>
            Converts a SmartPlant 3D .NET filter type into a COM filter type.
            </summary>
            <param name="eHierType">HierarchyTypes enumerator value.</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetFilterRelationshipNameByType(Ingr.SP3D.Common.Middle.HierarchyTypes)">
            <summary>
            Gets the relation name that will be used in persisting the values into the database.
            </summary>
            <param name="eHierType">HierarchyTypes enumerator value.</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetHierFilterTypeFromSOMHierType(Ingr.SP3D.Common.Middle.HierarchyTypes)">
            <summary>
            
            </summary>
            <param name="eHierType"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.GetTypedPropValue(Ingr.SP3D.Common.Middle.PropertyValue)">
            <summary>
            For propertiesFilter to returns the actual value of a given type
            </summary>
            <param name="oPropValue"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterUtility.FilterExistInFolder(System.String,GSCADMiddleFilters.IJFilterFolder)">
            <summary>
            check if a given filter name already exists in a given folder
            </summary>
            <param name="sName"></param>
            <param name="oIJFilterFolder"></param>
            <returns></returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterStrategies">
            <summary>
            Enumerator of strategies used in FilterObject methods.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterStrategies.BindingMoniker">
            <summary>
            Binding objects.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterStrategies.DatabaseQueryResult">
            <summary>
            Execute filter query.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.FilterStrategies.Automatic">
            <summary>
            Automatically decide.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors">
            <summary>
            Enumerator of COMMiddleFiltersErrors.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_FILTERNOTINITIALIZED">
            <summary>
            Middle error filter not initialized.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_FILTERNOTFOUND">
            <summary>
            Middle error filter not found.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_SQLQUERYEXECFAILED">
            <summary>
            Middle error filter SQL query executable failed.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_INVALIDSQLQUERYTEXT">
            <summary>
            Middle error filter invalid SQL query text.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_INVALIDSQLREADQUERY">
            <summary>
            Middle error filter invalid SQL read query.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_INVALIDSQLQUERYFORMAT">
            <summary>
            Middle error filter invalid SQL query format.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_PARAMETERSNOTSUPPLIED">
            <summary>
            Middle error filter parameters not supplied.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.COMMiddleFiltersErrors.MF_E_MK_NOOBJECT">
            <summary>
            Middle error filter has no object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">
            <summary>
            Raised because the filter has been deleted or does not exist.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterNotValidException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException">
            <summary>
            Raised because the filter cannot be created due to access denied, name already exists, or others (reason can be specified).
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterCannotBeCreatedException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnFilterCannotBeCreatedException class.
            </summary>
            <param name="sErrMsg">String with error.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFilterCannotBeCreatedException class.
            </summary>
            <param name="iID">integer</param>
            <param name="sDefaultString">String with error.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeCreatedException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterCannotBeCreatedException class.
            </summary>
            <param name="iID">integer</param>
            <param name="sDefaultString">String with error.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeModifiedException">
            <summary>
            Raised when a user tries to modify an existing or completed filter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotBeModifiedException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterCannotBeModifiedException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException">
            <summary>
            Raised when the folder does not exist, has been deleted, or the folder path is in wrong format or does not exist.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterFolderInvalidException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFolderInvalidException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterFolderInvalidException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">The inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException">
            <summary>
            Raised if the folder can't be accessed by the user.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFolderNotAccessibleException.#ctor">
             <summary>
            Initializes a new instance of the CmnFilterFolderNotAccessibleException class. 
             </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterConnectionMismatchException">
            <summary>
            Raised when the connection needs to match the filter query type, 
            e.g. ReferenceFilters need Reference Connection, PDSFitlers need PDS Connection,
            and other filters need Mode/Report connection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterConnectionMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnFilterConnectionMismatchException class.
            </summary>
            <param name="sErrMsg">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterConnectionMismatchException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFilterConnectionMismatchException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetConnectionException">
            <summary>
            Raised when the required connection is not available for the filter query.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetConnectionException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterCannotGetConnectionException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetConnectionException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterCannotGetConnectionException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException">
            <summary>
            Raised when the filter cannot be applied due to errors in BuildQuery and executing MiddleCommand.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnFilterApplyFailedException class.
            </summary>
            <param name="sErrMsg">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFilterApplyFailedException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterApplyFailedException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterApplyFailedException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">The error message that explains the reason for the exception.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotSetQueryStringException">
            <summary>
            Raised when the specified SQL string cannot be assigned to an SQLFilter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotSetQueryStringException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterCannotSetQueryStringException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException">
            <summary>
            Raised when the logical operators are not matched with each other or in the wrong order.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnFilterLogicOperatorMismatchException class with the message passed in.
            </summary>
            <param name="sErrMsg">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFilterLogicOperatorMismatchException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterLogicOperatorMismatchException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterLogicOperatorMismatchException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">Default string for the exception.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotAddLogicalOperatorException">
            <summary>
            Raised when the logical operators cannot be added to a compound filter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotAddLogicalOperatorException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterCannotAddLogicalOperatorException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotAddFilterException">
            <summary>
            Raised when consistent filters cannot be added to a compound filter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotAddFilterException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterCannotAddFilterException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException">
            <summary>
            Raised when a parametric filter does not have parameters provided.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterParameterNotSuppliedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFilterParameterNotSuppliedException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="COMEx">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException">
            <summary>
            Raised when the nested filter(s) of a GenericCompoundFilter cannot be found.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterNestedFilterNotFoundException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFilterNestedFilterNotFoundException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="COMEx">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException">
            <summary>
            Raised when the consistent elements of a simple filter are not provided or deleted.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterNotInitializedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFilterNotInitializedException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="COMEx">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedInExecutingQueryException">
            <summary>
            Raised when the filter query string cannot be executed in MiddleCommand.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedInExecutingQueryException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFilterFailedInExecutingQueryException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="COMEx">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterSQLQueryInvalidException">
            <summary>
            Raised when the SQLFilter query string is too long, short, or contains illegal keywords.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterSQLQueryInvalidException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFilterSQLQueryInvalidException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="COMEx">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterException">
            <summary>
            Raised when an unknown error is encountered. Detailed error description is available in the error log.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFilterException class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="COMEx">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException">
            <summary>
            Raised when there are Metadata errors.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddObjTypeException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnFilterMetadataException class.
            </summary>
            <param name="sErrMsg">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFilterMetadataException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterMetadataException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterMetadataException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">The error message that explains the reason for the exception.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterInvalidBOCException">
            <summary>
            Raised when there is an invalid BOC path.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterInvalidBOCException.#ctor">
             <summary>
            Initializes a new instance of the CmnFilterInvalidBOCException class.
             </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddObjTypeException">
            <summary>
            Raised when the object type cannot be added to the filter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddObjTypeException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddObjTypeException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException">
            <summary>
            Raised when the property is not valid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterPropInvalidException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterPropInvalidException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException">
            <summary>
            Raised when two properties are not matched.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterPropMismatchException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterPropMismatchException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception">
            <summary>
            Raised when properties cannot be added.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddPropertyexception.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddPropertyexception class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddHierObjectsException">
            <summary>
            Raised when hierarchy objects cannot be added to the filter definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddHierObjectsException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddHierObjectsException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddRefPlanesException">
            <summary>
            Raised when reference planes cannot be added to the filter definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddRefPlanesException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddRefPlanesException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddForeignReferenceException">
            <summary>
            Failed when foreign references cannot be added to the filter definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddForeignReferenceException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddForeignReferenceException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException">
            <summary>
            Failed when objects cannot be added to the transient filter definition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddToTransientFilterException class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddToTransientFilterException class.
            </summary>
            <param name="sErrMsg">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the CmnFilterFailedToAddToTransientFilterException class.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetObjectException">
            <summary>
            Raised when the filter cannot get an object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterCannotGetObjectException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterCannotGetObjectException class with a
            reference to the inner Exception that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">string</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCompoundFilterOperatorMissingException">
            <summary>
            Raised when the compound filter is missing CompoundFilterOperator infront of OpenParen operator.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCompoundFilterOperatorMissingException.#ctor">
            <summary>
            Initializes a new instance of the CmnCompoundFilterOperatorMissingException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterTransientFilterNotAllowedException">
            <summary>
            Raised when a transient filter is added as a member of persistent compound filter.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterTransientFilterNotAllowedException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterTransientFilterNotAllowedException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterInvalidOperatorException">
            <summary>
            Raised when a compound filter operator is invalid.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterInvalidOperatorException.#ctor">
            <summary>
            Initializes a new instance of the CmnFilterInvalidOperatorException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFilterSupplyParametersException">
            <summary>
            Raised when SupplyParameters method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFilterSupplyParametersException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the CmnFilterSupplyParametersException class.
            </summary>
            <param name="ex">Inner Exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.VolumeCG">
            <summary>
            .NET wrapper for WCGPropHolder. Holds values of the volume and center of gravity.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.VolumeCG.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Contructor used by the .NET API.
            </summary>
            <param name="oPBO"> Private Business Object.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.VolumeCG.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the volume center of gravity with a given volume and center of gravity X, Y, and Z values.
            </summary>
            <param name="oConnection"> Connection to the database. </param>
            <param name="dVol"> Volume value. </param>
            <param name="dCOGX"> Center of gravity position for X. </param>
            <param name="dCOGY"> Center of gravity position for Y. </param>
            <param name="dCOGZ"> Center of gravity position for Z. </param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.VolumeCG.GetWCGValue(System.String)">
            <summary>
            Gets the value of the property from the internal WCG PropHolder
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.VolumeCG.SetWCGValue(System.String,System.Double)">
            <summary>
            Set value of the property from internal WCG PropHolder
            </summary>
            <param name="propName"> Property Name </param>
            <param name="val"> Value of the property </param>
            <returns></returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.VolumeCG.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.VolumeCG.COGX">
            <summary>
            Gets or sets the center of gravity position for X.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.VolumeCG.COGY">
            <summary>
            Gets or sets the center of gravity position for Y.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.VolumeCG.COGZ">
            <summary>
            Gets or sets the center of gravity position for Z.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetPermissionGroupsException">
            <summary>
            This exception is thrown when code fails to get PermissionGroups.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetPermissionGroupsException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToGetPermissionGroupsException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetLocationException">
            <summary>
            This exception is thrown when code fails to get the Location object.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetLocationException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToGetLocationException 
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToSetActivePermissionGroupException">
            <summary>
            This exception is thrown when code fails to set an ActivePermissionGroup.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToSetActivePermissionGroupException.#ctor">
            <summary>
            Initializes a new instance of the CmnFailedToSetActivePermissionGroupException 
            class.
            </summary>        
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToSetActivePermissionGroupException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToSetActivePermissionGroupException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnFailedToGetActivePermissionGroupException">
            <summary>
            This exception is thrown when a COM exception occurs calling 
            GSCADMiddleContextProj.IJAccessControlConfiguration.AccessControl.GetActiveConditionID.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnFailedToGetActivePermissionGroupException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnFailedToGetActivePermissionGroupException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IMathServices">
            <summary>
            Math Services interface
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IMathServices.GetOrientedRangeBox(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Finds a tight box around the given objects wrt principal axes. This method calculates the principal 
            axes of the given objects.
            </summary>
            <param name="oObjs">Collection of input objects.</param>
            <returns>An OrientedRangeBox, which is defined by Origin and 3 vectors.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IMathServices.GetOrientedRangeBox(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a tight box around the given objects wrt to principal axes.  Given vector is used as one of 
            the principal directions and the other 2 principal directions are calculated by this routine.
            </summary>
            <param name="oObjs">Collection of Business Objects.</param>
            <param name="Vec">One of the principal axis.</param>
            <returns>An OrientedRangeBox, which is defined by Origin and 3 vectors.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.IMathServices.GetOrientedRangeBox(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a tight box around the given objects wrt principal axes. Given vectors are used as the principal vectors,
            plus a 3rd vector is calculated from given 2 vectors.
            </summary>
            <param name="oObjs">Collection of Business Objects.</param>
            <param name="Vec1">Vec1 and Vec2 define an orthogonal system.</param>
            <param name="Vec2">Vec1 and Vec2 define an orthogonal system.</param>
            <returns>An OrientedRangeBox, which is defined by Origin and 3 vectors.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Math3d">
            <summary>
            Class which holds math constants.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Math3d.DistanceTolerance">
            <summary>
            The tolerance used to determine whether two points are equal.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Math3d.RelativeTolerance">
            <summary>
            The tolerance used to determine whether two points are relative to each other.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Math3d.FitTolerance">
            <summary>
            The tolerance used to determine whether two points are relative to each other.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Math3d.GINFINITY">
            <summary>
            GINFINITY is used internally, and it is the value which is considered to be equal to infinity.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.Deg(System.Double)">
            <summary>
            The unit is in degrees.
            </summary>
            <param name="dRadNumber">double</param>
            <returns>dDeg</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.Rad(System.Double)">
            <summary>
            The unit is in radians.
            </summary>
            <param name="dDegNumber">double</param>
            <returns>dRad</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.CosDeg(System.Double)">
            <summary>
            The cosine of elements when the unit is degrees.
            </summary>
            <param name="dDegAngle">double</param>
            <returns>dCosDeg</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.SinDeg(System.Double)">
            <summary>
            The sine of elements when the unit is degrees.
            </summary>
            <param name="dDegAngle">double</param>
            <returns>dSinDeg</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.TanDeg(System.Double)">
            <summary>
            The tangent of elements when the unit is degrees.
            </summary>
            <param name="dDegAngle">double</param>
            <returns>dTanDeg</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.ACosDeg(System.Double)">
            <summary>
            The arccosine of elements when the unit is degrees.
            </summary>
            <param name="dDegAngle">double</param>
            <returns>dACosDeg</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.ASinDeg(System.Double)">
            <summary>
            The arcsine of elements when the unit is degrees.
            </summary>
            <param name="dDegAngle">double</param>
            <returns>dASinDeg</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.ATanDeg(System.Double)">
            <summary>
            The arctangent of elements when the unit is degrees.
            </summary>
            <param name="dDegAngle">double</param>
            <returns>dATanDeg</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.GetOrientedRangeBox(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Finds a tight box around the given objects wrt principal axes. This method calculates the principal 
            axes of the given objects.
            </summary>
            <param name="oObjs">Collection of input objects.</param>
            <returns>An OrientedRangeBox, which is defined by Origin and 3 vectors.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.GetOrientedRangeBox(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a tight box around the given objects wrt to principal axes.  Given vector is used as one of 
            the principal directions and the other 2 principal directions are calculated by this routine.
            </summary>
            <param name="oObjs">Collection of Business Objects.</param>
            <param name="Vec">One of the principal axis.</param>
            <returns>An OrientedRangeBox, which is defined by Origin and 3 vectors.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Math3d.GetOrientedRangeBox(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject},Ingr.SP3D.Common.Middle.Vector,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Finds a tight box around the given objects wrt principal axes. Given vectors are used as the principal vectors,
            plus a 3rd vector is calculated from given 2 vectors.
            </summary>
            <param name="oObjs">Collection of Business Objects.</param>
            <param name="Vec1">Vec1 and Vec2 define an orthogonal system.</param>
            <param name="Vec2">Vec1 and Vec2 define an orthogonal system.</param>
            <returns>An OrientedRangeBox, which is defined by Origin and 3 vectors.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.DefinitionCollection">
            <summary>
            DefinitionCollection class. This collection object is used to colloect the 
            symbol definition objects.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.DefinitionCollection.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            DefinitionCollection constructor.
            </summary>
            <param name="oConnection"></param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.DefinitionCollection.SetDefinition(Ingr.SP3D.Common.Middle.SymbolDefinition)">
            <summary>
            Adds s Symbol definition to definition collection if it is not already in the
            the collection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.DefinitionCollection.GetDefinitionByProgId(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Gets symbol definition given progID.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Output">
            <summary>
            This is an internal class to keep outputs created for all representations.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.PrivateBusinessObject">
            <summary>
            PrivateBusinessObject is the "true" wrapper of the SP3D BusinessObject.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PrivateBusinessObject.m_oCOMObject">
            <summary>
            Represents the COM object as System.object, that corresponds to this PrivateBusinessObject.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.PrivateBusinessObject.m_oConnection">
            <summary>
            Represents the connection object as Ingr.SP3D.Common.Middle.Services.SP3DConnection, that corresponds to this PrivateBusinessObject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.#ctor">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.PrivateBusinessObject class.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.#ctor(System.Object,Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Initializes a new instance of the Ingr.SP3D.Common.Middle.PrivateBusinessObject class
            with a moniker and connection.
            </summary>
            <param name="oMoniker">Moniker of COM business object as System.Object. Moniker must support RESPOMLib.IMoniker.</param>
            <param name="oConnection">Connection of business object as Ingr.SP3D.Common.Middle.Services.SP3DConnection.</param>
            <remarks>This constructor is used by the .NET connection.</remarks>
            <exception cref="T:System.ArgumentNullException">oMoniker is null. Argument passed into the constructor of PrivateBusinessObject should not be null.</exception>
            <exception cref="T:System.ArgumentNullException">SP3DConnection is null. Argument passed into the constructor of PrivateBusinessObject should not be null.</exception>
            <exception cref="T:System.ArgumentException">oMoniker is not an RESPOMLib.IMoniker type.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.Finalize">
            <summary>
            Destructor for PrivateBusinessObject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.Dispose">
            <summary>
            Diposes this PrivateBusinessObject instance.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.Dispose(System.Boolean)">
            <summary>
            Dispose resources.
            </summary>
            <param name="bDisposing">True indicates this is called explicitly from user code; False indicates this is called from the destructor.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.GetCOMObject">
            <summary>
            Returns the COM object that corresponds to this PrivateBusinessObject.
            </summary>
            <returns>SP3D COM object as System.Object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.IsComObjectBound">
            <summary>
            Returns a boolean indicating whether the COM business object is bound.
            </summary>
            <returns>System.Boolean</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.BindComObjectUsingConnection(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            Binds a COM object on the connection supplied. Caller must remove PrivateBusinessObject 
            from the invalid connection and add it to the valid connection.
            </summary>
            <param name="oConnection">Ingr.SP3D.Common.Middle.Services.SP3DConnection.</param>
            <returns>System.bool. True if bind was successful; otherwise, false.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">Connection.POM returned NULL.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.DetermineConnection">
            <summary>
            Determines the valid connection for Suspect-PrivateBusinessObject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.PrivateBusinessObject.GetSP3DCOMObject">
            <summary>
            Binds the COM business object and returns it.
            </summary>
            <returns>COM object as System.object.</returns>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">POM returned from connection is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">Object corresponding to moniker does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnComObjectNullException">Calling IJDPOM.GetObject returned null.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.Moniker">
            <summary>
            Gets a moniker that corresponds to this PrivateBusinessObject.
            </summary>
            <returns>RESPOMLib.IMoniker.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.Connection">
            <summary>
            Gets a connection that corresponds to this PrivateBusinessObject.
            </summary>
            <returns>Ingr.SP3D.Common.Middle.Services.SP3DConnection.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.COMObject">
            <summary>
            Set/Get the wrappered COM business object. Manipulated as .NET object, internally as IUnknown COM.
            </summary>
            <returns>COM business object as System.object.</returns>
            <remarks>Suspect-PrivateBusinessObjects are PrivateBusinessObjects whose connection is unknown until they are bound.</remarks>
            <exception cref="T:System.InvalidOperationException">Cannot change COM object reference. PrivateBusinessObject is already initialized.</exception>
            <exception cref="T:System.InvalidOperationException">Cannot change COM object reference for initialized Suspect-PrivateBusinessObjects.</exception>        
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.NonSystemMoniker">
            <summary>
            Gets or sets a non-system moniker.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.WeakReferenceToBusinessObject">
            <summary>
            Gets or sets the WeakReference object to the BusinessObject that 
            corresponds to this PrivateBusinessObject.
            </summary>
            <returns>System.WeakReference.</returns>
            <remarks>This is used to maintain a one-one, BusinessObject-PrivateBusinessObject, pair.</remarks>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.IsConnectionSuspect">
            <summary>
            Gets or sets a value indicating whether the connection, used in this PrivateBusinessObject, is a suspect connection.
            </summary>
            <returns>System.Boolean</returns>
            <remarks>This property is used for suspect PrivateBusinessObjects. Suspect-PrivateBusinessObjects 
            are PrivateBusinessObjects whose connection is unknown until they are bound.</remarks>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.IsProxy">
            <summary>
            Returns a boolean indicating whether the COM business object is a proxy.
            </summary>
            <returns>System.Boolean</returns>
            <remarks>This property is set (internal access) by the connection when this object is instantiated.</remarks>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.PrivateBusinessObject.IsTransient">
            <summary>
            Returns a boolean indicating whether the COM business object is transient.
            </summary>
            <returns>System.Boolean</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnPomNullException">
            <summary>
            This exception is thrown when Connection.POM returns null.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnPomNullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnPomNullException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException">
            <summary>
            This exception is thrown when a COMException with error code MK_E_NOOBJECT is raised by calling IJDPOM.GetObject with a moniker.
            </summary>
            <remarks>This means an attempt was made to bind to a moniker whose object has been deleted from database.</remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoObjectForMonikerException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoObjectForMonikerException 
            class with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnComObjectNullException">
            <summary>
            This exception is thrown when a null is returned by calling IJDPOM.GetObject.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnComObjectNullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnComObjectNullException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnTransientObjectException">
            <summary>
            This exception is thrown when a transient business object is 
            used in cases where it is not supported.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnTransientObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnTransientObjectException 
            class with the message passed in.
            </summary>
            <param name="sMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.ISelectionRuleHelper">
            <summary>
            Implemented only by the selection rule wrapper for the selection rule to
            access data associated with the middle-tier rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ISelectionRuleHelper.Occurrence">
            <summary>
            Provides the occurrence in the model which is related to the rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ISelectionRuleHelper.PartClass">
            <summary>
            Returns the PartClass object related to the rule.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.ISelectionRuleHelper.Inputs">
            <summary>
            Returns the inputs of the symbol/CustomAssembly to the selection rule.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper">
            <summary>
            Internal Class for Database and ProjectMgmtHelper related methods.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetDataBaseCollation(System.String,System.String)">
            <summary>
            GetDataBaseCollation returns the Collation of the given DataBase. Only valid for SQL server
            </summary>
            <param name="sServerName">Name of the server on which database exists.</param>
            <param name="sDataBaseName">Name of the database whose collation is required.</param>
            <returns>DataBaseCollation string.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.RunSelectQuery(System.String,System.String,System.String,System.String)">
            <summary>
            Run a query to select some rows in the database.
            Return the selected rows as a DataTable
            </summary>
            <param name="strServerName">Name of the server instance</param>
            <param name="strDatabaseName">Name of the SQL database or Oracle schema to connect to</param>
            <param name="strSelectQuery">The "Select..." query to execute</param>
            <param name="strDBProvider">Server type: must be "mssql" or "oracle"</param>
            <returns>The selected rows as a DataTable. Null reference if nothing</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.RunSelectQuery(System.String,System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            Run a query to select some rows in the database.
            Return the selected rows as a DataTable
            </summary>
            <param name="strServerName">Name of the server instance</param>
            <param name="strDatabaseName">Name of the SQL database or Oracle schema to connect to</param>
            <param name="strSelectQuery">The "Select..." query to execute</param>
            <param name="eProvider">Server type</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ExecuteNonQuery(System.String,System.String,System.String,System.String)">
            <summary>
            Run a statement to perform some action in the database.
            For example, insert some rows, delete some indexes...
            </summary>
            <param name="strServerName">Name of the server instance</param>
            <param name="strDatabaseName">Name of the SQL database or Oracle schema to connect to</param>
            <param name="strExcuteNonQuery">The "Select..." query to execute</param>
            <param name="strDBProvider">Server type: must be "mssql" or "oracle"</param>
            <returns>The number of rows affected if it makes sense. 0 otherwise.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ExecuteNonQuery(System.String,System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            Run a statement to perform some action in the database.
            For example, insert some rows, delete some indexes...
            </summary>
            <param name="strServerName">Name of the server instance</param>
            <param name="strDatabaseName">Name of the SQL database or Oracle schema to connect to</param>
            <param name="strExcuteNonQuery">The "Select..." query to execute</param>
            <param name="eProvider">Server type</param>
            <returns>The number of rows affected if it makes sense. 0 otherwise.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ExecuteScalarQuery(System.String,System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            Execute a query that returns a single row with an integer 
            </summary>
            <param name="strServerName">Name of the server instance</param>
            <param name="strDatabaseName">Name of the SQL database or Oracle schema to connect to</param>
            <param name="strExcuteNonQuery">The "Select..." query to execute that returns a single row with the first value being an integer</param>
            <param name="eProvider">MSSQL or Oracle</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.DropDataBase(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String)">
            <summary>
            DropDataBase deletes the Specified database.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CheckIfPhysicalDatabaseExists(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String)">
            <summary>
            CheckIfPhysicalDatabaseExists checks whether the Database exists on the server for SQL.
            </summary>
            <param name="eDBType">The type MSSQL or Oracle</param>
            <param name="sServer">The server name where the database of schema is located </param>
            <param name="sDBName">The database or Oracle schema name</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetDefaultDBLocationAndLogFileLocation(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String@,System.String@)">
            <summary>
            GetDefaultDBLocationAndLogFileLocation will return the default DataBase and LogFile locations on the server,it can be sql/oracle.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetSQLDatabaseSize(System.String,System.String)">
             <summary>
             Return the databse size for SQL server. 
             </summary>
            <param name="sServer">Name of the server.</param>
             <param name="sDBName">Name of the sql database the size is required.</param>
             <returns>The size of the database in MB</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetOracleSchemaSize(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sServiceName">Oracle service name</param>
            <param name="sSchemaName">Oracle schema name to compute the size</param>
            <returns>The size in MB</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetActualDBandLogFileLocations(System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            GetActualDBandLogFileLocations will return the actual Db and logfile locations of the database.  
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.IsNameGeneratorExists(System.String)">
            <summary>
            IsNameGeneratorExists  will check if the specified Namegenerator exists.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.IsNameGeneratorStarted(Ingr.SP3D.Common.Middle.Services.SP3DConnection)">
            <summary>
            IsNameGeneratorStarted will check if the specified Namegenerator is started.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ValidateServer(System.String,System.String)">
            <summary>
            ValidateServer will check if the passed in server exists in the list of servers on Sql/Oracle.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetRegisteredServersOrServices(System.String)">
            <summary>
            GetRegisteredServersOrServices will return all the available servers on Sql/Oracle.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ReadServiceNames(System.String,System.Collections.ObjectModel.Collection{System.String}@)">
            <summary>
            ReadServiceNames will return all the available services on Oracle.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.RunScripts(System.String,System.String,System.String,System.String)">
            <summary>
            RunScripts will execute the passed in script on the server specified.It can be sql/oracle and will return the Recordset.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetCurrentAccountUserName(System.Boolean)">
            <summary>
            Return the current user either with domain  name or without domain name
            </summary>
            <param name="bWithDomain">If true, the name also contain the domain name. If false the name is without domain name.</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetNameGeneratorServerPath(System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            Given the Site server name and Site Database name, return the NameGenerator location.
            </summary>
            <param name="strServerName"></param>
            <param name="strDatabaseName"></param>
            <param name="eDBProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.SetNameGeneratorServerPath(System.String,System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            SetNameGeneratorServerPath will 
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetCabServerPathFromCatalog(System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            Return the SymbolShare path given the catalog database name and server name
            </summary>
            <param name="strServerName">The name of the server</param>
            <param name="strCatDBName">The name of the catalog database</param>
            <param name="eDBProvider">The Database type provider</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.IsDatabaseOutOfDate(System.String,System.String,System.String,System.String@,System.String@,System.String@)">
            <summary>
            Returns whether the given Database is out of date. If out if date, return package registry and database version
            </summary>
            <param name="strServerName">Name of the server</param>
            <param name="strDatabaseName">Name of the database</param>
            <param name="strProvider">"MSSQL" or "ORACLE"</param>
            <param name="strPackage">Name of the out of date package (or empty string if none)</param>
            <param name="strRegVersion">Registry version fo the out of date package (or empty string if none)</param>
            <param name="strDBVersion">Registry version fo the out of date package (or empty string if none)</param>
            <returns></returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GenerateViews(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.String,System.String@,System.Boolean@)">
            <summary>
            Generate the views in the given database
            </summary>
            <param name="eDBType">Type of database</param>
            <param name="sDatabaseServer">Name of the server</param>
            <param name="sDBName">Name of the data database</param>
            <param name="sDBSchemaName">Name of associated schema database</param>
            <param name="sLogFileName">View generator log file name</param>
            <param name="bWarning">True if some warning were generated</param>
            <returns>True if no errors or warning, false otherwise</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.IsS3DHostRunning">
            <summary>
            IsS3DHostRunning will return True if SP3D TaskHost is running else returns False.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CanOracleServerWriteInDirectory(System.String,System.String)">
            <summary>
            CanOracleServerWriteInDirectory will check if the user has permission to access the specified directory.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ReadBCFFile(System.String,System.String@,System.String@)">
            <summary>
            ReadBCFFile will read the bcf file and return the required parameteres.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.SetTransactionIsolationLevelOnSQL2005Database(System.String,System.String,System.String)">
            <summary>
            SetTransactionIsolationLevelOnSQL2005Database
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetProjectRoot(System.String)">
            <summary>
            Returns project root for given plant name.
            </summary>
            <param name="sPlantName">Plant name.</param>
            <returns>project root object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.UpdateRegistryEntries(System.String,System.String,System.String,System.String,Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes)">
            <summary>
            UpdateRegistryEntries with Server, Site and SiteSchema information.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateOrRestorePlant(Ingr.SP3D.Common.Middle.Services.Site,System.String,Ingr.SP3D.Common.Middle.Services.CatalogDatabaseInformation,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Used to create / restore the model and add the required permissions on it.
            </summary>
            <param name="oSite" >Site Object.</param>
            <param name="sDatabaseServer">Database server.</param>
            <param name="oCatalogDBInfo">Catalog db information object.</param>
            <param name="sPlantName">Plant name.</param>
            <param name="sModelDBName" >model database name.</param>
            <param name="sDBLoc" >database location path.</param>
            <param name="sLogFileLoc" >log file location path.</param>
            <param name="bRestorePlant">Restore plant bool.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateRootObjectForProjectFilter(System.String)">
            <summary>
            Used to create root object for project filter in the given plant.
            </summary>
            <param name="sPlantName">Plant name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateRuleManagerNode(System.String)">
            <summary>
            This API is used to create rule manager object under the given plant.
            </summary>
            <param name="sPlantName">Plant name</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateDefaultPGFandPGforModel(Ingr.SP3D.Common.Middle.Services.Site,System.String)">
            <summary>
            This API used to create default permission group folder and permission group for newly created plant.
            </summary>
            <param name="oSite" >Site object.</param>
            <param name="sPlantName">Plant name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateConfigProjectRoot(System.String)">
            <summary>
            Used to create config project root for the given plant.
            </summary>
            <param name="sPlantName">Plant name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.IsCatalogInSite(System.String)">
            <summary>
            returns true if given catalog is in our site.
            </summary>
            <param name="sCatalogName">Catalog name.</param>
            <returns>true if given catalog is in site.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.RestoreOracleDB(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Restore oracle data base with provided backup or dump file.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CompileSchema(System.String,System.String)">
            <summary>
            Compiles InvalidObjects in OracleDB.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GatherSchemaStats(System.String,System.String,System.Boolean)">
            <summary>
            GatherSchemaStats
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.DoesUserHavePrivilege(System.String,System.String,System.Boolean)">
            <summary>
            DoesUserHavePrivilege
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.DoesRoleHavePrivilege(Ingr.SP3D.Common.Middle.Services.Hidden.OracleDBConnection,System.String,System.String)">
            <summary>
            DoesRoleHavePrivilege
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ExecuteCmd(System.String,System.String)">
            <summary>
            ExecuteCmd
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ReadStdOutput">
            <summary>
            ReadStdOutput
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ReadStdError">
            <summary>
            ReadStdError
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.WriteToLogFile(System.String)">
            <summary>
            WriteToLogFile
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.BackUpDBAndSchemaForOracle(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            BackUpDBAndSchemaForOracle
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateDataDirAndGrantPermissions(System.String,System.String,System.String,System.String)">
            <summary>
            CreateDataDirAndGrantPermissions
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.DoesPlantExist(System.String)">
            <summary>
            returns true if given plant already exist.
            </summary>
            <param name="sPlantName">Plant name.</param>
            <returns>true if given plant already exist.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.IsDebugVersion">
            <summary>
            This tells about whether our software is in debug / release version.
            </summary>
            <returns>true if our software is in debug version.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ExceedsDbNameLength(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String)">
            <summary>
            Used to check the length of the database name is valid for both SQL / ORACLE.
            </summary>
            <param name="eDBType">Database provider.</param>
            <param name="sDbName">Datbase name.</param>
            <returns>true if the db name exceeds the maximum length.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateReportsDB(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Used to create new reports and schema db.
            </summary>
            <param name="sDBProvider">Database provider.</param>
            <param name="sPlantName">Plant name.</param>
            <param name="sReportsDBServer">Reports database server.</param>
            <param name="sReportsDBName">Reports database name.</param>
            <param name="sReportsDBLocation">Reports database location.</param>
            <param name="sReportsDBLogFileLocation">Reports database log file location.</param>
            <param name="sReportsSchemaDBLocation">Reports schema database location.</param>
            <param name="sReportsSchemaDBLogFileLocation">Reports schema database log file location.</param>
            <returns>returns true if it is suceeded.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateReportsDbObjects(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Used to create reports database objects.
            </summary>
            <param name="sDBProvider">Database provider.</param>
            <param name="sPlantName">Plant name.</param>
            <param name="sReportsDBServer">Reports database server name.</param>
            <param name="sReportsDBName">Reports database name.</param>
            <param name="sReportDBLocation">Reports database location.</param>
            <param name="sReportsLogFileLocation">Reports log file location.</param>
            <param name="sReportsSchemaDBServer">Reports schema datbase server.</param>
            <param name="sReportsSchemaDBName">Reports schema database name.</param>
            <param name="sReportSchemaDBLocation">Reports schema database location.</param>
            <param name="sReportsSchemaLogFileLocation">Reports schema log file location.</param>
            <returns>returns true if suceeded.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ActiveLocation">
            <summary>
            This API returns active location object.
            </summary>
            <returns>active location.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.BuildReportDbAndSchema(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            It build or regenerate reports views.
            </summary>
            <param name="sSiteDbServer">Site database server.</param>
            <param name="sSiteDbName">Site database name.</param>
            <param name="sPlantName">Plant name.</param>
            <param name="sSiteSchemaDbName">Site schema database name.</param>
            <param name="sSiteSchemaServer">Site schema server name.</param>
            <param name="sOwnerName">Owner name.</param>
            <param name="bNeedPermissionCriteria">boolean for need permission criteria.</param>
            <param name="sReportsDBName">Reports database name.</param>
            <param name="sReportsDBServer">Reports database server.</param>
            <param name="sReportsSchemaDBName">Reports schema database name.</param>
            <param name="sReportsDBSchemaServer">Reports database schema server.</param>
            <returns>true if suceeded.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetSiteDBAndServerNames(System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Get site db information: site db name, server, schema name, server.
            </summary>
            <param name="sSiteDbName">Site database name.</param>
            <param name="sSiteDbServer">Site database server name.</param>
            <param name="sSiteSchemaDbName">Site schema database name.</param>
            <param name="sSiteSchemaDbServer">Site schema database server name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetServerAndDbFromConnStringInfo(System.String,System.String@,System.String@)">
            <summary>
            Parse the connection string into server name and database name.
            </summary>
            <param name="sConnStringInfo">Connection string information.</param>
            <param name="sServer">server name.</param>
            <param name="sDBName">database name.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetCatalogDBandServerNames(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Get catalog database information: catalog database name, server, schema name and server.
            </summary>
            <param name="sDBProvider">Database provider.</param>
            <param name="sSiteDbName">Site database name.</param>
            <param name="sSiteDbServer">Site datbase server name.</param>
            <param name="sPlantName">Plant name.</param>
            <param name="sCatalogDbName">Catalog database name.</param>
            <param name="sCatalogDbServer">Catalog database server.</param>
            <param name="sCatalogSchemaDbName">Catalog schema database name.</param>
            <param name="sCatalogSchemaDbServer">Catalog schema database server.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetModelDBandServerNames(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Get model database infomation: model name, server, schema name and server.
            </summary>
            <param name="sDBProvider">Database provider.</param>
            <param name="sSiteDbName">Site database name.</param>
            <param name="sSiteDbServer">Site database server name.</param>
            <param name="sPlantName">Plant name.</param>
            <param name="sModelDbName">Model database name.</param>
            <param name="sModelDbServer">Model database server.</param>
            <param name="sModelSchemaDbName">Model schema database name.</param>
            <param name="sModelSchemaDbServer">Model schema database server.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetReportsDBandServerNames(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            It is used to get the reports db , server, schema and schema server infomation.
            </summary>
            <param name="sPlantName">Plant name.</param>
            <param name="sReportsDBName">Reports database name.</param>
            <param name="sReportsDBServer">Reports database server.</param>
            <param name="sReportsSchemaName">Reports schema name.</param>
            <param name="sReportsSchemaServer">Reports schema server.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.IsValidPathOnServer(Ingr.SP3D.Common.Middle.Services.SiteManager.eDBProviderTypes,System.String,System.String,System.Boolean)">
            <summary>
            Function to check directory or file path on server.
            </summary>
            <param name="eDBType">Database type.</param>
            <param name="sSeverName">Server name.</param>
            <param name="sDirectoryOrFilePath">Directory or file path.</param>
            <param name="bIsFile">'True' if path is a file path.'False' if path is directory path.</param>
            <returns>True if path exists,else False </returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.GetReportsDBObject(System.String)">
            <summary>
            It is used to get reports database object.
            </summary>
            <param name="sPlantName">Plant name.</param>
            <returns>Reports database object.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.CreateNameGenSerPathObjForPlant(System.String,System.String)">
            <summary>
            It is used to create the name generator server path object on active plant.
            </summary>        
            <param name="sPlantName">Plant name</param>
            <param name="sNameGeneratorServer">Name generator server name</param>        
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.SetDefaultPermissionsForPlant(System.String)">
            <summary>
            Used to set default permissions for newly created plant.
            </summary>
            <param name="sPlantName">Plant name</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.ProjectMgmtHelper.ActiveConditionID">
            <summary>
            get/set active condition id on connection object.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Note">
             <summary>
             Class definition for the general Note object.
             </summary>
             <example> This is an example for Note class methods and properties.
             <code>
             Public Class Note
               Public Sub New()
            
                'Creating a note in the catalog. 
                Dim oSiteMgr As SiteManager = MiddleServiceProvider.SiteMgr
                Dim oPlant As Plant = oSiteMgr.ActiveSite.ActivePlant
                Dim oCatalog As Catalog = oPlant.PlantCatalog
                Dim oModel As Model = oPlant.PlantModel
                Dim oRootObj As BusinessObject = DirectCast(oModel.RootSystem, BusinessObject)
                Dim oModelConn As SP3DConnection = oRootObj.DBConnection
                Dim oTransactionMgr As TransactionManager = MiddleServiceProvider.TransactionMgr
            
                Dim oCatalogPermGroupCol As ReadOnlyCollection(Of PermissionGroup) = oCatalog.PermissionGroups
                If oCatalogPermGroupCol.Count > 0 Then
                    'Setting the active permission group to the catalog permission group before creating the object in the catalog.
                    oCatalog.ActivePermissionGroup = oCatalogPermGroupCol.ElementAt(0)
                    'Calling the note constructor with the catalog as input.
                    Dim oCatalogNote As New Note(oCatalog)
                Else
                    'There are no permission groups in the catalog.
                End If
            
                'Resetting the active permission group to the model permission group. 
                Dim oModelPermGroupCol As ReadOnlyCollection(Of PermissionGroup) = oModel.PermissionGroups
                If oModelPermGroupCol.Count > 0 Then
                    'Setting the active permission group to the model permission group.
                    oModel.ActivePermissionGroup = oModelPermGroupCol.ElementAt(0)
                Else
                    'There are no permission groups in the model. 
                End If
            
                'Create a note on a control point. 
                'Create a control point. 
                Dim oControlPoint1Pos As New Position(3, 3, 1)
                Dim oControlPoint1 As New ControlPoint(oModelConn, oControlPoint1Pos)
                
                'Calling the note constructor with a control point to which a Note object is to be associated.
                Dim oCntrlPointNote As New Note(oControlPoint1)
                
                'Create a note on an equipment. 
                'Creating an equipment. 
                Dim oEqp As Equipment = Nothing
                oEqp = New Equipment("PUMP 001A-E", Nothing) 'Null system indicates that equipment is created under the project root. 
                'Setting the position of the equipment. 
                Dim oEqpCS As ILocalCoordinateSystem = DirectCast(oEqp, ILocalCoordinateSystem)
                Dim oEqpPos As New Position(3, 3, 3)
                oEqpCS.Origin = oEqpPos
            
                'Committing the transaction. 
                oTransactionMgr.Commit("Place Equipment")
            
                'Calling the note constructor with Equipment object as input.
                Dim oEqpBusinessObj As BusinessObject = DirectCast(oEqp, BusinessObject)
                Dim oEqpNote As New Note(oEqpBusinessObj)
            
                'Create a note on port. 
                'Create a nozzle with equipment as the parent. 
                Dim oPipeNozzle As PipeNozzle = Nothing
                oPipeNozzle = New PipeNozzle("PUMP 001A-E", False, 1, oEqp)
            
                Dim oPortCS As IDistributionPort = DirectCast(oPipeNozzle, IDistributionPort)
                Dim oPortLoc As New Position(1, 3, 3)
                Dim oDirVec As New Vector(0, 0, 1)
                oPortCS.Location = oPortLoc
                oPipeNozzle.NormalVector = oDirVec
                'Committing the transaction. 
                oTransactionMgr.Commit("Place Nozzle")
            
                'Calling the note constructor with port as input.
                Dim oPort As IPort = DirectCast(oPipeNozzle, IPort)
                Dim oPortNote As New Note(oPort)
            
                'Getting the location from the note. 
                Dim oPortNoteLoc As Position = oPortNote.Location
              
                Dim iCurrentPortNotesCnt As Integer = 0
                Dim iCurrentCntrlPointNotesCnt As Integer = 0
                Dim iCurrentEqpNotesCnt As Integer = 0
            
                'Getting the notes count on the pipe nozzle. 
                Dim iPortNotesCount As Integer = 0
                Dim oPortNotesCol As ReadOnlyCollection(Of Note) = oPipeNozzle.Notes
                iPortNotesCount = oPortNotesCol.Count()
            
                'Getting the notes count on the control point. 
                Dim iControlPointNotesCount As Integer = 0
                Dim oCntrlPoinNotesCol As ReadOnlyCollection(Of Note) = oControlPoint1.Notes
                iControlPointNotesCount = oCntrlPoinNotesCol.Count()
            
                'Getting the notes count on the equipment. 
                Dim iEquipmentNotesCount As Integer = 0
                Dim oEqpBusObjNotesCol As ReadOnlyCollection(Of Note) = oEqpBusinessObj.Notes
                iEquipmentNotesCount = oEqpBusObjNotesCol.Count()
            
                'Adding a note to a port.
                'Calling AddRelationToPort method on the note. 
                oPortNote.AddRelationToPort(oPort)
            
                'Remove the relation between the note and the port.
                'Calling RemoveRelationToPort method on the note. 
                Dim iRemoveRelationToPort As Integer = 0
                iRemoveRelationToPort = oPortNote.RemoveRelationToPort(oPort)
            
                'Adding a note to a control point.
                'Calling AddRelationToCP method on note. 
                oCntrlPointNote.AddRelationToCP(oControlPoint1)
            
                'Remove the relation between note and the control point.
                'Calling RemoveRelationToCP method on the note. 
                Dim iRemoveRelationToControlPoint As Integer = 0
                iRemoveRelationToControlPoint = oCntrlPointNote.RemoveRelationToCP(oControlPoint1)
            
                'Adding a note to a BusinessObject.
                'Calling AddRelationToObject method on the note. 
                oEqpNote.AddRelationToObject(oEqpBusinessObj)
                
                'Remove the relation between the note and the BusinessObject.
                'Calling RemoveRelationToObj method on the note. 
                Dim iRemoveRelationToObject As Integer = 0
                iRemoveRelationToObject = oEqpNote.RemoveRelationToObject(oEqpBusinessObj)
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.#ctor(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Constructor for the persistent Note object. This will be related to the BusinessObject passed
            in by the generic note relationship.
            </summary>
            <param name="oRelatedBO">The object in which to relate the note.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.#ctor(Ingr.SP3D.Common.Middle.Services.Catalog)">
            <summary>
            Creates a note object in the catalog.
            </summary>
            <param name="oCatalog">The catalog connection in which the note is to be created.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.#ctor(Ingr.SP3D.Common.Middle.ControlPoint)">
            <summary>
            Creates a note related to a control point.
            </summary>
            <param name="oControlPoint">The control point in which to relate the note.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.#ctor(Ingr.SP3D.Common.Middle.IPort)">
            <summary>
            Creates a note related to a port.
            </summary>
            <param name="oPort">The port in which to relate the note.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.AddRelationToObject(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Adds a ContainsNote relationship to the given BusinessObject.
            </summary>
            <param name="oBO">The BusinessObject in which to establish the relation with this note.</param>
            <returns>RelationCollection</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.RemoveRelationToObject(Ingr.SP3D.Common.Middle.BusinessObject)">
            <summary>
            Removes the ContainsNote relationship to the given BusinessObject.
            </summary>
            <param name="oBO">The BusinessObject in which to disconnect from this note.</param>
            <returns>RemoveFromRelationship integer.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.AddRelationToCP(Ingr.SP3D.Common.Middle.ControlPoint)">
            <summary>
            Adds a NoteAssociatedToControlPoint relationship to the given control point.
            </summary>
            <param name="oControlPoint">The control point in which to establish the relation with this note.</param>
            <returns>RelationCollection</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.RemoveRelationToCP(Ingr.SP3D.Common.Middle.ControlPoint)">
            <summary>
            Removes the NoteAssociatedToControlPoint relationship to the given control point.
            </summary>
            <param name="oControlPoint">The control point to disconnect from this note.</param>
            <returns>RemoveFromRelationship integer.</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.AddRelationToPort(Ingr.SP3D.Common.Middle.IPort)">
            <summary>
            Adds a NoteAssociatedToPort relationship to the given port.
            </summary>
            <param name="oPort">The port in which to establish the relation with this note.</param>
            <returns>RelationCollection</returns>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Note.RemoveRelationToPort(Ingr.SP3D.Common.Middle.IPort)">
            <summary>
            Removes the NoteAssociatedToPort relationship to the given port.
            </summary>
            <param name="oPort">The port in which to disconnect from this note.</param>
            <returns>RemoveFromRelationship integer.</returns>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Note.Location">
            <summary>
            Gets the position of the note.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnNoteCreationFailedException">
            <summary>
            Raised when the note creation fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnNoteCreationFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of the CmnNoteCreationFailedException class with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetNotePositionFailedException">
            <summary>
            Raised when getting the position of the note fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetNotePositionFailedException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Gets the position of the note with a
            reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="inner">COMException</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.HyperLink">
             <summary>
             Class definition for the HyperLink object.
             </summary>
             <example> This is an example for HyperLink class methods and properties.
             <code>
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HyperLink.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor for .NET to access this class.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.HyperLink.#ctor(Ingr.SP3D.Common.Middle.BusinessObject,System.String,System.String)">
            <summary>
            Constructor for the HyperLink object. 
            </summary>
            <param name="oAssociatedObject">The object in which to relate the HyperLink. This object is required for the HyperLink object to be created.</param>
            <param name="sUrl">The HyperLink Url.  A valid Url string must be provided for the HyperLink object to be created.</param>
            <param name="sDescription">The HyperLink description.  The description can be a null string.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHyperLinkShouldAlwaysBeRelated"> Raised if the oAssociatedObject passed in is null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnHyperLinkNeedsValidURL"> Raised if the passed in Url is null.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HyperLink.Description">
            <summary>
            Gets/Sets the description of the HyperLink.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HyperLink.Url">
            <summary>
            Gets/sets the Url property of the HyperLink.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.HyperLink.AssociatedObject">
            <summary>
            Get the object related to this HyperLink object
            </summary>
             <returns>Returns the associated BusinessObject.  This object will be null if there is no associated object.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnHyperLinkShouldAlwaysBeRelated">
            <summary>
            Raised when the object the HyperLink is associated to is null.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnHyperLinkShouldAlwaysBeRelated.#ctor">
            <summary>
            Initializes a new instance of the CmnPersistentCOMBOAlreadyExistsException class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnHyperLinkNeedsValidURL">
            <summary>
            Raised when the HyperLink Url string is null.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnHyperLinkNeedsValidURL.#ctor">
            <summary>
            Initializes a new instance of the CmnHyperLinkNeedsValidURL class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.ICone">
            <summary>
            Default interface for Cones.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.GetExtrema(System.Double@,System.Double@)">
            <summary>
            Gets the cone extrema in U.
            </summary>
            <param name="dUMin">Minimum U value.</param>
            <param name="dUMax">Maximum U value.</param>
            <remarks>If the cone is bounded, then this is the extremas along the axis according to the boundaries.
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the sphere.
            </summary>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="i">Integer</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the sphere.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="i">int</param>
            <param name="iCS">ComplexString3d</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.ICone.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries.
            This removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.BaseEllipse">
            <summary>
            Gets or sets the base ellipse of the cone.
            Getting returns a read-only version of Ellipse3d.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.HalfAngle">
            <summary>
            Gets or sets the half angle of the cone.
            HalfAngle is defined as the angle between the axis and the edge of the cone.
            <para>If HalfAngle is 0.0, then the cone is a cylinder.
            HalfAngle can not be PI/2, which means there cannot be a flat cone.</para>
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.Reversed">
            <summary>
            Gets or sets the Reversed property.   
            If False, then U-parameterization is increasing in the direction of the ellipse normal.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.Solid">
            <summary>
            Gets or sets whether the cone is solid.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.Capped">
            <summary>
            Gets or sets the Capped property.
            If True, when displaying the cone, it appears that the cone has caps.
            Capped should never be set to True if cone is partial.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.Contracting">
            <summary>
            Gets or sets the Contracting property.
            If Contracting is set to True, the cone contracts in the direction of the cone axis.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.Apex">
            <summary>
            Gets the apex of the cone.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.AxisVector">
            <summary>
            Gets the axis vector of the cone.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.ICone.BoundaryCount">
            <summary>
            Returns the number of boundaries.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Cone3d">
             <summary>
             Class definition for Cone3d.
             </summary>
             <example> This is an example for Cone3d methods and properties.
             <code>
             Public Class Cone3d
              Public Sub New()
             
                  Dim oCone As Cone3d = Nothing
                  Dim oCone1 As Cone3d = Nothing
                  'Create a 1m radius 90 deg cone rotating about 1,0,0. 
                  Dim vZero As New Vector(0, 0, 0)
                  Dim vVec As New Vector(0, 0, 0)
                  Dim pZero As New Position(0, 0, 0)
                  Dim pTwo As New Position(2, 2, 2)
                  Dim posBaseCenter As New Position(1, 0, 0)
                  Dim posTopCenter As New Position(1, 0, 2)
                  Dim posBaseStart As New Position(0, 0, 0)
                  Dim posTopStart As New Position(0.5, 0, 2)
                  Dim bSolid As Boolean = False
            
                  oCone = New Cone3d(posBaseCenter, posTopCenter, posBaseStart, posTopStart, bSolid)
                  If oCone Is Nothing Then
                      SOMUtils.LogResults("Failed to create a Cone3d.")
            
                  End If
            
                  oCone1 = New Cone3d(oCone)
                  If oCone1 Is Nothing Then
                      SOMUtils.LogResults("Failed to create a Cone3d (Cone3d).")
            
                  End If
            
                  'Get the apex of the cone.
                  Dim pPOS As New Position(0, 0, 0)
                  
                  pPOS = oCone.Apex
                  If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                      SOMUtils.LogResults("Cone apex not returned.")
            
                  End If
            
                  'Get the vector of the cone.
                  Dim vAxisVector As New Vector(0, 0, 0)
                  
                  vAxisVector = oCone.AxisVector
                  If SOMUtils.AreTheyEqual(pPOS, pZero) Then
                      SOMUtils.LogResults("Cone axis vector not returned.")
            
                  End If
            
                  'Get the boundary count.
                  Dim iCount As Integer = -1
                   
                  iCount = oCone.BoundaryCount
                  If iCount <![CDATA[<]]> 0 Then
                      SOMUtils.LogResults("Cone boundary count failed.")
            
                  End If
            
                  'Get whether the cone is capped.
                  Dim bCap As Boolean = False
                  
                  bCap = oCone.Capped
                  If bCap = True Then
                      SOMUtils.LogResults("Cone capped failed.")
            
                  End If
                  'Set whether the cone is capped.
                  bCap = True
                  oCone.Capped = bCap
                  If bCap = True Then
                      'Reset to original.
                      oCone.Capped = False
                  Else
                      SOMUtils.LogResults("Cone capped set failed.")
            
                  End If
            
                  'Get the cone range.
                  Dim oP2 As New Position(0, 0, 0)
                  Dim rRNG As RangeBox
                  ' = new RangeBox(oP2, oP2)
                  rRNG = oCone.Range
                  If SOMUtils.AreTheyEqual(rRNG.Low, rRNG.High) Then
                      SOMUtils.LogResults("Cone range failed.")
            
                  End If
            
                  'Get whether the cone is reversed.
                  bCap = True
                   
                  bCap = oCone.Reversed
                  If bCap = True Then
                      SOMUtils.LogResults("Cone reversed failed.")
            
                  End If
                  'Set whether the cone is reversed. 
                  bCap = True
                  oCone.Reversed = bCap
                  If bCap = True Then
                      'Reset to original. 
                      oCone.Reversed = False
                  Else
                      SOMUtils.LogResults("Cone reversed set failed.")
            
                  End If
            
                  'Get whether the cone is solid.
                  bCap = False
                  
                  bCap = oCone.Solid
                  If bCap = False Then
                      SOMUtils.LogResults("Cone solid failed.")
            
                  End If
                  'Set whether the cone is solid. 
                  bCap = False
                  oCone.Solid = bCap
                  If oCone.Solid = False Then
                      'Reset to original. 
                      oCone.Solid = True
                  Else
                      SOMUtils.LogResults("Cone solid set failed.")
            
                  End If
            
                  'Define by four points.
                  Dim oP1 As New Position(1, 0, 0)
                  oP2.[Set](1, 0, 2)
                  Dim oP3 As New Position(-1, 0, 0)
                  Dim oP4 As New Position(0.5, 0, 2)
                  oCone.DefineBy4Pts(oP1, oP2, oP3, oP4, bSolid)
                  If Not SOMUtils.AreTheyEqual(oCone.BaseEllipse.Center, oP1) Then
                      SOMUtils.LogResults("Cone DefineBy4Pts failed.")
            
                  End If
            
                  'Define by center axis radius ends.
                  oP1.[Set](1, 0, 2)
                  Dim dDBL As Double = 0.5
                  vVec = New Vector(0, 0, 1)
                  oP2.[Set](-1, 0, 2)
                  oP3.[Set](3, 0, 2)
                  oCone.DefineByCenterAxisRadEnds(oP1, vAxisVector, dDBL, oP2, oP3, bSolid)
                  If Not SOMUtils.AreTheyEqual(oCone.BaseEllipse.Center, oP1) OrElse Not SOMUtils.AreTheyEqual(oCone.BaseEllipse.MajorRadius, 2) Then
                      SOMUtils.LogResults("Cone center, axis, radius failed.")
            
                  End If
            
                  'Get the boundaries.
                  Dim colCS As New Collection(Of ComplexString3d)()
                  oCone.GetBoundaries(colCS)
                  'Should be only one boundary. 
                  If colCS.Count <![CDATA[<>]]> 1 Then
                      SOMUtils.LogResults("Cone GetBoundaries failed.")
            
                  End If
            
                  'Get the boundary.
                  Dim i As Integer = 1
                  Dim oCS As ComplexString3d
                  oCS = Nothing
                  oCone.GetBoundary(i, oCS)
                  If colCS.Count <![CDATA[<>]]> 1 Then
                      SOMUtils.LogResults("Cone GetBoundary failed.")
            
                  End If
            
                  'Get extrema of the cone.
                  i = 0
                  Dim dUMin As Double = -1, dUMax As Double = -1
                  oCone.GetExtrema(dUMin, dUMax)
                  If dUMin <![CDATA[<>]]> 0 Then
                      SOMUtils.LogResults("Cone GetExtrema failed.")
            
                  End If
            
                  'Make a copy before deleting the boundaries. 
                  oCone1 = New Cone3d(oCone)
            
                  'Remove all boundaries and then get whether any are left.
                  Dim iBcount As Integer = 0
                  Dim colCS1 As New Collection(Of ComplexString3d)()
                  oCone.GetBoundaries(colCS)
                  iBcount = colCS.Count
                  oCone.RemoveAllBoundaries()
                  oCone.GetBoundaries(colCS1)
                  If colCS1 IsNot Nothing Then
                      SOMUtils.LogResults("Cone RemoveAllBoundaries failed.")
            
                  End If
            
            
                  'Get whether the cone has contracting. 
                  bCap = False
                   
                  bCap = oCone.Contracting
                  If bCap = False Then
                      SOMUtils.LogResults("Cone contracting failed.")
            
                  End If
                  'Set whether the cone has contracting. 
                  bCap = False
                  oCone.Contracting = bCap
                  If oCone.Contracting = False Then
                      'Reset to the original. 
                      oCone.Contracting = True
                  Else
                      SOMUtils.LogResults("Cone contracting set failed.")
            
                  End If
            
                  'Get the cone base ellipse. 
                  eEll = oCone.BaseEllipse
                  If eEll Is Nothing Then
                      SOMUtils.LogResults("Cone get base ellipse failed.")
            
                  End If
            
                  'Set the cone base ellipse. 
                  Dim eNewEll As New Ellipse3d(eEll)
                  eNewEll.MajorRadius = 2
                  eNewEll.MinorRadius = 1
                  oCone.BaseEllipse = eNewEll
                  If Not SOMUtils.AreTheyEqual(oCone.BaseEllipse.MinorMajorRatio, 0.5) Then
                      SOMUtils.LogResults("Cone set base ellipse failed.")
            
                  End If
            
                  'Get the cone half angle.
                  dDBL = 0
                  
                  dDBL = oCone.HalfAngle
                  If SOMUtils.AreTheyEqual(dDBL, 0) Then
                      SOMUtils.LogResults("Cone HalfAngle failed.")
            
                  End If
                  'Set the cone half angle. 
                  oCone.HalfAngle = 0.1
                  If SOMUtils.AreTheyEqual(oCone.HalfAngle, 0.1) Then
                      'Reset the half angle. 
                      oCone.HalfAngle = dDBL
                  Else
                      SOMUtils.LogResults("Set HalfAngle failed.")
            
                  End If
            
                  oCone.SetBoundaries(colCS)
                  If oCone.BoundaryCount = 0 Then
                      SOMUtils.LogResults("Set HalfAngle failed.")
            
                  End If
            
                  'Remove, set, and add a boundary.
                  Dim CS1 As ComplexString3d
                  CS1 = Nothing
                  If oCone.BoundaryCount > 0 Then
                      iBcount = oCone.BoundaryCount
                      oCone.GetBoundary(iBcount, CS1)
                      oCone.RemoveBoundary(iBcount)
                      If iBcount = oCone.BoundaryCount Then
                          SOMUtils.LogResults("Cone RemoveBoundary failed.")
            
                      Else
                          'Add the boundary. 
                          oCone.AddBoundary(CS1)
                          If iBcount <![CDATA[<>]]> oCone.BoundaryCount Then
                              SOMUtils.LogResults("Cone add boundary failed.")
            
                          Else
                              'Replace the curve with the same boundary. 
                              oCone.SetBoundary(oCone.BoundaryCount, CS1)
                              If iBcount <![CDATA[<>]]> oCone.BoundaryCount Then
                                  SOMUtils.LogResults("Cone set boundary failed.")
            
                              End If
            
                          End If
                      End If
                  End If
             
                  oP1.[Set](1, 1, 0)
                  oP3.[Set](-oP2.X, oP2.Y, oP2.Z)
                  dDBL = 2
                  oCone1 = New Cone3d(oP1, vAxisVector, dDBL, oP2, oP3, bSolid)
                  oCone1.[Set](oCone)
                  If Not SOMUtils.AreTheyEqual(oCone.BaseEllipse.Center, oCone1.BaseEllipse.Center) OrElse Not SOMUtils.AreTheyEqual(oCone.BaseEllipse.MajorRadius, oCone1.BaseEllipse.MajorRadius) Then
                      SOMUtils.LogResults("Cone set failed.")
            
                  Else
                      oCone1.Delete()
                  End If
            
                  'Transform the cone.
                  Dim mMat4 As New Matrix4X4()
                  mMat4.SetIdentity()
                  vVec = New Vector(1, 1, 1)
                  mMat4.Translate(vVec)
                  oCone.Transform(mMat4)
                  'Get the center of the ellipse; it should be 2,1,1. 
                  pPOS = New Position(2, 1, 3)
                  If Not SOMUtils.AreTheyEqual(pPOS, oCone.BaseEllipse.Center) Then
                      SOMUtils.LogResults("Cone transform failed.")
            
                  End If
            
                  'Construct other cones.
                  oCone1 = New Cone3d(oCone)
                  If Not SOMUtils.AreTheyEqual(oCone1.BaseEllipse.Center, oCone.BaseEllipse.Center) OrElse Not SOMUtils.AreTheyEqual(oCone1.BaseEllipse.MajorRadius, oCone.BaseEllipse.MajorRadius) Then
                      SOMUtils.LogResults("Construct cone from cone failed.")
            
                  Else
                      oCone1.Delete()
                      oCone1 = Nothing
                  End If
            
                  oCone1 = New Cone3d(oP1, vAxisVector, dDBL, oP2, oP3, bSolid)
                  If oCone1 Is Nothing Then
                      SOMUtils.LogResults("Failed to create a Cone3d.")
            
                  Else
                      oCone1.Delete()
                      oCone1 = Nothing
                  End If
            
                  Dim oConn As SP3DConnection
                  oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                  oCone1 = New Cone3d(oConn, posBaseCenter, posTopCenter, posBaseStart, posTopStart, bSolid)
                  If oCone1 Is Nothing Then
                      SOMUtils.LogResults("Failed to create a Cone3d.")
            
                  Else
                      oCone1.Delete()
                      oCone1 = Nothing
                  End If
            
                  oCone1 = New Cone3d(oConn, oP1, vAxisVector, dDBL, oP2, oP3,  bSolid)
                  If oCone1 Is Nothing Then
                SOMUtils.LogResults("Failed to create a Cone3d(oConn ,oP1, vAxisVector, dDBL, oP2, oP3, bSolid).")
            
                  Else
                  oCone1.Delete()
                  oCone1 = Nothing
              End If
            
              'Delete the original cone.
              oCone.Delete()
            
              End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Cone3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.#ctor(Ingr.SP3D.Common.Middle.Cone3d)">
            <summary>
            Constructor used to copy an existing Cone3d.
            </summary>
            <param name="oCone">A Cone3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oCone cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create Cone.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Boolean)">
            <summary>
            Creates a persistent cone by 4 points.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posBaseCenter">Base center.</param>
            <param name="posTopCenter">Top center.</param>
            <param name="posBaseStart">Base starting point.</param>
            <param name="posTopStart">Top starting point.</param>
            <param name="Solid">Whether a solid is desired.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posTopCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posTopStart cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create Cone.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Boolean)">
            <summary>
            Creates a transient cone by 4 points.
            </summary>
            <param name="posBaseCenter">Base center.</param>
            <param name="posTopCenter">Top center.</param>
            <param name="posBaseStart">Base starting point.</param>
            <param name="posTopStart">Top starting point.</param>
            <param name="Solid">Whether a solid is desired.</param>
            <exception cref="T:System.ArgumentNullException">posBaseCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posTopCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posTopStart cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create Cone.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Boolean)">
            <summary>
            Creates a persistent partial cone by given input.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posBaseCenter">Base center.</param>
            <param name="vecAxis">Cone axis, which contains the height of the cone.</param>
            <param name="dRadiusTop">The radius at the top of the cone.</param>
            <param name="posBaseStart">The base starting point.</param>
            <param name="posBaseEnd">The base ending point.</param>
            <param name="Solid">Whether a solid is desired.</param>
            <remarks>Base center should NOT be equal to base start.  If a point cone is desired, then
            the top radius = 0.</remarks>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create Cone.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Boolean)">
            <summary>
            Creates a transient partial cone by given input.
            </summary>
            <param name="posBaseCenter">Base center.</param>
            <param name="vecAxis">Cone axis, which contains the height of the cone.</param>
            <param name="dRadiusTop">The radius at the top of the cone.</param>
            <param name="posBaseStart">The base starting point.</param>
            <param name="posBaseEnd">The base ending point</param>
            <param name="Solid">Whether a solid is desired.</param>
            <remarks>Base center should NOT be equal to base start.  If a point cone is desired, then
            the top radius = 0.</remarks>
            <exception cref="T:System.ArgumentNullException">posBaseCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create Cone.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.Set(Ingr.SP3D.Common.Middle.Cone3d)">
            <summary>
            Sets this cone equal to an existing cone.
            </summary>
            <param name="oCone3d">Existing Cone3d object.</param>
            <exception cref="T:System.ArgumentNullException">oCone3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.DefineBy4Pts(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Boolean)">
            <summary>
            Redefines a cone by 4 points.
            </summary>
            <param name="posBaseCenter">Base center.</param>
            <param name="posTopCenter">Top center.</param>
            <param name="posBaseStart">Base start.</param>
            <param name="posTopStart">Top start.</param>
            <param name="Solid">Whether a solid cone is desired.</param>
            <exception cref="T:System.ArgumentNullException">posBaseCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posTopCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posTopStart cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineBy4Pts exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.DefineByCenterAxisRadEnds(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position,System.Boolean)">
            <summary>
            Redefines a partial cone by given data.
            </summary>
            <param name="posBaseCenter">Base center point.</param>
            <param name="vecAxis">Normal of the cone, which has the height of the cone.</param>
            <param name="dRadiusTop">Top radius, which can be set to 0 if a point cone is desired.</param>
            <param name="posBaseStart">Base starting point.</param>
            <param name="posBaseEnd">Base ending point.</param>
            <param name="Solid">Whether a solid cone is desired.</param>
            <exception cref="T:System.ArgumentNullException">posBaseCenter cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecAxis cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posBaseEnd cannot be null.</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">COM DefineByCenterAxisRadEnds exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByCenterAxisRadEnds exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.GetExtrema(System.Double@,System.Double@)">
            <summary>
            Gets the cone extrema in U.
            </summary>
            <param name="dUMin">Minimum U value.</param>
            <param name="dUMax">Maximum U value.</param>
            If cone is bounded, then this is the extremas along the axis according to the boundaries.
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.AddBoundary(Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Adds a boundary to the cone.
            </summary>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.RemoveBoundary(System.Int32)">
            <summary>
            Removes boundary i.
            </summary>
            <param name="i">Integer</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.RemoveAllBoundaries">
            <summary>
            Removes all boundaries on the cone.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.GetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d@)">
            <summary>
            Gets the boundary at i.
            </summary>
            <param name="i">Returns the boundary at index i.</param>
            <param name="oCS">Output boundary.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.SetBoundary(System.Int32,Ingr.SP3D.Common.Middle.ComplexString3d)">
            <summary>
            Sets the boundary at index i.
            </summary>
            <param name="i">Integer</param>
            <param name="iCS">ComplexString3d</param>
            <exception cref="T:System.ArgumentNullException">iCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.GetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d}@)">
            <summary>
            Gets all the boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.SetBoundaries(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.ComplexString3d})">
            <summary>
            Sets the boundaries.
            This removes any previous boundaries.
            </summary>
            <param name="colCS">Collection of ComplexString3d objects.</param>
            <exception cref="T:System.ArgumentNullException">colCS cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Cone3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this cone by a given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.Apex">
            <summary>
            Gets the apex of the cone.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.AxisVector">
            <summary>
            Gets the axis vector of the cone.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.BaseEllipse">
            <summary>
            Gets the base ellipse of the cone.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.Reversed">
            <summary>
            Gets or sets the Reversed property.   
            If False, then U parameterization is increasing in the direction of the ellipse normal.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.Capped">
            <summary>
            Gets or sets the Capped property.
            If True, when displaying the cone, it appears that the cone has caps.
            Capped should never be set to True if cone is partial.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.Solid">
            <summary>
            Gets or sets whether the cone is solid.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.HalfAngle">
            <summary>
            Gets or sets the half angle of the cone.
            Half angle is defined as the angle between the axis and the edge of the cone.
            <para>If half angle is 0.0, then the cone is a cylinder.
            Half angle cannot be PI/2, which means that there cannot be a flat cone.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.Contracting">
            <summary>
            Gets or sets the Contracting property.
            If contracting is set to True, the cone contracts in the direction of the cone axis.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.BoundaryCount">
            <summary>
            Returns the number of boundaries.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Cone3d.Range">
            <summary>
            Finds the range box of this cone.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SymbolOutput">
             <summary>
             SymbolOutput object class constructed for each SymbolOuputAttribute declared on a given aspect
             filed variable within a CustomSymbolDefinition class.
             </summary>
             <example> This is an example of where SymbolOutputAttributes are declared on different aspects to construct a SymbolOutput.
             <code>
             
             Public Class MyCustomSymbol : Inherits CustomSymbolDefinition
            
                 'SimplePhysical Aspect - with 3 geometric symbol outputs
                 <![CDATA[<]]>Aspect("Physical", "Simple Physical Aspect", AspectID.SimplePhysical)<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Slab", "Slab Geometry")<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Pier", "Pier Geometry")<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Grout", "Grout Geometry")<![CDATA[>]]> _
                     Public m_oSimplePhysicalAspect As AspectDefinition
                 
                 'ReferenceGeometry Aspect - with 4 point symbol outputs
                 <![CDATA[<]]>Aspect("ReferenceGeometry", "Reference Geometry Aspect", AspectID.ReferenceGeometry)<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Point1", "Point1")<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Point2", "Point2")<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Point3", "Point3")<![CDATA[>]]> _
                 <![CDATA[<]]>SymbolOutput("Point4", "Point4")<![CDATA[>]]> _
                     Public m_oReferenceGeometryAspect As AspectDefinition    ///
                  ' ...
             End Class
             
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOutput.#ctor(System.Object,System.Int32)">
            <summary>
            Internal constructor for a symbol output.
            </summary>
            <param name="oRlnshipCol">Relationship role name for the output collection.</param>
            <param name="index">Symbol output index key.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SymbolOutput.Finalize">
            <summary>
            SymbolOutput destructor.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolOutput.OutputObject">
            <summary>
            Returns the BusinessObject associated to this symbol output.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SymbolOutput.Name">
            <summary>
            Returns the name of the symbol output.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SketchCrossSectionType">
            <summary>
             Enumerator for the SketchCrossSection types
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SketchCrossSectionType.NoCS">
            <summary>
            None; when no entity is connected.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SketchCrossSectionType.VBSymbol">
            <summary>
            VB symbol.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.SketchCrossSectionType.Sketch3dProfile">
            <summary>
            Sketch3d profile.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.SketchCrossSection">
            <summary>
            .NET wrapper for SketchCrossSection.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchCrossSection.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create a SketchCrossSection from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchCrossSection.#ctor(Ingr.SP3D.Common.Middle.Services.Model)">
            <summary>
            Creates a SketchCrossSection object given a Model connection.
            </summary>
            <param name="oModelConnection">Model connection.</param>
            <exception cref="T:System.ArgumentNullException">oModelConnection cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionFactoryException">Failed to create COM SketchCrossSectionFactory.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionException">Failed to create COM SketchCrossSection.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.SketchCrossSection.UpdateSymbolAttributes">
            <summary>
            Method to update the symbol attributes.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnUpdateSymbolAttributesException">UpdateSymbolAttributes method on COM IJDSketchCrossSection interface failed.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchCrossSection.CrossSectionDefinition">
            <summary>
            Gets or sets the cross section definition object which can be an IPart or Sketch3d.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnGetCrossSectionDefinitionException">Failed to get the COM cross section definition object from IJDSketchCrossSection.CrossSectionDefinition.</exception>
            <exception cref="T:System.ArgumentNullException">Cannot set null value.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnSetCrossSectionDefinitionException">Failed to set the COM cross section definition object on IJDSketchCrossSection.CrossSectionDefinition.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnCrossSectionDefinitionException">Cannot set CrossSectionDefinition. Value must be a IPart or Sketch3d type.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchCrossSection.CrossSectionType">
            <summary>
            Gets the cross section type. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchCrossSection.TwistAngle">
            <summary>
            Gets or sets the twist angle (angle between local Y-axis of projection 
            and Y-axis of the planar symbol).
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnNotInWorkingStatusException">Not in working status.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchCrossSection.CrossSectionGraphics">
            <summary>
            Gets cross section graphics, i.e., the symbol (after transformation) 
            if graphics are a VB symbol. Else gets the complex string out of the Sketch3d 
            if cross section is a Sketch3d object. If the cross section object does not exist 
            it creates and returns the graphics.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnGetCrossSectionGraphicsException">Failed to get COM cross section graphics object from IJDSketchCrossSection.CrossSectionGraphics.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchCrossSection.Sketch3D">
            <summary>
            Gets the Sketch3d object from a symbol occurrence. 
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnExtractSketch3dFromSymbolException">ExtractSketch3dObjectFromSymbol method on COM IJDSketchCrossSection interface failed.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.SketchCrossSection.CreateSymbol">
            <summary>
            Gets or sets a boolean value that controls symbol creation.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionFactoryException">
            <summary>
            This exception is thrown when SketchCrossSectionFactory cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionFactoryException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionFactoryException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionException">
            <summary>
            This exception is thrown when SketchCrossSection cannot be created.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with the message for the resource ID passed in.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSketchCrossSectionException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetCrossSectionDefinitionException">
            <summary>
            This exception is thrown when IJDSketchCrossSection.CrossSectionDefinition get property fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetCrossSectionDefinitionException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnSetCrossSectionDefinitionException">
            <summary>
            This exception is thrown when IJDSketchCrossSection.CrossSectionDefinition set property fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnSetCrossSectionDefinitionException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnCrossSectionDefinitionException">
            <summary>
            This exception is thrown when an object other than a IPart or Sketch3d type is set on SketchCrossSection.CrossSectionDefinition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnCrossSectionDefinitionException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnGetCrossSectionGraphicsException">
            <summary>
            This exception is thrown when IJDSketchCrossSection.CrossSectionGraphics get property fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnGetCrossSectionGraphicsException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnUpdateSymbolAttributesException">
            <summary>
            This exception is thrown when IJDSketchCrossSection.UpdateSymbolAttributes method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnUpdateSymbolAttributesException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnExtractSketch3dFromSymbolException">
            <summary>
            This exception is thrown when IJDSketchCrossSection.ExtractSketch3dObjectFromSymbol method fails.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnExtractSketch3dFromSymbolException.#ctor(System.Int32,System.String,System.Runtime.InteropServices.COMException)">
            <summary>
            Initializes a new instance of this class
            with a reference to the inner COMException that is the cause of this exception.
            </summary>
            <param name="iID">ResourceID of the message that explains the reason for the exception.</param>
            <param name="sDefaultString">String with exception message.</param>
            <param name="inner">The COMException that is the cause of the current exception.</param>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.LogError">
            <summary>
            Defines the middle tier error logging service.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.LogError.#ctor">
            <summary>
            Internal log error constructor.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.LogError.Log(System.String)">
            <summary>
            Logs the error with the provided description.
            </summary>
            <param name="sDescription">The description of the error.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.LogError.Log(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs the error with the given information.
            </summary>
            <param name="iHResult">Error code (HRESULT).</param>
            <param name="sErrSource">The source where the error was trapped.</param>
            <param name="sDescription">The description of the error.</param>
            <param name="sErrContext">The context that must be used to interpret custom error codes (interface name).</param>
            <param name="sExtraInfo">Any extra information that needs to be logged.</param>
            <param name="sDataSource">The fully qualified file name of a datasource associated with the error.</param>
            <param name="sSourceFile">The fully qualified file name of the source file where the error occurred.</param>
            <param name="iSourceLine">The line number in the source file where the error occurred.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.LogError.Log(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Object,System.Int32)">
            <summary>
            Logs the error with the given information. It also logs the OID if the ErrorInfo object is passed in.
            </summary>
            <param name="iHResult">Error code (HRESULT).</param>
            <param name="sErrSource">The source where the error was trapped.</param>
            <param name="sDescription">The description of the error.</param>
            <param name="sErrContext">The context that must be used to interpret custom error codes (interface name).</param>
            <param name="sExtraInfo">Any extra information that needs to be logged.</param>
            <param name="sDataSource">The fully qualified file name of a datasource associated with the error.</param>
            <param name="sSourceFile">The fully qualified file name of the source file where the error occurred.</param>
            <param name="iSourceLine">The line number in the source file where the error occurred.</param>
            <param name="oErrorInfo">Object that will be used to get the debug information.</param>
            <param name="iErrorLevel">Error level (Info, Warning, or Error).</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.LogError.EnableLog">
            <summary>
            Enables or disables the error logging.
            ErrorLog path must be set using the PersistFileName property. 
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.LogError.PersistFileName">
            <summary>
            Gets or sets the error logfile path.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Exceptions.CmnErroLogFilePathNotSetException">
            <summary>
            This exception is thrown when EnableLog is set to True without setting the error log file using the PersistFileName property.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Exceptions.CmnErroLogFilePathNotSetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CmnErroLogFilePathNotSetException
            class.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.IRuled">
            <summary>
            Default interface definition for Ruled.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRuled.GenCurveBase">
            <summary>
            Gets or sets the base generating curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRuled.GenCurveTop">
            <summary>
            Gets or sets the top generating curve.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRuled.ReverseNormal">
            <summary>
            Gets or sets reverse normal.  The outward normal is usually U X V, but if reverse normal
            is True, then it's V X U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.IRuled.Capped">
            <summary>
            Gets or sets whether capped or not; only if both curves are closed.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Ruled3d">
             <summary>
             Class definition for Ruled3d.
             </summary>
             <example> This is an example for Rule3d methods and properties.
             <code>
             Public Class Rule3d
               Public Sub New()
            
                 ' Create a Rule3d object.
                 Dim oArc3d_1 As New Arc3d(New Position(0, 0, 0), New Vector(0, 0, 1), New Position(1, 0, 0), New Position(0, 1, 0))
                 Dim oArc3d_2 As New Arc3d(New Position(0, 0, 10), New Vector(0, 0, 1), New Position(1, 0, 10), New Position(0, 1, 10))
                 Dim bCapped As Boolean = True
            
                 ' Create a Rule3d object using two arcs and whether capped.
                 Dim oRule3d As New Ruled3d(oArc3d_1, oArc3d_2, bCapped)
            
                 ' Create a Rule3d object using an existing Rule3d object.
                 Dim oRule3dCopy As New Ruled3d(oRule3d)
            
                 ' Create a Rule3d object using a connection, two arcs, and whether capped.
                 Dim oConn As SP3DConnection
                 oConn = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                 Dim oRuled3d_2 As New Ruled3d(oConn, oArc3d_1, oArc3d_2, bCapped)
            
                 ' Set all values of a Rule3d object into another Rule3d object.
                 oRule3d.[Set](oRuled3d_2)
            
                 ' Transform the Rule3d object.
                 Dim oMatrix As New Matrix4X4()
                 oMatrix.Scale(2)
                 oRule3d.Transform(oMatrix)
            
                 ' Get whether capped.
                 Dim bCappedTest As Boolean
                 bCappedTest = oRule3d.Capped
            
                 ' Set whether capped.
                 bCappedTest = bCappedTest
            
                 ' Get the generating curve base. 
                 Dim oICurveTest As ICurve
                 oICurveTest = oRule3d.GenCurveBase
            
                 ' Set the generating curve base. 
                 oRule3d.GenCurveBase = oICurveTest
            
                 ' Get the generating curve top.
                 oICurveTest = Nothing
                 oICurveTest = oRule3d.GenCurveTop
            
                 ' Set the generating curve top. 
                 oRule3d.GenCurveTop = oICurveTest
            
                 ' Get whether reverse normal. 
                 Dim bRevNorTest As Boolean
                 bRevNorTest = oRule3d.ReverseNormal
                 
                 ' Set whether reverse normal. 
                 oRule3d.ReverseNormal = bRevNorTest
            
                 ' Get the range.
                 Dim oRangeBoxTest As RangeBox
                 oRangeBoxTest = oRule3d.Range
                 
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ruled3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Ruled3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ruled3d.#ctor(Ingr.SP3D.Common.Middle.Ruled3d)">
            <summary>
            Constructor used to copy an existing Ruled3d object.
            </summary>
            <param name="oRuled">A Ruled3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oRuled cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create ruled.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ruled3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.ICurve,Ingr.SP3D.Common.Middle.ICurve,System.Boolean)">
            <summary>
            Constructor used to create a persistent Ruled3d with 2 curves.
            </summary>
            <param name="oConnection">SP3D connection.</param>
            <param name="GenCurveBase">Base curve.</param>
            <param name="GenCurveTop">Top curve.</param>
            <param name="bCapped">Whether to cap; only if both curves are closed.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">GenCurveBase cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">GenCurveTop cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create ruled.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ruled3d.#ctor(Ingr.SP3D.Common.Middle.ICurve,Ingr.SP3D.Common.Middle.ICurve,System.Boolean)">
            <summary>
            Constructor used to create a transient Ruled3d with 2 curves.
            </summary>
            <param name="GenCurveBase">Base curve.</param>
            <param name="GenCurveTop">Top curve.</param>
            <param name="bCapped">Whether to cap; only if both curves are closed.</param>
            <exception cref="T:System.ArgumentNullException">GenCurveBase cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">GenCurveTop cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory did not get created.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">Cannot create ruled.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ruled3d.Set(Ingr.SP3D.Common.Middle.Ruled3d)">
            <summary>
            Sets this ruled surface to another ruled surface.
            </summary>
            <param name="oRuled">Ruled3d object.</param>
            <exception cref="T:System.ArgumentNullException">oRuled cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Ruled3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this ruled by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ruled3d.GenCurveBase">
            <summary>
            Gets or sets the base generating curve.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ruled3d.GenCurveTop">
            <summary>
            Gets or sets the top generating curve.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ruled3d.ReverseNormal">
            <summary>
            Gets or sets whether reverse normal.  The outward normal is usually U X V, but if reverse normal
            is True, then it is V X U.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ruled3d.Capped">
            <summary>
            Gets or sets whether capped or not; only if both curves are closed.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Ruled3d.Range">
            <summary>
            Finds the range box of this ruled.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Point3d">
             <summary>
             Point3d class definition. 
             </summary>
             <example> This is an example for Point3d methods and properties.
             <code>
             Public Class Point3d
               Public Sub New()
            
                  ' Create a point with coordinate arguments. 
                 Dim oPoint3d As New Point3d(10, 100, 1000)
            
                  ' Create a Point3d object from another Point3d object.
                 Dim oPoint3dCopy As New Point3d(oPoint3d)   ' Create a copy of oPoint3d.
            
                 ' Create a Point3d object from a position. 
                 Dim oPos As Position = oPoint3dCopy.Position    ' Get the position from the copied point.
                 Dim oPoint3dPos As New Point3d(oPos)
            
                 ' Create a Point3d object using a connection.
                 ' Create a connection to the model database.
                 Dim oConn As SP3DConnection = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
            
                 ' Create a point with a connection and coordinates.
                 Dim oPoint3dConn As New Point3d(oConn, 10, 100, 1000)
            
                 ' Create a point with a connection and position.
                 Dim oPoint3dPosConn As New Point3d(oConn, oPos)
            
                 ' Set a point on X, Y, Z.
                 oPoint3dCopy.X = 11
                 oPoint3dCopy.Y = 101
                 oPoint3dCopy.Z = 1001
            
                 ' Get a point on X, Y, Z. 
                 Dim dX As Double, dY As Double, dZ As Double
                 dX = oPoint3dCopy.X
                 dY = oPoint3dCopy.Y
                 dZ = oPoint3dCopy.Z
            
                 ' Get the position from the point. 
                 Dim oPosOut As Position = oPoint3dConn.Position
            
                 ' Set the position on a point. 
                 oPoint3dConn.Position = oPos
            
                 ' Check whether the point is identical to another point.
                 If oPoint3d.Equals(oPoint3dCopy) Then
                     System.Diagnostics.Debug.Print("We are identical.")
                 End If
            
                 ' Get the distance from a point.
                 Dim dblActDist As Double = oPoint3dConn.DistanceFromPoint(oPoint3d)
            
                 ' Get the range box of the point.
                 Dim oRangeBox As RangeBox = oPoint3d.Range
                 Dim oLowPos As Position = oRangeBox.Low
                 Dim oHighPos As Position = oRangeBox.High
            
            
                 ' Set a point to another point.
                 oPoint3d.[Set](oPoint3dCopy)
            
                 ' Transform a point.
                 Dim oMatrix As New Matrix4X4()
                 oMatrix.SetIndexValue(12, 100)  ' Set the X-translation component of the matrix to 100.
                 ' Translate by 100.
                 oPoint3d.Transform(oMatrix)
            
               End Sub
             End Class
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Point3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.#ctor(Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Constructor used to copy an existing Point3d object.
            </summary>
            <param name="oPoint">A Point3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oPoint cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoint exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor defining a persistent Point3d given a position.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posOther">Position</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posOther cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoint exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.#ctor(Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor defining a transient Point3d given a position.
            </summary>
            <param name="posOther">Position</param>
            <exception cref="T:System.ArgumentNullException">posOther cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoint exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,System.Double,System.Double,System.Double)">
            <summary>
            Constructor creating a persistent Point3d given X, Y, and Z.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
            <param name="Z">Z-coordinate</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoint exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor creating a transient Point3d given X, Y, and Z.
            </summary>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
            <param name="Z">Z-coordinate</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPoint exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.Set(Ingr.SP3D.Common.Middle.Point3d)">
            <summary>
            Sets this point equal to an existing point.
            </summary>
            <param name="oPoint3d">Existing Point3d.</param>
            <exception cref="T:System.ArgumentNullException">oPoint3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.EqualPositions(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Determines whether this point and an input point are equal.
            </summary>
            <param name="iPoint3d">IPoint</param>
            <returns>Boolean</returns>
            <exception cref="T:System.ArgumentNullException">iPoint3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.DistanceFromPoint(Ingr.SP3D.Common.Middle.IPoint)">
            <summary>
            Finds the distance between 2 points.
            </summary>
            <param name="iPoint3d">IPoint</param>
            <returns>Distance as a double.</returns>
            <exception cref="T:System.ArgumentNullException">iPoint3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Point3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this point by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Point3d.X">
            <summary>
            Gets the X-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Point3d.Y">
            <summary>
            Gets the Y-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Point3d.Z">
            <summary>
            Gets the Z-coordinate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Point3d.Position">
            <summary>
            Gets or sets the position.
            Get returns a read-only Position object.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Point3d.Range">
            <summary>
            Gets the range box of this point.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Line3d">
             <summary>
             Line3d class definition. 
             </summary>
             <example>This is an example for Line3d class methods and properties.
             <code>
             Public Class Line3d
               Public Sub New()
                
                  ' Create the Line3d using start and end positions.
                  Dim oLine3d As Line3d
                  Dim oStart As Position, oEnd As Position
                
                  oStart = New Position(1, 1, 1)  'Start position.
                  oEnd = New Position(1, 1, 1)    'End position.
                
                  oLine3d = New Line3d(oStart, oEnd)
                
                  ' Create the Line3d object using an existing Line3d object as input. 
                  Dim oLine3dCopy As Line3d
                  oLine3dCopy = New Line3d(oLine3d)   'Create a copy of oLine3d.
                
                  'Create the Line3D object using root point and vector.  
                  Dim oLine3dRootVector As Line3d
                  Dim oVector As Vector
                
                  oVector = New Vector(1, 1, 1)
                  oLine3dRootVector = New Line3d(oStart, oVector)
                
                  ' Create a Line3d object using connection, root point, and direction.
                  ' Create a connection to the model database.
                  Dim oConn As SP3DConnection = MiddleServiceProvider.SiteMgr.ActiveSite.ActivePlant.PlantModel
                
                  Dim oLine3dVectorLengthConn As Line3d
                  oLine3dVectorLengthConn = New Line3d(oConn, New Position(10, 10, 10), New Vector(10, 0, 0), 10)
                
                  ' Set or get the start and endpoints of a Line3d object.
                  oLine3d.StartPoint = New Position(10, 10, 10)   'Set the start point to (10,10,10).
                  oLine3d.EndPoint = New Position(100, 100, 100)  'Set the endpoint to (100,100,100).
                  oStart = oLine3d.StartPoint     'Get the start point.
                  oEnd = oLine3d.EndPoint        'Get the endpoint.
                
                  ' Get the length of a line.
                  Dim dLength As Double
                  dLength = oLine3d.Length
                
                  ' Check whether the line is identical to another line.
                  If oLine3d.Equals(oLine3dCopy) Then
                      System.Diagnostics.Debug.Print("We are identical.")
                  End If
                
                  ' Check whether the line is infinite.
                  Dim bIsInfinite As Boolean
                  bIsInfinite = oLine3d.Infinite
                
                  ' Get the root point of the line.
                  oStart = oLine3d.RootPoint
                
                  ' Get the direction of the line.
                  Dim oDirection As Vector
                  oDirection = oLine3d.Direction
                
                  ' Get the range box of the line.
                  Dim oRangeBox As RangeBox = oLine3d.Range
                  Dim oLowPos As Position = oRangeBox.Low
                  Dim oHighPos As Position = oRangeBox.High
                
                  ' Redefine the line by two points.
                  oLine3d.DefineBy2Points(New Position(20, 20, 20), New Position(100, 100, 100))
                
                  ' Redefine the line by start and direction.
                  oLine3d.DefineByStartDir(New Position(20, 20, 20), New Vector(100, 100, 100))
                
                  ' Redefine the line by start, direction, and length.
                  oLine3d.DefineByStartDirLength(New Position(20, 20, 20), New Vector(100, 100, 100), 10)
                
                  ' Set a line to another line.
                  oLine3d.[Set](oLine3dRootVector)
                
                  ' Transform a line.
                  Dim oMatrix As New Matrix4X4()
                  oMatrix.SetIndexValue(12, 100)  ' Set the X-translation component of the matrix to 100.
                  ' Translate by 100.
                  oLine3d.Transform(oMatrix)
                
               End Sub
             End Class
            </code>  
            </example>    
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.PrivateBusinessObject)">
            <summary>
            Constructor used to create Line3d from the internal PBO returned by query.
            </summary>
            <param name="oPBO">PrivateBusinessObject</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.Line3d)">
            <summary>
            Constructor used to copy an existing Lined3d.
            </summary>
            <param name="oLine">A Line3d to be copied.</param>
            <exception cref="T:System.ArgumentNullException">oLine cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPtVectLength exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy2Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor used to create a persistent Lined3d from 2 positions.
            </summary>
            <param name="oConnection">SP3DConnection</param>
            <param name="posStart">Start point.</param>
            <param name="posEnd">End point.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy2Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Constructor used to create a transient Lined3d from 2 positions.
            </summary>
            <param name="posStart">Start point.</param>
            <param name="posEnd">End point.</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateBy2Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Constructor used to create a persistent Line3d by start, direction, and length.
            </summary>
            <param name="oConnection">SP3DConnection database connection.</param>
            <param name="posStart">Starting point of the line.</param>
            <param name="vecDir">Direction vector of the line.</param>
            <param name="dLength">Length of the line.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPtVectLength exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Constructor used to create a transient Line3d by start, direction, and length.
            </summary>
            <param name="posStart">Starting point of the line.</param>
            <param name="vecDir">Direction vector of the line.</param>
            <param name="dLength">Length of the line.</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByPtVectLength exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.Services.SP3DConnection,Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Constructor used to create a persistent infinite Line3d by start and direction.
            </summary>
            <param name="oConnection">SP3DConnection database connection.</param>
            <param name="posRoot">Root point of the line.</param>
            <param name="vecDir">Direction vector of the line.</param>
            <exception cref="T:System.ArgumentNullException">oConnection cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posRoot cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByRootDirStartEnd exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.#ctor(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Constructor used to create a persistent infinite Line3d by start and direction.
            </summary>
            <param name="posRoot">Root point of the line.</param>
            <param name="vecDir">Direction vector of the line.</param>
            <exception cref="T:System.ArgumentNullException">posRoot cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathGeometryFactoryException">GeometryFactory exception.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotCreateGeometryException">COM CreateByRootDirStartEnd exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.Set(Ingr.SP3D.Common.Middle.Line3d)">
            <summary>
            Sets this line equal to an existing line.
            </summary>
            <param name="oLine3d">Existing Line3d.</param>
            <exception cref="T:System.ArgumentNullException">oLine3d cannot be null.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.DefineBy2Points(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Position)">
            <summary>
            Redefines this line by 2 points.
            </summary>
            <param name="posStart">Starting point.</param>
            <param name="posEnd">Ending point.</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">posEnd cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineBy2Points exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.DefineByStartDirLength(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector,System.Double)">
            <summary>
            Redefines this line by a start point, direction, and length.
            </summary>
            <param name="posStart">Starting point.</param>
            <param name="vecDir">Direction vector.</param>
            <param name="dLength">Length</param>
            <exception cref="T:System.ArgumentNullException">posStart cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByStartDirLength exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.DefineByStartDir(Ingr.SP3D.Common.Middle.Position,Ingr.SP3D.Common.Middle.Vector)">
            <summary>
            Redefines this line by a root point and direction vector.
            Note: This is an infinite line.
            </summary>
            <param name="posRoot">Root point. Note: This line does not start at posRoot because the line is infinite.</param>
            <param name="vecDir">Direction vector.</param>
            <exception cref="T:System.ArgumentNullException">posRoot cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">vecDir cannot be null.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathCannotDefineGeometryException">COM DefineByStartDirLength exception.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Line3d.Transform(Ingr.SP3D.Common.Middle.Matrix4X4)">
            <summary>
            Transforms this line by the given transformation.
            </summary>
            <param name="oMatrix">Matrix4X4</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Line3d.Infinite">
            <summary>
            Gets or sets whether this line is infinite.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Line3d.StartPoint">
            <summary>
            Gets or sets the start point of the line.
            <para>Note: Do not call this routine to set if your line is infinite.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Line3d.EndPoint">
            <summary>
            Gets or sets the end point of the line.
            <para>Note: Do not call this routine to set if your line is infinite.</para>
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Line3d.RootPoint">
            <summary>
            Gets or sets the root point of the line.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Line3d.Direction">
            <summary>
            Gets or sets the direction vector.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.MathArgumentInvalidException">Input an invalid argument to the COM method.</exception>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Line3d.Range">
            <summary>
            Finds the range box of this line.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.FilterDefinitionTransient">
            <summary>
            This class is used to define the filter definition for transient filters.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.#ctor(Ingr.SP3D.Common.Middle.Filter)">
            <summary>
            Initialize a filter definition for transient filters.
            </summary>
            <param name="oFilter">Filter</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddObjectType(Ingr.SP3D.Common.Middle.Services.BOCInformation)">
            <summary>
            Adds the specified BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
            <param name="oBOCNode">BOCInformation that will be used to create an object type filter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddObjectType(System.String)">
            <summary>
            Adds the specified BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary> 
            <param name="strBOCNodePath">BOCNodePath that will be used to create an object type filter.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddParametricObjectType">
            <summary>
            Adds a parametric BusinessObjectClassification (BOC) criteria to the FilterDefinition.
            </summary>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddWherePropertyWithAllParameters(System.String,System.String,GSCADMiddleFilters.PropertyComparisonOperator,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a WHERE clause, of the form “Where [PropertyName] [compares to] [PropertyValue]”. 
            If fParametric is true, oPropValue is ignored, and action will be taken to query the user for the test value 
            when Apply is called. ComparisonOperators are an enum: {EQ, GT, GE, LT, LE}. 
            oPropValue is used to obtain the PropertyInformation descriptor, 
            which defines the property to test.
            </summary>
            <param name="IID">string</param>
            <param name="PropertyName">string</param>
            <param name="iOperator">PropertyComparisonOperator</param>
            <param name="PropVal1">object</param>
            <param name="PropVal2">object</param>
            <param name="RelGUIDArray">object</param>
            <param name="RelOrgFlagArray">object</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddHierarchy(Ingr.SP3D.Common.Middle.HierarchyTypes,System.Collections.ObjectModel.ReadOnlyCollection{Ingr.SP3D.Common.Middle.BusinessObject},System.Boolean)">
            <summary>
            Adds the specified hierarchy criteria (HierarchyTypes and BusinessObjects collection) to the FilterDefinition.
            </summary>
            <param name="eHierType">HierarchyTypes can be System, Assembly, WBS, Analysis, Space, PermissionGroup, Volume_NamedSpace.</param>
            <param name="objCol">
            This is the collection of BusinessObject that will be included in the filter definition. 
            These objects will be screened by a set of interfaces: 
            System: IJSystem, IJSystemChild. 
            PermissionGroup: IJPermissionGroup and IJFolder.
            </param>
            <param name="bIncludeNested">Boolea value that indicates whether or not to include the nested objects in the filter definition.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddHierObjectsException">Cannot add the hierarchy objects to the Filter Definition.</exception>
            <remarks>
            If the filter is a catalog filter, this method will be equivalant to AddParametricHierarchy. 
            Any business objects specified as filter inputs will be ignored.
            </remarks>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddParametricHierarchy(Ingr.SP3D.Common.Middle.HierarchyTypes,System.Boolean)">
            <summary>
            Adds a parametric hierarchy criteria with specified hierarchy type to the FilterDefinition.
            </summary>
            <param name="iType">HierarchyTypes can be System, Assembly, WBS, Analysis, Space, PermissionGroup, Volume_NamedSpace.</param>
            <param name="bIncludeNested">Bool value that indicates whether to include or not include the nested objects in the filter definition.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterNotValidException">The filter is invalid or does not exist.</exception>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddHierObjectsException">Cannot add the hierarchy objects to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddVolumeByRefPlanes(Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane,Ingr.SP3D.Common.Middle.IPlane)">
            <summary>
            Adds Volume criteria to the FilterDefinition by reference planes.
            </summary>
            <param name="oRefplaneTop">Reference plane top.</param>
            <param name="oRefPlaneBottom">Reference plane bottom.</param>
            <param name="oRefPlaneFront">Reference plane front.</param>
            <param name="oRefPlaneBack">Reference plane back.</param>
            <param name="oRefPlaneLeft">Reference plane left.</param>
            <param name="oRefPlaneRight">Reference plane right.</param>
            <exception cref="T:System.ArgumentException">At least one reference plane must be passed in.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddParametricVolumeByRefPlanes">
            <summary>
            Adds a parametric Volume criteria to the FilterDefinition by reference planes.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddRefPlanesException">Cannot add the Reference Planes to the Filter Definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddForeignReference">
            <summary>
            Not valid for transient filters.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException">Cannot add the reference root to the transient filter definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddForeignReference(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Not valid for transient filters.
            </summary>
            <param name="oReferenceFileNames">Collection of names.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException">Cannot add the reference files to the transient filter definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddReference(System.Collections.ObjectModel.Collection{Ingr.SP3D.Common.Middle.BusinessObject})">
            <summary>
            Not valid for transient filters.
            </summary>
            <param name="ReferenceObjects">Collection of BusinessObject.</param>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException">Cannot add Reference objects to the transient filter definition.</exception>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.FilterDefinitionTransient.AddParametricForeignReference">
            <summary>
            Not valid for transient filters.
            </summary>
            <exception cref="T:Ingr.SP3D.Common.Exceptions.CmnFilterFailedToAddToTransientFilterException">Cannot add parametric reference objects to the transient filter definition.</exception>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.AssemblyOutputAttribute">
             <summary>
             Attribute defined on a AssemblyOutput field of a CustomAssemblyDefinition class declaring
             the field as an assembly output. Without this defining attribute the assembly output
             field cannot be bulkloaded into the catalog.
             </summary>
             <example> This is an example of using AssemblyOutputAttribute.
             <code>
             public class MyCustomAssembly : CustomAssemblyDefinition 
             {
                 [AssemblyOutput(1, "MyLineOutput")]
                 public AssemblyOutput   m_oMyLineOutput;
                 
             
             }
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.AssemblyOutputAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Constructor for the assembly output attribute given a unique index and name for 
            this CustomAssembly class.
            </summary>
            <param name="index">Unique integer identifier for an Assembly Output.</param>
            <param name="OutputName">Unique name for an Assembly Output.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutputAttribute.Name">
            <summary>
            Returns the defined name for the declared assembly output.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.AssemblyOutputAttribute.Index">
            <summary>
            Returns the defined index for the assembly output.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.OutputNotificationAttribute">
             <summary>
             Attribute defined on either the CustomAssemblyDefinition class or AssemblyOutput field variables
             to indicate which interfaces will be modified by the custom assembly. By default the modified
             interfaces are IJGeometry and IJDAttributes for both the CustomAssembly itself and all of
             its outputs.
             </summary>
             <example> This is an example of using OutputNotificationAttribute.
             <code>
             // Will update the IJDAttributes and IJDGeometry interfaces for this definition and the
             //  assembly outputs will have their geometry (IJDGeometry), attributes (IJDAttributes)
             //  and volume properties (IJGenericVolume) modified.
             [OutputNotification("IJDAttributes")]
             [OutputNotification("IJDGeometry")]
             [OutputNotification("IJDGeometry", true)]
             [OutputNotification("IJDAttributes", true)]
             [OutputNotification("{E897A3AF-E949-457C-968D-67E5DFDAD154}"), true]
             public class MyCustomAssembly : CustomAssemblyDefinition 
             {
                 // definition implementation
             }
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.OutputNotificationAttribute.#ctor(System.String)">
            <summary>
            OutputNotifcation attribute constructor to declare that the class/member variable is to
            output the indicated interface.
            </summary>
            <param name="InterfaceName">Name of the interface.</param>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.OutputNotificationAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            OutputNotification constructor to declare that all assembly outputs will modify the outputs
            on the indicated interface. This form of the attribute constructor is only interesting when
            it decorates the custom assembly class (decorating an assembly output field with this form
            of the constructor ignores the second argument).
            </summary>
            <param name="InterfaceName">Name of the interface.</param>
            <param name="IsInterfaceForAssemblyOutputs">Declares whether the interface is for assembly outputs.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.OutputNotificationAttribute.InterfaceName">
            <summary>
            Returns the name of the interface that the class/assembly output will output from the
            Evaluate.
            </summary>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.OutputNotificationAttribute.IsForAssemblyOutputs">
            <summary>
            Returns a boolean indicating whether the output is to be applied to all assembly outputs.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.UpdateDisplayFromOutputAttribute">
             <summary>
             Attribute defined on a CustomAssemblyDefinition class to declare that the display
             is to be provided by the Custom Assembly rather than the controlling business object
             (which is the default behavior). 
             <para>This attribute should only be used by Intergraph
             provided base classes and not by any user-defined custom assembly classes.</para>
             </summary>
             <example> This is an example of using UpdateDisplayFromOutput.
             <code>
             [UpdateDisplayFromOutput(true)]
              public class MyCustomAssembly : CustomAssemblyDefinition 
             {
                 // definition implementation
             }
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.UpdateDisplayFromOutputAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor of the attribute which defines whether the display is provided by the output.
            </summary>
            <param name="updateDisplay">Indicates whether to update the display.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.UpdateDisplayFromOutputAttribute.IsUpdateDisplayFromOutput">
            <summary>
            Returns the property that indicates whether the display is provided by the output.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyOptions">
            <summary>
            Enumerator used to define the behavior of copied assembly outputs.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyOptions.DoNotCopyIndependently">
            <summary>
            Disallows the user from copying an assembly output without copying the parent custom assembly.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyOptions.CopyIndependently">
            <summary>
            Allows an assembly output to be copied by itself.
            </summary>
        </member>
        <member name="F:Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyOptions.CopyWithAssembly">
            <summary>
            Copying an assembly output also copies the parent custom assembly with it (including
            its other outputs).
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyBehaviorAttribute">
             <summary>
             Attribute defined on CustomAssemblyDefinition classes to define the copy behavior of
             its assembly outputs. The copy behaviors include:
              <para>1) Disallow the output from being copied independently (default behavior).</para>
              <para>2) Can be copied independently from its parent.</para>
              <para>3) Copying assembly output will also copy parent and the other assembly outputs.</para>
             <para>This attribute should only be used by Intergraph-provided base classes and not by user-defined
             custom assembly classes.</para>
             </summary>
             <example> This is an example of using AssemblyOutputsCopyBehavior.
             <code>
             [AssemblyOutputsCopyBehavior(AssemblyOutputsCopyOptions.CopyIndependently)]
             public class MyCustomAssembly : CustomAssemblyDefinition
             {
                 // definition implementation
             }
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyBehaviorAttribute.#ctor(Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyOptions)">
            <summary>
            Constructor of the attribute which defines the assembly outputs copy behavior.
            </summary>
            <param name="copyOption">Argument declares the copy option of the assembly output.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.AssemblyOutputsCopyBehaviorAttribute.CopyOption">
            <summary>
            Returns the property that indicates whether the outputs can be independently copied without
            the parent CustomAssembly.
            </summary>
        </member>
        <member name="T:Ingr.SP3D.Common.Middle.Services.Hidden.HasGraphicInputsAttribute">
             <summary>
             Declares that all CustomAssemblies based on this wrapper class will have inherent graphic
             inputs.
             </summary>
             <example> This is an example of using HasGraphicInputs.
             <code>
             [HasGraphicInputs(true)]
             [GuidAttribute("11111111-1111-1111-1111-AAAAAAAAAAA")]
             [ProgId("MyAssemblyWrappers.SpecificDefinitionWrapper")]
             [ClassInterface(ClassInterfaceType.None)]
             public class SpecificDefinitionWrapper : CustomAssemblyWrapper
             {
                 // definition wrapper implementation
             }
            </code>
            </example>
        </member>
        <member name="M:Ingr.SP3D.Common.Middle.Services.Hidden.HasGraphicInputsAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor for creating an attribute that defines whether a symbol has inherent graphic inputs.
            </summary>
            <param name="hasGraphicInputs">true - has graphic inputs; false - no graphic inputs.</param>
        </member>
        <member name="P:Ingr.SP3D.Common.Middle.Services.Hidden.HasGraphicInputsAttribute.HasGraphicInputs">
            <summary>
            Property returns if the class has graphic inputs.
            </summary>
        </member>
    </members>
</doc>
