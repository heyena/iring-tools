//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Iesi.Collections.Generic;
using org.iringtools.library;

namespace org.iringtools.adapter.datalayer.proj_12345_000.ABC
{
  public class Lines : IDataObject
  {
    public virtual String Id { get; set; }
    public virtual String Tag
    {
      get { return Id; }
      set { Id = value; }
    }
    public virtual Single DesignTemperature { get; set; }
    public virtual Single Diameter { get; set; }
    public virtual String DiameterUOM { get; set; }
    public virtual String Fluid { get; set; }
    public virtual Single Length { get; set; }
    public virtual String LengthUOM { get; set; }
    public virtual Single OperatingTemperature { get; set; }
    public virtual String PID { get; set; }
    public virtual String PIDRev { get; set; }
    public virtual String Plant { get; set; }
    public virtual String PlantArea { get; set; }
    public virtual String System { get; set; }
    public virtual String TempUOM { get; set; }
    
    public virtual object GetPropertyValue(string propertyName)
    {
      switch (propertyName)
      {
        case "Id": return Id;
        case "Tag": return Tag;
        case "DesignTemperature": return DesignTemperature;
        case "Diameter": return Diameter;
        case "DiameterUOM": return DiameterUOM;
        case "Fluid": return Fluid;
        case "Length": return Length;
        case "LengthUOM": return LengthUOM;
        case "OperatingTemperature": return OperatingTemperature;
        case "PID": return PID;
        case "PIDRev": return PIDRev;
        case "Plant": return Plant;
        case "PlantArea": return PlantArea;
        case "System": return System;
        case "TempUOM": return TempUOM;
        default: throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual void SetPropertyValue(string propertyName, object value)
    {
      switch (propertyName)
      {
        case "Id":
          Id = Convert.ToString(value);
          break;
        case "Tag":
          if (value != null) Tag = Convert.ToString(value);
          break;
        case "DesignTemperature":
          if (value != null) DesignTemperature = Convert.ToSingle(value);
          break;
        case "Diameter":
          if (value != null) Diameter = Convert.ToSingle(value);
          break;
        case "DiameterUOM":
          if (value != null) DiameterUOM = Convert.ToString(value);
          break;
        case "Fluid":
          if (value != null) Fluid = Convert.ToString(value);
          break;
        case "Length":
          if (value != null) Length = Convert.ToSingle(value);
          break;
        case "LengthUOM":
          if (value != null) LengthUOM = Convert.ToString(value);
          break;
        case "OperatingTemperature":
          if (value != null) OperatingTemperature = Convert.ToSingle(value);
          break;
        case "PID":
          if (value != null) PID = Convert.ToString(value);
          break;
        case "PIDRev":
          if (value != null) PIDRev = Convert.ToString(value);
          break;
        case "Plant":
          if (value != null) Plant = Convert.ToString(value);
          break;
        case "PlantArea":
          if (value != null) PlantArea = Convert.ToString(value);
          break;
        case "System":
          if (value != null) System = Convert.ToString(value);
          break;
        case "TempUOM":
          if (value != null) TempUOM = Convert.ToString(value);
          break;
        default:
          throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual IList<IDataObject> GetRelatedObjects(string relatedObjectType)
    {
      switch (relatedObjectType)
      {
        default:
          throw new Exception("Related object [" + relatedObjectType + "] does not exist.");
        }
      }
    }
  }
