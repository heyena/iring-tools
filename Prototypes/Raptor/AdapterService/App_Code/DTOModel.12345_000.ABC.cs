

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a DTOModel.tt.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ServiceModel;
using System.Xml.Xsl;
using org.iringtools.library;
using org.iringtools.adapter.dataLayer;
using org.iringtools.utility;

namespace org.iringtools.adapter.proj_12345_000.ABC 
{
	[DataContract(Name = "Valves", Namespace = "http://abc.bechtel.com/12345_000/data#")]
  [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class Valves : DataTransferObject
	{
	  [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	  public class TemplatePipingNetworkSegmentInlinePipingComponentConnection
	  {
		  [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
      [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		  public class ClassPipingNetworkSegment
		  {
		  	[DataMember(EmitDefaultValue=false)]
			  [XmlIgnore]
			  public string Identifier { get; set; }
			
	      [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
        [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	      public class TemplatePipingNetworkSystemPipingNetworkSegmentAssembly
	      {
	        [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
          [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	        public class ClassPipingNetworkSystem
	        {
		        [DataMember(EmitDefaultValue=false)]
		        [XmlIgnore]
		        public string Identifier { get; set; }
      			
		        [DataMember(EmitDefaultValue = false)]
		        public String tpl_PipingNetworkSystemLineTag_identifier { get; set; }
					
	          [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
            [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	          public class TemplateSystemPipingNetworkSystemAssembly
	          {
		          [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
              [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		          public class ClassSystem
		          {
			          [DataMember(EmitDefaultValue=false)]
			          [XmlIgnore]
			          public string Identifier { get; set; }
          			
			          [DataMember(EmitDefaultValue = false)]
			          public String tpl_SystemName_identifier { get; set; }
          					
	              [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
                [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    	          public class TemplatePlantSystemAssembly
	              {
		              [DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
                  [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		              public class ClassPLANT
    		          {
		    	          [DataMember(EmitDefaultValue=false)]
			              [XmlIgnore]
			              public string Identifier { get; set; }          			
    		          } 

		              [DataMember(Name = "hasClassOfWhole_rdl_PLANT", EmitDefaultValue = false)]
		              [XmlIgnore]
		              public ClassPLANT hasClassOfWhole_rdl_PLANT { get; set; }
	              }
	
	              [DataMember(EmitDefaultValue = false)]
                [XmlIgnore]
                public TemplatePlantSystemAssembly tpl_PlantSystemAssembly { get; set; }     
       
          		}

		[DataMember(Name = "hasClassOfWhole_rdl_System", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassSystem hasClassOfWhole_rdl_System { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateSystemPipingNetworkSystemAssembly tpl_SystemPipingNetworkSystemAssembly { get; set; }     
       
		}

		[DataMember(Name = "hasClass_rdl_PipingNetworkSystem", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPipingNetworkSystem hasClass_rdl_PipingNetworkSystem { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePipingNetworkSystemPipingNetworkSegmentAssembly tpl_PipingNetworkSystemPipingNetworkSegmentAssembly { get; set; }     
       
		}

		[DataMember(Name = "hasClass_rdl_PipingNetworkSegment", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPipingNetworkSegment hasClass_rdl_PipingNetworkSegment { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePipingNetworkSegmentInlinePipingComponentConnection tpl_PipingNetworkSegmentInlinePipingComponentConnection { get; set; }     
       
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
  [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplatePlantAreaInlinePipingComponentAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassPLANTAREA
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
      [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplatePlantPlantAreaAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassPLANT
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
      [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplatePlantProjectAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassPROJECT
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(EmitDefaultValue = false)]
			public String tpl_ProjectName_identifier { get; set; }
					
		}

		[DataMember(Name = "hasClassOfPart_rdl_PROJECT", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPROJECT hasClassOfPart_rdl_PROJECT { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePlantProjectAssembly tpl_PlantProjectAssembly { get; set; }     
       
		}

		[DataMember(Name = "hasClassOfWhole_rdl_PLANT", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPLANT hasClassOfWhole_rdl_PLANT { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePlantPlantAreaAssembly tpl_PlantPlantAreaAssembly { get; set; }     
       
			[DataMember(EmitDefaultValue = false)]
			public String tpl_PlantAreaName_identifier { get; set; }
					
		}

		[DataMember(Name = "hasClassOfWhole_rdl_PLANTAREA", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPLANTAREA hasClassOfWhole_rdl_PLANTAREA { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePlantAreaInlinePipingComponentAssembly tpl_PlantAreaInlinePipingComponentAssembly { get; set; }     
       

		public Valves(string classId, string graphName, string identifier) 
			: base(classId, graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"tpl_InlinePipingComponentName_identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"componentType", @"tpl_InlinePipingComponentType_type", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"uomDiameter", @"tpl_InlinePipingComponentNominalDiameter_scale", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"diameter", @"tpl_InlinePipingComponentNominalDiameter_value", null, typeof(Double), false, false));
			_properties.Add(new DTOProperty(@"rating", @"tpl_InlinePipingComponentRating_hasNominalProperty", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"lineTag", @"tpl_PipingNetworkSystemLineTag_identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"system", @"tpl_SystemName_identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"projectNumber", @"tpl_ProjectName_identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"unit", @"tpl_PlantAreaName_identifier", null, typeof(String), false, false));

			Identifier = identifier;
      ClassId = classId;
		}
	
		public Valves(org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent dataObject)
      : this("http://rdl.rdlfacade.org/data#R97295617945", "Valves", null, dataObject) { }
			
		public Valves(string classId, string graphName, string identifier, org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent dataObject)
      : this(classId, graphName, identifier)
		{  
			if (dataObject != null)
			{
				tpl_InlinePipingComponentName_identifier = (String)dataObject.tag;
				tpl_InlinePipingComponentType_type = (String)dataObject.componentType;
				tpl_InlinePipingComponentNominalDiameter_scale = (String)dataObject.uomDiameter;
				tpl_InlinePipingComponentNominalDiameter_value = (Double)dataObject.diameter;
				tpl_InlinePipingComponentRating_hasNominalProperty = (String)dataObject.rating;
				tpl_PipingNetworkSystemLineTag_identifier = (String)dataObject.lineTag;
				tpl_SystemName_identifier = (String)dataObject.system;
				tpl_ProjectName_identifier = (String)dataObject.projectNumber;
				tpl_PlantAreaName_identifier = (String)dataObject.unit;
			}
			
			tpl_PipingNetworkSegmentInlinePipingComponentConnection = new TemplatePipingNetworkSegmentInlinePipingComponentConnection();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment = new TemplatePipingNetworkSegmentInlinePipingComponentConnection.ClassPipingNetworkSegment();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.Identifier = ((GetPropertyValue("lineTag") != null) ? GetPropertyValue("lineTag").ToString() : "");
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly = new TemplatePipingNetworkSegmentInlinePipingComponentConnection.ClassPipingNetworkSegment.TemplatePipingNetworkSystemPipingNetworkSegmentAssembly();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem = new TemplatePipingNetworkSegmentInlinePipingComponentConnection.ClassPipingNetworkSegment.TemplatePipingNetworkSystemPipingNetworkSegmentAssembly.ClassPipingNetworkSystem();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.Identifier = ((GetPropertyValue("lineTag") != null) ? GetPropertyValue("lineTag").ToString() : "");
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_PipingNetworkSystemLineTag_identifier = tpl_PipingNetworkSystemLineTag_identifier;
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_SystemPipingNetworkSystemAssembly = new TemplatePipingNetworkSegmentInlinePipingComponentConnection.ClassPipingNetworkSegment.TemplatePipingNetworkSystemPipingNetworkSegmentAssembly.ClassPipingNetworkSystem.TemplateSystemPipingNetworkSystemAssembly();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System = new TemplatePipingNetworkSegmentInlinePipingComponentConnection.ClassPipingNetworkSegment.TemplatePipingNetworkSystemPipingNetworkSegmentAssembly.ClassPipingNetworkSystem.TemplateSystemPipingNetworkSystemAssembly.ClassSystem();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System.Identifier = ((GetPropertyValue("system") != null) ? GetPropertyValue("system").ToString() : "");
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System.tpl_SystemName_identifier = tpl_SystemName_identifier;
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System.tpl_PlantSystemAssembly = new TemplatePipingNetworkSegmentInlinePipingComponentConnection.ClassPipingNetworkSegment.TemplatePipingNetworkSystemPipingNetworkSegmentAssembly.ClassPipingNetworkSystem.TemplateSystemPipingNetworkSystemAssembly.ClassSystem.TemplatePlantSystemAssembly();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System.tpl_PlantSystemAssembly.hasClassOfWhole_rdl_PLANT = new TemplatePipingNetworkSegmentInlinePipingComponentConnection.ClassPipingNetworkSegment.TemplatePipingNetworkSystemPipingNetworkSegmentAssembly.ClassPipingNetworkSystem.TemplateSystemPipingNetworkSystemAssembly.ClassSystem.TemplatePlantSystemAssembly.ClassPLANT();
			tpl_PipingNetworkSegmentInlinePipingComponentConnection.hasClass_rdl_PipingNetworkSegment.tpl_PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass_rdl_PipingNetworkSystem.tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System.tpl_PlantSystemAssembly.hasClassOfWhole_rdl_PLANT.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			tpl_PlantAreaInlinePipingComponentAssembly = new TemplatePlantAreaInlinePipingComponentAssembly();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPLANTAREA();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.Identifier = ((GetPropertyValue("unit") != null) ? GetPropertyValue("unit").ToString() : "");
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantPlantAreaAssembly = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPLANTAREA.TemplatePlantPlantAreaAssembly();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_PLANT = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPLANTAREA.TemplatePlantPlantAreaAssembly.ClassPLANT();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_PLANT.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_PLANT.tpl_PlantProjectAssembly = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPLANTAREA.TemplatePlantPlantAreaAssembly.ClassPLANT.TemplatePlantProjectAssembly();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_PLANT.tpl_PlantProjectAssembly.hasClassOfPart_rdl_PROJECT = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPLANTAREA.TemplatePlantPlantAreaAssembly.ClassPLANT.TemplatePlantProjectAssembly.ClassPROJECT();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_PLANT.tpl_PlantProjectAssembly.hasClassOfPart_rdl_PROJECT.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_PLANT.tpl_PlantProjectAssembly.hasClassOfPart_rdl_PROJECT.tpl_ProjectName_identifier = tpl_ProjectName_identifier;
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PLANTAREA.tpl_PlantAreaName_identifier = tpl_PlantAreaName_identifier;
	      
			_dataObject = dataObject;
		} 
		
		public Valves()
			: this("", "Valves", null) {}			

		[DataMember(Name = "tpl_InlinePipingComponentName_identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_InlinePipingComponentName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[DataMember(Name = "tpl_InlinePipingComponentType_type", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_InlinePipingComponentType_type
		{
			get
			{
				return (String)GetPropertyValue("componentType");
			}

			set
			{
				SetPropertyValue("componentType", value);
			}
		}
		
		[DataMember(Name = "tpl_InlinePipingComponentNominalDiameter_scale", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_InlinePipingComponentNominalDiameter_scale
		{
			get
			{
				return (String)GetPropertyValue("uomDiameter");
			}

			set
			{
				SetPropertyValue("uomDiameter", value);
			}
		}
		
		[DataMember(Name = "tpl_InlinePipingComponentNominalDiameter_value", EmitDefaultValue = false)]
		[XmlIgnore]
		public global::System.Nullable<Double> tpl_InlinePipingComponentNominalDiameter_value
		{
			get
			{
				return (Double)GetPropertyValue("diameter");
			}

			set
			{
				SetPropertyValue("diameter", value);
			}
		}
		
		[DataMember(Name = "tpl_InlinePipingComponentRating_hasNominalProperty", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_InlinePipingComponentRating_hasNominalProperty
		{
			get
			{
				return (String)GetPropertyValue("rating");
			}

			set
			{
				SetPropertyValue("rating", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_PipingNetworkSystemLineTag_identifier
		{
			get
			{
				return (String)GetPropertyValue("lineTag");
			}

			set
			{
				SetPropertyValue("lineTag", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_SystemName_identifier
		{
			get
			{
				return (String)GetPropertyValue("system");
			}

			set
			{
				SetPropertyValue("system", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_ProjectName_identifier
		{
			get
			{
				return (String)GetPropertyValue("projectNumber");
			}

			set
			{
				SetPropertyValue("projectNumber", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_PlantAreaName_identifier
		{
			get
			{
				return (String)GetPropertyValue("unit");
			}

			set
			{
				SetPropertyValue("unit", value);
			}
		}
		
		public override object GetDataObject()
		{
				if (_dataObject == null)
				{
					_dataObject = new org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent();
					((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).tag = (String)this._identifier;
				}
				
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).componentType = (String)this.tpl_InlinePipingComponentType_type;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).uomDiameter = (String)this.tpl_InlinePipingComponentNominalDiameter_scale;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).diameter = (Double)this.tpl_InlinePipingComponentNominalDiameter_value;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).rating = (String)this.tpl_InlinePipingComponentRating_hasNominalProperty;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).lineTag = (String)this.tpl_PipingNetworkSystemLineTag_identifier;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).system = (String)this.tpl_SystemName_identifier;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).projectNumber = (String)this.tpl_ProjectName_identifier;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).unit = (String)this.tpl_PlantAreaName_identifier;

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Valves>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Valves>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Valves> list = new List<Valves> { this };
			Utility.Write<List<Valves>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	[DataContract(Name = "Instruments", Namespace = "http://abc.bechtel.com/12345_000/data#")]
  [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class Instruments : DataTransferObject
	{
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplatePlantAreaInlinePipingComponentAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassPlantArea
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(EmitDefaultValue = false)]
			public String tpl_PlantAreaName_identifier { get; set; }
					
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
      [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplatePlantPlantAreaAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassPlant
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
      [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplatePlantProjectAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassProject
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(EmitDefaultValue = false)]
			public String tpl_ProjectName_identifier { get; set; }
					
		}

		[DataMember(Name = "hasClassOfPart_rdl_Project", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassProject hasClassOfPart_rdl_Project { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePlantProjectAssembly tpl_PlantProjectAssembly { get; set; }     
       
		}

		[DataMember(Name = "hasClassOfWhole_rdl_Plant", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPlant hasClassOfWhole_rdl_Plant { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePlantPlantAreaAssembly tpl_PlantPlantAreaAssembly { get; set; }     
       
		}

		[DataMember(Name = "hasClassOfWhole_rdl_PlantArea", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPlantArea hasClassOfWhole_rdl_PlantArea { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePlantAreaInlinePipingComponentAssembly tpl_PlantAreaInlinePipingComponentAssembly { get; set; }     
       
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
  [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplatePandIDiagramPipingNetworkSegmentAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassPandIDiagram
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(EmitDefaultValue = false)]
			public String tpl_DrawingName_identifier { get; set; }
					
		}

		[DataMember(Name = "hasClassOfWhole_rdl_PandIDiagram", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassPandIDiagram hasClassOfWhole_rdl_PandIDiagram { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplatePandIDiagramPipingNetworkSegmentAssembly tpl_PandIDiagramPipingNetworkSegmentAssembly { get; set; }     
       

		public Instruments(string classId, string graphName, string identifier) 
			: base(classId, graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"tpl_InlinePipingComponentName_identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"componentType", @"tpl_InlinePipingComponentType_type", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"unit", @"tpl_PlantAreaName_identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"projectNumber", @"tpl_ProjectName_identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"pid", @"tpl_DrawingName_identifier", null, typeof(String), false, false));

			Identifier = identifier;
      ClassId = classId;
		}
	
		public Instruments(org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent dataObject)
      : this("http://rdl.rdlfacade.org/data#R49707845396", "Instruments", null, dataObject) { }
			
		public Instruments(string classId, string graphName, string identifier, org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent dataObject) 
			: this(classId, graphName, identifier)
		{  
			if (dataObject != null)
			{
				tpl_InlinePipingComponentName_identifier = (String)dataObject.tag;
				tpl_InlinePipingComponentType_type = (String)dataObject.componentType;
				tpl_PlantAreaName_identifier = (String)dataObject.unit;
				tpl_ProjectName_identifier = (String)dataObject.projectNumber;
				tpl_DrawingName_identifier = (String)dataObject.pid;
			}
			
			tpl_PlantAreaInlinePipingComponentAssembly = new TemplatePlantAreaInlinePipingComponentAssembly();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPlantArea();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.Identifier = ((GetPropertyValue("unit") != null) ? GetPropertyValue("unit").ToString() : "");
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantAreaName_identifier = tpl_PlantAreaName_identifier;
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantPlantAreaAssembly = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPlantArea.TemplatePlantPlantAreaAssembly();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_Plant = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPlantArea.TemplatePlantPlantAreaAssembly.ClassPlant();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_Plant.Identifier = ((GetPropertyValue("componentType") != null) ? GetPropertyValue("componentType").ToString() : "");
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_Plant.tpl_PlantProjectAssembly = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPlantArea.TemplatePlantPlantAreaAssembly.ClassPlant.TemplatePlantProjectAssembly();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_Plant.tpl_PlantProjectAssembly.hasClassOfPart_rdl_Project = new TemplatePlantAreaInlinePipingComponentAssembly.ClassPlantArea.TemplatePlantPlantAreaAssembly.ClassPlant.TemplatePlantProjectAssembly.ClassProject();
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_Plant.tpl_PlantProjectAssembly.hasClassOfPart_rdl_Project.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			tpl_PlantAreaInlinePipingComponentAssembly.hasClassOfWhole_rdl_PlantArea.tpl_PlantPlantAreaAssembly.hasClassOfWhole_rdl_Plant.tpl_PlantProjectAssembly.hasClassOfPart_rdl_Project.tpl_ProjectName_identifier = tpl_ProjectName_identifier;
			tpl_PandIDiagramPipingNetworkSegmentAssembly = new TemplatePandIDiagramPipingNetworkSegmentAssembly();
			tpl_PandIDiagramPipingNetworkSegmentAssembly.hasClassOfWhole_rdl_PandIDiagram = new TemplatePandIDiagramPipingNetworkSegmentAssembly.ClassPandIDiagram();
			tpl_PandIDiagramPipingNetworkSegmentAssembly.hasClassOfWhole_rdl_PandIDiagram.Identifier = ((GetPropertyValue("pid") != null) ? GetPropertyValue("pid").ToString() : "");
			tpl_PandIDiagramPipingNetworkSegmentAssembly.hasClassOfWhole_rdl_PandIDiagram.tpl_DrawingName_identifier = tpl_DrawingName_identifier;
	      
			_dataObject = dataObject;
		} 
		
		public Instruments()
      : this("http://rdl.rdlfacade.org/data#R49707845396", "Instruments", null) { }			

		[DataMember(Name = "tpl_InlinePipingComponentName_identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_InlinePipingComponentName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[DataMember(Name = "tpl_InlinePipingComponentType_type", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_InlinePipingComponentType_type
		{
			get
			{
				return (String)GetPropertyValue("componentType");
			}

			set
			{
				SetPropertyValue("componentType", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_PlantAreaName_identifier
		{
			get
			{
				return (String)GetPropertyValue("unit");
			}

			set
			{
				SetPropertyValue("unit", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_ProjectName_identifier
		{
			get
			{
				return (String)GetPropertyValue("projectNumber");
			}

			set
			{
				SetPropertyValue("projectNumber", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_DrawingName_identifier
		{
			get
			{
				return (String)GetPropertyValue("pid");
			}

			set
			{
				SetPropertyValue("pid", value);
			}
		}
		
		public override object GetDataObject()
		{
				if (_dataObject == null)
				{
					_dataObject = new org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent();
					((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).tag = (String)this._identifier;
				}
				
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).componentType = (String)this.tpl_InlinePipingComponentType_type;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).unit = (String)this.tpl_PlantAreaName_identifier;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).projectNumber = (String)this.tpl_ProjectName_identifier;
				((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)_dataObject).pid = (String)this.tpl_DrawingName_identifier;

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Instruments>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Instruments>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Instruments> list = new List<Instruments> { this };
			Utility.Write<List<Instruments>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	[DataContract(Name = "Vessels", Namespace = "http://abc.bechtel.com/12345_000/data#")]
  [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class Vessels : DataTransferObject
	{

		public Vessels(string classId, string graphName, string identifier) 
			: base(classId, graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"tpl_FluidContainerName_identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"description", @"tpl_FluidContainerDescription_description", null, typeof(String), false, false));

			Identifier = identifier;
      ClassId = classId;
		}
	
		public Vessels(org.iringtools.adapter.proj_12345_000.ABC.KOPot dataObject)
      : this("http://rdl.rdlfacade.org/data#R75598586594", "Vessels", null, dataObject) { }
			
		public Vessels(string classId, string graphName, string identifier, org.iringtools.adapter.proj_12345_000.ABC.KOPot dataObject) 
			: this(classId, graphName, identifier)
		{  
			if (dataObject != null)
			{
				tpl_FluidContainerName_identifier = (String)dataObject.tag;
				tpl_FluidContainerDescription_description = (String)dataObject.description;
			}
			
	      
			_dataObject = dataObject;
		} 
		
	
		public Vessels(org.iringtools.adapter.proj_12345_000.ABC.VacuumTower dataObject)
      : this("http://rdl.rdlfacade.org/data#R75598586594", "Vessels", null, dataObject) { }
			
		public Vessels(string classId, string graphName, string identifier, org.iringtools.adapter.proj_12345_000.ABC.VacuumTower dataObject) 
			: this(classId, graphName, identifier)
		{  
			if (dataObject != null)
			{
				tpl_FluidContainerName_identifier = (String)dataObject.tag;
				tpl_FluidContainerDescription_description = (String)dataObject.description;
			}
			
	      
			_dataObject = dataObject;
		} 
		
		public Vessels()
      : this("http://rdl.rdlfacade.org/data#R75598586594", "Vessels", null) { }			

		[DataMember(Name = "tpl_FluidContainerName_identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_FluidContainerName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[DataMember(Name = "tpl_FluidContainerDescription_description", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_FluidContainerDescription_description
		{
			get
			{
				return (String)GetPropertyValue("description");
			}

			set
			{
				SetPropertyValue("description", value);
			}
		}
		
		public override object GetDataObject()
		{
			if (tpl_FluidContainerDescription_description.ToUpper() == "KNOCK OUT VESSEL") // inFilter
			{
				if (_dataObject == null)
				{
					_dataObject = new org.iringtools.adapter.proj_12345_000.ABC.KOPot();
					((org.iringtools.adapter.proj_12345_000.ABC.KOPot)_dataObject).tag = (String)this._identifier;
				}
				
				((org.iringtools.adapter.proj_12345_000.ABC.KOPot)_dataObject).description = (String)this.tpl_FluidContainerDescription_description;
			}
			else if (tpl_FluidContainerDescription_description.ToUpper() == "VACUUM VESSEL") // inFilter
			{
				if (_dataObject == null)
				{
					_dataObject = new org.iringtools.adapter.proj_12345_000.ABC.VacuumTower();
					((org.iringtools.adapter.proj_12345_000.ABC.VacuumTower)_dataObject).tag = (String)this._identifier;
				}
				
				((org.iringtools.adapter.proj_12345_000.ABC.VacuumTower)_dataObject).description = (String)this.tpl_FluidContainerDescription_description;
			}

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Vessels>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Vessels>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Vessels> list = new List<Vessels> { this };
			Utility.Write<List<Vessels>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	[DataContract(Name = "Lines", Namespace = "http://abc.bechtel.com/12345_000/data#")]
  [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class Lines : DataTransferObject
	{
	[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
	public class TemplateSystemPipingNetworkSystemAssembly
	{
		[DataContract(Namespace = "http://abc.bechtel.com/12345_000/data#")]
    [XmlRoot(Namespace = "http://abc.bechtel.com/12345_000/data#")]
		public class ClassSystem
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(EmitDefaultValue = false)]
			public String tpl_SystemName_identifier { get; set; }
					
		}

		[DataMember(Name = "hasClassOfWhole_rdl_System", EmitDefaultValue = false)]
		[XmlIgnore]
		public ClassSystem hasClassOfWhole_rdl_System { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateSystemPipingNetworkSystemAssembly tpl_SystemPipingNetworkSystemAssembly { get; set; }     
       

		public Lines(string classId, string graphName, string identifier) 
			: base(classId, graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"tpl_PipingNetworkSystemName_identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"system", @"tpl_SystemName_identifier", null, typeof(String), false, false));

			Identifier = identifier;
      ClassId = classId;
		}
	
		public Lines(org.iringtools.adapter.proj_12345_000.ABC.Line dataObject)
      : this("http://rdl.rdlfacade.org/data#R19192462550", "Lines", null, dataObject) { }
			
		public Lines(string classId, string graphName, string identifier, org.iringtools.adapter.proj_12345_000.ABC.Line dataObject) 
			: this(classId, graphName, identifier)
		{  
			if (dataObject != null)
			{
				tpl_PipingNetworkSystemName_identifier = (String)dataObject.tag;
				tpl_SystemName_identifier = (String)dataObject.system;
			}
			
			tpl_SystemPipingNetworkSystemAssembly = new TemplateSystemPipingNetworkSystemAssembly();
			tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System = new TemplateSystemPipingNetworkSystemAssembly.ClassSystem();
			tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System.Identifier = ((GetPropertyValue("system") != null) ? GetPropertyValue("system").ToString() : "");
			tpl_SystemPipingNetworkSystemAssembly.hasClassOfWhole_rdl_System.tpl_SystemName_identifier = tpl_SystemName_identifier;
	      
			_dataObject = dataObject;
		} 
		
		public Lines()
			: this("http://rdl.rdlfacade.org/data#R19192462550", "Lines", null) {}			

		[DataMember(Name = "tpl_PipingNetworkSystemName_identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String tpl_PipingNetworkSystemName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[XmlIgnore]
		public String tpl_SystemName_identifier
		{
			get
			{
				return (String)GetPropertyValue("system");
			}

			set
			{
				SetPropertyValue("system", value);
			}
		}
		
		public override object GetDataObject()
		{
				if (_dataObject == null)
				{
					_dataObject = new org.iringtools.adapter.proj_12345_000.ABC.Line();
					((org.iringtools.adapter.proj_12345_000.ABC.Line)_dataObject).tag = (String)this._identifier;
				}
				
				((org.iringtools.adapter.proj_12345_000.ABC.Line)_dataObject).system = (String)this.tpl_SystemName_identifier;

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Lines>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Lines>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Lines> list = new List<Lines> { this };
			Utility.Write<List<Lines>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	
}

