<#@ include file=".\Templates\Common.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a DTOService.tt.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ServiceModel;
using System.Xml.Xsl;
using Ninject;
using Ninject.Modules;
using org.iringtools.adapter;
using org.iringtools.adapter.dataLayer;
using org.iringtools.library;
using org.iringtools.utility;

namespace <#= modelNamespace #>
{
	public class DTOService : IDTOService
	{
		IKernel _kernel = null;
		IDataLayer _dataLayer = null;
		AdapterSettings _settings = null;

		[Inject]
		public DTOService(IKernel kernel, IDataLayer dataLayer, AdapterSettings settings)
		{
		  _kernel = kernel;
		  _dataLayer = dataLayer;
		  _settings = settings;
		}

		public T TransformList<T>(string graphName, List<DataTransferObject> dtoList, string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + graphName + "DTO.xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			switch (graphName)
			{ 
<#
foreach (GraphMap graphMap in mapping.graphMaps)
{	
#>
			case "<#= graphMap.name #>":
				List<<#= graphMap.name #>> <#= graphMap.name #>List = new List<<#= graphMap.name #>>();

				foreach (DataTransferObject dto in dtoList)
				{
					<#= graphMap.name #>List.Add((<#= graphMap.name #>)dto);
				}

				Utility.Write<List<<#= graphMap.name #>>>(<#= graphMap.name #>List, dtoPath);
				break;
				
<#
}
#>
			}

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}
    
		public DataTransferObject Create(string graphName, string identifier)
		{
			DataTransferObject dto = null;

			switch (graphName)
			{ 
<#
foreach (GraphMap graphMap in mapping.graphMaps)
{
	graphMap.classId = graphMap.classId.Replace("rdl:", "http://rdl.rdlfacade.org/data#");
#>
			case "<#= graphMap.name #>":				
			  dto = new <#= graphMap.name #>("<#= graphMap.classId #>", graphName, identifier);
			  break;
			  
<#
}
#>
			}

			return dto;
		}
    
		public List<DataTransferObject> CreateList(string graphName, List<string> identifiers)
		{
			List<DataTransferObject> dtoList = new List<DataTransferObject>();

			foreach (string identifier in identifiers)
			{
				dtoList.Add(Create(graphName, identifier));
			}

			return dtoList;
		}

		public DataTransferObject GetDTO(string graphName, string identifier)
		{
			DataTransferObject dto = null;		

			switch (graphName)
			{ 
<#
foreach (GraphMap graphMap in mapping.graphMaps)
{
#>
			case "<#= graphMap.name #>":
<#
	foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
	{
		string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
		
		if (!String.IsNullOrEmpty(dataObjectMap.outFilter))
		{
			string outFilter = dataObjectMap.outFilter.Substring(dataObjectMap.outFilter.IndexOf("_") + 1);
			string[] idList = graphMap.identifier.Split(new string[]{","}, StringSplitOptions.RemoveEmptyEntries);
			string identifiers = String.Empty;
			
			foreach (string id in idList)
			{
				if (identifiers != String.Empty)
				{
					identifiers += " + ";
				}
				
				identifiers += dataObjectMap.name + "List." + id.Trim();
			}
	
#>
				var <#= graphMap.name #>DO = 
					(from <#= dataObjectMap.name #>List in _dataLayer.GetList<<#= qualifiedDataObjectName #>>()
					where <#= identifiers #> == identifier && <#= dataObjectMap.name #>List.<#= outFilter #>  // outFilter
					select <#= dataObjectMap.name #>List).FirstOrDefault<<#= qualifiedDataObjectName #>>();
	            
				if (<#= graphMap.name #>DO != default(<#= qualifiedDataObjectName #>))
				{
					dto = new <#= graphMap.name #>(<#= graphMap.name #>DO);
					dto.Identifier = <#= graphMap.name #>DO.Id;
				}
				
<# 
		}
		else
		{
#>				var <#= dataObjectMap.name #>DO = 
					(from <#= dataObjectMap.name #>List in _dataLayer.GetList<<#= qualifiedDataObjectName #>>()
					where <#= dataObjectMap.name #>List.<#= graphMap.identifier #> == identifier
					select <#= dataObjectMap.name #>List).FirstOrDefault<<#= qualifiedDataObjectName #>>();   
	            
				if (<#= dataObjectMap.name #>DO != default(<#= qualifiedDataObjectName #>))
				{                        
					dto = new <#= graphMap.name #>(<#= dataObjectMap.name #>DO);
					dto.Identifier = <#= dataObjectMap.name #>DO.Id;
					break; 
				}
								
<# 
		}
	}
#>				break;

<#
}
#>
			}
      
			return dto;
		}
		
		public List<DataTransferObject> GetList(string graphName)
		{
			List<DataTransferObject> dtoList = new List<DataTransferObject>();

			switch (graphName)
			{ 
<#
foreach (GraphMap graphMap in mapping.graphMaps)
{
#>
			case "<#= graphMap.name #>":
<#
	foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
	{
		string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
		
		if (!String.IsNullOrEmpty(dataObjectMap.outFilter))
		{
			String outFilter = dataObjectMap.outFilter.Substring(dataObjectMap.outFilter.IndexOf("_") + 1);
#>
				var <#= graphMap.name #>DOList = 
					from <#= dataObjectMap.name #>List in _dataLayer.GetList<<#= qualifiedDataObjectName #>>()
					where <#= dataObjectMap.name #>List.<#= outFilter #>  // outFilter
					select <#= dataObjectMap.name #>List;

				foreach (var <#= graphMap.name #>DO in <#= graphMap.name #>DOList)
				{   					
					<#= graphMap.name #> dto = new <#= graphMap.name #>(<#= graphMap.name #>DO);
					dto.Identifier = <#= graphMap.name #>DO.Id;
					dtoList.Add(dto);
				}   
<# 
		}
		else
		{
#>				var <#= dataObjectMap.name #>DOList = 
					from <#= dataObjectMap.name #>List in _dataLayer.GetList<<#= qualifiedDataObjectName #>>()
					select <#= dataObjectMap.name #>List;  
			    
				foreach (var <#= dataObjectMap.name #>DO in <#= dataObjectMap.name #>DOList)
				{   					
					<#= graphMap.name #> dto = new <#= graphMap.name #>(<#= dataObjectMap.name #>DO);
					dto.Identifier = <#= dataObjectMap.name #>DO.Id;
					dtoList.Add(dto);
				}   
<# 
		}
	}
#>         
				break;
				
<# 
}
#>     
			}

			return dtoList;
		}
		
		public Dictionary<string, string> GetListREST(string graphName)
		{
			Dictionary<string, string> identifierUriPairs = new Dictionary<string, string>();
			String endpoint = OperationContext.Current.Channel.LocalAddress.ToString();
			
			switch (graphName)
			{ 
<#
foreach (GraphMap graphMap in mapping.graphMaps)
{
#>
			case "<#= graphMap.name #>":
<#
	foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
	{
		string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
		
		if (!String.IsNullOrEmpty(dataObjectMap.outFilter))
		{
			String outFilter = dataObjectMap.outFilter.Substring(dataObjectMap.outFilter.IndexOf("_") + 1);
#>
				var <#= graphMap.name #>DOList = 
					from <#= dataObjectMap.name #>List in _dataLayer.GetList<<#= qualifiedDataObjectName #>>()
					where <#= dataObjectMap.name #>List.<#= outFilter #>  // outFilter
					select <#= dataObjectMap.name #>List;
			    
				foreach (var <#= graphMap.name #>DO in <#= graphMap.name #>DOList)
				{   
					string identifier = <#= graphMap.name #>DO.Id;
					identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);            
				}   

<# 
		}
		else
		{
#>				var <#= dataObjectMap.name #>DOList = 
					from <#= dataObjectMap.name #>List in _dataLayer.GetList<<#= qualifiedDataObjectName #>>()
					select <#= dataObjectMap.name #>List;  

				foreach (var <#= dataObjectMap.name #>DO in <#= dataObjectMap.name #>DOList)
				{
					string identifier = <#= dataObjectMap.name #>DO.Id;
					identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
				}  

<# 
		}
	}
#>
				break;
				
<#
}
#>			}
			
			return identifierUriPairs;
		}
    
		public Response Post(string graphName, DataTransferObject dto)
		{
			Response response = new Response();

			if (dto != null)
			{
				switch (graphName)
				{ 
<# 
foreach (GraphMap graphMap in mapping.graphMaps)
{
#> 
				case "<#= graphMap.name #>":
<# 
	if (graphMap.dataObjectMaps.Count == 1)
	{
		DataObjectMap dataObjectMap = graphMap.dataObjectMaps[0];
		string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
#>
					<#= qualifiedDataObjectName #> <#= graphMap.name#>DO = (<#= qualifiedDataObjectName #>)dto.GetDataObject();
					response.Append(_dataLayer.Post<<#= qualifiedDataObjectName #>>(<#= graphMap.name #>DO));
<# 
	}
	else
	{
#>
					<#= graphMap.name #> <#= graphMap.name #>Obj = (<#= graphMap.name #>)dto;  
<# 
		int dataObjectMapCount = 0;
		
		foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
		{
			string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
			
			if (++dataObjectMapCount == 1)
			{
#>					
					if (<#= graphMap.name #>Obj.<#= dataObjectMap.inFilter #>) // inFilter
<#
			}
			else
			{
#>
					else if (<#= graphMap.name #>Obj.<#= dataObjectMap.inFilter #>) // inFilter
<#
			}
#>					{
						<#= qualifiedDataObjectName #> <#= dataObjectMap.name #>DO = (<#= qualifiedDataObjectName #>)<#= graphMap.name #>Obj.GetDataObject();
						response.Append(_dataLayer.Post<<#= qualifiedDataObjectName #>>(<#= dataObjectMap.name #>DO));
					}   
<#	
		}
	}
#>

					break;
<# 
}
#>       
				}
			}

			return response;
		}
		
		public Response PostList(string graphName, List<DataTransferObject> dtoList)
		{
			Response response = new Response();

			if (dtoList != null && dtoList.Count<DataTransferObject>() > 0)
			{
				switch (graphName)
				{ 
<# 
foreach (GraphMap graphMap in mapping.graphMaps)
{
#> 
				case "<#= graphMap.name #>":
<# 
	if (graphMap.dataObjectMaps.Count == 1)
	{
		DataObjectMap dataObjectMap = graphMap.dataObjectMaps[0];
		string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
#>
					List<<#= qualifiedDataObjectName #>> <#= graphMap.name #>DOList = new List<<#= qualifiedDataObjectName #>>();

					foreach (DataTransferObject dto in dtoList)
					{
						<#= graphMap.name #>DOList.Add((<#= qualifiedDataObjectName #>)dto.GetDataObject());
					}

					response.Append(_dataLayer.PostList<<#= qualifiedDataObjectName #>>(<#= graphMap.name #>DOList));
<# 
	}
	else
	{
		foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
		{
			string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
#>
					List<<#= qualifiedDataObjectName #>> <#= dataObjectMap.name #>DOList = new List<<#= qualifiedDataObjectName #>>();
<#
		}
#>
				    
					foreach (<#= graphMap.name #> dto in dtoList)
					{   
<#
		int dataObjectMapCount = 0;
		
		foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
		{
			string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
			
			if (++dataObjectMapCount == 1)
			{			
#>						if (dto.<#= dataObjectMap.inFilter #>) // inFilter
<# 
			}
			else 
			{
			
#>
						else if (dto.<#= dataObjectMap.inFilter #>) // inFilter
<# 
			}
#>
						{
							<#= dataObjectMap.name #>DOList.Add((<#= qualifiedDataObjectName #>)dto.GetDataObject());
						} 
<#	
		}
#>
					}
					
<#
		foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
		{
			string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
#>					response.Append(_dataLayer.PostList<<#= qualifiedDataObjectName #>>(<#= dataObjectMap.name #>DOList));
<#		}
	}
#>

					break;
<# 
}
#>
				}
			}

			return response;
		}
    
		public DataDictionary GetDictionary()
		{
			return _dataLayer.GetDictionary();
		}

		public Response RefreshDictionary()
		{
			return _dataLayer.RefreshDictionary();
		}
	}
}