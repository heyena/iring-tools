

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a ModelDTO.tt.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ServiceModel;
using System.Xml.Xsl;
using org.iringtools.adapter.dataLayer;
using org.iringtools.utility;
using org.iringtools.library;

namespace org.iringtools.adapter 
{
	[DataContract(Name = "Valves", Namespace = "http://rdl.rdlfacade.org/data#")]
	public class Valves : DataTransferObject
	{
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PipingNetworkSegmentInlinePipingComponentConnection
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PipingNetworkSegment
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PipingNetworkSystemPipingNetworkSegmentAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PipingNetworkSystem
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(Name = "PipingNetworkSystemLineTag.identifier", EmitDefaultValue = false)]
			public String PipingNetworkSystemLineTag_identifier { get; set; }
					
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class SystemPipingNetworkSystemAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class System
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(Name = "SystemName.identifier", EmitDefaultValue = false)]
			public String SystemName_identifier { get; set; }
					
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PlantSystemAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PLANT
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
		}

		[DataMember(Name = "PLANT", EmitDefaultValue = false)]
		[XmlIgnore]
		public PLANT PLANT_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "PlantSystemAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public PlantSystemAssembly PlantSystemAssembly_hasClassOfWhole { get; set; }     
       
		}

		[DataMember(Name = "System", EmitDefaultValue = false)]
		[XmlIgnore]
		public System System_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "SystemPipingNetworkSystemAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public SystemPipingNetworkSystemAssembly SystemPipingNetworkSystemAssembly_hasClassOfWhole { get; set; }     
       
		}

		[DataMember(Name = "PipingNetworkSystem", EmitDefaultValue = false)]
		[XmlIgnore]
		public PipingNetworkSystem PipingNetworkSystem_hasClass { get; set; }  	
	}
	
	[DataMember(Name = "PipingNetworkSystemPipingNetworkSegmentAssembly.hasClass", EmitDefaultValue = false)]
    [XmlIgnore]
    public PipingNetworkSystemPipingNetworkSegmentAssembly PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass { get; set; }     
       
		}

		[DataMember(Name = "PipingNetworkSegment", EmitDefaultValue = false)]
		[XmlIgnore]
		public PipingNetworkSegment PipingNetworkSegment_hasClass { get; set; }  	
	}
	
	[DataMember(Name = "PipingNetworkSegmentInlinePipingComponentConnection.hasClass", EmitDefaultValue = false)]
    [XmlIgnore]
    public PipingNetworkSegmentInlinePipingComponentConnection PipingNetworkSegmentInlinePipingComponentConnection_hasClass { get; set; }     
       
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PlantAreaInlinePipingComponentAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PLANTAREA
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PlantPlantAreaAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PLANT
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PlantProjectAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PROJECT
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(Name = "ProjectName.identifier", EmitDefaultValue = false)]
			public String ProjectName_identifier { get; set; }
					
		}

		[DataMember(Name = "PROJECT", EmitDefaultValue = false)]
		[XmlIgnore]
		public PROJECT PROJECT_hasClassOfPart { get; set; }  	
	}
	
	[DataMember(Name = "PlantProjectAssembly.hasClassOfPart", EmitDefaultValue = false)]
    [XmlIgnore]
    public PlantProjectAssembly PlantProjectAssembly_hasClassOfPart { get; set; }     
       
		}

		[DataMember(Name = "PLANT", EmitDefaultValue = false)]
		[XmlIgnore]
		public PLANT PLANT_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "PlantPlantAreaAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public PlantPlantAreaAssembly PlantPlantAreaAssembly_hasClassOfWhole { get; set; }     
       
			[DataMember(Name = "PlantAreaName.identifier", EmitDefaultValue = false)]
			public String PlantAreaName_identifier { get; set; }
					
		}

		[DataMember(Name = "PLANTAREA", EmitDefaultValue = false)]
		[XmlIgnore]
		public PLANTAREA PLANTAREA_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "PlantAreaInlinePipingComponentAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public PlantAreaInlinePipingComponentAssembly PlantAreaInlinePipingComponentAssembly_hasClassOfWhole { get; set; }     
       

		public Valves(string graphName, string identifier) 
			: base(graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"InlinePipingComponentName.identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"componentType", @"InlinePipingComponentType.type", null, typeof(String), false, true));
			_properties.Add(new DTOProperty(@"uomDiameter", @"InlinePipingComponentNominalDiameter.scale", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"diameter", @"InlinePipingComponentNominalDiameter.value", null, typeof(Double), false, false));
			_properties.Add(new DTOProperty(@"rating", @"InlinePipingComponentRating.hasNominalProperty", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"lineTag", @"PipingNetworkSystemLineTag.identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"system", @"SystemName.identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"projectNumber", @"ProjectName.identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"unit", @"PlantAreaName.identifier", null, typeof(String), false, false));

			Identifier = identifier;
		}
	
		public Valves(org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent dataObject)
			: this("Valves", null, dataObject) {}
			
		public Valves(string graphName, string identifier, org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent dataObject) 
			: this(graphName, identifier)
		{  
			if (dataObject != null)
			{
				InlinePipingComponentName_identifier = (String)dataObject.tag;
				InlinePipingComponentType_type = (String)dataObject.componentType;
				InlinePipingComponentNominalDiameter_scale = (String)dataObject.uomDiameter;
				InlinePipingComponentNominalDiameter_value = (Double)dataObject.diameter;
				InlinePipingComponentRating_hasNominalProperty = (String)dataObject.rating;
				PipingNetworkSystemLineTag_identifier = (String)dataObject.lineTag;
				SystemName_identifier = (String)dataObject.system;
				ProjectName_identifier = (String)dataObject.projectNumber;
				PlantAreaName_identifier = (String)dataObject.unit;
			}
			
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass = new PipingNetworkSegmentInlinePipingComponentConnection();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass = new PipingNetworkSegmentInlinePipingComponentConnection.PipingNetworkSegment();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.Identifier = ((GetPropertyValue("lineTag") != null) ? GetPropertyValue("lineTag").ToString() : "");
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass = new PipingNetworkSegmentInlinePipingComponentConnection.PipingNetworkSegment.PipingNetworkSystemPipingNetworkSegmentAssembly();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass = new PipingNetworkSegmentInlinePipingComponentConnection.PipingNetworkSegment.PipingNetworkSystemPipingNetworkSegmentAssembly.PipingNetworkSystem();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.Identifier = ((GetPropertyValue("lineTag") != null) ? GetPropertyValue("lineTag").ToString() : "");
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.PipingNetworkSystemLineTag_identifier = PipingNetworkSystemLineTag_identifier;
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.SystemPipingNetworkSystemAssembly_hasClassOfWhole = new PipingNetworkSegmentInlinePipingComponentConnection.PipingNetworkSegment.PipingNetworkSystemPipingNetworkSegmentAssembly.PipingNetworkSystem.SystemPipingNetworkSystemAssembly();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole = new PipingNetworkSegmentInlinePipingComponentConnection.PipingNetworkSegment.PipingNetworkSystemPipingNetworkSegmentAssembly.PipingNetworkSystem.SystemPipingNetworkSystemAssembly.System();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole.Identifier = ((GetPropertyValue("system") != null) ? GetPropertyValue("system").ToString() : "");
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole.SystemName_identifier = SystemName_identifier;
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole.PlantSystemAssembly_hasClassOfWhole = new PipingNetworkSegmentInlinePipingComponentConnection.PipingNetworkSegment.PipingNetworkSystemPipingNetworkSegmentAssembly.PipingNetworkSystem.SystemPipingNetworkSystemAssembly.System.PlantSystemAssembly();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole.PlantSystemAssembly_hasClassOfWhole.PLANT_hasClassOfWhole = new PipingNetworkSegmentInlinePipingComponentConnection.PipingNetworkSegment.PipingNetworkSystemPipingNetworkSegmentAssembly.PipingNetworkSystem.SystemPipingNetworkSystemAssembly.System.PlantSystemAssembly.PLANT();
			PipingNetworkSegmentInlinePipingComponentConnection_hasClass.PipingNetworkSegment_hasClass.PipingNetworkSystemPipingNetworkSegmentAssembly_hasClass.PipingNetworkSystem_hasClass.SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole.PlantSystemAssembly_hasClassOfWhole.PLANT_hasClassOfWhole.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly.PLANTAREA();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.Identifier = ((GetPropertyValue("unit") != null) ? GetPropertyValue("unit").ToString() : "");
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly.PLANTAREA.PlantPlantAreaAssembly();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.PLANT_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly.PLANTAREA.PlantPlantAreaAssembly.PLANT();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.PLANT_hasClassOfWhole.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.PLANT_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart = new PlantAreaInlinePipingComponentAssembly.PLANTAREA.PlantPlantAreaAssembly.PLANT.PlantProjectAssembly();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.PLANT_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart.PROJECT_hasClassOfPart = new PlantAreaInlinePipingComponentAssembly.PLANTAREA.PlantPlantAreaAssembly.PLANT.PlantProjectAssembly.PROJECT();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.PLANT_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart.PROJECT_hasClassOfPart.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.PLANT_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart.PROJECT_hasClassOfPart.ProjectName_identifier = ProjectName_identifier;
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PLANTAREA_hasClassOfWhole.PlantAreaName_identifier = PlantAreaName_identifier;
	      
			_dataObject = dataObject;
		} 
		
		public Valves()
			: this("Valves", null) {}			

		[DataMember(Name = "InlinePipingComponentName.identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String InlinePipingComponentName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[DataMember(Name = "InlinePipingComponentType.type", EmitDefaultValue = false)]
		[XmlIgnore]
		public String InlinePipingComponentType_type
		{
			get
			{
				return (String)GetPropertyValue("componentType");
			}

			set
			{
				SetPropertyValue("componentType", value);
			}
		}
		
		[DataMember(Name = "InlinePipingComponentNominalDiameter.scale", EmitDefaultValue = false)]
		[XmlIgnore]
		public String InlinePipingComponentNominalDiameter_scale
		{
			get
			{
				return (String)GetPropertyValue("uomDiameter");
			}

			set
			{
				SetPropertyValue("uomDiameter", value);
			}
		}
		
		[DataMember(Name = "InlinePipingComponentNominalDiameter.value", EmitDefaultValue = false)]
		[XmlIgnore]
		public global::System.Nullable<Double> InlinePipingComponentNominalDiameter_value
		{
			get
			{
				return (Double)GetPropertyValue("diameter");
			}

			set
			{
				SetPropertyValue("diameter", value);
			}
		}
		
		[DataMember(Name = "InlinePipingComponentRating.hasNominalProperty", EmitDefaultValue = false)]
		[XmlIgnore]
		public String InlinePipingComponentRating_hasNominalProperty
		{
			get
			{
				return (String)GetPropertyValue("rating");
			}

			set
			{
				SetPropertyValue("rating", value);
			}
		}
		
		[XmlIgnore]
		public String PipingNetworkSystemLineTag_identifier
		{
			get
			{
				return (String)GetPropertyValue("lineTag");
			}

			set
			{
				SetPropertyValue("lineTag", value);
			}
		}
		
		[XmlIgnore]
		public String SystemName_identifier
		{
			get
			{
				return (String)GetPropertyValue("system");
			}

			set
			{
				SetPropertyValue("system", value);
			}
		}
		
		[XmlIgnore]
		public String ProjectName_identifier
		{
			get
			{
				return (String)GetPropertyValue("projectNumber");
			}

			set
			{
				SetPropertyValue("projectNumber", value);
			}
		}
		
		[XmlIgnore]
		public String PlantAreaName_identifier
		{
			get
			{
				return (String)GetPropertyValue("unit");
			}

			set
			{
				SetPropertyValue("unit", value);
			}
		}
		
		public override object GetDataObject()
		{
				if (_dataObject == null)
				{
					_dataObject = new org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent();
					((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).tag = (String)this._identifier;
				}
				
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).componentType = (String)this.InlinePipingComponentType_type;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).uomDiameter = (String)this.InlinePipingComponentNominalDiameter_scale;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).diameter = (Double)this.InlinePipingComponentNominalDiameter_value;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).rating = (String)this.InlinePipingComponentRating_hasNominalProperty;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).lineTag = (String)this.PipingNetworkSystemLineTag_identifier;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).system = (String)this.SystemName_identifier;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).projectNumber = (String)this.ProjectName_identifier;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).unit = (String)this.PlantAreaName_identifier;

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Valves>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Valves>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Valves> list = new List<Valves> { this };
			Utility.Write<List<Valves>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	[DataContract(Name = "Instruments", Namespace = "http://rdl.rdlfacade.org/data#")]
	public class Instruments : DataTransferObject
	{
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PlantAreaInlinePipingComponentAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PlantArea
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(Name = "PlantAreaName.identifier", EmitDefaultValue = false)]
			public String PlantAreaName_identifier { get; set; }
					
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PlantPlantAreaAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class Plant
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PlantProjectAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class Project
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(Name = "ProjectName.identifier", EmitDefaultValue = false)]
			public String ProjectName_identifier { get; set; }
					
		}

		[DataMember(Name = "Project", EmitDefaultValue = false)]
		[XmlIgnore]
		public Project Project_hasClassOfPart { get; set; }  	
	}
	
	[DataMember(Name = "PlantProjectAssembly.hasClassOfPart", EmitDefaultValue = false)]
    [XmlIgnore]
    public PlantProjectAssembly PlantProjectAssembly_hasClassOfPart { get; set; }     
       
		}

		[DataMember(Name = "Plant", EmitDefaultValue = false)]
		[XmlIgnore]
		public Plant Plant_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "PlantPlantAreaAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public PlantPlantAreaAssembly PlantPlantAreaAssembly_hasClassOfWhole { get; set; }     
       
		}

		[DataMember(Name = "PlantArea", EmitDefaultValue = false)]
		[XmlIgnore]
		public PlantArea PlantArea_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "PlantAreaInlinePipingComponentAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public PlantAreaInlinePipingComponentAssembly PlantAreaInlinePipingComponentAssembly_hasClassOfWhole { get; set; }     
       
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class PandIDiagramPipingNetworkSegmentAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class PandIDiagram
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(Name = "DrawingName.identifier", EmitDefaultValue = false)]
			public String DrawingName_identifier { get; set; }
					
		}

		[DataMember(Name = "PandIDiagram", EmitDefaultValue = false)]
		[XmlIgnore]
		public PandIDiagram PandIDiagram_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "PandIDiagramPipingNetworkSegmentAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public PandIDiagramPipingNetworkSegmentAssembly PandIDiagramPipingNetworkSegmentAssembly_hasClassOfWhole { get; set; }     
       

		public Instruments(string graphName, string identifier) 
			: base(graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"InlinePipingComponentName.identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"componentType", @"InlinePipingComponentType.type", null, typeof(String), false, true));
			_properties.Add(new DTOProperty(@"unit", @"PlantAreaName.identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"projectNumber", @"ProjectName.identifier", null, typeof(String), false, false));
			_properties.Add(new DTOProperty(@"pid", @"DrawingName.identifier", null, typeof(String), false, false));

			Identifier = identifier;
		}
	
		public Instruments(org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent dataObject)
			: this("Instruments", null, dataObject) {}
			
		public Instruments(string graphName, string identifier, org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent dataObject) 
			: this(graphName, identifier)
		{  
			if (dataObject != null)
			{
				InlinePipingComponentName_identifier = (String)dataObject.tag;
				InlinePipingComponentType_type = (String)dataObject.componentType;
				PlantAreaName_identifier = (String)dataObject.unit;
				ProjectName_identifier = (String)dataObject.projectNumber;
				DrawingName_identifier = (String)dataObject.pid;
			}
			
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly.PlantArea();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.Identifier = ((GetPropertyValue("unit") != null) ? GetPropertyValue("unit").ToString() : "");
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantAreaName_identifier = PlantAreaName_identifier;
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly.PlantArea.PlantPlantAreaAssembly();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.Plant_hasClassOfWhole = new PlantAreaInlinePipingComponentAssembly.PlantArea.PlantPlantAreaAssembly.Plant();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.Plant_hasClassOfWhole.Identifier = ((GetPropertyValue("componentType") != null) ? GetPropertyValue("componentType").ToString() : "");
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.Plant_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart = new PlantAreaInlinePipingComponentAssembly.PlantArea.PlantPlantAreaAssembly.Plant.PlantProjectAssembly();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.Plant_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart.Project_hasClassOfPart = new PlantAreaInlinePipingComponentAssembly.PlantArea.PlantPlantAreaAssembly.Plant.PlantProjectAssembly.Project();
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.Plant_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart.Project_hasClassOfPart.Identifier = ((GetPropertyValue("projectNumber") != null) ? GetPropertyValue("projectNumber").ToString() : "");
			PlantAreaInlinePipingComponentAssembly_hasClassOfWhole.PlantArea_hasClassOfWhole.PlantPlantAreaAssembly_hasClassOfWhole.Plant_hasClassOfWhole.PlantProjectAssembly_hasClassOfPart.Project_hasClassOfPart.ProjectName_identifier = ProjectName_identifier;
			PandIDiagramPipingNetworkSegmentAssembly_hasClassOfWhole = new PandIDiagramPipingNetworkSegmentAssembly();
			PandIDiagramPipingNetworkSegmentAssembly_hasClassOfWhole.PandIDiagram_hasClassOfWhole = new PandIDiagramPipingNetworkSegmentAssembly.PandIDiagram();
			PandIDiagramPipingNetworkSegmentAssembly_hasClassOfWhole.PandIDiagram_hasClassOfWhole.Identifier = ((GetPropertyValue("pid") != null) ? GetPropertyValue("pid").ToString() : "");
			PandIDiagramPipingNetworkSegmentAssembly_hasClassOfWhole.PandIDiagram_hasClassOfWhole.DrawingName_identifier = DrawingName_identifier;
	      
			_dataObject = dataObject;
		} 
		
		public Instruments()
			: this("Instruments", null) {}			

		[DataMember(Name = "InlinePipingComponentName.identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String InlinePipingComponentName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[DataMember(Name = "InlinePipingComponentType.type", EmitDefaultValue = false)]
		[XmlIgnore]
		public String InlinePipingComponentType_type
		{
			get
			{
				return (String)GetPropertyValue("componentType");
			}

			set
			{
				SetPropertyValue("componentType", value);
			}
		}
		
		[XmlIgnore]
		public String PlantAreaName_identifier
		{
			get
			{
				return (String)GetPropertyValue("unit");
			}

			set
			{
				SetPropertyValue("unit", value);
			}
		}
		
		[XmlIgnore]
		public String ProjectName_identifier
		{
			get
			{
				return (String)GetPropertyValue("projectNumber");
			}

			set
			{
				SetPropertyValue("projectNumber", value);
			}
		}
		
		[XmlIgnore]
		public String DrawingName_identifier
		{
			get
			{
				return (String)GetPropertyValue("pid");
			}

			set
			{
				SetPropertyValue("pid", value);
			}
		}
		
		public override object GetDataObject()
		{
				if (_dataObject == null)
				{
					_dataObject = new org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent();
					((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).tag = (String)this._identifier;
				}
				
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).componentType = (String)this.InlinePipingComponentType_type;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).unit = (String)this.PlantAreaName_identifier;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).projectNumber = (String)this.ProjectName_identifier;
				((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)_dataObject).pid = (String)this.DrawingName_identifier;

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Instruments>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Instruments>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Instruments> list = new List<Instruments> { this };
			Utility.Write<List<Instruments>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	[DataContract(Name = "Vessels", Namespace = "http://rdl.rdlfacade.org/data#")]
	public class Vessels : DataTransferObject
	{

		public Vessels(string graphName, string identifier) 
			: base(graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"FluidContainerName.identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"description", @"FluidContainerDescription.description", null, typeof(String), false, false));

			Identifier = identifier;
		}
	
		public Vessels(org.ids_adi.iring.adapter.dataLayer.Model.KOPot dataObject)
			: this("Vessels", null, dataObject) {}
			
		public Vessels(string graphName, string identifier, org.ids_adi.iring.adapter.dataLayer.Model.KOPot dataObject) 
			: this(graphName, identifier)
		{  
			if (dataObject != null)
			{
				FluidContainerName_identifier = (String)dataObject.tag;
				FluidContainerDescription_description = (String)dataObject.description;
			}
			
	      
			_dataObject = dataObject;
		} 
		
	
		public Vessels(org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower dataObject)
			: this("Vessels", null, dataObject) {}
			
		public Vessels(string graphName, string identifier, org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower dataObject) 
			: this(graphName, identifier)
		{  
			if (dataObject != null)
			{
				FluidContainerName_identifier = (String)dataObject.tag;
				FluidContainerDescription_description = (String)dataObject.description;
			}
			
	      
			_dataObject = dataObject;
		} 
		
		public Vessels()
			: this("Vessels", null) {}			

		[DataMember(Name = "FluidContainerName.identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String FluidContainerName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[DataMember(Name = "FluidContainerDescription.description", EmitDefaultValue = false)]
		[XmlIgnore]
		public String FluidContainerDescription_description
		{
			get
			{
				return (String)GetPropertyValue("description");
			}

			set
			{
				SetPropertyValue("description", value);
			}
		}
		
		public override object GetDataObject()
		{
			if (FluidContainerDescription_description.ToUpper() == "KNOCK OUT VESSEL") // inFilter
			{
				if (_dataObject == null)
				{
					_dataObject = new org.ids_adi.iring.adapter.dataLayer.Model.KOPot();
					((org.ids_adi.iring.adapter.dataLayer.Model.KOPot)_dataObject).tag = (String)this._identifier;
				}
				
				((org.ids_adi.iring.adapter.dataLayer.Model.KOPot)_dataObject).description = (String)this.FluidContainerDescription_description;
			}
			else if (FluidContainerDescription_description.ToUpper() == "VACUUM VESSEL") // inFilter
			{
				if (_dataObject == null)
				{
					_dataObject = new org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower();
					((org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower)_dataObject).tag = (String)this._identifier;
				}
				
				((org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower)_dataObject).description = (String)this.FluidContainerDescription_description;
			}

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Vessels>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Vessels>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Vessels> list = new List<Vessels> { this };
			Utility.Write<List<Vessels>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	[DataContract(Name = "Lines", Namespace = "http://rdl.rdlfacade.org/data#")]
	public class Lines : DataTransferObject
	{
	[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
	public class SystemPipingNetworkSystemAssembly
	{
		[DataContract(Namespace = "http://rdl.rdlfacade.org/data#")]
		public class System
		{
			[DataMember(Name = "Identifier", EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
			[DataMember(Name = "SystemName.identifier", EmitDefaultValue = false)]
			public String SystemName_identifier { get; set; }
					
		}

		[DataMember(Name = "System", EmitDefaultValue = false)]
		[XmlIgnore]
		public System System_hasClassOfWhole { get; set; }  	
	}
	
	[DataMember(Name = "SystemPipingNetworkSystemAssembly.hasClassOfWhole", EmitDefaultValue = false)]
    [XmlIgnore]
    public SystemPipingNetworkSystemAssembly SystemPipingNetworkSystemAssembly_hasClassOfWhole { get; set; }     
       

		public Lines(string graphName, string identifier) 
			: base(graphName)
		{   
			_properties.Add(new DTOProperty(@"tag", @"PipingNetworkSystemName.identifier", null, typeof(String), true, true));
			_properties.Add(new DTOProperty(@"system", @"SystemName.identifier", null, typeof(String), false, false));

			Identifier = identifier;
		}
	
		public Lines(org.ids_adi.iring.adapter.dataLayer.Model.Line dataObject)
			: this("Lines", null, dataObject) {}
			
		public Lines(string graphName, string identifier, org.ids_adi.iring.adapter.dataLayer.Model.Line dataObject) 
			: this(graphName, identifier)
		{  
			if (dataObject != null)
			{
				PipingNetworkSystemName_identifier = (String)dataObject.tag;
				SystemName_identifier = (String)dataObject.system;
			}
			
			SystemPipingNetworkSystemAssembly_hasClassOfWhole = new SystemPipingNetworkSystemAssembly();
			SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole = new SystemPipingNetworkSystemAssembly.System();
			SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole.Identifier = ((GetPropertyValue("system") != null) ? GetPropertyValue("system").ToString() : "");
			SystemPipingNetworkSystemAssembly_hasClassOfWhole.System_hasClassOfWhole.SystemName_identifier = SystemName_identifier;
	      
			_dataObject = dataObject;
		} 
		
		public Lines()
			: this("Lines", null) {}			

		[DataMember(Name = "PipingNetworkSystemName.identifier", EmitDefaultValue = false)]
		[XmlIgnore]
		public String PipingNetworkSystemName_identifier
		{
			get
			{
				return (String)GetPropertyValue("tag");
			}

			set
			{
				SetPropertyValue("tag", value);
			}
		}
		
		[XmlIgnore]
		public String SystemName_identifier
		{
			get
			{
				return (String)GetPropertyValue("system");
			}

			set
			{
				SetPropertyValue("system", value);
			}
		}
		
		public override object GetDataObject()
		{
				if (_dataObject == null)
				{
					_dataObject = new org.ids_adi.iring.adapter.dataLayer.Model.Line();
					((org.ids_adi.iring.adapter.dataLayer.Model.Line)_dataObject).tag = (String)this._identifier;
				}
				
				((org.ids_adi.iring.adapter.dataLayer.Model.Line)_dataObject).system = (String)this.SystemName_identifier;

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<Lines>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<Lines>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<Lines> list = new List<Lines> { this };
			Utility.Write<List<Lines>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
	
}

namespace org.iringtools.adapter
{
	using org.iringtools.adapter;
  
	public class DTOFactory
	{
		public static ConfigSettings configSettings;
	
		public static T TransformList<T>(string graphName, List<DataTransferObject> dtoList, string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + graphName + "DTO.xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			switch (graphName)
			{ 
			case "Valves":
				List<Valves> ValvesList = new List<Valves>();

				foreach (DataTransferObject dto in dtoList)
				{
					ValvesList.Add((Valves)dto);
				}

				Utility.Write<List<Valves>>(ValvesList, dtoPath);
				break;
				
			case "Instruments":
				List<Instruments> InstrumentsList = new List<Instruments>();

				foreach (DataTransferObject dto in dtoList)
				{
					InstrumentsList.Add((Instruments)dto);
				}

				Utility.Write<List<Instruments>>(InstrumentsList, dtoPath);
				break;
				
			case "Vessels":
				List<Vessels> VesselsList = new List<Vessels>();

				foreach (DataTransferObject dto in dtoList)
				{
					VesselsList.Add((Vessels)dto);
				}

				Utility.Write<List<Vessels>>(VesselsList, dtoPath);
				break;
				
			case "Lines":
				List<Lines> LinesList = new List<Lines>();

				foreach (DataTransferObject dto in dtoList)
				{
					LinesList.Add((Lines)dto);
				}

				Utility.Write<List<Lines>>(LinesList, dtoPath);
				break;
				
			}

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}
    
		public static DataTransferObject Create(string graphName, string identifier)
		{
			DataTransferObject dto = null;

			switch (graphName)
			{ 
			case "Valves":
			  dto = new Valves(graphName, identifier);
			  break;
			  
			case "Instruments":
			  dto = new Instruments(graphName, identifier);
			  break;
			  
			case "Vessels":
			  dto = new Vessels(graphName, identifier);
			  break;
			  
			case "Lines":
			  dto = new Lines(graphName, identifier);
			  break;
			  
			}

			return dto;
		}
    
		public static List<DataTransferObject> CreateList(string graphName, List<string> identifiers)
		{
			List<DataTransferObject> dtoList = new List<DataTransferObject>();

			foreach (string identifier in identifiers)
			{
				dtoList.Add(Create(graphName, identifier));
			}

			return dtoList;
		}

		public static DataTransferObject GetDTO(string graphName, string identifier)
		{
			DataTransferObject dto = null;		
			DataLayer dataLayer = new DataLayer(configSettings);

			switch (graphName)
			{ 
			case "Valves":
				var ValvesDO = 
					(from InLinePipingComponentList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>()
					where InLinePipingComponentList.tag == identifier && InLinePipingComponentList.componentType.ToUpper() == "VALVE"  // outFilter
					select InLinePipingComponentList).FirstOrDefault<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>();
	            
				if (ValvesDO != default(org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent))
				{
					dto = new Valves(ValvesDO);
				}
				
				break;

			case "Instruments":
				var InstrumentsDO = 
					(from InLinePipingComponentList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>()
					where InLinePipingComponentList.tag == identifier && InLinePipingComponentList.componentType.ToUpper() == "INSTRUMENT"  // outFilter
					select InLinePipingComponentList).FirstOrDefault<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>();
	            
				if (InstrumentsDO != default(org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent))
				{
					dto = new Instruments(InstrumentsDO);
				}
				
				break;

			case "Vessels":
				var KOPotDO = 
					(from KOPotList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.KOPot>()
					where KOPotList.tag == identifier
					select KOPotList).FirstOrDefault<org.ids_adi.iring.adapter.dataLayer.Model.KOPot>();   
	            
				if (KOPotDO != default(org.ids_adi.iring.adapter.dataLayer.Model.KOPot))
				{                        
					dto = new Vessels(KOPotDO);
					break; 
				}
								
				var VacuumTowerDO = 
					(from VacuumTowerList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower>()
					where VacuumTowerList.tag == identifier
					select VacuumTowerList).FirstOrDefault<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower>();   
	            
				if (VacuumTowerDO != default(org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower))
				{                        
					dto = new Vessels(VacuumTowerDO);
					break; 
				}
								
				break;

			case "Lines":
				var LineDO = 
					(from LineList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.Line>()
					where LineList.tag == identifier
					select LineList).FirstOrDefault<org.ids_adi.iring.adapter.dataLayer.Model.Line>();   
	            
				if (LineDO != default(org.ids_adi.iring.adapter.dataLayer.Model.Line))
				{                        
					dto = new Lines(LineDO);
					break; 
				}
								
				break;

			}
      
			return dto;
		}
		
		public static List<DataTransferObject> GetList(string graphName)
		{
			List<DataTransferObject> dtoList = new List<DataTransferObject>();
			DataLayer dataLayer = new DataLayer(configSettings);

			switch (graphName)
			{ 
			case "Valves":
				var ValvesDOList = 
					from InLinePipingComponentList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>()
					where InLinePipingComponentList.componentType.ToUpper() == "VALVE"  // outFilter
					select InLinePipingComponentList;

				foreach (var ValvesDO in ValvesDOList)
				{   
					dtoList.Add(new Valves(ValvesDO));
				}   
         
				break;
				
			case "Instruments":
				var InstrumentsDOList = 
					from InLinePipingComponentList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>()
					where InLinePipingComponentList.componentType.ToUpper() == "INSTRUMENT"  // outFilter
					select InLinePipingComponentList;

				foreach (var InstrumentsDO in InstrumentsDOList)
				{   
					dtoList.Add(new Instruments(InstrumentsDO));
				}   
         
				break;
				
			case "Vessels":
				var KOPotDOList = 
					from KOPotList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.KOPot>()
					select KOPotList;  
			    
				foreach (var KOPotDO in KOPotDOList)
				{
					dtoList.Add(new Vessels(KOPotDO));
				}   
				var VacuumTowerDOList = 
					from VacuumTowerList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower>()
					select VacuumTowerList;  
			    
				foreach (var VacuumTowerDO in VacuumTowerDOList)
				{
					dtoList.Add(new Vessels(VacuumTowerDO));
				}   
         
				break;
				
			case "Lines":
				var LineDOList = 
					from LineList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.Line>()
					select LineList;  
			    
				foreach (var LineDO in LineDOList)
				{
					dtoList.Add(new Lines(LineDO));
				}   
         
				break;
				
     
			}

			return dtoList;
		}
		
		public static Dictionary<string, string> GetDTOList(string graphName)
		{
			Dictionary<string, string> identifierUriPairs = new Dictionary<string, string>();
			DataLayer dataLayer = new DataLayer(configSettings);
			String endpoint = OperationContext.Current.Channel.LocalAddress.ToString();
			
			switch (graphName)
			{ 
			case "Valves":
				var ValvesDOList = 
					from InLinePipingComponentList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>()
					where InLinePipingComponentList.componentType.ToUpper() == "VALVE"  // outFilter
					select InLinePipingComponentList;
			    
				foreach (var ValvesDO in ValvesDOList)
				{   
					Valves dto = new Valves(ValvesDO);
					string identifier = dto.Identifier;
					identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);            
				}   

				break;
				
			case "Instruments":
				var InstrumentsDOList = 
					from InLinePipingComponentList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>()
					where InLinePipingComponentList.componentType.ToUpper() == "INSTRUMENT"  // outFilter
					select InLinePipingComponentList;
			    
				foreach (var InstrumentsDO in InstrumentsDOList)
				{   
					Instruments dto = new Instruments(InstrumentsDO);
					string identifier = dto.Identifier;
					identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);            
				}   

				break;
				
			case "Vessels":
				var KOPotDOList = 
					from KOPotList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.KOPot>()
					select KOPotList;  

				foreach (var KOPotDO in KOPotDOList)
				{
					Vessels dto = new Vessels(KOPotDO);
					string identifier = dto.Identifier;
					identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
				}  

				var VacuumTowerDOList = 
					from VacuumTowerList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower>()
					select VacuumTowerList;  

				foreach (var VacuumTowerDO in VacuumTowerDOList)
				{
					Vessels dto = new Vessels(VacuumTowerDO);
					string identifier = dto.Identifier;
					identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
				}  

				break;
				
			case "Lines":
				var LineDOList = 
					from LineList in dataLayer.GetList<org.ids_adi.iring.adapter.dataLayer.Model.Line>()
					select LineList;  

				foreach (var LineDO in LineDOList)
				{
					Lines dto = new Lines(LineDO);
					string identifier = dto.Identifier;
					identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
				}  

				break;
				
			}
			
			return identifierUriPairs;
		}
    
		public static Response Post(string graphName, DataTransferObject dto)
		{
			Response response = new Response();
			DataLayer dataLayer = new DataLayer(configSettings);

			if (dto != null)
			{
				switch (graphName)
				{ 
 
				case "Valves":
					org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent ValvesDO = (org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)dto.GetDataObject();
					response.Append(dataLayer.Post<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>(ValvesDO));

					break;
 
				case "Instruments":
					org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent InstrumentsDO = (org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)dto.GetDataObject();
					response.Append(dataLayer.Post<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>(InstrumentsDO));

					break;
 
				case "Vessels":
					Vessels VesselsObj = (Vessels)dto;  
					
					if (VesselsObj.FluidContainerDescription_description.ToUpper() == "KNOCK OUT VESSEL") // inFilter
					{
						org.ids_adi.iring.adapter.dataLayer.Model.KOPot KOPotDO = (org.ids_adi.iring.adapter.dataLayer.Model.KOPot)VesselsObj.GetDataObject();
						response.Append(dataLayer.Post<org.ids_adi.iring.adapter.dataLayer.Model.KOPot>(KOPotDO));
					}   
					else if (VesselsObj.FluidContainerDescription_description.ToUpper() == "VACUUM VESSEL") // inFilter
					{
						org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower VacuumTowerDO = (org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower)VesselsObj.GetDataObject();
						response.Append(dataLayer.Post<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower>(VacuumTowerDO));
					}   

					break;
 
				case "Lines":
					org.ids_adi.iring.adapter.dataLayer.Model.Line LinesDO = (org.ids_adi.iring.adapter.dataLayer.Model.Line)dto.GetDataObject();
					response.Append(dataLayer.Post<org.ids_adi.iring.adapter.dataLayer.Model.Line>(LinesDO));

					break;
       
				}
			}

			return response;
		}
		
		public static Response PostList(string graphName, List<DataTransferObject> dtoList)
		{
			Response response = new Response();
			DataLayer dataLayer = new DataLayer(configSettings);

			if (dtoList != null && dtoList.Count<DataTransferObject>() > 0)
			{
				switch (graphName)
				{ 
 
				case "Valves":
					List<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent> ValvesDOList = new List<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>();

					foreach (DataTransferObject dto in dtoList)
					{
						ValvesDOList.Add((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)dto.GetDataObject());
					}

					response.Append(dataLayer.PostList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>(ValvesDOList));

					break;
 
				case "Instruments":
					List<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent> InstrumentsDOList = new List<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>();

					foreach (DataTransferObject dto in dtoList)
					{
						InstrumentsDOList.Add((org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent)dto.GetDataObject());
					}

					response.Append(dataLayer.PostList<org.ids_adi.iring.adapter.dataLayer.Model.InLinePipingComponent>(InstrumentsDOList));

					break;
 
				case "Vessels":
					List<org.ids_adi.iring.adapter.dataLayer.Model.KOPot> KOPotDOList = new List<org.ids_adi.iring.adapter.dataLayer.Model.KOPot>();
					List<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower> VacuumTowerDOList = new List<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower>();
				    
					foreach (Vessels dto in dtoList)
					{   
						if (dto.FluidContainerDescription_description.ToUpper() == "KNOCK OUT VESSEL") // inFilter
						{
							KOPotDOList.Add((org.ids_adi.iring.adapter.dataLayer.Model.KOPot)dto.GetDataObject());
						} 
						else if (dto.FluidContainerDescription_description.ToUpper() == "VACUUM VESSEL") // inFilter
						{
							VacuumTowerDOList.Add((org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower)dto.GetDataObject());
						} 
					}
					
					response.Append(dataLayer.PostList<org.ids_adi.iring.adapter.dataLayer.Model.KOPot>(KOPotDOList));
					response.Append(dataLayer.PostList<org.ids_adi.iring.adapter.dataLayer.Model.VacuumTower>(VacuumTowerDOList));

					break;
 
				case "Lines":
					List<org.ids_adi.iring.adapter.dataLayer.Model.Line> LinesDOList = new List<org.ids_adi.iring.adapter.dataLayer.Model.Line>();

					foreach (DataTransferObject dto in dtoList)
					{
						LinesDOList.Add((org.ids_adi.iring.adapter.dataLayer.Model.Line)dto.GetDataObject());
					}

					response.Append(dataLayer.PostList<org.ids_adi.iring.adapter.dataLayer.Model.Line>(LinesDOList));

					break;
				}
			}

			return response;
		}
    
		public static DataDictionary GetDictionary()
		{
			DataLayer dataLayer = new DataLayer(configSettings);
			return dataLayer.GetDictionary();
		}

		public static Response RefreshDictionary()
		{
			DataLayer dataLayer = new DataLayer(configSettings);
			return dataLayer.RefreshDictionary();
		}
	}
}

namespace org.iringtools.adapter
{
	public partial class AdapterService : IDataService
	{
		public Valves GetValvesREST(string identifier)
		{
			try
			{
				return (Valves)DTOFactory.GetDTO("Valves", identifier);
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Valves DTO with identifier " + identifier + ". " + exception.ToString(), exception);
			}
		}

		public Dictionary<string, string> GetValvesListREST()
		{
			try
			{
				return DTOFactory.GetDTOList("Valves");
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting ValvesDTO list. " + exception.ToString(), exception);
			}
		}

		public ValvesResponse GetValves(Identifier identifier)
		{
			try
			{
				ValvesResponse response = new ValvesResponse();
				response.dto = (Valves)DTOFactory.GetDTO("Valves", identifier.value);

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Valves DTO with identifier " + identifier.value + ". " + exception.ToString(), exception);
			}
		}

		public ValvesListResponse GetValvesList()
		{
			try
			{
				List<DataTransferObject> commonDTOList = (List<DataTransferObject>)(DTOFactory.GetList("Valves"));

				List<Valves> ValvesList = new List<Valves>();
				foreach (DataTransferObject dto in commonDTOList)
				{
				  ValvesList.Add((Valves)dto);
				}

				ValvesListResponse response = new ValvesListResponse();
				response.dtoList = ValvesList;

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Valves DTO list. " + exception.ToString(), exception);
			}
		}
		
		public Instruments GetInstrumentsREST(string identifier)
		{
			try
			{
				return (Instruments)DTOFactory.GetDTO("Instruments", identifier);
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Instruments DTO with identifier " + identifier + ". " + exception.ToString(), exception);
			}
		}

		public Dictionary<string, string> GetInstrumentsListREST()
		{
			try
			{
				return DTOFactory.GetDTOList("Instruments");
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting InstrumentsDTO list. " + exception.ToString(), exception);
			}
		}

		public InstrumentsResponse GetInstruments(Identifier identifier)
		{
			try
			{
				InstrumentsResponse response = new InstrumentsResponse();
				response.dto = (Instruments)DTOFactory.GetDTO("Instruments", identifier.value);

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Instruments DTO with identifier " + identifier.value + ". " + exception.ToString(), exception);
			}
		}

		public InstrumentsListResponse GetInstrumentsList()
		{
			try
			{
				List<DataTransferObject> commonDTOList = (List<DataTransferObject>)(DTOFactory.GetList("Instruments"));

				List<Instruments> InstrumentsList = new List<Instruments>();
				foreach (DataTransferObject dto in commonDTOList)
				{
				  InstrumentsList.Add((Instruments)dto);
				}

				InstrumentsListResponse response = new InstrumentsListResponse();
				response.dtoList = InstrumentsList;

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Instruments DTO list. " + exception.ToString(), exception);
			}
		}
		
		public Vessels GetVesselsREST(string identifier)
		{
			try
			{
				return (Vessels)DTOFactory.GetDTO("Vessels", identifier);
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Vessels DTO with identifier " + identifier + ". " + exception.ToString(), exception);
			}
		}

		public Dictionary<string, string> GetVesselsListREST()
		{
			try
			{
				return DTOFactory.GetDTOList("Vessels");
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting VesselsDTO list. " + exception.ToString(), exception);
			}
		}

		public VesselsResponse GetVessels(Identifier identifier)
		{
			try
			{
				VesselsResponse response = new VesselsResponse();
				response.dto = (Vessels)DTOFactory.GetDTO("Vessels", identifier.value);

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Vessels DTO with identifier " + identifier.value + ". " + exception.ToString(), exception);
			}
		}

		public VesselsListResponse GetVesselsList()
		{
			try
			{
				List<DataTransferObject> commonDTOList = (List<DataTransferObject>)(DTOFactory.GetList("Vessels"));

				List<Vessels> VesselsList = new List<Vessels>();
				foreach (DataTransferObject dto in commonDTOList)
				{
				  VesselsList.Add((Vessels)dto);
				}

				VesselsListResponse response = new VesselsListResponse();
				response.dtoList = VesselsList;

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Vessels DTO list. " + exception.ToString(), exception);
			}
		}
		
		public Lines GetLinesREST(string identifier)
		{
			try
			{
				return (Lines)DTOFactory.GetDTO("Lines", identifier);
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Lines DTO with identifier " + identifier + ". " + exception.ToString(), exception);
			}
		}

		public Dictionary<string, string> GetLinesListREST()
		{
			try
			{
				return DTOFactory.GetDTOList("Lines");
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting LinesDTO list. " + exception.ToString(), exception);
			}
		}

		public LinesResponse GetLines(Identifier identifier)
		{
			try
			{
				LinesResponse response = new LinesResponse();
				response.dto = (Lines)DTOFactory.GetDTO("Lines", identifier.value);

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Lines DTO with identifier " + identifier.value + ". " + exception.ToString(), exception);
			}
		}

		public LinesListResponse GetLinesList()
		{
			try
			{
				List<DataTransferObject> commonDTOList = (List<DataTransferObject>)(DTOFactory.GetList("Lines"));

				List<Lines> LinesList = new List<Lines>();
				foreach (DataTransferObject dto in commonDTOList)
				{
				  LinesList.Add((Lines)dto);
				}

				LinesListResponse response = new LinesListResponse();
				response.dtoList = LinesList;

				return response;
			}
			catch (Exception exception)
			{
				throw new Exception("Error while getting Lines DTO list. " + exception.ToString(), exception);
			}
		}
		
	}
}

