//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Xsl;
using Ninject;
using org.iringtools.library;
using org.iringtools.utility;

namespace org.iringtools.adapter.proj_12345_000.ABC
{
  public class DTOService : IDTOService
  {
    IKernel _kernel = null;
    IDataLayer _dataLayer = null;
    AdapterSettings _settings = null;
    
    [Inject]
    public DTOService(IKernel kernel, IDataLayer dataLayer, AdapterSettings settings)
    {
      _kernel = kernel;
      _dataLayer = dataLayer;
      _settings = settings;
    }
    
    public T TransformList<T>(string graphName, List<DataTransferObject> dtoList, string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + graphName + "DTO.xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      
      switch (graphName)
      {
        case "Valves":
          List<Valves> ValvesList = new List<Valves>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            ValvesList.Add((Valves)dto);
          }
          
          Utility.Write<List<Valves>>(ValvesList, dtoPath);
          break;
        
        case "Lines":
          List<Lines> LinesList = new List<Lines>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            LinesList.Add((Lines)dto);
          }
          
          Utility.Write<List<Lines>>(LinesList, dtoPath);
          break;
      }
      
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
    
    public DataTransferObject Create(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "Valves":
          dto = new Valves("http://rdl.rdlfacade.org/data#R97295617945", graphName, identifier);
          break;
        
        case "Lines":
          dto = new Lines("http://rdl.rdlfacade.org/data#R19192462550", graphName, identifier);
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> CreateList(string graphName, List<string> identifiers)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();

      foreach (string identifier in identifiers)
      {
        dtoList.Add(Create(graphName, identifier));
      }

      return dtoList;
    }
    
    public DataTransferObject GetDTO(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "Valves":
          var InLinePipingComponentValvesDO = 
            (from InLinePipingComponentList in _dataLayer.GetList<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent>()
             where InLinePipingComponentList.Id == identifier
             select InLinePipingComponentList).FirstOrDefault<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent>();   
        
          if (InLinePipingComponentValvesDO != default(org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent))
          {                        
            dto = new Valves(InLinePipingComponentValvesDO);
            dto.Identifier = InLinePipingComponentValvesDO.Id;
            break; 
          }
          
          break;
        
        case "Lines":
          var LineLinesDO = 
            (from LineList in _dataLayer.GetList<org.iringtools.adapter.proj_12345_000.ABC.Line>()
             where LineList.Id == identifier
             select LineList).FirstOrDefault<org.iringtools.adapter.proj_12345_000.ABC.Line>();   
        
          if (LineLinesDO != default(org.iringtools.adapter.proj_12345_000.ABC.Line))
          {                        
            dto = new Lines(LineLinesDO);
            dto.Identifier = LineLinesDO.Id;
            break; 
          }
          
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> GetList(string graphName)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      switch (graphName)
      {
        case "Valves":
          var ValvesInLinePipingComponentDOList = 
            from InLinePipingComponentList in _dataLayer.GetList<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent>()
            select InLinePipingComponentList;  
    
          foreach (var InLinePipingComponentDO in ValvesInLinePipingComponentDOList)
          {   					
            Valves dto = new Valves(InLinePipingComponentDO);
            dto.Identifier = InLinePipingComponentDO.Id;
            dtoList.Add(dto);
          }
          
          break;
        
        case "Lines":
          var LinesLineDOList = 
            from LineList in _dataLayer.GetList<org.iringtools.adapter.proj_12345_000.ABC.Line>()
            select LineList;  
    
          foreach (var LineDO in LinesLineDOList)
          {   					
            Lines dto = new Lines(LineDO);
            dto.Identifier = LineDO.Id;
            dtoList.Add(dto);
          }
          
          break;
      }
      
      return dtoList;
    }
    
    public Dictionary<string, string> GetListREST(string graphName)
    {
      Dictionary<string, string> identifierUriPairs = new Dictionary<string, string>();
      String endpoint = OperationContext.Current.Channel.LocalAddress.ToString();
      
      switch (graphName)
      {
        case "Valves":
          var ValvesInLinePipingComponentDOList = 
            from InLinePipingComponentList in _dataLayer.GetList<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent>()
            select InLinePipingComponentList;  

          foreach (var InLinePipingComponentDO in ValvesInLinePipingComponentDOList)
          {
            string identifier = InLinePipingComponentDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "Lines":
          var LinesLineDOList = 
            from LineList in _dataLayer.GetList<org.iringtools.adapter.proj_12345_000.ABC.Line>()
            select LineList;  

          foreach (var LineDO in LinesLineDOList)
          {
            string identifier = LineDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
      }
      
      return identifierUriPairs;
    }
    
    public Response Post(string graphName, DataTransferObject dto)
    {
      Response response = new Response();
      
      if (dto != null)
      {
        switch (graphName)
        {
          case "Valves":
            org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent ValvesDO = (org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)dto.GetDataObject();
            response.Append(_dataLayer.Post<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent>(ValvesDO));
            break;
          
          case "Lines":
            org.iringtools.adapter.proj_12345_000.ABC.Line LinesDO = (org.iringtools.adapter.proj_12345_000.ABC.Line)dto.GetDataObject();
            response.Append(_dataLayer.Post<org.iringtools.adapter.proj_12345_000.ABC.Line>(LinesDO));
            break;
        }
      }
      
      return response;
    }
    
    public Response PostList(string graphName, List<DataTransferObject> dtoList)
    {
      Response response = new Response();
      
      if (dtoList != null && dtoList.Count<DataTransferObject>() > 0)
      {
        switch (graphName)
        {
          case "Valves":
            List<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent> ValvesDOList = new List<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent>();

            foreach (DataTransferObject dto in dtoList)
            {
              ValvesDOList.Add((org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<org.iringtools.adapter.proj_12345_000.ABC.InLinePipingComponent>(ValvesDOList));
            break;
          
          case "Lines":
            List<org.iringtools.adapter.proj_12345_000.ABC.Line> LinesDOList = new List<org.iringtools.adapter.proj_12345_000.ABC.Line>();

            foreach (DataTransferObject dto in dtoList)
            {
              LinesDOList.Add((org.iringtools.adapter.proj_12345_000.ABC.Line)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<org.iringtools.adapter.proj_12345_000.ABC.Line>(LinesDOList));
            break;
        }
      }
      
      return response;
    }
    
    public object CreateList(string graphName, string dtoListString)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      if (dtoListString != null && dtoListString != String.Empty)
      {
        switch (graphName)
        {
          case "Valves":
            XmlReader ValvesReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument ValvesFile = XDocument.Load(ValvesReader);
            ValvesFile = Utility.RemoveNamespace(ValvesFile);
            List<Valves> ValvesList = new List<Valves>(); 
            var ValvesQuery = from c in ValvesFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in ValvesQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              Valves graphObject = new Valves();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              ValvesList.Add(graphObject);
            }

            foreach (Valves dto in ValvesList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "Lines":
            XmlReader LinesReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument LinesFile = XDocument.Load(LinesReader);
            LinesFile = Utility.RemoveNamespace(LinesFile);
            List<Lines> LinesList = new List<Lines>(); 
            var LinesQuery = from c in LinesFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in LinesQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              Lines graphObject = new Lines();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              LinesList.Add(graphObject);
            }

            foreach (Lines dto in LinesList)
            {
              dtoList.Add(dto);
            }
            
            break;
        }
      }
      
      return dtoList;
    }
    
    public DataDictionary GetDictionary()
    {
      return _dataLayer.GetDictionary();
    }

    public Response RefreshDictionary()
    {
      return _dataLayer.RefreshDictionary();
    }
  }
}
