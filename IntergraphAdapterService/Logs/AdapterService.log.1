2010-03-09 15:48:56,355 [7] ERROR org.iringtools.adapter.DTOGenerator - DTOService.cs:
2010-03-09 15:48:56,364 [7] ERROR org.iringtools.adapter.DTOGenerator - //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Xsl;
using Ninject;
using org.iringtools.library;
using org.iringtools.utility;

namespace org.iringtools.adapter.proj_CrackingComplex.SPPID
{
  public class DTOService : IDTOService
  {
    IKernel _kernel = null;
    IDataLayer _dataLayer = null;
    AdapterSettings _settings = null;
    
    [Inject]
    public DTOService(IKernel kernel, IDataLayer dataLayer, AdapterSettings settings)
    {
      _kernel = kernel;
      _dataLayer = dataLayer;
      _settings = settings;
    }
    
    public T TransformList<T>(string graphName, List<DataTransferObject> dtoList, string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + graphName + "DTO.xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      
      switch (graphName)
      {
        case "EQUIPMENT":
          List<EQUIPMENT> EQUIPMENTList = new List<EQUIPMENT>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            EQUIPMENTList.Add((EQUIPMENT)dto);
          }
          
          Utility.Write<List<EQUIPMENT>>(EQUIPMENTList, dtoPath);
          break;
        
        case "INSTRUMENT":
          List<INSTRUMENT> INSTRUMENTList = new List<INSTRUMENT>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            INSTRUMENTList.Add((INSTRUMENT)dto);
          }
          
          Utility.Write<List<INSTRUMENT>>(INSTRUMENTList, dtoPath);
          break;
        
        case "LINE":
          List<LINE> LINEList = new List<LINE>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            LINEList.Add((LINE)dto);
          }
          
          Utility.Write<List<LINE>>(LINEList, dtoPath);
          break;
        
        case "PipingComp":
          List<PipingComp> PipingCompList = new List<PipingComp>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            PipingCompList.Add((PipingComp)dto);
          }
          
          Utility.Write<List<PipingComp>>(PipingCompList, dtoPath);
          break;
      }
      
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
    
    public DataTransferObject Create(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "EQUIPMENT":
          dto = new EQUIPMENT("http://rdl.rdlfacade.org/data#R20981279868", graphName, identifier);
          break;
        
        case "INSTRUMENT":
          dto = new INSTRUMENT("http://rdl.rdlfacade.org/data#R98505918404", graphName, identifier);
          break;
        
        case "LINE":
          dto = new LINE("http://rdl.rdlfacade.org/data#R19192462550", graphName, identifier);
          break;
        
        case "PipingComp":
          dto = new PipingComp("http://rdl.rdlfacade.org/data#R65135201747", graphName, identifier);
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> CreateList(string graphName, List<string> identifiers)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();

      foreach (string identifier in identifiers)
      {
        dtoList.Add(Create(graphName, identifier));
      }

      return dtoList;
    }
    
    public DataTransferObject GetDTO(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EquipmentEQUIPMENTDO = 
            (from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
             where EquipmentList.Id == identifier
             select EquipmentList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.Equipment>();   
        
          if (EquipmentEQUIPMENTDO != default(Bechtel.IntergraphDataLayer.SPPID.Equipment))
          {                        
            dto = new EQUIPMENT(EquipmentEQUIPMENTDO);
            dto.Identifier = EquipmentEQUIPMENTDO.Id;
            break; 
          }
          
          break;
        
        case "INSTRUMENT":
          var InstrumentINSTRUMENTDO = 
            (from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
             where InstrumentList.Id == identifier
             select InstrumentList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.Instrument>();   
        
          if (InstrumentINSTRUMENTDO != default(Bechtel.IntergraphDataLayer.SPPID.Instrument))
          {                        
            dto = new INSTRUMENT(InstrumentINSTRUMENTDO);
            dto.Identifier = InstrumentINSTRUMENTDO.Id;
            break; 
          }
          
          break;
        
        case "LINE":
          var PipeRunLINEDO = 
            (from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
             where PipeRunList.Id == identifier
             select PipeRunList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.PipeRun>();   
        
          if (PipeRunLINEDO != default(Bechtel.IntergraphDataLayer.SPPID.PipeRun))
          {                        
            dto = new LINE(PipeRunLINEDO);
            dto.Identifier = PipeRunLINEDO.Id;
            break; 
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDO = 
            (from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
             where PipingCompList.Id == identifier
             select PipingCompList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.PipingComp>();   
        
          if (PipingCompPipingCompDO != default(Bechtel.IntergraphDataLayer.SPPID.PipingComp))
          {                        
            dto = new PipingComp(PipingCompPipingCompDO);
            dto.Identifier = PipingCompPipingCompDO.Id;
            break; 
          }
          
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> GetList(string graphName)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EQUIPMENTEquipmentDOList = 
            from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
            select EquipmentList;  
    
          foreach (var EquipmentDO in EQUIPMENTEquipmentDOList)
          {   					
            EQUIPMENT dto = new EQUIPMENT(EquipmentDO);
            dto.Identifier = EquipmentDO.Id;
            dtoList.Add(dto);
          }
          
          break;
        
        case "INSTRUMENT":
          var INSTRUMENTInstrumentDOList = 
            from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
            select InstrumentList;  
    
          foreach (var InstrumentDO in INSTRUMENTInstrumentDOList)
          {   					
            INSTRUMENT dto = new INSTRUMENT(InstrumentDO);
            dto.Identifier = InstrumentDO.Id;
            dtoList.Add(dto);
          }
          
          break;
        
        case "LINE":
          var LINEPipeRunDOList = 
            from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
            select PipeRunList;  
    
          foreach (var PipeRunDO in LINEPipeRunDOList)
          {   					
            LINE dto = new LINE(PipeRunDO);
            dto.Identifier = PipeRunDO.Id;
            dtoList.Add(dto);
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDOList = 
            from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
            select PipingCompList;  
    
          foreach (var PipingCompDO in PipingCompPipingCompDOList)
          {   					
            PipingComp dto = new PipingComp(PipingCompDO);
            dto.Identifier = PipingCompDO.Id;
            dtoList.Add(dto);
          }
          
          break;
      }
      
      return dtoList;
    }
    
    public Dictionary<string, string> GetListREST(string graphName)
    {
      Dictionary<string, string> identifierUriPairs = new Dictionary<string, string>();
      String endpoint = OperationContext.Current.Channel.LocalAddress.ToString();
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EQUIPMENTEquipmentDOList = 
            from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
            select EquipmentList;  

          foreach (var EquipmentDO in EQUIPMENTEquipmentDOList)
          {
            string identifier = EquipmentDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "INSTRUMENT":
          var INSTRUMENTInstrumentDOList = 
            from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
            select InstrumentList;  

          foreach (var InstrumentDO in INSTRUMENTInstrumentDOList)
          {
            string identifier = InstrumentDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "LINE":
          var LINEPipeRunDOList = 
            from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
            select PipeRunList;  

          foreach (var PipeRunDO in LINEPipeRunDOList)
          {
            string identifier = PipeRunDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDOList = 
            from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
            select PipingCompList;  

          foreach (var PipingCompDO in PipingCompPipingCompDOList)
          {
            string identifier = PipingCompDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
      }
      
      return identifierUriPairs;
    }
    
    public Response Post(string graphName, DataTransferObject dto)
    {
      Response response = new Response();
      
      if (dto != null)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            Bechtel.IntergraphDataLayer.SPPID.Equipment EQUIPMENTDO = (Bechtel.IntergraphDataLayer.SPPID.Equipment)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.Equipment>(EQUIPMENTDO));
            break;
          
          case "INSTRUMENT":
            Bechtel.IntergraphDataLayer.SPPID.Instrument INSTRUMENTDO = (Bechtel.IntergraphDataLayer.SPPID.Instrument)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.Instrument>(INSTRUMENTDO));
            break;
          
          case "LINE":
            Bechtel.IntergraphDataLayer.SPPID.PipeRun LINEDO = (Bechtel.IntergraphDataLayer.SPPID.PipeRun)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.PipeRun>(LINEDO));
            break;
          
          case "PipingComp":
            Bechtel.IntergraphDataLayer.SPPID.PipingComp PipingCompDO = (Bechtel.IntergraphDataLayer.SPPID.PipingComp)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.PipingComp>(PipingCompDO));
            break;
        }
      }
      
      return response;
    }
    
    public Response PostList(string graphName, List<DataTransferObject> dtoList)
    {
      Response response = new Response();
      
      if (dtoList != null && dtoList.Count<DataTransferObject>() > 0)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            List<Bechtel.IntergraphDataLayer.SPPID.Equipment> EQUIPMENTDOList = new List<Bechtel.IntergraphDataLayer.SPPID.Equipment>();

            foreach (DataTransferObject dto in dtoList)
            {
              EQUIPMENTDOList.Add((Bechtel.IntergraphDataLayer.SPPID.Equipment)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.Equipment>(EQUIPMENTDOList));
            break;
          
          case "INSTRUMENT":
            List<Bechtel.IntergraphDataLayer.SPPID.Instrument> INSTRUMENTDOList = new List<Bechtel.IntergraphDataLayer.SPPID.Instrument>();

            foreach (DataTransferObject dto in dtoList)
            {
              INSTRUMENTDOList.Add((Bechtel.IntergraphDataLayer.SPPID.Instrument)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.Instrument>(INSTRUMENTDOList));
            break;
          
          case "LINE":
            List<Bechtel.IntergraphDataLayer.SPPID.PipeRun> LINEDOList = new List<Bechtel.IntergraphDataLayer.SPPID.PipeRun>();

            foreach (DataTransferObject dto in dtoList)
            {
              LINEDOList.Add((Bechtel.IntergraphDataLayer.SPPID.PipeRun)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>(LINEDOList));
            break;
          
          case "PipingComp":
            List<Bechtel.IntergraphDataLayer.SPPID.PipingComp> PipingCompDOList = new List<Bechtel.IntergraphDataLayer.SPPID.PipingComp>();

            foreach (DataTransferObject dto in dtoList)
            {
              PipingCompDOList.Add((Bechtel.IntergraphDataLayer.SPPID.PipingComp)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>(PipingCompDOList));
            break;
        }
      }
      
      return response;
    }
    
    public object CreateList(string graphName, string dtoListString)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      if (dtoListString != null && dtoListString != String.Empty)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            XmlReader EQUIPMENTReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument EQUIPMENTFile = XDocument.Load(EQUIPMENTReader);
            EQUIPMENTFile = Utility.RemoveNamespace(EQUIPMENTFile);
            List<EQUIPMENT> EQUIPMENTList = new List<EQUIPMENT>(); 
            var EQUIPMENTQuery = from c in EQUIPMENTFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in EQUIPMENTQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              EQUIPMENT graphObject = new EQUIPMENT();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              EQUIPMENTList.Add(graphObject);
            }

            foreach (EQUIPMENT dto in EQUIPMENTList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "INSTRUMENT":
            XmlReader INSTRUMENTReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument INSTRUMENTFile = XDocument.Load(INSTRUMENTReader);
            INSTRUMENTFile = Utility.RemoveNamespace(INSTRUMENTFile);
            List<INSTRUMENT> INSTRUMENTList = new List<INSTRUMENT>(); 
            var INSTRUMENTQuery = from c in INSTRUMENTFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in INSTRUMENTQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              INSTRUMENT graphObject = new INSTRUMENT();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              INSTRUMENTList.Add(graphObject);
            }

            foreach (INSTRUMENT dto in INSTRUMENTList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "LINE":
            XmlReader LINEReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument LINEFile = XDocument.Load(LINEReader);
            LINEFile = Utility.RemoveNamespace(LINEFile);
            List<LINE> LINEList = new List<LINE>(); 
            var LINEQuery = from c in LINEFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in LINEQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              LINE graphObject = new LINE();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              LINEList.Add(graphObject);
            }

            foreach (LINE dto in LINEList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "PipingComp":
            XmlReader PipingCompReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument PipingCompFile = XDocument.Load(PipingCompReader);
            PipingCompFile = Utility.RemoveNamespace(PipingCompFile);
            List<PipingComp> PipingCompList = new List<PipingComp>(); 
            var PipingCompQuery = from c in PipingCompFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in PipingCompQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              PipingComp graphObject = new PipingComp();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              PipingCompList.Add(graphObject);
            }

            foreach (PipingComp dto in PipingCompList)
            {
              dtoList.Add(dto);
            }
            
            break;
        }
      }
      
      return dtoList;
    }
    
    public DataDictionary GetDictionary()
    {
      return _dataLayer.GetDictionary();
    }

    public Response RefreshDictionary()
    {
      return _dataLayer.RefreshDictionary();
    }
  }
}

2010-03-09 15:48:56,371 [7] ERROR org.iringtools.adapter.AdapterProvider - Error in Generate: System.Exception: CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)

   at org.iringtools.adapter.DTOGenerator.Generate(String projectName, String applicationName)
   at org.iringtools.adapter.AdapterProvider.Generate(String projectName, String applicationName)
2010-03-09 16:09:08,678 [7] ERROR org.iringtools.adapter.DTOGenerator - System.Exception: CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)

   at org.iringtools.utility.Utility.Compile(Dictionary`2 compilerOptions, CompilerParameters compilerParameters, String[] sources)
   at org.iringtools.adapter.DTOGenerator.Generate(String projectName, String applicationName)
2010-03-09 16:09:08,700 [7] ERROR org.iringtools.adapter.DTOGenerator - DTOModel.cs:
2010-03-09 16:09:08,700 [7] ERROR org.iringtools.adapter.DTOGenerator - //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Xml.Xsl;
using org.iringtools.library;
using org.iringtools.utility;

namespace org.iringtools.adapter.proj_CrackingComplex.SPPID
{
  [DataContract(Name = "EQUIPMENT", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class EQUIPMENT : DataTransferObject
  {
    [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    public class TemplateThermalInsulationContainment2
    {
      [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      public class ClassTHERMALINSULATIONMATERIAL
      {
        [DataMember(EmitDefaultValue=false)]
        [XmlIgnore]
        public string Identifier { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness3_tpl_hasScale { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness3_tpl_hasType { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public Double tpl_NominalThickness3_tpl_valValue { get; set; }
      }
      
      [DataMember(Name = "tpl_container_rdl_THERMALINSULATIONMATERIAL", EmitDefaultValue = false)]
      [XmlIgnore]
      public ClassTHERMALINSULATIONMATERIAL tpl_container_rdl_THERMALINSULATIONMATERIAL { get; set; }
    }
    
    [DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateThermalInsulationContainment2 tpl_ThermalInsulationContainment2 { get; set; }
    
    public EQUIPMENT(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag0.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag0.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"Description", @"tpl:ClassifiedDescription1.tpl:description", null, typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription1.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R75626151549>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"InsulThick", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:valValue", null, typeof(Double), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment2.tpl:containmentType", @"<http://rdl.rdlfacade.org/data#R12086239421>", typeof(String), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public EQUIPMENT(Bechtel.IntergraphDataLayer.SPPID.Equipment dataObject) : this("http://rdl.rdlfacade.org/data#R20981279868", "EQUIPMENT", null, dataObject) {}
    
    public EQUIPMENT(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.Equipment dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag0_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ClassifiedDescription1_tpl_description = Convert.ToString(dataObject.Description);
        tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue = Convert.ToDouble(dataObject.InsulThick);
      }
      tpl_ThermalInsulationContainment2 = new TemplateThermalInsulationContainment2();
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL = new TemplateThermalInsulationContainment2.ClassTHERMALINSULATIONMATERIAL();
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.Identifier = ((GetPropertyValueByInternalName("ItemTag") != null) ? GetPropertyValueByInternalName("ItemTag").ToString() : "");
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness3_tpl_hasScale = Convert.ToString(tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasScale);
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness3_tpl_hasType = Convert.ToString(tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasType);
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness3_tpl_valValue = Convert.ToDouble(tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue);
      _dataObject = dataObject;
    }
    
    public EQUIPMENT() : this("http://rdl.rdlfacade.org/data#R20981279868", "EQUIPMENT", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag0_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag0_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag0.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag0.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag0_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag0_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag0.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag0.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription1_tpl_description", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription1_tpl_description
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription1.tpl:description");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription1.tpl:description", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription1_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription1_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription1.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription1.tpl:descriptionType", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasScale", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasType", value);
      }
    }
    
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:valValue", value);
      }
    }
    
    [DataMember(Name = "tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment2_tpl_containmentType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment2_tpl_containmentType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment2.tpl:containmentType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment2.tpl:containmentType", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.Equipment();
        ((Bechtel.IntergraphDataLayer.SPPID.Equipment)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.Equipment)_dataObject).Description = Convert.ToString(this.tpl_ClassifiedDescription1_tpl_description);
      ((Bechtel.IntergraphDataLayer.SPPID.Equipment)_dataObject).InsulThick = Convert.ToString(this.tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<EQUIPMENT>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<EQUIPMENT>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<EQUIPMENT> list = new List<EQUIPMENT> { this };
      Utility.Write<List<EQUIPMENT>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
  
  [DataContract(Name = "INSTRUMENT", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class INSTRUMENT : DataTransferObject
  {
    [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    public class TemplateThermalInsulationContainment6
    {
      [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      public class ClassTHERMALINSULATIONMATERIAL
      {
        [DataMember(EmitDefaultValue=false)]
        [XmlIgnore]
        public string Identifier { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness7_tpl_hasScale { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness7_tpl_hasType { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public Double tpl_NominalThickness7_tpl_valValue { get; set; }
      }
      
      [DataMember(Name = "tpl_container_rdl_THERMALINSULATIONMATERIAL", EmitDefaultValue = false)]
      [XmlIgnore]
      public ClassTHERMALINSULATIONMATERIAL tpl_container_rdl_THERMALINSULATIONMATERIAL { get; set; }
    }
    
    [DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateThermalInsulationContainment6 tpl_ThermalInsulationContainment6 { get; set; }
    
    public INSTRUMENT(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag4.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag4.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"Description", @"tpl:ClassifiedDescription5.tpl:description", null, typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription5.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R75626151549>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"InsulThick", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:valValue", null, typeof(Double), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment6.tpl:containmentType", @"<http://rdl.rdlfacade.org/data#R12086239421>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter8.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter8.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R17622148043>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"NominalDiameter", @"tpl:NominalDiameter8.tpl:valValue", null, typeof(Double), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public INSTRUMENT(Bechtel.IntergraphDataLayer.SPPID.Instrument dataObject) : this("http://rdl.rdlfacade.org/data#R98505918404", "INSTRUMENT", null, dataObject) {}
    
    public INSTRUMENT(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.Instrument dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag4_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ClassifiedDescription5_tpl_description = Convert.ToString(dataObject.Description);
        tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue = Convert.ToDouble(dataObject.InsulThick);
        tpl_NominalDiameter8_tpl_valValue = Convert.ToDouble(dataObject.NominalDiameter);
      }
      tpl_ThermalInsulationContainment6 = new TemplateThermalInsulationContainment6();
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL = new TemplateThermalInsulationContainment6.ClassTHERMALINSULATIONMATERIAL();
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.Identifier = ((GetPropertyValueByInternalName("ItemTag") != null) ? GetPropertyValueByInternalName("ItemTag").ToString() : "");
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness7_tpl_hasScale = Convert.ToString(tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasScale);
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness7_tpl_hasType = Convert.ToString(tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasType);
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness7_tpl_valValue = Convert.ToDouble(tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue);
      _dataObject = dataObject;
    }
    
    public INSTRUMENT() : this("http://rdl.rdlfacade.org/data#R98505918404", "INSTRUMENT", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag4_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag4_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag4.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag4.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag4_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag4_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag4.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag4.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription5_tpl_description", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription5_tpl_description
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription5.tpl:description");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription5.tpl:description", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription5_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription5_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription5.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription5.tpl:descriptionType", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasScale", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasType", value);
      }
    }
    
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:valValue", value);
      }
    }
    
    [DataMember(Name = "tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment6_tpl_containmentType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment6_tpl_containmentType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment6.tpl:containmentType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment6.tpl:containmentType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter8_tpl_hasScale", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter8_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter8.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter8.tpl:hasScale", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter8_tpl_hasType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter8_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter8.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter8.tpl:hasType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter8_tpl_valValue", EmitDefaultValue = false)]
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_NominalDiameter8_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:NominalDiameter8.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter8.tpl:valValue", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.Instrument();
        ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).Description = Convert.ToString(this.tpl_ClassifiedDescription5_tpl_description);
      ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).InsulThick = Convert.ToString(this.tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue);
      ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).NominalDiameter = Convert.ToString(this.tpl_NominalDiameter8_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<INSTRUMENT>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<INSTRUMENT>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<INSTRUMENT> list = new List<INSTRUMENT> { this };
      Utility.Write<List<INSTRUMENT>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
  
  [DataContract(Name = "LINE", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class LINE : DataTransferObject
  {
    [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    public class TemplateThermalInsulationContainment11
    {
      [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      public class ClassTHERMALINSULATIONMATERIAL
      {
        [DataMember(EmitDefaultValue=false)]
        [XmlIgnore]
        public string Identifier { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness12_tpl_hasScale { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness12_tpl_hasType { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public Double tpl_NominalThickness12_tpl_valValue { get; set; }
      }
      
      [DataMember(Name = "tpl_container_rdl_THERMALINSULATIONMATERIAL", EmitDefaultValue = false)]
      [XmlIgnore]
      public ClassTHERMALINSULATIONMATERIAL tpl_container_rdl_THERMALINSULATIONMATERIAL { get; set; }
    }
    
    [DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateThermalInsulationContainment11 tpl_ThermalInsulationContainment11 { get; set; }
    
    public LINE(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag9.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag9.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription10.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R75626151549>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"InsulThick", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:valValue", null, typeof(Double), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment11.tpl:containmentType", @"<http://rdl.rdlfacade.org/data#R12086239421>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter13.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter13.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R17622148043>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"NominalDiameter", @"tpl:NominalDiameter13.tpl:valValue", null, typeof(Double), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public LINE(Bechtel.IntergraphDataLayer.SPPID.PipeRun dataObject) : this("http://rdl.rdlfacade.org/data#R19192462550", "LINE", null, dataObject) {}
    
    public LINE(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.PipeRun dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag9_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue = Convert.ToDouble(dataObject.InsulThick);
        tpl_NominalDiameter13_tpl_valValue = Convert.ToDouble(dataObject.NominalDiameter);
      }
      tpl_ThermalInsulationContainment11 = new TemplateThermalInsulationContainment11();
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL = new TemplateThermalInsulationContainment11.ClassTHERMALINSULATIONMATERIAL();
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.Identifier = ((GetPropertyValueByInternalName("ItemTag") != null) ? GetPropertyValueByInternalName("ItemTag").ToString() : "");
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness12_tpl_hasScale = Convert.ToString(tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasScale);
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness12_tpl_hasType = Convert.ToString(tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasType);
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness12_tpl_valValue = Convert.ToDouble(tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue);
      _dataObject = dataObject;
    }
    
    public LINE() : this("http://rdl.rdlfacade.org/data#R19192462550", "LINE", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag9_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag9_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag9.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag9.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag9_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag9_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag9.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag9.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription10_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription10_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription10.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription10.tpl:descriptionType", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasScale", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasType", value);
      }
    }
    
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:valValue", value);
      }
    }
    
    [DataMember(Name = "tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment11_tpl_containmentType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment11_tpl_containmentType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment11.tpl:containmentType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment11.tpl:containmentType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter13_tpl_hasScale", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter13_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter13.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter13.tpl:hasScale", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter13_tpl_hasType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter13_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter13.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter13.tpl:hasType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter13_tpl_valValue", EmitDefaultValue = false)]
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_NominalDiameter13_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:NominalDiameter13.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter13.tpl:valValue", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.PipeRun();
        ((Bechtel.IntergraphDataLayer.SPPID.PipeRun)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.PipeRun)_dataObject).InsulThick = Convert.ToString(this.tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue);
      ((Bechtel.IntergraphDataLayer.SPPID.PipeRun)_dataObject).NominalDiameter = Convert.ToString(this.tpl_NominalDiameter13_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<LINE>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<LINE>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<LINE> list = new List<LINE> { this };
      Utility.Write<List<LINE>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
  
  [DataContract(Name = "PipingComp", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class PipingComp : DataTransferObject
  {
    public PipingComp(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag14.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag14.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"Description", @"tpl:ClassifiedDescription15.tpl:description", null, typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription15.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter16.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter16.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R17622148043>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"NominalDiameter", @"tpl:NominalDiameter16.tpl:valValue", null, typeof(Double), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public PipingComp(Bechtel.IntergraphDataLayer.SPPID.PipingComp dataObject) : this("http://rdl.rdlfacade.org/data#R65135201747", "PipingComp", null, dataObject) {}
    
    public PipingComp(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.PipingComp dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag14_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ClassifiedDescription15_tpl_description = Convert.ToString(dataObject.Description);
        tpl_NominalDiameter16_tpl_valValue = Convert.ToDouble(dataObject.NominalDiameter);
      }
      _dataObject = dataObject;
    }
    
    public PipingComp() : this("http://rdl.rdlfacade.org/data#R65135201747", "PipingComp", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag14_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag14_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag14.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag14.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag14_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag14_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag14.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag14.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription15_tpl_description", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription15_tpl_description
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription15.tpl:description");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription15.tpl:description", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription15_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription15_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription15.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription15.tpl:descriptionType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter16_tpl_hasScale", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter16_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter16.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter16.tpl:hasScale", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter16_tpl_hasType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter16_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter16.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter16.tpl:hasType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter16_tpl_valValue", EmitDefaultValue = false)]
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_NominalDiameter16_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:NominalDiameter16.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter16.tpl:valValue", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.PipingComp();
        ((Bechtel.IntergraphDataLayer.SPPID.PipingComp)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.PipingComp)_dataObject).Description = Convert.ToString(this.tpl_ClassifiedDescription15_tpl_description);
      ((Bechtel.IntergraphDataLayer.SPPID.PipingComp)_dataObject).NominalDiameter = Convert.ToString(this.tpl_NominalDiameter16_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<PipingComp>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<PipingComp>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<PipingComp> list = new List<PipingComp> { this };
      Utility.Write<List<PipingComp>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
}

2010-03-09 16:09:08,701 [7] ERROR org.iringtools.adapter.DTOGenerator - DTOService.cs:
2010-03-09 16:09:08,701 [7] ERROR org.iringtools.adapter.DTOGenerator - //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Xsl;
using Ninject;
using org.iringtools.library;
using org.iringtools.utility;

namespace org.iringtools.adapter.proj_CrackingComplex.SPPID
{
  public class DTOService : IDTOService
  {
    IKernel _kernel = null;
    IDataLayer _dataLayer = null;
    AdapterSettings _settings = null;
    
    [Inject]
    public DTOService(IKernel kernel, IDataLayer dataLayer, AdapterSettings settings)
    {
      _kernel = kernel;
      _dataLayer = dataLayer;
      _settings = settings;
    }
    
    public T TransformList<T>(string graphName, List<DataTransferObject> dtoList, string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + graphName + "DTO.xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      
      switch (graphName)
      {
        case "EQUIPMENT":
          List<EQUIPMENT> EQUIPMENTList = new List<EQUIPMENT>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            EQUIPMENTList.Add((EQUIPMENT)dto);
          }
          
          Utility.Write<List<EQUIPMENT>>(EQUIPMENTList, dtoPath);
          break;
        
        case "INSTRUMENT":
          List<INSTRUMENT> INSTRUMENTList = new List<INSTRUMENT>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            INSTRUMENTList.Add((INSTRUMENT)dto);
          }
          
          Utility.Write<List<INSTRUMENT>>(INSTRUMENTList, dtoPath);
          break;
        
        case "LINE":
          List<LINE> LINEList = new List<LINE>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            LINEList.Add((LINE)dto);
          }
          
          Utility.Write<List<LINE>>(LINEList, dtoPath);
          break;
        
        case "PipingComp":
          List<PipingComp> PipingCompList = new List<PipingComp>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            PipingCompList.Add((PipingComp)dto);
          }
          
          Utility.Write<List<PipingComp>>(PipingCompList, dtoPath);
          break;
      }
      
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
    
    public DataTransferObject Create(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "EQUIPMENT":
          dto = new EQUIPMENT("http://rdl.rdlfacade.org/data#R20981279868", graphName, identifier);
          break;
        
        case "INSTRUMENT":
          dto = new INSTRUMENT("http://rdl.rdlfacade.org/data#R98505918404", graphName, identifier);
          break;
        
        case "LINE":
          dto = new LINE("http://rdl.rdlfacade.org/data#R19192462550", graphName, identifier);
          break;
        
        case "PipingComp":
          dto = new PipingComp("http://rdl.rdlfacade.org/data#R65135201747", graphName, identifier);
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> CreateList(string graphName, List<string> identifiers)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();

      foreach (string identifier in identifiers)
      {
        dtoList.Add(Create(graphName, identifier));
      }

      return dtoList;
    }
    
    public DataTransferObject GetDTO(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EquipmentEQUIPMENTDO = 
            (from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
             where EquipmentList.Id == identifier
             select EquipmentList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.Equipment>();   
        
          if (EquipmentEQUIPMENTDO != default(Bechtel.IntergraphDataLayer.SPPID.Equipment))
          {                        
            dto = new EQUIPMENT(EquipmentEQUIPMENTDO);
            dto.Identifier = EquipmentEQUIPMENTDO.Id;
            break; 
          }
          
          break;
        
        case "INSTRUMENT":
          var InstrumentINSTRUMENTDO = 
            (from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
             where InstrumentList.Id == identifier
             select InstrumentList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.Instrument>();   
        
          if (InstrumentINSTRUMENTDO != default(Bechtel.IntergraphDataLayer.SPPID.Instrument))
          {                        
            dto = new INSTRUMENT(InstrumentINSTRUMENTDO);
            dto.Identifier = InstrumentINSTRUMENTDO.Id;
            break; 
          }
          
          break;
        
        case "LINE":
          var PipeRunLINEDO = 
            (from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
             where PipeRunList.Id == identifier
             select PipeRunList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.PipeRun>();   
        
          if (PipeRunLINEDO != default(Bechtel.IntergraphDataLayer.SPPID.PipeRun))
          {                        
            dto = new LINE(PipeRunLINEDO);
            dto.Identifier = PipeRunLINEDO.Id;
            break; 
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDO = 
            (from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
             where PipingCompList.Id == identifier
             select PipingCompList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.PipingComp>();   
        
          if (PipingCompPipingCompDO != default(Bechtel.IntergraphDataLayer.SPPID.PipingComp))
          {                        
            dto = new PipingComp(PipingCompPipingCompDO);
            dto.Identifier = PipingCompPipingCompDO.Id;
            break; 
          }
          
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> GetList(string graphName)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EQUIPMENTEquipmentDOList = 
            from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
            select EquipmentList;  
    
          foreach (var EquipmentDO in EQUIPMENTEquipmentDOList)
          {   					
            EQUIPMENT dto = new EQUIPMENT(EquipmentDO);
            dto.Identifier = EquipmentDO.Id;
            dtoList.Add(dto);
          }
          
          break;
        
        case "INSTRUMENT":
          var INSTRUMENTInstrumentDOList = 
            from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
            select InstrumentList;  
    
          foreach (var InstrumentDO in INSTRUMENTInstrumentDOList)
          {   					
            INSTRUMENT dto = new INSTRUMENT(InstrumentDO);
            dto.Identifier = InstrumentDO.Id;
            dtoList.Add(dto);
          }
          
          break;
        
        case "LINE":
          var LINEPipeRunDOList = 
            from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
            select PipeRunList;  
    
          foreach (var PipeRunDO in LINEPipeRunDOList)
          {   					
            LINE dto = new LINE(PipeRunDO);
            dto.Identifier = PipeRunDO.Id;
            dtoList.Add(dto);
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDOList = 
            from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
            select PipingCompList;  
    
          foreach (var PipingCompDO in PipingCompPipingCompDOList)
          {   					
            PipingComp dto = new PipingComp(PipingCompDO);
            dto.Identifier = PipingCompDO.Id;
            dtoList.Add(dto);
          }
          
          break;
      }
      
      return dtoList;
    }
    
    public Dictionary<string, string> GetListREST(string graphName)
    {
      Dictionary<string, string> identifierUriPairs = new Dictionary<string, string>();
      String endpoint = OperationContext.Current.Channel.LocalAddress.ToString();
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EQUIPMENTEquipmentDOList = 
            from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
            select EquipmentList;  

          foreach (var EquipmentDO in EQUIPMENTEquipmentDOList)
          {
            string identifier = EquipmentDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "INSTRUMENT":
          var INSTRUMENTInstrumentDOList = 
            from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
            select InstrumentList;  

          foreach (var InstrumentDO in INSTRUMENTInstrumentDOList)
          {
            string identifier = InstrumentDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "LINE":
          var LINEPipeRunDOList = 
            from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
            select PipeRunList;  

          foreach (var PipeRunDO in LINEPipeRunDOList)
          {
            string identifier = PipeRunDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDOList = 
            from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
            select PipingCompList;  

          foreach (var PipingCompDO in PipingCompPipingCompDOList)
          {
            string identifier = PipingCompDO.Id;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
      }
      
      return identifierUriPairs;
    }
    
    public Response Post(string graphName, DataTransferObject dto)
    {
      Response response = new Response();
      
      if (dto != null)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            Bechtel.IntergraphDataLayer.SPPID.Equipment EQUIPMENTDO = (Bechtel.IntergraphDataLayer.SPPID.Equipment)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.Equipment>(EQUIPMENTDO));
            break;
          
          case "INSTRUMENT":
            Bechtel.IntergraphDataLayer.SPPID.Instrument INSTRUMENTDO = (Bechtel.IntergraphDataLayer.SPPID.Instrument)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.Instrument>(INSTRUMENTDO));
            break;
          
          case "LINE":
            Bechtel.IntergraphDataLayer.SPPID.PipeRun LINEDO = (Bechtel.IntergraphDataLayer.SPPID.PipeRun)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.PipeRun>(LINEDO));
            break;
          
          case "PipingComp":
            Bechtel.IntergraphDataLayer.SPPID.PipingComp PipingCompDO = (Bechtel.IntergraphDataLayer.SPPID.PipingComp)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.PipingComp>(PipingCompDO));
            break;
        }
      }
      
      return response;
    }
    
    public Response PostList(string graphName, List<DataTransferObject> dtoList)
    {
      Response response = new Response();
      
      if (dtoList != null && dtoList.Count<DataTransferObject>() > 0)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            List<Bechtel.IntergraphDataLayer.SPPID.Equipment> EQUIPMENTDOList = new List<Bechtel.IntergraphDataLayer.SPPID.Equipment>();

            foreach (DataTransferObject dto in dtoList)
            {
              EQUIPMENTDOList.Add((Bechtel.IntergraphDataLayer.SPPID.Equipment)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.Equipment>(EQUIPMENTDOList));
            break;
          
          case "INSTRUMENT":
            List<Bechtel.IntergraphDataLayer.SPPID.Instrument> INSTRUMENTDOList = new List<Bechtel.IntergraphDataLayer.SPPID.Instrument>();

            foreach (DataTransferObject dto in dtoList)
            {
              INSTRUMENTDOList.Add((Bechtel.IntergraphDataLayer.SPPID.Instrument)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.Instrument>(INSTRUMENTDOList));
            break;
          
          case "LINE":
            List<Bechtel.IntergraphDataLayer.SPPID.PipeRun> LINEDOList = new List<Bechtel.IntergraphDataLayer.SPPID.PipeRun>();

            foreach (DataTransferObject dto in dtoList)
            {
              LINEDOList.Add((Bechtel.IntergraphDataLayer.SPPID.PipeRun)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>(LINEDOList));
            break;
          
          case "PipingComp":
            List<Bechtel.IntergraphDataLayer.SPPID.PipingComp> PipingCompDOList = new List<Bechtel.IntergraphDataLayer.SPPID.PipingComp>();

            foreach (DataTransferObject dto in dtoList)
            {
              PipingCompDOList.Add((Bechtel.IntergraphDataLayer.SPPID.PipingComp)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>(PipingCompDOList));
            break;
        }
      }
      
      return response;
    }
    
    public object CreateList(string graphName, string dtoListString)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      if (dtoListString != null && dtoListString != String.Empty)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            XmlReader EQUIPMENTReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument EQUIPMENTFile = XDocument.Load(EQUIPMENTReader);
            EQUIPMENTFile = Utility.RemoveNamespace(EQUIPMENTFile);
            List<EQUIPMENT> EQUIPMENTList = new List<EQUIPMENT>(); 
            var EQUIPMENTQuery = from c in EQUIPMENTFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in EQUIPMENTQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              EQUIPMENT graphObject = new EQUIPMENT();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              EQUIPMENTList.Add(graphObject);
            }

            foreach (EQUIPMENT dto in EQUIPMENTList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "INSTRUMENT":
            XmlReader INSTRUMENTReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument INSTRUMENTFile = XDocument.Load(INSTRUMENTReader);
            INSTRUMENTFile = Utility.RemoveNamespace(INSTRUMENTFile);
            List<INSTRUMENT> INSTRUMENTList = new List<INSTRUMENT>(); 
            var INSTRUMENTQuery = from c in INSTRUMENTFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in INSTRUMENTQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              INSTRUMENT graphObject = new INSTRUMENT();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              INSTRUMENTList.Add(graphObject);
            }

            foreach (INSTRUMENT dto in INSTRUMENTList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "LINE":
            XmlReader LINEReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument LINEFile = XDocument.Load(LINEReader);
            LINEFile = Utility.RemoveNamespace(LINEFile);
            List<LINE> LINEList = new List<LINE>(); 
            var LINEQuery = from c in LINEFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in LINEQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              LINE graphObject = new LINE();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              LINEList.Add(graphObject);
            }

            foreach (LINE dto in LINEList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "PipingComp":
            XmlReader PipingCompReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument PipingCompFile = XDocument.Load(PipingCompReader);
            PipingCompFile = Utility.RemoveNamespace(PipingCompFile);
            List<PipingComp> PipingCompList = new List<PipingComp>(); 
            var PipingCompQuery = from c in PipingCompFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in PipingCompQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              PipingComp graphObject = new PipingComp();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              PipingCompList.Add(graphObject);
            }

            foreach (PipingComp dto in PipingCompList)
            {
              dtoList.Add(dto);
            }
            
            break;
        }
      }
      
      return dtoList;
    }
    
    public DataDictionary GetDictionary()
    {
      return _dataLayer.GetDictionary();
    }

    public Response RefreshDictionary()
    {
      return _dataLayer.RefreshDictionary();
    }
  }
}

2010-03-09 16:09:08,701 [7] ERROR org.iringtools.adapter.AdapterProvider - Error in Generate: System.Exception: CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)

   at org.iringtools.adapter.DTOGenerator.Generate(String projectName, String applicationName)
   at org.iringtools.adapter.AdapterProvider.Generate(String projectName, String applicationName)
2010-03-09 16:12:41,313 [7] ERROR org.iringtools.adapter.DTOGenerator - System.Exception: CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)
CS0246: The type or namespace name 'Bechtel' could not be found (are you missing a using directive or an assembly reference?)

   at org.iringtools.utility.Utility.Compile(Dictionary`2 compilerOptions, CompilerParameters compilerParameters, String[] sources)
   at org.iringtools.adapter.DTOGenerator.Generate(String projectName, String applicationName)
2010-03-09 16:12:41,329 [7] ERROR org.iringtools.adapter.DTOGenerator - DTOModel.cs:
2010-03-09 16:12:41,329 [7] ERROR org.iringtools.adapter.DTOGenerator - //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Xml.Xsl;
using org.iringtools.library;
using org.iringtools.utility;

namespace org.iringtools.adapter.proj_CrackingComplex.SPPID
{
  [DataContract(Name = "EQUIPMENT", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class EQUIPMENT : DataTransferObject
  {
    [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    public class TemplateThermalInsulationContainment2
    {
      [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      public class ClassTHERMALINSULATIONMATERIAL
      {
        [DataMember(EmitDefaultValue=false)]
        [XmlIgnore]
        public string Identifier { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness3_tpl_hasScale { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness3_tpl_hasType { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public Double tpl_NominalThickness3_tpl_valValue { get; set; }
      }
      
      [DataMember(Name = "tpl_container_rdl_THERMALINSULATIONMATERIAL", EmitDefaultValue = false)]
      [XmlIgnore]
      public ClassTHERMALINSULATIONMATERIAL tpl_container_rdl_THERMALINSULATIONMATERIAL { get; set; }
    }
    
    [DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateThermalInsulationContainment2 tpl_ThermalInsulationContainment2 { get; set; }
    
    public EQUIPMENT(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag0.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag0.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"Description", @"tpl:ClassifiedDescription1.tpl:description", null, typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription1.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R75626151549>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"InsulThick", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:valValue", null, typeof(Double), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment2.tpl:containmentType", @"<http://rdl.rdlfacade.org/data#R12086239421>", typeof(String), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public EQUIPMENT(Bechtel.IntergraphDataLayer.SPPID.Equipment dataObject) : this("http://rdl.rdlfacade.org/data#R20981279868", "EQUIPMENT", null, dataObject) {}
    
    public EQUIPMENT(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.Equipment dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag0_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ClassifiedDescription1_tpl_description = Convert.ToString(dataObject.Description);
        tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue = Convert.ToDouble(dataObject.InsulThick);
      }
      tpl_ThermalInsulationContainment2 = new TemplateThermalInsulationContainment2();
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL = new TemplateThermalInsulationContainment2.ClassTHERMALINSULATIONMATERIAL();
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.Identifier = ((GetPropertyValueByInternalName("ItemTag") != null) ? GetPropertyValueByInternalName("ItemTag").ToString() : "");
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness3_tpl_hasScale = Convert.ToString(tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasScale);
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness3_tpl_hasType = Convert.ToString(tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasType);
      tpl_ThermalInsulationContainment2.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness3_tpl_valValue = Convert.ToDouble(tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue);
      _dataObject = dataObject;
    }
    
    public EQUIPMENT() : this("http://rdl.rdlfacade.org/data#R20981279868", "EQUIPMENT", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag0_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag0_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag0.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag0.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag0_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag0_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag0.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag0.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription1_tpl_description", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription1_tpl_description
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription1.tpl:description");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription1.tpl:description", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription1_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription1_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription1.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription1.tpl:descriptionType", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasScale", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:hasType", value);
      }
    }
    
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness3.tpl:valValue", value);
      }
    }
    
    [DataMember(Name = "tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment2_tpl_containmentType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment2_tpl_containmentType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment2.tpl:containmentType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment2.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment2.tpl:containmentType", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.Equipment();
        ((Bechtel.IntergraphDataLayer.SPPID.Equipment)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.Equipment)_dataObject).Description = Convert.ToString(this.tpl_ClassifiedDescription1_tpl_description);
      ((Bechtel.IntergraphDataLayer.SPPID.Equipment)_dataObject).InsulThick = Convert.ToString(this.tpl_ThermalInsulationContainment2_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness3_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<EQUIPMENT>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<EQUIPMENT>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<EQUIPMENT> list = new List<EQUIPMENT> { this };
      Utility.Write<List<EQUIPMENT>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
  
  [DataContract(Name = "INSTRUMENT", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class INSTRUMENT : DataTransferObject
  {
    [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    public class TemplateThermalInsulationContainment6
    {
      [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      public class ClassTHERMALINSULATIONMATERIAL
      {
        [DataMember(EmitDefaultValue=false)]
        [XmlIgnore]
        public string Identifier { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness7_tpl_hasScale { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness7_tpl_hasType { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public Double tpl_NominalThickness7_tpl_valValue { get; set; }
      }
      
      [DataMember(Name = "tpl_container_rdl_THERMALINSULATIONMATERIAL", EmitDefaultValue = false)]
      [XmlIgnore]
      public ClassTHERMALINSULATIONMATERIAL tpl_container_rdl_THERMALINSULATIONMATERIAL { get; set; }
    }
    
    [DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateThermalInsulationContainment6 tpl_ThermalInsulationContainment6 { get; set; }
    
    public INSTRUMENT(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag4.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag4.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"Description", @"tpl:ClassifiedDescription5.tpl:description", null, typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription5.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R75626151549>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"InsulThick", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:valValue", null, typeof(Double), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment6.tpl:containmentType", @"<http://rdl.rdlfacade.org/data#R12086239421>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter8.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter8.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R17622148043>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"NominalDiameter", @"tpl:NominalDiameter8.tpl:valValue", null, typeof(Double), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public INSTRUMENT(Bechtel.IntergraphDataLayer.SPPID.Instrument dataObject) : this("http://rdl.rdlfacade.org/data#R98505918404", "INSTRUMENT", null, dataObject) {}
    
    public INSTRUMENT(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.Instrument dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag4_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ClassifiedDescription5_tpl_description = Convert.ToString(dataObject.Description);
        tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue = Convert.ToDouble(dataObject.InsulThick);
        tpl_NominalDiameter8_tpl_valValue = Convert.ToDouble(dataObject.NominalDiameter);
      }
      tpl_ThermalInsulationContainment6 = new TemplateThermalInsulationContainment6();
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL = new TemplateThermalInsulationContainment6.ClassTHERMALINSULATIONMATERIAL();
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.Identifier = ((GetPropertyValueByInternalName("ItemTag") != null) ? GetPropertyValueByInternalName("ItemTag").ToString() : "");
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness7_tpl_hasScale = Convert.ToString(tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasScale);
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness7_tpl_hasType = Convert.ToString(tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasType);
      tpl_ThermalInsulationContainment6.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness7_tpl_valValue = Convert.ToDouble(tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue);
      _dataObject = dataObject;
    }
    
    public INSTRUMENT() : this("http://rdl.rdlfacade.org/data#R98505918404", "INSTRUMENT", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag4_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag4_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag4.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag4.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag4_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag4_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag4.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag4.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription5_tpl_description", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription5_tpl_description
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription5.tpl:description");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription5.tpl:description", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription5_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription5_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription5.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription5.tpl:descriptionType", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasScale", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:hasType", value);
      }
    }
    
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness7.tpl:valValue", value);
      }
    }
    
    [DataMember(Name = "tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment6_tpl_containmentType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment6_tpl_containmentType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment6.tpl:containmentType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment6.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment6.tpl:containmentType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter8_tpl_hasScale", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter8_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter8.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter8.tpl:hasScale", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter8_tpl_hasType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter8_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter8.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter8.tpl:hasType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter8_tpl_valValue", EmitDefaultValue = false)]
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_NominalDiameter8_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:NominalDiameter8.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter8.tpl:valValue", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.Instrument();
        ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).Description = Convert.ToString(this.tpl_ClassifiedDescription5_tpl_description);
      ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).InsulThick = Convert.ToString(this.tpl_ThermalInsulationContainment6_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness7_tpl_valValue);
      ((Bechtel.IntergraphDataLayer.SPPID.Instrument)_dataObject).NominalDiameter = Convert.ToString(this.tpl_NominalDiameter8_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<INSTRUMENT>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<INSTRUMENT>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<INSTRUMENT> list = new List<INSTRUMENT> { this };
      Utility.Write<List<INSTRUMENT>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
  
  [DataContract(Name = "LINE", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class LINE : DataTransferObject
  {
    [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
    public class TemplateThermalInsulationContainment11
    {
      [DataContract(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
      public class ClassTHERMALINSULATIONMATERIAL
      {
        [DataMember(EmitDefaultValue=false)]
        [XmlIgnore]
        public string Identifier { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness12_tpl_hasScale { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public String tpl_NominalThickness12_tpl_hasType { get; set; }
        
        [DataMember(EmitDefaultValue = false)]
        public Double tpl_NominalThickness12_tpl_valValue { get; set; }
      }
      
      [DataMember(Name = "tpl_container_rdl_THERMALINSULATIONMATERIAL", EmitDefaultValue = false)]
      [XmlIgnore]
      public ClassTHERMALINSULATIONMATERIAL tpl_container_rdl_THERMALINSULATIONMATERIAL { get; set; }
    }
    
    [DataMember(EmitDefaultValue = false)]
    [XmlIgnore]
    public TemplateThermalInsulationContainment11 tpl_ThermalInsulationContainment11 { get; set; }
    
    public LINE(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag9.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag9.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription10.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R75626151549>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"InsulThick", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:valValue", null, typeof(Double), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment11.tpl:containmentType", @"<http://rdl.rdlfacade.org/data#R12086239421>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter13.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter13.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R17622148043>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"NominalDiameter", @"tpl:NominalDiameter13.tpl:valValue", null, typeof(Double), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public LINE(Bechtel.IntergraphDataLayer.SPPID.PipeRun dataObject) : this("http://rdl.rdlfacade.org/data#R19192462550", "LINE", null, dataObject) {}
    
    public LINE(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.PipeRun dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag9_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue = Convert.ToDouble(dataObject.InsulThick);
        tpl_NominalDiameter13_tpl_valValue = Convert.ToDouble(dataObject.NominalDiameter);
      }
      tpl_ThermalInsulationContainment11 = new TemplateThermalInsulationContainment11();
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL = new TemplateThermalInsulationContainment11.ClassTHERMALINSULATIONMATERIAL();
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.Identifier = ((GetPropertyValueByInternalName("ItemTag") != null) ? GetPropertyValueByInternalName("ItemTag").ToString() : "");
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness12_tpl_hasScale = Convert.ToString(tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasScale);
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness12_tpl_hasType = Convert.ToString(tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasType);
      tpl_ThermalInsulationContainment11.tpl_container_rdl_THERMALINSULATIONMATERIAL.tpl_NominalThickness12_tpl_valValue = Convert.ToDouble(tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue);
      _dataObject = dataObject;
    }
    
    public LINE() : this("http://rdl.rdlfacade.org/data#R19192462550", "LINE", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag9_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag9_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag9.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag9.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag9_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag9_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag9.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag9.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription10_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription10_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription10.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription10.tpl:descriptionType", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasScale", value);
      }
    }
    
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:hasType", value);
      }
    }
    
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:NominalThickness12.tpl:valValue", value);
      }
    }
    
    [DataMember(Name = "tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment11_tpl_containmentType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_ThermalInsulationContainment11_tpl_containmentType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment11.tpl:containmentType");
      }
      set
      {
        SetPropertyValue(@"tpl:ThermalInsulationContainment11.tpl:container.rdl:THERMALINSULATIONMATERIAL.tpl:ThermalInsulationContainment11.tpl:containmentType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter13_tpl_hasScale", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter13_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter13.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter13.tpl:hasScale", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter13_tpl_hasType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter13_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter13.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter13.tpl:hasType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter13_tpl_valValue", EmitDefaultValue = false)]
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_NominalDiameter13_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:NominalDiameter13.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter13.tpl:valValue", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.PipeRun();
        ((Bechtel.IntergraphDataLayer.SPPID.PipeRun)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.PipeRun)_dataObject).InsulThick = Convert.ToString(this.tpl_ThermalInsulationContainment11_tpl_container_rdl_THERMALINSULATIONMATERIAL_tpl_NominalThickness12_tpl_valValue);
      ((Bechtel.IntergraphDataLayer.SPPID.PipeRun)_dataObject).NominalDiameter = Convert.ToString(this.tpl_NominalDiameter13_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<LINE>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<LINE>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<LINE> list = new List<LINE> { this };
      Utility.Write<List<LINE>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
  
  [DataContract(Name = "PipingComp", Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#" )]
  [XmlRoot(Namespace = "http://SPPID.iringtools.org/CrackingComplex/data#")]
  public class PipingComp : DataTransferObject
  {
    public PipingComp(string classId, string graphName, string identifier) : base(classId, graphName)
    {
      _properties.Add(new DTOProperty(@"", @"tpl:IdentificationByTag14.tpl:hasIdentificationType", @"<http://rdl.rdlfacade.org/data#R40471041754>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"ItemTag", @"tpl:IdentificationByTag14.tpl:valIdentifier", null, typeof(String), true, true));
      _properties.Add(new DTOProperty(@"Description", @"tpl:ClassifiedDescription15.tpl:description", null, typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:ClassifiedDescription15.tpl:descriptionType", @"<http://rdl.rdlfacade.org/data#R11498442042>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter16.tpl:hasScale", @"<http://rdl.rdlfacade.org/data#R34755432270>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"", @"tpl:NominalDiameter16.tpl:hasType", @"<http://rdl.rdlfacade.org/data#R17622148043>", typeof(String), false, false));
      _properties.Add(new DTOProperty(@"NominalDiameter", @"tpl:NominalDiameter16.tpl:valValue", null, typeof(Double), false, false));
      Identifier = identifier;
      ClassId = classId;
    }
    
    public PipingComp(Bechtel.IntergraphDataLayer.SPPID.PipingComp dataObject) : this("http://rdl.rdlfacade.org/data#R65135201747", "PipingComp", null, dataObject) {}
    
    public PipingComp(string classId, string graphName, string identifier, Bechtel.IntergraphDataLayer.SPPID.PipingComp dataObject) : this(classId, graphName, identifier)
    {
      if (dataObject != null)
      {
        tpl_IdentificationByTag14_tpl_valIdentifier = Convert.ToString(dataObject.Id);
        tpl_ClassifiedDescription15_tpl_description = Convert.ToString(dataObject.Description);
        tpl_NominalDiameter16_tpl_valValue = Convert.ToDouble(dataObject.NominalDiameter);
      }
      _dataObject = dataObject;
    }
    
    public PipingComp() : this("http://rdl.rdlfacade.org/data#R65135201747", "PipingComp", null) {}
    
    [DataMember(Name = "tpl_IdentificationByTag14_tpl_hasIdentificationType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag14_tpl_hasIdentificationType
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag14.tpl:hasIdentificationType");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag14.tpl:hasIdentificationType", value);
      }
    }
    
    [DataMember(Name = "tpl_IdentificationByTag14_tpl_valIdentifier", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_IdentificationByTag14_tpl_valIdentifier
    {
      get
      {
        return (String)GetPropertyValue("tpl:IdentificationByTag14.tpl:valIdentifier");
      }
      set
      {
        SetPropertyValue(@"tpl:IdentificationByTag14.tpl:valIdentifier", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription15_tpl_description", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription15_tpl_description
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription15.tpl:description");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription15.tpl:description", value);
      }
    }
    
    [DataMember(Name = "tpl_ClassifiedDescription15_tpl_descriptionType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_ClassifiedDescription15_tpl_descriptionType
    {
      get
      {
        return (String)GetPropertyValue("tpl:ClassifiedDescription15.tpl:descriptionType");
      }
      set
      {
        SetPropertyValue(@"tpl:ClassifiedDescription15.tpl:descriptionType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter16_tpl_hasScale", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter16_tpl_hasScale
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter16.tpl:hasScale");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter16.tpl:hasScale", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter16_tpl_hasType", EmitDefaultValue = false)]
    [XmlIgnore]
    public String tpl_NominalDiameter16_tpl_hasType
    {
      get
      {
        return (String)GetPropertyValue("tpl:NominalDiameter16.tpl:hasType");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter16.tpl:hasType", value);
      }
    }
    
    [DataMember(Name = "tpl_NominalDiameter16_tpl_valValue", EmitDefaultValue = false)]
    [XmlIgnore]
    public global::System.Nullable<Double> tpl_NominalDiameter16_tpl_valValue
    {
      get
      {
        return (global::System.Nullable<Double>)GetPropertyValue("tpl:NominalDiameter16.tpl:valValue");
      }
      set
      {
        SetPropertyValue(@"tpl:NominalDiameter16.tpl:valValue", value);
      }
    }
    
    public override object GetDataObject()
    {
      if (_dataObject == null)
      {
        _dataObject = new Bechtel.IntergraphDataLayer.SPPID.PipingComp();
        ((Bechtel.IntergraphDataLayer.SPPID.PipingComp)_dataObject).Id = Convert.ToString(this.Identifier);
      }
      ((Bechtel.IntergraphDataLayer.SPPID.PipingComp)_dataObject).Description = Convert.ToString(this.tpl_ClassifiedDescription15_tpl_description);
      ((Bechtel.IntergraphDataLayer.SPPID.PipingComp)_dataObject).NominalDiameter = Convert.ToString(this.tpl_NominalDiameter16_tpl_valValue);
      return _dataObject;
    }
    
    public override string Serialize()
    {
      return Utility.SerializeDataContract<PipingComp>(this);
    }
    
    public override void Write(string path)
    {
      Utility.Write<PipingComp>(this, path);
    }
    
    public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + this.GraphName + ".xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      List<PipingComp> list = new List<PipingComp> { this };
      Utility.Write<List<PipingComp>>(list, dtoPath);
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
  }
}

