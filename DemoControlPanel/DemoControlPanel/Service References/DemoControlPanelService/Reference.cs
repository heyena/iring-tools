//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace DemoControlPanel.DemoControlPanelService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfiguredEndpoints", Namespace="http://schemas.datacontract.org/2004/07/DemoControlPanel.Web")]
    public partial class ConfiguredEndpoints : object, System.ComponentModel.INotifyPropertyChanged {
        
        private DemoControlPanel.DemoControlPanelService.iRINGEndpoints adapterEndpointsField;
        
        private DemoControlPanel.DemoControlPanelService.iRINGEndpoints interfaceEndpointsField;
        
        private DemoControlPanel.DemoControlPanelService.Scenarios scenariosField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DemoControlPanel.DemoControlPanelService.iRINGEndpoints adapterEndpoints {
            get {
                return this.adapterEndpointsField;
            }
            set {
                if ((object.ReferenceEquals(this.adapterEndpointsField, value) != true)) {
                    this.adapterEndpointsField = value;
                    this.RaisePropertyChanged("adapterEndpoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DemoControlPanel.DemoControlPanelService.iRINGEndpoints interfaceEndpoints {
            get {
                return this.interfaceEndpointsField;
            }
            set {
                if ((object.ReferenceEquals(this.interfaceEndpointsField, value) != true)) {
                    this.interfaceEndpointsField = value;
                    this.RaisePropertyChanged("interfaceEndpoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DemoControlPanel.DemoControlPanelService.Scenarios scenarios {
            get {
                return this.scenariosField;
            }
            set {
                if ((object.ReferenceEquals(this.scenariosField, value) != true)) {
                    this.scenariosField = value;
                    this.RaisePropertyChanged("scenarios");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="iRINGEndpoints", Namespace="http://schemas.datacontract.org/2004/07/DemoControlPanel.Web", ItemName="iRINGEndpoint")]
    public class iRINGEndpoints : System.Collections.ObjectModel.ObservableCollection<DemoControlPanel.DemoControlPanelService.iRINGEndpoint> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Scenarios", Namespace="http://schemas.datacontract.org/2004/07/DemoControlPanel.Web", ItemName="Scenario")]
    public class Scenarios : System.Collections.ObjectModel.ObservableCollection<DemoControlPanel.DemoControlPanelService.Scenario> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="iRINGEndpoint", Namespace="http://schemas.datacontract.org/2004/07/DemoControlPanel.Web")]
    public partial class iRINGEndpoint : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string applicationNameField;
        
        private DemoControlPanel.DemoControlPanelService.WebCredentials credentialsField;
        
        private bool exportEnabledField;
        
        private string idField;
        
        private bool importEnabledField;
        
        private string nameField;
        
        private string projectNameField;
        
        private string serviceUriField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string applicationName {
            get {
                return this.applicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.applicationNameField, value) != true)) {
                    this.applicationNameField = value;
                    this.RaisePropertyChanged("applicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DemoControlPanel.DemoControlPanelService.WebCredentials credentials {
            get {
                return this.credentialsField;
            }
            set {
                if ((object.ReferenceEquals(this.credentialsField, value) != true)) {
                    this.credentialsField = value;
                    this.RaisePropertyChanged("credentials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool exportEnabled {
            get {
                return this.exportEnabledField;
            }
            set {
                if ((this.exportEnabledField.Equals(value) != true)) {
                    this.exportEnabledField = value;
                    this.RaisePropertyChanged("exportEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool importEnabled {
            get {
                return this.importEnabledField;
            }
            set {
                if ((this.importEnabledField.Equals(value) != true)) {
                    this.importEnabledField = value;
                    this.RaisePropertyChanged("importEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string projectName {
            get {
                return this.projectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.projectNameField, value) != true)) {
                    this.projectNameField = value;
                    this.RaisePropertyChanged("projectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string serviceUri {
            get {
                return this.serviceUriField;
            }
            set {
                if ((object.ReferenceEquals(this.serviceUriField, value) != true)) {
                    this.serviceUriField = value;
                    this.RaisePropertyChanged("serviceUri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebCredentials", Namespace="http://schemas.datacontract.org/2004/07/org.iringtools.utility")]
    public partial class WebCredentials : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string domainField;
        
        private string encryptedTokenField;
        
        private bool isEncryptedField;
        
        private string passwordField;
        
        private string userNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string domain {
            get {
                return this.domainField;
            }
            set {
                if ((object.ReferenceEquals(this.domainField, value) != true)) {
                    this.domainField = value;
                    this.RaisePropertyChanged("domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string encryptedToken {
            get {
                return this.encryptedTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.encryptedTokenField, value) != true)) {
                    this.encryptedTokenField = value;
                    this.RaisePropertyChanged("encryptedToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool isEncrypted {
            get {
                return this.isEncryptedField;
            }
            set {
                if ((this.isEncryptedField.Equals(value) != true)) {
                    this.isEncryptedField = value;
                    this.RaisePropertyChanged("isEncrypted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Scenario", Namespace="http://schemas.datacontract.org/2004/07/DemoControlPanel.Web")]
    public partial class Scenario : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string interfaceServiceIdField;
        
        private string receiverField;
        
        private string receiverAdapterServiceIdField;
        
        private string scenarioNameField;
        
        private string senderField;
        
        private string senderAdapterServiceIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string interfaceServiceId {
            get {
                return this.interfaceServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.interfaceServiceIdField, value) != true)) {
                    this.interfaceServiceIdField = value;
                    this.RaisePropertyChanged("interfaceServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string receiver {
            get {
                return this.receiverField;
            }
            set {
                if ((object.ReferenceEquals(this.receiverField, value) != true)) {
                    this.receiverField = value;
                    this.RaisePropertyChanged("receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string receiverAdapterServiceId {
            get {
                return this.receiverAdapterServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.receiverAdapterServiceIdField, value) != true)) {
                    this.receiverAdapterServiceIdField = value;
                    this.RaisePropertyChanged("receiverAdapterServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string scenarioName {
            get {
                return this.scenarioNameField;
            }
            set {
                if ((object.ReferenceEquals(this.scenarioNameField, value) != true)) {
                    this.scenarioNameField = value;
                    this.RaisePropertyChanged("scenarioName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sender {
            get {
                return this.senderField;
            }
            set {
                if ((object.ReferenceEquals(this.senderField, value) != true)) {
                    this.senderField = value;
                    this.RaisePropertyChanged("sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string senderAdapterServiceId {
            get {
                return this.senderAdapterServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.senderAdapterServiceIdField, value) != true)) {
                    this.senderAdapterServiceIdField = value;
                    this.RaisePropertyChanged("senderAdapterServiceId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Response", Namespace="http://schemas.datacontract.org/2004/07/org.iringtools.library", ItemName="string")]
    public class Response : System.Collections.ObjectModel.ObservableCollection<string> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DemoControlPanelService.IDemoControlPanelService")]
    public interface IDemoControlPanelService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/GetConfiguredEndpoints", ReplyAction="http://tempuri.org/IDemoControlPanelService/GetConfiguredEndpointsResponse")]
        System.IAsyncResult BeginGetConfiguredEndpoints(System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints EndGetConfiguredEndpoints(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/GetManifest", ReplyAction="http://tempuri.org/IDemoControlPanelService/GetManifestResponse")]
        System.IAsyncResult BeginGetManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndGetManifest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/GetSenderManifest", ReplyAction="http://tempuri.org/IDemoControlPanelService/GetSenderManifestResponse")]
        System.IAsyncResult BeginGetSenderManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndGetSenderManifest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/GetReceiverManifest", ReplyAction="http://tempuri.org/IDemoControlPanelService/GetReceiverManifestResponse")]
        System.IAsyncResult BeginGetReceiverManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndGetReceiverManifest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/Refresh", ReplyAction="http://tempuri.org/IDemoControlPanelService/RefreshResponse")]
        System.IAsyncResult BeginRefresh(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, string identifier, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndRefresh(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/Reset", ReplyAction="http://tempuri.org/IDemoControlPanelService/ResetResponse")]
        System.IAsyncResult BeginReset(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndReset(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/Pull", ReplyAction="http://tempuri.org/IDemoControlPanelService/PullResponse")]
        System.IAsyncResult BeginPull(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, DemoControlPanel.DemoControlPanelService.iRINGEndpoint targetEnpoint, string graphName, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndPull(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/Export", ReplyAction="http://tempuri.org/IDemoControlPanelService/ExportResponse")]
        System.IAsyncResult BeginExport(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndExport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/Import", ReplyAction="http://tempuri.org/IDemoControlPanelService/ImportResponse")]
        System.IAsyncResult BeginImport(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndImport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/Query", ReplyAction="http://tempuri.org/IDemoControlPanelService/QueryResponse")]
        System.IAsyncResult BeginQuery(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>> EndQuery(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/Update", ReplyAction="http://tempuri.org/IDemoControlPanelService/UpdateResponse")]
        System.IAsyncResult BeginUpdate(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDemoControlPanelService/GetQXF", ReplyAction="http://tempuri.org/IDemoControlPanelService/GetQXFResponse")]
        System.IAsyncResult BeginGetQXF(byte[] stream, System.AsyncCallback callback, object asyncState);
        
        DemoControlPanel.DemoControlPanelService.Response EndGetQXF(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDemoControlPanelServiceChannel : DemoControlPanel.DemoControlPanelService.IDemoControlPanelService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetConfiguredEndpointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfiguredEndpointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetSenderManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSenderManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetReceiverManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReceiverManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RefreshCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RefreshCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class PullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class QueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetQXFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQXFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DemoControlPanel.DemoControlPanelService.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DemoControlPanel.DemoControlPanelService.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DemoControlPanelServiceClient : System.ServiceModel.ClientBase<DemoControlPanel.DemoControlPanelService.IDemoControlPanelService>, DemoControlPanel.DemoControlPanelService.IDemoControlPanelService {
        
        private BeginOperationDelegate onBeginGetConfiguredEndpointsDelegate;
        
        private EndOperationDelegate onEndGetConfiguredEndpointsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfiguredEndpointsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetManifestDelegate;
        
        private EndOperationDelegate onEndGetManifestDelegate;
        
        private System.Threading.SendOrPostCallback onGetManifestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSenderManifestDelegate;
        
        private EndOperationDelegate onEndGetSenderManifestDelegate;
        
        private System.Threading.SendOrPostCallback onGetSenderManifestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReceiverManifestDelegate;
        
        private EndOperationDelegate onEndGetReceiverManifestDelegate;
        
        private System.Threading.SendOrPostCallback onGetReceiverManifestCompletedDelegate;
        
        private BeginOperationDelegate onBeginRefreshDelegate;
        
        private EndOperationDelegate onEndRefreshDelegate;
        
        private System.Threading.SendOrPostCallback onRefreshCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetDelegate;
        
        private EndOperationDelegate onEndResetDelegate;
        
        private System.Threading.SendOrPostCallback onResetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPullDelegate;
        
        private EndOperationDelegate onEndPullDelegate;
        
        private System.Threading.SendOrPostCallback onPullCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportDelegate;
        
        private EndOperationDelegate onEndExportDelegate;
        
        private System.Threading.SendOrPostCallback onExportCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportDelegate;
        
        private EndOperationDelegate onEndImportDelegate;
        
        private System.Threading.SendOrPostCallback onImportCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryDelegate;
        
        private EndOperationDelegate onEndQueryDelegate;
        
        private System.Threading.SendOrPostCallback onQueryCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDelegate;
        
        private EndOperationDelegate onEndUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQXFDelegate;
        
        private EndOperationDelegate onEndGetQXFDelegate;
        
        private System.Threading.SendOrPostCallback onGetQXFCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DemoControlPanelServiceClient() {
        }
        
        public DemoControlPanelServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DemoControlPanelServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DemoControlPanelServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DemoControlPanelServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetConfiguredEndpointsCompletedEventArgs> GetConfiguredEndpointsCompleted;
        
        public event System.EventHandler<GetManifestCompletedEventArgs> GetManifestCompleted;
        
        public event System.EventHandler<GetSenderManifestCompletedEventArgs> GetSenderManifestCompleted;
        
        public event System.EventHandler<GetReceiverManifestCompletedEventArgs> GetReceiverManifestCompleted;
        
        public event System.EventHandler<RefreshCompletedEventArgs> RefreshCompleted;
        
        public event System.EventHandler<ResetCompletedEventArgs> ResetCompleted;
        
        public event System.EventHandler<PullCompletedEventArgs> PullCompleted;
        
        public event System.EventHandler<ExportCompletedEventArgs> ExportCompleted;
        
        public event System.EventHandler<ImportCompletedEventArgs> ImportCompleted;
        
        public event System.EventHandler<QueryCompletedEventArgs> QueryCompleted;
        
        public event System.EventHandler<UpdateCompletedEventArgs> UpdateCompleted;
        
        public event System.EventHandler<GetQXFCompletedEventArgs> GetQXFCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginGetConfiguredEndpoints(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfiguredEndpoints(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndGetConfiguredEndpoints(System.IAsyncResult result) {
            return base.Channel.EndGetConfiguredEndpoints(result);
        }
        
        private System.IAsyncResult OnBeginGetConfiguredEndpoints(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginGetConfiguredEndpoints(callback, asyncState);
        }
        
        private object[] OnEndGetConfiguredEndpoints(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndGetConfiguredEndpoints(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfiguredEndpointsCompleted(object state) {
            if ((this.GetConfiguredEndpointsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfiguredEndpointsCompleted(this, new GetConfiguredEndpointsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfiguredEndpointsAsync() {
            this.GetConfiguredEndpointsAsync(null);
        }
        
        public void GetConfiguredEndpointsAsync(object userState) {
            if ((this.onBeginGetConfiguredEndpointsDelegate == null)) {
                this.onBeginGetConfiguredEndpointsDelegate = new BeginOperationDelegate(this.OnBeginGetConfiguredEndpoints);
            }
            if ((this.onEndGetConfiguredEndpointsDelegate == null)) {
                this.onEndGetConfiguredEndpointsDelegate = new EndOperationDelegate(this.OnEndGetConfiguredEndpoints);
            }
            if ((this.onGetConfiguredEndpointsCompletedDelegate == null)) {
                this.onGetConfiguredEndpointsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfiguredEndpointsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfiguredEndpointsDelegate, null, this.onEndGetConfiguredEndpointsDelegate, this.onGetConfiguredEndpointsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginGetManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetManifest(endpoint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndGetManifest(System.IAsyncResult result) {
            return base.Channel.EndGetManifest(result);
        }
        
        private System.IAsyncResult OnBeginGetManifest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginGetManifest(endpoint, callback, asyncState);
        }
        
        private object[] OnEndGetManifest(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndGetManifest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetManifestCompleted(object state) {
            if ((this.GetManifestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetManifestCompleted(this, new GetManifestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetManifestAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint) {
            this.GetManifestAsync(endpoint, null);
        }
        
        public void GetManifestAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, object userState) {
            if ((this.onBeginGetManifestDelegate == null)) {
                this.onBeginGetManifestDelegate = new BeginOperationDelegate(this.OnBeginGetManifest);
            }
            if ((this.onEndGetManifestDelegate == null)) {
                this.onEndGetManifestDelegate = new EndOperationDelegate(this.OnEndGetManifest);
            }
            if ((this.onGetManifestCompletedDelegate == null)) {
                this.onGetManifestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetManifestCompleted);
            }
            base.InvokeAsync(this.onBeginGetManifestDelegate, new object[] {
                        endpoint}, this.onEndGetManifestDelegate, this.onGetManifestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginGetSenderManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSenderManifest(endpoint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndGetSenderManifest(System.IAsyncResult result) {
            return base.Channel.EndGetSenderManifest(result);
        }
        
        private System.IAsyncResult OnBeginGetSenderManifest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginGetSenderManifest(endpoint, callback, asyncState);
        }
        
        private object[] OnEndGetSenderManifest(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndGetSenderManifest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSenderManifestCompleted(object state) {
            if ((this.GetSenderManifestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSenderManifestCompleted(this, new GetSenderManifestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSenderManifestAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint) {
            this.GetSenderManifestAsync(endpoint, null);
        }
        
        public void GetSenderManifestAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, object userState) {
            if ((this.onBeginGetSenderManifestDelegate == null)) {
                this.onBeginGetSenderManifestDelegate = new BeginOperationDelegate(this.OnBeginGetSenderManifest);
            }
            if ((this.onEndGetSenderManifestDelegate == null)) {
                this.onEndGetSenderManifestDelegate = new EndOperationDelegate(this.OnEndGetSenderManifest);
            }
            if ((this.onGetSenderManifestCompletedDelegate == null)) {
                this.onGetSenderManifestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSenderManifestCompleted);
            }
            base.InvokeAsync(this.onBeginGetSenderManifestDelegate, new object[] {
                        endpoint}, this.onEndGetSenderManifestDelegate, this.onGetSenderManifestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginGetReceiverManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReceiverManifest(endpoint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndGetReceiverManifest(System.IAsyncResult result) {
            return base.Channel.EndGetReceiverManifest(result);
        }
        
        private System.IAsyncResult OnBeginGetReceiverManifest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginGetReceiverManifest(endpoint, callback, asyncState);
        }
        
        private object[] OnEndGetReceiverManifest(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndGetReceiverManifest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReceiverManifestCompleted(object state) {
            if ((this.GetReceiverManifestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReceiverManifestCompleted(this, new GetReceiverManifestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReceiverManifestAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint) {
            this.GetReceiverManifestAsync(endpoint, null);
        }
        
        public void GetReceiverManifestAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, object userState) {
            if ((this.onBeginGetReceiverManifestDelegate == null)) {
                this.onBeginGetReceiverManifestDelegate = new BeginOperationDelegate(this.OnBeginGetReceiverManifest);
            }
            if ((this.onEndGetReceiverManifestDelegate == null)) {
                this.onEndGetReceiverManifestDelegate = new EndOperationDelegate(this.OnEndGetReceiverManifest);
            }
            if ((this.onGetReceiverManifestCompletedDelegate == null)) {
                this.onGetReceiverManifestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReceiverManifestCompleted);
            }
            base.InvokeAsync(this.onBeginGetReceiverManifestDelegate, new object[] {
                        endpoint}, this.onEndGetReceiverManifestDelegate, this.onGetReceiverManifestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginRefresh(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, string identifier, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRefresh(endpoint, graphName, identifier, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndRefresh(System.IAsyncResult result) {
            return base.Channel.EndRefresh(result);
        }
        
        private System.IAsyncResult OnBeginRefresh(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            string graphName = ((string)(inValues[1]));
            string identifier = ((string)(inValues[2]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginRefresh(endpoint, graphName, identifier, callback, asyncState);
        }
        
        private object[] OnEndRefresh(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndRefresh(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRefreshCompleted(object state) {
            if ((this.RefreshCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RefreshCompleted(this, new RefreshCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RefreshAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, string identifier) {
            this.RefreshAsync(endpoint, graphName, identifier, null);
        }
        
        public void RefreshAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, string identifier, object userState) {
            if ((this.onBeginRefreshDelegate == null)) {
                this.onBeginRefreshDelegate = new BeginOperationDelegate(this.OnBeginRefresh);
            }
            if ((this.onEndRefreshDelegate == null)) {
                this.onEndRefreshDelegate = new EndOperationDelegate(this.OnEndRefresh);
            }
            if ((this.onRefreshCompletedDelegate == null)) {
                this.onRefreshCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRefreshCompleted);
            }
            base.InvokeAsync(this.onBeginRefreshDelegate, new object[] {
                        endpoint,
                        graphName,
                        identifier}, this.onEndRefreshDelegate, this.onRefreshCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginReset(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReset(endpoint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndReset(System.IAsyncResult result) {
            return base.Channel.EndReset(result);
        }
        
        private System.IAsyncResult OnBeginReset(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginReset(endpoint, callback, asyncState);
        }
        
        private object[] OnEndReset(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndReset(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetCompleted(object state) {
            if ((this.ResetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetCompleted(this, new ResetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint) {
            this.ResetAsync(endpoint, null);
        }
        
        public void ResetAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, object userState) {
            if ((this.onBeginResetDelegate == null)) {
                this.onBeginResetDelegate = new BeginOperationDelegate(this.OnBeginReset);
            }
            if ((this.onEndResetDelegate == null)) {
                this.onEndResetDelegate = new EndOperationDelegate(this.OnEndReset);
            }
            if ((this.onResetCompletedDelegate == null)) {
                this.onResetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetCompleted);
            }
            base.InvokeAsync(this.onBeginResetDelegate, new object[] {
                        endpoint}, this.onEndResetDelegate, this.onResetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginPull(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, DemoControlPanel.DemoControlPanelService.iRINGEndpoint targetEnpoint, string graphName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPull(endpoint, targetEnpoint, graphName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndPull(System.IAsyncResult result) {
            return base.Channel.EndPull(result);
        }
        
        private System.IAsyncResult OnBeginPull(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint targetEnpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[1]));
            string graphName = ((string)(inValues[2]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginPull(endpoint, targetEnpoint, graphName, callback, asyncState);
        }
        
        private object[] OnEndPull(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndPull(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPullCompleted(object state) {
            if ((this.PullCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PullCompleted(this, new PullCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PullAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, DemoControlPanel.DemoControlPanelService.iRINGEndpoint targetEnpoint, string graphName) {
            this.PullAsync(endpoint, targetEnpoint, graphName, null);
        }
        
        public void PullAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, DemoControlPanel.DemoControlPanelService.iRINGEndpoint targetEnpoint, string graphName, object userState) {
            if ((this.onBeginPullDelegate == null)) {
                this.onBeginPullDelegate = new BeginOperationDelegate(this.OnBeginPull);
            }
            if ((this.onEndPullDelegate == null)) {
                this.onEndPullDelegate = new EndOperationDelegate(this.OnEndPull);
            }
            if ((this.onPullCompletedDelegate == null)) {
                this.onPullCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPullCompleted);
            }
            base.InvokeAsync(this.onBeginPullDelegate, new object[] {
                        endpoint,
                        targetEnpoint,
                        graphName}, this.onEndPullDelegate, this.onPullCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginExport(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExport(endpoint, graphName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndExport(System.IAsyncResult result) {
            return base.Channel.EndExport(result);
        }
        
        private System.IAsyncResult OnBeginExport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            string graphName = ((string)(inValues[1]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginExport(endpoint, graphName, callback, asyncState);
        }
        
        private object[] OnEndExport(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndExport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExportCompleted(object state) {
            if ((this.ExportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportCompleted(this, new ExportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName) {
            this.ExportAsync(endpoint, graphName, null);
        }
        
        public void ExportAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, object userState) {
            if ((this.onBeginExportDelegate == null)) {
                this.onBeginExportDelegate = new BeginOperationDelegate(this.OnBeginExport);
            }
            if ((this.onEndExportDelegate == null)) {
                this.onEndExportDelegate = new EndOperationDelegate(this.OnEndExport);
            }
            if ((this.onExportCompletedDelegate == null)) {
                this.onExportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportCompleted);
            }
            base.InvokeAsync(this.onBeginExportDelegate, new object[] {
                        endpoint,
                        graphName}, this.onEndExportDelegate, this.onExportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginImport(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImport(endpoint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndImport(System.IAsyncResult result) {
            return base.Channel.EndImport(result);
        }
        
        private System.IAsyncResult OnBeginImport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginImport(endpoint, callback, asyncState);
        }
        
        private object[] OnEndImport(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndImport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportCompleted(object state) {
            if ((this.ImportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportCompleted(this, new ImportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint) {
            this.ImportAsync(endpoint, null);
        }
        
        public void ImportAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, object userState) {
            if ((this.onBeginImportDelegate == null)) {
                this.onBeginImportDelegate = new BeginOperationDelegate(this.OnBeginImport);
            }
            if ((this.onEndImportDelegate == null)) {
                this.onEndImportDelegate = new EndOperationDelegate(this.OnEndImport);
            }
            if ((this.onImportCompletedDelegate == null)) {
                this.onImportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportCompleted);
            }
            base.InvokeAsync(this.onBeginImportDelegate, new object[] {
                        endpoint}, this.onEndImportDelegate, this.onImportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginQuery(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQuery(endpoint, query, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>> DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndQuery(System.IAsyncResult result) {
            return base.Channel.EndQuery(result);
        }
        
        private System.IAsyncResult OnBeginQuery(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            string query = ((string)(inValues[1]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginQuery(endpoint, query, callback, asyncState);
        }
        
        private object[] OnEndQuery(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>> retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndQuery(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryCompleted(object state) {
            if ((this.QueryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryCompleted(this, new QueryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query) {
            this.QueryAsync(endpoint, query, null);
        }
        
        public void QueryAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, object userState) {
            if ((this.onBeginQueryDelegate == null)) {
                this.onBeginQueryDelegate = new BeginOperationDelegate(this.OnBeginQuery);
            }
            if ((this.onEndQueryDelegate == null)) {
                this.onEndQueryDelegate = new EndOperationDelegate(this.OnEndQuery);
            }
            if ((this.onQueryCompletedDelegate == null)) {
                this.onQueryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryCompleted);
            }
            base.InvokeAsync(this.onBeginQueryDelegate, new object[] {
                        endpoint,
                        query}, this.onEndQueryDelegate, this.onQueryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginUpdate(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdate(endpoint, query, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndUpdate(System.IAsyncResult result) {
            return base.Channel.EndUpdate(result);
        }
        
        private System.IAsyncResult OnBeginUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint = ((DemoControlPanel.DemoControlPanelService.iRINGEndpoint)(inValues[0]));
            string query = ((string)(inValues[1]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginUpdate(endpoint, query, callback, asyncState);
        }
        
        private object[] OnEndUpdate(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCompleted(object state) {
            if ((this.UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query) {
            this.UpdateAsync(endpoint, query, null);
        }
        
        public void UpdateAsync(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, object userState) {
            if ((this.onBeginUpdateDelegate == null)) {
                this.onBeginUpdateDelegate = new BeginOperationDelegate(this.OnBeginUpdate);
            }
            if ((this.onEndUpdateDelegate == null)) {
                this.onEndUpdateDelegate = new EndOperationDelegate(this.OnEndUpdate);
            }
            if ((this.onUpdateCompletedDelegate == null)) {
                this.onUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDelegate, new object[] {
                        endpoint,
                        query}, this.onEndUpdateDelegate, this.onUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.BeginGetQXF(byte[] stream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQXF(stream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DemoControlPanel.DemoControlPanelService.Response DemoControlPanel.DemoControlPanelService.IDemoControlPanelService.EndGetQXF(System.IAsyncResult result) {
            return base.Channel.EndGetQXF(result);
        }
        
        private System.IAsyncResult OnBeginGetQXF(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] stream = ((byte[])(inValues[0]));
            return ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).BeginGetQXF(stream, callback, asyncState);
        }
        
        private object[] OnEndGetQXF(System.IAsyncResult result) {
            DemoControlPanel.DemoControlPanelService.Response retVal = ((DemoControlPanel.DemoControlPanelService.IDemoControlPanelService)(this)).EndGetQXF(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQXFCompleted(object state) {
            if ((this.GetQXFCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQXFCompleted(this, new GetQXFCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQXFAsync(byte[] stream) {
            this.GetQXFAsync(stream, null);
        }
        
        public void GetQXFAsync(byte[] stream, object userState) {
            if ((this.onBeginGetQXFDelegate == null)) {
                this.onBeginGetQXFDelegate = new BeginOperationDelegate(this.OnBeginGetQXF);
            }
            if ((this.onEndGetQXFDelegate == null)) {
                this.onEndGetQXFDelegate = new EndOperationDelegate(this.OnEndGetQXF);
            }
            if ((this.onGetQXFCompletedDelegate == null)) {
                this.onGetQXFCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQXFCompleted);
            }
            base.InvokeAsync(this.onBeginGetQXFDelegate, new object[] {
                        stream}, this.onEndGetQXFDelegate, this.onGetQXFCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DemoControlPanel.DemoControlPanelService.IDemoControlPanelService CreateChannel() {
            return new DemoControlPanelServiceClientChannel(this);
        }
        
        private class DemoControlPanelServiceClientChannel : ChannelBase<DemoControlPanel.DemoControlPanelService.IDemoControlPanelService>, DemoControlPanel.DemoControlPanelService.IDemoControlPanelService {
            
            public DemoControlPanelServiceClientChannel(System.ServiceModel.ClientBase<DemoControlPanel.DemoControlPanelService.IDemoControlPanelService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetConfiguredEndpoints(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetConfiguredEndpoints", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints EndGetConfiguredEndpoints(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints _result = ((DemoControlPanel.DemoControlPanelService.ConfiguredEndpoints)(base.EndInvoke("GetConfiguredEndpoints", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = endpoint;
                System.IAsyncResult _result = base.BeginInvoke("GetManifest", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndGetManifest(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("GetManifest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSenderManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = endpoint;
                System.IAsyncResult _result = base.BeginInvoke("GetSenderManifest", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndGetSenderManifest(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("GetSenderManifest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetReceiverManifest(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = endpoint;
                System.IAsyncResult _result = base.BeginInvoke("GetReceiverManifest", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndGetReceiverManifest(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("GetReceiverManifest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRefresh(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, string identifier, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = endpoint;
                _args[1] = graphName;
                _args[2] = identifier;
                System.IAsyncResult _result = base.BeginInvoke("Refresh", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndRefresh(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("Refresh", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReset(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = endpoint;
                System.IAsyncResult _result = base.BeginInvoke("Reset", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndReset(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("Reset", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPull(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, DemoControlPanel.DemoControlPanelService.iRINGEndpoint targetEnpoint, string graphName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = endpoint;
                _args[1] = targetEnpoint;
                _args[2] = graphName;
                System.IAsyncResult _result = base.BeginInvoke("Pull", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndPull(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("Pull", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExport(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string graphName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = endpoint;
                _args[1] = graphName;
                System.IAsyncResult _result = base.BeginInvoke("Export", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndExport(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("Export", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImport(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = endpoint;
                System.IAsyncResult _result = base.BeginInvoke("Import", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndImport(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("Import", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginQuery(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = endpoint;
                _args[1] = query;
                System.IAsyncResult _result = base.BeginInvoke("Query", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>> EndQuery(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>> _result = ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<org.w3.sparql_results.SPARQLBinding>>)(base.EndInvoke("Query", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdate(DemoControlPanel.DemoControlPanelService.iRINGEndpoint endpoint, string query, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = endpoint;
                _args[1] = query;
                System.IAsyncResult _result = base.BeginInvoke("Update", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("Update", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetQXF(byte[] stream, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = stream;
                System.IAsyncResult _result = base.BeginInvoke("GetQXF", _args, callback, asyncState);
                return _result;
            }
            
            public DemoControlPanel.DemoControlPanelService.Response EndGetQXF(System.IAsyncResult result) {
                object[] _args = new object[0];
                DemoControlPanel.DemoControlPanelService.Response _result = ((DemoControlPanel.DemoControlPanelService.Response)(base.EndInvoke("GetQXF", _args, result)));
                return _result;
            }
        }
    }
}
