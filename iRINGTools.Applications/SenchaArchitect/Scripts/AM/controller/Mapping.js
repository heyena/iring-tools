/*
 * File: Scripts/AM/controller/Mapping.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.controller.Mapping', {
  extend: 'Ext.app.Controller',

  parentClass: '',
  models: [
    'MappingModel'
  ],
  stores: [
    'MappingStore'
  ],
  views: [
    'common.PropertyPanel',
    'common.ContentPanel',
    'common.CenterPanel',
    'mapping.MappingTree',
    'directory.GraphMapForm',
    'mapping.ClassMapForm',
    'mapping.ClassMapWindow',
    'mapping.PropertyMapWindow',
    'directory.GraphMapWindow',
    'mapping.ValueListMapWindow',
    'mapping.ValueListMapForm',
    'mapping.ValueListWindow',
    'mapping.MappingPanel',
    'mapping.ValueListForm',
    'mapping.MapValueListWindow',
    'mapping.MapValueListForm',
    'mapping.LiteralForm',
    'mapping.LiteralWindow'
  ],

  refs: [
    {
      ref: 'dirTree',
      selector: 'viewport > directorypanel > directorytree'
    },
    {
      ref: 'mainContent',
      selector: 'viewport > centerpanel > contentpanel'
    }
  ],

  onDeleteTemplateMap: function(item, e, eOpts) {

    var me = this;
    var content = me.getMainContent();
    var dirTree = me.getDirTree();
    var panel = content.down('mappingpanel');
    //var tree = content.down('mappingtree'),
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    var nodeId = node.data.id.split('/');
    var text = nodeId[nodeId.length-1];
    var mapingNode = node.data.parentId+'/'+text;
    me.getParentClass(node);
    Ext.Ajax.request({
      url: 'mapping/deleteTemplateMap',
      method: 'POST',
      params: {
        //contextName: panel.contextName,
        //endpoint: panel.endpoint,
        scope: panel.contextName,
        application: panel.endpoint,
        baseUrl: panel.baseUrl,
        mappingNode: mapingNode,//node.data.id,
        parentIdentifier: me.parentClass,
        identifier: node.data.identifier,
        index: node.parentNode.indexOf(node),
        parentClassIndex: me.parentClassIndex
      },
      success: function () {
        tree.onReload();

      },
      failure: function () { 

      }
    });
  },

  onEditOrNewGraph: function(item, e, eOpts) {
    var me = this;
    var nodeId, contextName, endpoint, baseUrl, graphName, 
    objectName, classLabel, classUrl, identifier, wintitle;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode(),
      record = node.data.record;
    var contextName;// This is scope
    var endpoint; //This is application
    var delimeter;
    if(record)
    delimeter = record.classTemplateMaps[0].classMap.identifierDelimiter;
    else
    delimeter = '_';
    if (record) {
      identifier = record.classTemplateMaps[0].classMap.identifiers[0];
      if(record.classTemplateMaps[0].classMap.identifiers.length>1){
        for(var i=1;i<record.classTemplateMaps[0].classMap.identifiers.length;i++){
          identifier = identifier+','+record.classTemplateMaps[0].classMap.identifiers[i];
        }
      } 

      //identifier = getLastXString(record.record.classTemplateMaps[0].classMap.identifiers[0], 1).split('.')[1];
      //graphName = record.record.name;
      graphName = record.name;
      objectName = record.dataObjectName;//getLastXString(record.classTemplateMaps[0].classMap.identifiers[0], 1).split('.')[0];
      //objectName = contextName + '/' + endpoint + '/' + 'DataObjects/DataObject/' + 
      //record.classTemplateMaps[0].classMap.identifiers[0].replace('.', '/');
      //classLabel = record.record.classTemplateMaps[0].classMap.name;
      // classUrl = record.record.classTemplateMaps[0].classMap.id;
      classLabel = record.classTemplateMaps[0].classMap.name;
      classUrl = record.classTemplateMaps[0].classMap.id;
      contextName = node.parentNode.parentNode.parentNode.data.text;
      endpoint = node.parentNode.parentNode.data.text; 
    }
    else{
      contextName = node.parentNode.parentNode.data.text;
      endpoint = node.parentNode.data.text; 
    }

    if(item.itemId == 'editgraph') {
      wintitle = 'Edit Graph \"' + graphName + '\"'; 
    } else {
      wintitle = 'Add GraphMap';
    }
    var conf = {
      id: 'tab-' + node.data.id,
      title: wintitle ,
      iconCls: 'tabsGraph',
      //height: 200,
      //width: 430
    };

    var win = Ext.widget('graphmapwindow', conf);

    /*if(node) {
    nodeId = node.data.id;
    contextName = node.data.property.context;
    endpoint = node.data.property.endpoint;
    baseUrl = node.data.property.baseUrl; 
    }*/
    var formRecord = {
      'scope': contextName,
      'app': endpoint,
      'oldGraphName': graphName,
      'graphName': graphName,
      'objectName': objectName,
      'classId': classUrl,
      'identifier': identifier,
      'className': classLabel,
      'delimiter':delimeter
      //'baseUrl': baseUrl,
      //'mappingNode': nodeId,

      //'oldClassUrl': classUrl,
      //'oldClassLabel': classLabel,

    };

    var form = win.down('form').getForm();
    form.setValues(formRecord);


    win.down('form').updateDDContainers(record);

    win.on('save', function () {
      win.close(); 
      tree.onReload();
    }, me);

    win.on('reset', function () {
      win.close();
    }, me);


    win.show();
  },

  openGraphMap: function(item, e, eOpts) {

    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var content = me.getMainContent(),
      context = node.parentNode.parentNode.parentNode.data.text;//node.data.property.context,
      endpoint = node.parentNode.parentNode.data.text//node.data.property.endpoint,
      // baseUrl = node.data.property.baseUrl,
      graphName = node.internalId;//node.data.text;
    title = 'GraphMap - ' + context + "." + endpoint + '.' + node.data.text;

    var templateTypes = ['Qualification', 'Definition'];
    var mapPanel = content.down('mappingpanel[title='+title+']');
    if(!mapPanel) {
      mapPanel = Ext.widget('mappingpanel', {
        'title': title, 
        'contextName': context,
        //'baseUrl': baseUrl, 
        'graph': graphName,
        'endpoint': endpoint
      });
      var mapProp = mapPanel.down('propertypanel');

      var mapTree = mapPanel.down('mappingtree');
      //mapTree.id = 'mappingtree-'+node.data.text;
      var treeStore = mapTree.getStore();
      var params = treeStore.getProxy().extraParams;

      treeStore.on('beforeload', function (store, operation, eopts) {

        /*var tempIdArr = operation.node.data.id.split('/');
        var tempId = tempIdArr[tempIdArr.length-1];
        var tempNode;
        if(store.tree.root.firstChild!=undefined)		
        tempNode = store.tree.root.firstChild.data.id+'/'+tempId;
        else
        tempNode = node.parentNode.parentNode.internalId;

        params.tempNode = tempNode;*/
        params.id = operation.node.data.identifier;
        //params.id = node.parentNode.parentNode.internalId;
        //params.tempNode = node.parentNode.parentNode.internalId;
        params.graph = node.internalId;//graphName;
        params.context = context;
        params.endpoint = endpoint;
      }, me);

      mapTree.on('beforeitemexpand', function () {
        content.getEl().mask('Loading...');
      }, me);

      mapTree.on('load', function () {
        //alert('load in Mapping controler..');
        content.getEl().unmask();
      }, me);
      mapTree.on('itemexpand', function () {
        content.getEl().unmask();
      }, me);

      mapTree.on('itemclick', function (tablepanel, record, item, index, e) {
        var tempProperty = 'EQUIPMENT.COMMODITY';
        var dataObject = tempProperty.split('.')[0];
        var prop =  tempProperty.split('.')[1];
        var propArr = ['TAG','COMMODITY','EWP','TAGSTATUS'];

        if(record.data.type == 'TemplateMapNode'){
          var objectNode = node.parentNode.parentNode.childNodes[0];
          for(var i=0;i<objectNode.childNodes.length;i++){
            if(objectNode.childNodes[i].data.text == dataObject){
              if(objectNode.childNodes[i].childNodes.length>0){
                for(k=0;k<propArr.length;k++){
                  for(var j=0;j<objectNode.childNodes[i].childNodes.length;j++){
                    if(objectNode.childNodes[i].childNodes[j].data.text == propArr[k]){
                      var myTreeNode = objectNode.childNodes[i].childNodes[j];
                      myTreeNode.set('cls','bg_TreeNodeColor');
                    }
                  }
                }
              }
            }
          }
        }else{
          var objectNode = node.parentNode.parentNode.childNodes[0];
          for(var i=0;i<objectNode.childNodes.length;i++){
            if(objectNode.childNodes[i].data.text == dataObject){
              if(objectNode.childNodes[i].childNodes.length>0){
                for(k=0;k<propArr.length;k++){
                  for(var j=0;j<objectNode.childNodes[i].childNodes.length;j++){
                    if(objectNode.childNodes[i].childNodes[j].data.text == propArr[k]){
                      var myTreeNode = objectNode.childNodes[i].childNodes[j];
                      myTreeNode.set('cls','');
                    }
                  }
                }
              }
            }
          }
        }

        var obj = record.store.getAt(index).data;
        if (obj.property && obj.property !== "" && obj.property.length) {
          mapProp.setSource(obj.property);
        } else {
          if (obj.record.type>=0  && !obj.record.roleMaps) {
            var arrStr = '';
            for (var i in obj.record) {
              if (i != 'type' && obj.record[i] !== null && obj.record[i] !== '') {
                arrStr += i + '=' + obj.record[i] + '&';
              }
            }
            var type = me.getObjectType(obj.record.type);
            //arrStr += 'typeDescription=' + type;
            arrStr += 'type=' + type;
            var arr = Ext.Object.fromQueryString(arrStr);
            mapProp.setSource(arr);
          }
          else {
            //mapProp.setSource(obj.record);

            for (var propName in obj.record) {
              if (propName != 'dataLength') {
                var propValue = obj.record.type;

                if (propName == 'type') {
                  if(propValue!='Qualification' && propValue!='Definition')  
                  propValue = templateTypes[propValue];

                }
                obj.record.type = propValue;
                mapProp.setSource(obj.record);
              }
            }
          }
        }

      });
      treeStore.load();
      content.add(mapPanel);
    }

    content.setActiveTab(mapPanel);
  },

  addClassMap: function(item, e, eOpts) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    //var tree = mapPanel.down('mappingtree');
    var tree = content.getActiveTab().items.items[0];
    var graph  = mapPanel.graph.split('/');
    graph = graph[graph.length-1];
    node = tree.getSelectedNode();
    record = node.data.record;
    var roleName = node.data.text;
    if(roleName.indexOf('unmapped')!=-1){
      roleName = roleName.split('[')[0];
    } 

    me.getParentClass(node);

    var index = node.parentNode.parentNode.indexOf(node.parentNode);
    var win = Ext.widget('classmapwindow', {
      mappingNode: node,
      formid: 'propertytarget-' + mapPanel.contextName + '-' + mapPanel.endpoint
    });

    win.on('save', function () {
      win.close();
      tree.onReload();
      if (node.get('expanded') === false)
      node.expand();
    }, me);

    win.on('reset', function() {
      win.close();
    }, me);

    var formRecord = {
      'scope': mapPanel.contextName,
      'app': mapPanel.endpoint,
      //'baseUrl': mapPanel.baseUrl,
      'graph': graph,//mapPanel.graph,
      'templateIndex': index,
      'roleName': roleName,//node.data.text,
      'parentClassId': node.parentNode.parentNode.data.identifier,
      'parentClassIndex': node.parentNode.parentNode.data.identifierIndex

    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);
    form.updateDDContainers(record);

    win.show();

  },

  mapProperty: function(item, e, eOpts) {

    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    //var tree = mapPanel.down('mappingtree');
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    var id = node.parentNode.data.id.split('/');
    var mappingNode  = node.parentNode.data.parentId+'/'+id[id.length-1]+'/'+node.data.record.name;
    var graphArr = mapPanel.graph.split('/');
    var graph = graphArr[graphArr.length-1];
    win = Ext.widget('propertymapwindow', {
      'classId': node.parentNode.parentNode.data.identifier,
      'mappingNode': node
    });
    var roleName = getLastXString(node.data.id, 1);
    var index = node.parentNode.parentNode.indexOf(node.parentNode);

    var formRecord = {
      'contextName': mapPanel.contextName,
      'endpoint': mapPanel.endpoint,
      'graphName': graph,
      'index': index,
      'mappingNode':mappingNode,
      'classId':node.parentNode.parentNode.data.identifier,
      'classIndex': node.parentNode.parentNode.data.identifierIndex
    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);
    win.on('save', function () {
      win.close();
      tree.store.load();
      if (node.get('expanded') === false)
      node.expand();
    }, me);
    win.on('Cancel', function () {
      win.close();
    }, me);
    win.show();
  },

  onMakeReference: function(item, e, eOpts) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    //var tree = mapPanel.down('mappingtree');
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    parentNode = node.parentNode;
    var tempId = node.parentNode.data.parentId;
    var contextParts = tempId.split('/');

    Ext.Ajax.request({
      url: 'mapping/makereference',
      method: 'POST',
      params: {
        scope: contextParts[0],//mapPanel.contextName,
        app: contextParts[1],//mapPanel.endpoint,
        graph: contextParts[2],//mapPanel.graphName,
        roleName: getLastXString(node.data.id, 1),
        classId: parentNode.parentNode.data.identifier,
        classIndex:parentNode.parentNode.data.identifierIndex,
        //roleId:,
        //refClassId:,
        //refClassLabel:,
        //index: parentNode.parentNode.indexOf(parentNode)
        templateIndex: parentNode.parentNode.indexOf(parentNode),
      },
      success: function () {
        tree.onReload();
      },
      failure: function () { }
    });


  },

  onEditOrNewValueMap: function(item, e, eOpts) {
    var me = this;
    var wintitle, contextName, endpoint, baseUrl, valueList, interName, classUrl, classLabel;
    var tree = this.getDirTree(),
      node = tree.getSelectedNode(),
      record = node.data.record;

    if(item.itemId == 'editvaluemap') {
      wintitle = 'Edit Value List \"' + node.data.text + '\"';
    } else {
      wintitle = 'Add new ValueListMap to valueList \"' + node.data.text + '\"';
    }

    if(node.data.record && node.data.type == 'ListMapNode') {
      //interName = node.data.record.record.internalValue;
      interName = node.data.record.internalValue;
      //classUrl = node.data.record.record.uri;
      classUrl = node.data.record.uri;
      classLabel = node.data.text.split('[')[0];
    }

    contextName = node.data.property.context;
    endpoint = node.data.property.endpoint;
    baseUrl = node.data.property.baseUrl;

    var arr = [];
    arr = node.data.id.split('ValueList');
    var arr1 = arr[arr.length - 1];
    valueList = arr1.split('/')[1];

    var win = Ext.widget('valuelistmapwindow', {
      id:'tab-' + node.data.id, title: wintitle
    });

    var formRecord = {
      'contextName': contextName,
      'endpoint': endpoint,
      'valueList': valueList,
      'baseUrl': baseUrl,
      'mappingNode': node.data.id,
      'internalName': interName,
      'classUrl': classUrl,
      'classLabel': classLabel,
      'oldClassUrl': classUrl
    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);

    win.on('save', function () {
      win.close();
      tree.onReload();
      if (node.get('expanded') === false)
      node.expand();
    }, me);

    win.on('reset', function () {
      win.close();
    }, me);

    win.down('form').updateDDContainer(record);

    win.show();

  },

  onDeleteValueMap: function(item, e, eOpts) {
    var me = this;
    var tree = me.getDirTree(),
      node = tree.getSelectedNode();

    Ext.Ajax.request({
      url: 'mapping/deleteValueMap',
      method: 'POST',
      params: {
        contextName: node.data.property.context,
        endpoint: node.data.property.endpoint,
        baseUrl: node.data.property.baseUrl,
        valueList: node.parentNode.data.property.Name,
        //oldClassUrl: node.data.record.record.uri
        oldClassUrl: node.data.record.uri,
        mappingNode:node.data.id
      },
      success: function () {
        var parentNode = node.parentNode;                 
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () { }

    });
  },

  onResetMapping: function(item, e, eOpts) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    //var tree = mapPanel.down('mappingtree'),
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    var parentId = node.parentNode.parentNode.data.id;
    var idArr = node.data.id.split('/');
    var mappingNode = parentId+'/'+idArr[idArr.length-2]+'/'+idArr[idArr.length-1];
    var graphArr = mapPanel.graph.split('/');
    var graph = graphArr[graphArr.length-1];

    me.getParentClass(node);
    Ext.Ajax.request({
      url: 'mapping/resetmapping',
      method: 'POST',
      params: {
        contextName: mapPanel.contextName,
        endpoint: mapPanel.endpoint,
        //baseUrl: mapPanel.baseUrl,
        graphName: graph,
        mappingNode:mappingNode,
        roleId: node.data.record.id,
        templateId: node.parentNode.data.record.id,
        parentClassId: node.parentNode.parentNode.data.identifier,
        index: node.parentNode.parentNode.indexOf(node.parentNode),
        parentClassIndex: node.parentNode.parentNode.data.identifierIndex
      },
      success: function () {
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onMapValueList: function(item, e, eOpts) {

    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    //var tree = mapPanel.down('mappingtree'),
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    me.getParentClass(node);
    var parentId = node.parentNode.parentNode.data.id;
    var idArr = node.data.id.split('/');
    var mappingNode = parentId+'/'+idArr[idArr.length-2]+'/'+idArr[idArr.length-1];
    //var win = Ext.widget('valuelistwindow');
    var win = Ext.widget('mapvaluelistwindow');
    var graphArr = mapPanel.graph.split('/');
    var graph = graphArr[graphArr.length-1];
    var formRecord = {
      'mappingNode': mappingNode,//node,
      'index': node.parentNode.parentNode.indexOf(node.parentNode),
      'classId': me.parentClass,
      'classIndex': me.parentClassIndex,
      'graphName': graph,
      //'roleName': node.data.record.name,
      'contextName': mapPanel.contextName,
      'endpoint': mapPanel.endpoint,
      //'baseUrl': mapPanel.baseUrl
    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);

    win.on('Save', function () {
      win.destroy();
      tree.onReload();
    }, me);

    win.on('reset', function () {
      win.destroy();
    }, me);

    win.show();
  },

  onEditOrNewValueList: function(item, e, eOpts) {
    var me = this; 
    var state, oldValueList, contextName, endpoint, baseUrl, valueList, wintitle;
    var tree = this.getDirTree(),
      node = tree.getSelectedNode();


    if(item.itemId == 'editvaluelist') {
      state = 'edit';
      nodeId = node.data.id;
      valueListName = node.data.record.name;//node.data.record.record.name;
      wintitle = 'Edit Value List \"' + node.data.text + '\"';
    } else {
      state = 'new';
      nodeId = node.data.id;
      valueListName = null;
      wintitle = 'Add New ValueList';
    }

    var win = Ext.widget('valuelistwindow', {
      id: 'tab-' + node.data.id,
      title: wintitle
    });

    var formRecord = {
      'state': state,
      'oldValueList': valueListName,//valueList,
      'mappingNode':nodeId,
      'valueList': valueListName
      //'contextName': node.data.property.context,
      //'endpoint': node.data.property.endpoint,
      //'baseUrl': node.data.property.baseUrl,

    };

    var form = win.down('form').getForm();
    form.setValues(formRecord);

    win.on('save', function () {
      win.close();
      tree.onReload();
    }, me);

    win.on('reset', function () {
      win.close();
    }, me);

    win.show();
    /*
    if(item.itemId == 'editvaluelist') {
    state = 'edit';
    valueList = node.data.record.record.name;
    wintitle = 'Edit Value List \"' + node.data.text + '\"';
    } else {
    state = 'new';
    wintitle = 'Add New ValueList';
    }

    var win = Ext.widget('valuelistwindow', {
    id: 'tab-' + node.data.id,
    title: wintitle
    });

    var formRecord = {
    'state': state,
    'oldValueList': valueList,
    'contextName': node.data.property.context,
    'endpoint': node.data.property.endpoint,
    'baseUrl': node.data.property.baseUrl,
    'valueList': valueList
    };

    var form = win.down('form').getForm();
    form.setValues(formRecord);

    win.on('save', function () {
    win.close();
    tree.onReload();
    }, me);

    win.on('reset', function () {
    win.close();
    }, me);

    win.show();
    */
  },

  onMakePossessor: function(item, e, eOpts) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    //var tree = mapPanel.down('mappingtree');
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    parentNode = node.parentNode;
    var tempId = node.parentNode.data.parentId;
    var nodeId = node.data.id.split('/');
    var text = nodeId[nodeId.length-1];
    var mapingNode = tempId+'/'+text;
    var graphArr = mapPanel.graph.split('/');
    var graph = graphArr[graphArr.length-1];

    Ext.Ajax.request({
      url: 'mapping/makePossessor',
      method: 'POST',
      params: {
        //contextName: mapPanel.contextName,
        //endpoint: mapPanel.endpoint,
        //baseUrl: mapPanel.baseUrl,
        //graphName: mapPanel.graphName,
        // roleName: getLastXString(node.data.id, 1),
        mappingNode : mapingNode,
        node: node,
        endpoint: mapPanel.endpoint,
        contextName: mapPanel.contextName,
        graph: graph,
        classId: parentNode.parentNode.data.identifier,
        index: parentNode.parentNode.indexOf(parentNode),
        classIndex: parentNode.parentNode.data.identifierIndex
      },
      success: function () {
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onDeleteGraphMap: function(item, e, eOpts) {
    var me = this;
    var tree = me.getDirTree(),
      node = tree.getSelectedNode();

    Ext.Ajax.request({
      url: 'mapping/deletegraphmap',
      method: 'POST',
      params: {
        scope: node.parentNode.parentNode.parentNode.data.text,//node.data.property.context,
        application: node.parentNode.parentNode.data.text,//node.data.property.endpoint,
        baseUrl: node.data.property.baseUrl,
        mappingNode: node.id,
        graphName: getLastXString(node.id, 1)
      },
      success: function () {
        var parentNode = node.parentNode;
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onDeleteValueList: function(item, e, eOpts) {
    var me = this;
    var tree = me.getDirTree(),
      node = tree.getSelectedNode(),
      parentNode = node.parentNode,
      valueList = getLastXString(node.id, 1);

    Ext.Ajax.request({
      url: 'mapping/deletevaluelist',
      method: 'POST',
      params: {
        //contextName: node.data.property.context,
        //endpoint: node.data.property.endpoint,
        //baseUrl: node.data.property.baseUrl,
        valueList: valueList,
        mappingNode:node.data.id
      },
      success: function () {
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onDeleteClassMap: function(item, e, eOpts) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    //var tree = mapPanel.down('mappingtree');
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    var mappingNode = node.parentNode.parentNode.parentNode.data.id;
    var tempId = node.data.id.split('/');
    tempId = tempId[tempId.length-1];
    mappingNode = mappingNode+'/'+tempId;
    var index = node.parentNode.parentNode.parentNode.indexOf(node.parentNode.parentNode);
    var graphArr = mapPanel.graph.split('/');
    var graph = graphArr[graphArr.length-1];
    Ext.Ajax.request({
      url: 'mapping/deleteclassmap',
      method: 'POST',
      params: {
        mappingNode: mappingNode,//node.data.id,
        classId: node.data.identifier,
        parentClass: node.parentNode.parentNode.parentNode.data.identifier,
        parentTemplate: node.parentNode.parentNode.data.record.id,
        parentRole: node.parentNode.data.record.id,
        index: index,
        parentClassIndex: node.parentNode.parentNode.parentNode.data.identifierIndex,
        contextName: mapPanel.contextName,
        endpoint: mapPanel.endpoint,
        graph: graph
      },
      success: function (result, request) {
        tree.onReload();
        //Ext.Msg.show({ title: 'Success', msg: 'Deleted Class Map from Mapping', icon: Ext.MessageBox.INFO, buttons: Ext.MessageBox.OK });

      },
      failure: function (result, request) { }
    })
  },

  onMapLiteral: function(item, e, eOpts) {

    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    var tree = content.getActiveTab().items.items[0];
    node = tree.getSelectedNode();
    me.getParentClass(node);
    var parentId = node.parentNode.parentNode.data.id;
    var idArr = node.data.id.split('/');
    var mappingNode = parentId+'/'+idArr[idArr.length-2]+'/'+idArr[idArr.length-1];
    var win = Ext.widget('literalwindow');
    var form = win.down('form');
    var constantValue = form.getForm().findField('constantValue').getValue();
    var index = node.parentNode.parentNode.indexOf(node.parentNode);
    var graphArr = mapPanel.graph.split('/');
    var graph = graphArr[graphArr.length-1];
    var formRecord = {
      constantValue: constantValue,
      mappingNode: node.data.id,
      classId: node.parentNode.parentNode.data.identifier,
      index: index,
      endpoint: mapPanel.endpoint,
      contextName: mapPanel.contextName,
      graph: graph,
      classIndex: node.parentNode.parentNode.data.identifierIndex
    };


    form.getForm().setValues(formRecord);

    win.on('Save', function () {
      win.destroy();
      tree.onReload();
    }, me);

    win.on('reset', function () {
      win.destroy();
    }, me);

    win.show();
  },

  onRefreshFacade: function(item, e, eOpts) {
    //alert('onRefreshFacade...');
  },

  getObjectType: function(type) {
    switch (type) {
      case 0:
      return 'Unknown';
      case 1:
      return 'Property';
      case 2:
      return 'Possessor';
      case 3:
      return 'Reference';
      case 4:
      return 'FixedValue';
      case 5:
      return 'DataProperty';
      case 6:
      return 'ObjectProperty';
    }
  },

  getParentClass: function(n) {
    var me = this;
    if ( n.parentNode !== null && n.parentNode !== undefined) {
      if ((n.parentNode.data.type == 'ClassMapNode' || 
      n.parentNode.data.type == 'GraphMapNode') && 
      n.parentNode.data.identifier !== undefined) {
        me.parentClass = n.parentNode.data.identifier;
        me.parentClassIndex = n.parentNode.data.identifierIndex;
        return me.parentClass;
      }
      else {
        me.getParentClass(n.parentNode);
      }
    }
    return me.parentClass;

  },

  init: function(application) {
    var me = this;
    me.application.addEvents('opengraphmap');
    Ext.QuickTips.init();

    this.control({
      "menuitem[action=templatemapdelete]": {
        click: this.onDeleteTemplateMap
      },
      "menuitem[action=editnewgraph]": {
        click: this.onEditOrNewGraph
      },
      "menuitem[action=opengraph]": {
        click: this.openGraphMap
      },
      "menuitem[action=addclassmap]": {
        click: this.addClassMap
      },
      "menuitem[action=mapproperty]": {
        click: this.mapProperty
      },
      "menuitem[action=makereference]": {
        click: this.onMakeReference
      },
      "menuitem[action=editnewvaluemap]": {
        click: this.onEditOrNewValueMap
      },
      "menuitem[action=deletevaluemap]": {
        click: this.onDeleteValueMap
      },
      "menuitem[action=resetmapping]": {
        click: this.onResetMapping
      },
      "menuitem[action=mapvaluelist]": {
        click: this.onMapValueList
      },
      "menuitem[action=editnewvaluelist]": {
        click: this.onEditOrNewValueList
      },
      "menuitem[action=makepossessor]": {
        click: this.onMakePossessor
      },
      "menuitem[action=deletegraph]": {
        click: this.onDeleteGraphMap
      },
      "menuitem[action=deletevaluelist]": {
        click: this.onDeleteValueList
      },
      " menuitem[action=deleteclassmap]": {
        click: this.onDeleteClassMap
      },
      "menuitem[action=mapliteral]": {
        click: this.onMapLiteral
      },
      " menuitem[action=refreshfacade]": {
        click: this.onRefreshFacade
      }
    });

    application.on({
      opengraphmap: {
        fn: this.onOpenGraphMap,
        scope: this
      }
    });
  },

  onOpenGraphMap: function() {
    var me = this;
    me.openGraphMap();
  }

});
