{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "DirectoryModel",
            "BaseUrlModel",
            "DataLayerModel",
            "ContextModel",
            "DynamicModel",
            "FileDownloadModel",
            "VirtualPropertyModel"
        ],
        "stores": [
            "DirectoryTreeStore",
            "ContextStore",
            "BaseUrlStore",
            "DataLayerStore",
            "FileDownloadStore",
            "VirtualPropertyStore"
        ],
        "views": [
            "common.PropertyPanel",
            "common.CenterPanel",
            "common.ContentPanel",
            "directory.DirectoryPanel",
            "directory.DirectoryTree",
            "directory.ApplicationWindow",
            "directory.ScopeWindow",
            "directory.DataLayerForm",
            "directory.DataGridPanel",
            "directory.GraphMapForm",
            "directory.GraphMapWindow",
            "directory.ScopeForm",
            "directory.ContextCombo",
            "directory.DataLayerWindow",
            "directory.AvailBaseUrlCombo",
            "directory.DataLayerCombo",
            "directory.ApplicationForm",
            "menus.ScopesMenu",
            "menus.AppDataMenu",
            "menus.ApplicationMenu",
            "menus.ValueListsMenu",
            "menus.ValueListMenu",
            "menus.GraphsMenu",
            "menus.GraphMenu",
            "menus.TemplatemapMenu",
            "menus.RolemapMenu",
            "menus.ClassmapMenu",
            "menus.ValueListMapMenu",
            "menus.AppDataRefreshMenu",
            "directory.FileUpoadForm",
            "directory.FileUploadWindow",
            "directory.DownloadGrid",
            "directory.FileDownloadWindow",
            "directory.ImportCacheForm",
            "directory.ImportCacheWindow",
            "directory.DownloadForm",
            "directory.VirtualPropertyForm",
            "directory.VirtualPropertyGrid",
            "directory.VirtualPropertyWindow",
            "menus.VirtualPropertyMenu"
        ],
        "designer|userClassName": "Directory"
    },
    "designerId": "06f88f22-c6f5-473b-a55b-a40aae8ad3b2",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "handleMetachange",
                "implHandler": [
                    "var me = this,\r",
                    "  store = grid.getStore(),\r",
                    "  columns = meta.columns;\r",
                    "\r",
                    "grid.metachange = true;\r",
                    "grid.reconfigure(store, columns);"
                ],
                "name": "metachange",
                "scope": "me",
                "designer|targetType": "directory.DataGridPanel",
                "designer|controlQuery": "gridpanel"
            },
            "designerId": "419a2796-2b02-43f2-80e2-1f459a715add"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dirTree",
                "selector": "viewport > directorypanel > directorytree"
            },
            "designerId": "74124cf2-5a4d-4881-b199-3e617bc25f5f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dirProperties",
                "selector": "viewport > directorypanel > propertypanel"
            },
            "designerId": "048c0fd2-3b90-408a-befe-c7c07a292475"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainContent",
                "selector": "viewport > centerpanel > contentpanel"
            },
            "designerId": "2c579f89-2e9c-4b29-b613-09f675f670ef"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBeforeLoad",
                "implHandler": [
                    "var me = this;\r",
                    "if (operation.node !== null) {\r",
                    "  var operationNode = operation.node.data;\r",
                    "  var params = store.proxy.extraParams;\r",
                    "\r",
                    "  if (operationNode.type !== null)\r",
                    "  params.type = operationNode.type;\r",
                    "\r",
                    "  if (operationNode.record !== null && operationNode.record.Related !== null)\r",
                    "  params.related = operationNode.record.Related;\r",
                    "\r",
                    "  if (operationNode.record !== null) {\r",
                    "    operationNode.leaf = false;\r",
                    "\r",
                    "    if (operationNode.record.context)\r",
                    "    params.contextName = operationNode.record.context;\r",
                    "\r",
                    "    if (operationNode.record.BaseUrl)\r",
                    "    params.baseUrl = operationNode.record.BaseUrl;\r",
                    "\r",
                    "    if (operationNode.record.endpoint)\r",
                    "    params.endpoint = operationNode.record.endpoint;\r",
                    "\r",
                    "    if (operationNode.record.securityRole)\r",
                    "    params.security = operationNode.record.securityRole;\r",
                    "\r",
                    "    if (operationNode.text !== null)\r",
                    "    params.text = operationNode.text;\r",
                    "  }\r",
                    "  else if (operationNode.property !== null) {\r",
                    "    operationNode.leaf = false;\r",
                    "\r",
                    "    if (operationNode.property.context)\r",
                    "    params.contextName = operationNode.property.context;\r",
                    "\r",
                    "    if (operationNode.property.endpoint)\r",
                    "    params.endpoint = operationNode.property.endpoint;\r",
                    "\r",
                    "    if (operationNode.property.baseUrl)\r",
                    "    params.baseUrl = operationNode.property.baseUrl;\r",
                    "\r",
                    "    if (operationNode.text !== null)\r",
                    "    params.text = operationNode.text;\r",
                    "  }\r",
                    "}"
                ],
                "name": "beforeload",
                "scope": "me",
                "designer|targetType": "directory.DirectoryTree",
                "designer|controlQuery": "directorypanel directorytree"
            },
            "designerId": "c9d57b89-b9c7-4e6b-8056-ea9fa38f9918"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newOrEditScope",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var path, state, context, description, wintitle;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "context = node.data.record.context;\r",
                    "\r",
                    "if(node.parentNode) {\r",
                    "  path = node.internalId;\r",
                    "} else {\r",
                    "  path = '';\r",
                    "}\r",
                    "\r",
                    "if(item.itemId == 'editfolder' && node.data.record !== undefined) {\r",
                    "  name = node.data.record.Name;\r",
                    "  description = node.data.record.Description;\r",
                    "  wintitle = 'Edit Scope \\\"' + node.data.text + '\\\"';\r",
                    "  state = 'edit';\r",
                    "\r",
                    "} else {\r",
                    "  name = '';\r",
                    "  state = 'new';\r",
                    "  wintitle = 'Add Scope';\r",
                    "\r",
                    "}\r",
                    "\r",
                    "var conf = {\r",
                    "  id: 'tab-' + node.data.id,\r",
                    "  title: wintitle,\r",
                    "  iconCls: 'tabsScope'\r",
                    "};\r",
                    "\r",
                    "var win = Ext.widget('scopewindow', conf);\r",
                    "\r",
                    "win.on('save', function () {\r",
                    "  win.destroy();\r",
                    "  me.onAppDataRefreshClick(item, e, eOpts);\r",
                    "  //if (!node.isExpanded())\r",
                    "  // node.expand();\r",
                    "  //tree.expandPath(node.getPath(), 'text');\r",
                    "\r",
                    "}, me);\r",
                    "\r",
                    "win.on('cancel', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.node = node;\r",
                    "\r",
                    "var combo = me.getContextCombo();\r",
                    "\r",
                    "combo.store.on('load', function(store, action) {\r",
                    "  if(context === '') {\r",
                    "    if(store)\r",
                    "    if(store.data.items[0])\r",
                    "    context = store.data.items[0].data.context;\r",
                    "  }\r",
                    "}, me);\r",
                    "\r",
                    "combo.on('afterrender', function (combo, eopts) {\r",
                    "  if(context !== '' && context !== undefined && combo.store.data.length == 1)\r",
                    "  combo.setValue(context);\r",
                    "}, me);\r",
                    "\r",
                    "form.getForm().findField('path').setValue(path);\r",
                    "form.getForm().findField('state').setValue(state);\r",
                    "form.getForm().findField('oldContext').setValue(context);\r",
                    "form.getForm().findField('description').setValue(description);\r",
                    "form.getForm().findField('scope').setValue(name);\r",
                    "form.getForm().findField('contextName').setValue(name);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=neweditscope]"
            },
            "designerId": "2a48375f-27f1-49a8-91c3-78266acbd3b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deleteScope",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = this.getDirTree();\r",
                    "var parent, path;\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'directory/DeleteScope',//'directory/deleteEntry',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    'nodeid': node.data.id\r",
                    "    //'path': node.data.id,\r",
                    "    //'type': 'folder',\r",
                    "    //'baseUrl': '',\r",
                    "    //'contextName': node.data.property.Context\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    var parentNode = node.parentNode;\r",
                    "    parentNode.removeChild(node);                   \r",
                    "    tree.getSelectionModel().select(parentNode);\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () {\r",
                    "    var message = 'Error deleting folder!';\r",
                    "    showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deletescope]"
            },
            "designerId": "9834062c-d166-4173-a2c8-024020df7624"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newOrEditEndpoint",
                "implHandler": [
                    "var me = this;\r",
                    "var name, description, datalayer, assembly,application, baseurl, showconfig,endpoint,wintitle, state, path, context;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "context = node.parentNode.data.text;//node.data.record.ContextName;\r",
                    "if(item.itemId == 'editendpoint') {\r",
                    "  name = node.data.record.Name;\r",
                    "  description = node.data.record.Description;\r",
                    "  datalayer = node.data.record.DataLayer;\r",
                    "  assembly = node.data.record.Assembly;\r",
                    "  application = name;\r",
                    "  wintitle =  'Edit Application \\\"' + node.data.text + '\\\"';\r",
                    "  endpoint = node.data.record.Name;//node.data.record.Endpoint; \r",
                    "  state = 'edit';\r",
                    "} else {\r",
                    "  wintitle = 'Add Application';\r",
                    "  //state = 'new';\r",
                    "  state = '';\r",
                    "  application = '';\r",
                    "  context = node.data.record.Name;\r",
                    "  path = node.internalId;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var conf = { \r",
                    "  id: 'newwin-' + node.data.id, \r",
                    "  title: wintitle, \r",
                    "  iconCls: 'tabsApplication',\r",
                    "  node: node,\r",
                    "  modal:true\r",
                    "};\r",
                    "\r",
                    "var win = Ext.widget('applicationwindow', conf);\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "\r",
                    "win.on('save', function () { \r",
                    "  win.close();\r",
                    "  me.onAppDataRefreshClick(item, e, eOpts);\r",
                    "  //if (node.isExpanded())\r",
                    "  //node.collapsed();\r",
                    "  tree.expandPath(node.getPath(), 'text');\r",
                    "}, me);\r",
                    "\r",
                    "win.on('Cancel', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "var dlCmb = me.getDatalayerCombo();\r",
                    "\r",
                    "dlCmb.on('select', function(combo, records, eopts) {\r",
                    "  if (records !== null && node.data.record !== null) {\r",
                    "    form.getForm().findField('assembly').setValue(records[0].data.assembly);\r",
                    "  }\r",
                    "}, me);\r",
                    "\r",
                    "dlCmb.on('afterrender', function (combo, eopts) {\r",
                    "  if (assembly !== '') {\r",
                    "    combo.setValue(assembly);\r",
                    "  }\r",
                    "}, me);\r",
                    "\r",
                    "form.getForm().findField('path').setValue(path);\r",
                    "form.getForm().findField('state').setValue(state);\r",
                    "form.getForm().findField('scope').setValue(context);\r",
                    "form.getForm().findField('oldAssembly').setValue(assembly);\r",
                    "form.getForm().findField('name').setValue(endpoint);\r",
                    "//form.getForm().findField('folderName').setValue(endpoint);\r",
                    "form.getForm().findField('description').setValue(description);\r",
                    "form.getForm().findField('context').setValue(context);\r",
                    "form.getForm().findField('assembly').setValue(assembly);\r",
                    "form.getForm().findField('application').setValue(application);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=neweditendpoint]"
            },
            "designerId": "c5edb0f5-01c0-4a12-810e-486578797bb6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deleteEndpoint",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'directory/deleteapplication',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    nodeid: node.data.id\r",
                    "    //'path': node.data.id,\r",
                    "    //'type': 'endpoint',\r",
                    "    //'baseUrl': node.data.record.BaseUrl,\r",
                    "    //'contextName': node.data.property.Context\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    var parentNode = node.parentNode;\r",
                    "    parentNode.removeChild(node);                   \r",
                    "    tree.getSelectionModel().select(parentNode);\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () {\r",
                    "    //Ext.Msg.alert('Warning', 'Error!!!');\r",
                    "    var message = 'Error deleting endpoint!';\r",
                    "    showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deleteendpoint]"
            },
            "designerId": "922ccc55-6a34-4a0c-b220-52bbb6eb087d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewDataLayer",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "conf = {\r",
                    "  id: 'tab-' + node.data.id,\r",
                    "  title: 'Add Data Layer'\r",
                    "};\r",
                    "var win = Ext.widget('datalayerwindow', conf);\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.getForm().findField('state').setValue('new');\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  tree.store.load();\r",
                    "  if (node.get('expanded') === false)\r",
                    "  node.expand();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('Cancel', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=newdatalayer]"
            },
            "designerId": "1e52d240-a33e-43ce-9485-31517e5e5ef4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRegenerateAll",
                "implHandler": [
                    "var me = this;\r",
                    "Ext.Ajax.request({\r",
                    "  url:'AdapterManager/RegenAll', //'directory/RegenAll',\r",
                    "  method: 'GET',\r",
                    "  success: function (result, request) {\r",
                    "    var responseObj = Ext.decode(result.responseText);\r",
                    "    var msg = '';\r",
                    "    for (var i = 0; i < responseObj.StatusList.length; i++) {\r",
                    "      var status = responseObj.StatusList[i];\r",
                    "      if (msg !== '') {\r",
                    "        msg += '\\r\\n';\r",
                    "      }\r",
                    "      msg += status.Identifier + ':\\r\\n';\r",
                    "      for (var j = 0; j < status.Messages.length; j++) {\r",
                    "        msg += '    ' + status.Messages[j] + '\\r\\n';\r",
                    "      }\r",
                    "    }\r",
                    "    showDialog(600, 340, 'NHibernate Regeneration Result', msg, Ext.Msg.OK, null);\r",
                    "  },\r",
                    "  failure: function (result, request) {\r",
                    "    var msg = result.responseText;\r",
                    "    showDialog(500, 240, 'NHibernate Regeneration Error', msg, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=regenerateall]"
            },
            "designerId": "1287fa6f-684f-43e7-97e9-64aa698508e2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onShowDataGrid",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = this.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "content = me.getMainContent();\r",
                    "//contextName = node.data.property.context,\r",
                    "contextName = node.parentNode.parentNode.parentNode.data.property.Name;\r",
                    "//endpointName = node.data.property.endpoint,\r",
                    "endpointName = node.parentNode.parentNode.data.property.Name;\r",
                    "//baseurl = node.data.property.baseUrl;\r",
                    "\r",
                    "var graph = node.data.text;\r",
                    "//var title = 'Data Grid ' + contextName + '.' + endpointName + '.' + graph;\r",
                    "var title = /*'Data Grid ' + */ node.parentNode.parentNode.parentNode.data.property.Name + '.' + node.parentNode.parentNode.data.property.Name + '.' + graph;\r",
                    "var gridPanel = content.down('dynamicgrid[title=' + title + ']');\r",
                    "\r",
                    "if (!gridPanel) {\r",
                    "\r",
                    "  content.getEl().mask(\"Loading...\", \"x-mask-loading\");\r",
                    "  gridPanel = Ext.widget('dynamicgrid', { 'title': title });\r",
                    "\r",
                    "  gridStore = gridPanel.getStore();\r",
                    "  var gridProxy = gridStore.getProxy();\r",
                    "\r",
                    "  gridStore.on('beforeload', function (store, action) {\r",
                    "    var params = store.proxy.extraParams;\r",
                    "    //params.context = contextName;\r",
                    "    params.start = (store.currentPage - 1) * store.pageSize;\r",
                    "    params.limit = store.pageSize;\r",
                    "    params.app = node.parentNode.parentNode.data.property.Name;\r",
                    "    params.scope = node.parentNode.parentNode.parentNode.data.property.Name ;\r",
                    "    //params.endpoint = endpointName;\r",
                    "    //params.baseUrl = baseurl;\r",
                    "    params.graph = graph;\r",
                    "  }, me);\r",
                    "\r",
                    "  gridProxy.on('exception', function (proxy, response, operation) {\r",
                    "    content.getEl().unmask();\r",
                    "    gridPanel.destroy();\r",
                    "    var rtext = response.responseText;\r",
                    "    var error = 'SUCCESS = FALSE';\r",
                    "    var index = rtext.toUpperCase().indexOf(error);\r",
                    "    var msg = rtext.substring(index + error.length + 2, rtext.length - 1);\r",
                    "    showDialog(500, 300, 'Error', msg, Ext.Msg.OK, null);\r",
                    "  }, me);\r",
                    "\r",
                    "  gridStore.load({\r",
                    "    callback: function (records, response) {\r",
                    "      if(records!=undefined){\r",
                    "        if (records[0]) {\r",
                    "          gridPanel.reconfigure(gridStore, records[0].store.proxy.reader.metaData.columns);\r",
                    "          content.getEl().unmask();\r",
                    "        } else {\r",
                    "          if (response)\r",
                    "          showDialog(200, 50, 'Warning', 'Authentication failure', Ext.Msg.OK, null);\r",
                    "          return true;\r",
                    "        }\r",
                    "      }\r",
                    "\r",
                    "    }\r",
                    "  });\r",
                    "  content.getEl().unmask();\r",
                    "  content.add(gridPanel);\r",
                    "}\r",
                    "content.setActiveTab(gridPanel);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=showdata]"
            },
            "designerId": "1c77f61b-be38-4544-aaa0-ec005d64b0ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRefreshFacade",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = this.getDirTree(),\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "tree.getEl().mask('Loading', 'x-mask-loading');\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'facade/refreshFacade',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    //contextName: node.data.id,\r",
                    "    scope:node.data.id,\r",
                    "    //baseUrl: node.data.property.baseUrl\r",
                    "  },\r",
                    "  success: function (o) {\r",
                    "    tree.onReload();\r",
                    "    tree.getEl().unmask();\r",
                    "  },\r",
                    "  failure: function (f, a) {\r",
                    "    tree.getEl().unmask();\r",
                    "    showDialog(400,300, 'Warning', 'Error Refreshing Facade!!!', Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=refreshfacade]"
            },
            "designerId": "57c3b303-1e1b-4a39-87f8-958702284482"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "contextCombo",
                "selector": "contextcombo"
            },
            "designerId": "0bac987b-3339-47f5-9eb5-76188e0ce0fb"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "datalayerCombo",
                "selector": "datalayercombo"
            },
            "designerId": "59e33146-dbba-4d81-9baf-380296b65010"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "baseUrlCombo",
                "selector": "availbaseurlcombo"
            },
            "designerId": "4c5113d8-400f-4fee-9097-f3a761c800b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onConfigureEndpoint",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "var datalayer = node.data.record.DataLayer;\r",
                    "\r",
                    "switch(datalayer) {\r",
                    "  case 'NHibernateLibrary':\r",
                    "  me.application.fireEvent('confignhibernate', me);\r",
                    "  break;\r",
                    "  case 'SpreadsheetLibrary':\r",
                    "  me.application.fireEvent('configspreadsheet', me);\r",
                    "  break;\r",
                    "  default:\r",
                    "  showDialog(300, 300, 'Warning', 'Datalayer ' + datalayer + ' is not configurable...', Ext.msg.OK, null);\r",
                    "  break;\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=configureendpoint]"
            },
            "designerId": "dfe2cc71-4b34-422c-8c32-d48bac3ee3a3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showContextMenu",
                "implHandler": [
                    "var me = this,\r",
                    "  tree = me.getDirTree();\r",
                    "e.stopEvent();\r",
                    "node = record.store.getAt(index);\r",
                    "\r",
                    "tree.getSelectionModel().select(node);\r",
                    "//tree.onClick(dataview, record, 0, index, e);\r",
                    "\r",
                    "var obj = node.data;\r",
                    "\r",
                    "if (obj.type === \"ScopesNode\") {\r",
                    "  var scopesMenu = Ext.widget('scopesmenu');\r",
                    "  scopesMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ScopeNode\") {\r",
                    "  var scopeMenu = Ext.widget('scopemenu');\r",
                    "  scopeMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ApplicationNode\") {\r",
                    "  var applicationMenu = Ext.widget('applicationmenu');\r",
                    "  applicationMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"DataObjectNode\") {\r",
                    "  var appDataMenu = Ext.widget('appdatamenu');  \r",
                    "  appDataMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ValueListsNode\") {\r",
                    "  var valueListsMenu = Ext.widget('valuelistsmenu');\r",
                    "  valueListsMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ValueListNode\") {\r",
                    "  var valueListMenu = Ext.widget('valuelistmenu');\r",
                    "  valueListMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ListMapNode\") {\r",
                    "  var valueListMapMenu = Ext.widget('valuelistmapmenu');\r",
                    "  valueListMapMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"GraphsNode\") {\r",
                    "  scopForExport = node.parentNode.parentNode.data.text;\r",
                    "  appForExport = node.parentNode.data.text;  \r",
                    "  var graphsMenu = Ext.widget('graphsmenu');\r",
                    "  graphsMenu.items.items[1].href = '/mapping/export/'+ scopForExport+'/'+appForExport;\r",
                    "  graphsMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"GraphNode\") {\r",
                    "  var graphMenu = Ext.widget('graphmenu');\r",
                    "  graphMenu.showAt(e.getXY());\r",
                    "}else if (obj.type === \"DataObjectsNode\") {\r",
                    "  var graphMenu = Ext.widget('appdatarefreshmenu');\r",
                    "  graphMenu.showAt(e.getXY());\r",
                    "}else if(obj.type === \"DataPropertyNode\"){\r",
                    "  if(obj.property){\r",
                    "    if(obj.property.isVirtual=='True'){\r",
                    "    \tvar virtualpropertymenu = Ext.widget('virtualpropertymenu');\r",
                    "  \t\tvirtualpropertymenu.showAt(e.getXY());\r",
                    "    }\r",
                    "  \t\r",
                    "  }\r",
                    "  \r",
                    "}\r",
                    ""
                ],
                "name": "itemcontextmenu",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "directorytree"
            },
            "designerId": "68175308-5fcb-468f-b26a-268c27070109"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAppDataRefreshClick",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "var store = tree.store;//me.store;\r",
                    "\r",
                    "if (!node)\r",
                    "node = me.getRootNode();\r",
                    "var state = tree.getState();\r",
                    "var nodeState = '/Scopes/'+node.internalId;\r",
                    "//var path = node.getPath('text');\r",
                    "//store.load(node);\r",
                    "tree.body.mask('Loading...', 'x-mask-loading');\r",
                    "//store.load(node);\r",
                    "//store.load({\r",
                    "//});\r",
                    "store.load({\r",
                    "  node:node,\r",
                    "  callback: function (records, options, success) {\r",
                    "    //var nodes = state.expandedNodes || [],\r",
                    "    //len = nodes.length;\r",
                    "    //tree.collapseAll();\r",
                    "    //Ext.each(nodes, function (path) {\r",
                    "      //tree.expandPath('/Scopes/test/ABC/Data Objects', 'text');\r",
                    "    //});\r",
                    "    tree.body.unmask();\r",
                    "  }\r",
                    "\r",
                    "});\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=refreshdata]"
            },
            "designerId": "732ae82a-ac3f-4629-9af2-93f6c58d7ccb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onShowDataGridd",
                "implHandler": [
                    "var me = this;\r",
                    "if(record.data.type == 'GraphNode')\r",
                    "me.application.fireEvent('opengraphmap', me);    \r",
                    "//me.onShowGrap(item, e, eOpts);\r",
                    "else\r",
                    "me.onShowDataGrid(item, e, eOpts);"
                ],
                "name": "itemdblclick",
                "scope": "me",
                "designer|targetType": "directory.DirectoryTree",
                "designer|controlQuery": "directorytree"
            },
            "designerId": "594cc20e-323f-4d31-a263-e3ccd4514c7e"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "scopForExport = null;\r",
                    "appForExport = null;\r",
                    "Ext.QuickTips.init();"
                ]
            },
            "designerId": "03aa7a1f-045e-41ad-aedd-ff6383bd81dc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onShowGrap",
                "designer|params": [
                    "items",
                    "e",
                    "eOpts"
                ],
                "implHandler": [
                    "alert('onShowGrap...');\r",
                    "var me = this;\r",
                    "var tree = this.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "content = me.getMainContent();\r",
                    "contextName = node.parentNode.parentNode.parentNode.data.property.Name;\r",
                    "endpointName = node.parentNode.parentNode.data.property.Name;\r",
                    "var graph = node.data.text;"
                ]
            },
            "designerId": "5080a228-4978-4d56-8ac2-a4523c085a00"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTextfieldBlur",
                "implHandler": [
                    "\r",
                    "if(component.dataIndex!=undefined){\r",
                    "  var me = this;\r",
                    "  var gridPanel  = me.getMainContent().activeTab;\r",
                    "  var gridStore = gridPanel.getStore();\r",
                    "  var gridProxy = gridStore.getProxy();\r",
                    "  gridStore.currentPage = 1;\r",
                    "  gridProxy.on('exception', function (proxy, response, operation) {\r",
                    "    //centerPanel.getEl().unmask();\r",
                    "    gridPanel.destroy();\r",
                    "    var rtext = response.responseText;\r",
                    "    if(rtext!=undefined){\r",
                    "      var error = 'SUCCESS = FALSE';\r",
                    "      var index = rtext.toUpperCase().indexOf(error);\r",
                    "      msg = rtext;\r",
                    "      showDialog(500, 300, 'Error', msg, Ext.Msg.OK, null);\r",
                    "      \r",
                    "    }\r",
                    "    \r",
                    "  }, me);\r",
                    "  gridStore.load({\r",
                    "    callback: function (records, response) \r",
                    "    {                                     \r",
                    "      if(records!=undefined && records[0]!=undefined && records[0].store.proxy.reader.metaData) {\r",
                    "        gridPanel.reconfigure(gridStore,  records[0].store.proxy.reader.metaData.columns);\r",
                    "      }\r",
                    "      \r",
                    "    }\r",
                    "  });\r",
                    "  \r",
                    "}"
                ],
                "name": "blur",
                "scope": "me",
                "designer|targetType": "Ext.form.field.Text",
                "designer|controlQuery": "textfield"
            },
            "designerId": "c9a5f019-4a7d-4008-8ee0-399b2fe492bf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFileUpload",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var win = Ext.widget('fileuploadwindow');\r",
                    "var form = win.down('form');\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "var formRecord = {\r",
                    "  scope: node.parentNode.data.text,\r",
                    "  application: node.data.text \r",
                    "};\r",
                    "\r",
                    "\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=fileupload]"
            },
            "designerId": "d2ae41dd-5842-4769-ac3b-8b813cc54666"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFileDownload",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "var win = Ext.widget('filedownloadwindows');\r",
                    "\r",
                    "//win.scope = node.parentNode.data.text;\r",
                    "//win.application = node.data.text ;\r",
                    "var form = win.down('downloadform');\r",
                    "var formRecord = {\r",
                    "  scope: node.parentNode.data.text,\r",
                    "  application: node.data.text \r",
                    "};\r",
                    "\r",
                    "\r",
                    "form.getForm().setValues(formRecord);\r",
                    "/*\r",
                    "win.on('Save', function () {\r",
                    "win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "win.destroy();\r",
                    "}, me);\r",
                    "*/\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=filedownload]"
            },
            "designerId": "a85515fb-2ef5-4ffa-851f-e0e5853c879b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddSettings",
                "implHandler": [
                    "var me = this;\r",
                    "var nameID;\r",
                    "var valueID;\r",
                    "var myFieldSet = Ext.getCmp('settingfieldset');\r",
                    "if(myFieldSet.items.items.length>=1){\r",
                    "  var nameID = 'key'+(myFieldSet.items.items.length+1);\r",
                    "  var valueID = 'value'+(myFieldSet.items.items.length+1);\r",
                    "}else{\r",
                    "  var nameID = 'key1';\r",
                    "  var valueID = 'value1';\r",
                    "}\r",
                    "var abc = me.addSettings(\"\", \"\", nameID, valueID);\r",
                    "myFieldSet.add(abc);\r",
                    "myFieldSet.doLayout();\r",
                    "myFieldSet.items.items[myFieldSet.items.length-1].items.items[0].allowBlank = false;\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "button[action = addsettings]"
            },
            "designerId": "b1a24025-c518-4779-88c0-ee487b96ed50"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addSettings",
                "designer|params": [
                    "key",
                    "value",
                    "nameID",
                    "valueID"
                ],
                "implHandler": [
                    "return[ {\r",
                    "\t\t\t\t\t\t\t  xtype: 'container',\r",
                    "\t\t\t\t\t\t\t  margin:'10 20 0 96',\r",
                    "\t\t\t\t\t\t\t  //bodyStyle: 'padding:10px 20px 0 70px',\r",
                    "\t\t\t\t\t\t\t  layout:'column',\r",
                    "\t\t\t\t\t\t\t  items: [\r",
                    "                         {\r",
                    "                           xtype: 'textfield',\r",
                    "                           name:nameID,\r",
                    "                           value:key,\r",
                    "                           columnWidth:'0.30',\r",
                    "                           //width:164,\r",
                    "                           allowBlank: true\r",
                    "                          },\r",
                    "                          {\r",
                    "                            xtype: 'textarea',\r",
                    "                            name:valueID,\r",
                    "                            value:value,\r",
                    "                            columnWidth:'0.60',\r",
                    "                            grow : false,\r",
                    "                            //width:270,  // height: 50,\r",
                    "                            margin:'0 0 0 3',\r",
                    "                            //margin:'0 0 0 3'\r",
                    "                                       },\r",
                    "                          {\r",
                    "                            xtype: 'button',\r",
                    "                            //flex: 1,\r",
                    "                            text: 'Delete',\r",
                    "                            columnWidth:'0.10',\r",
                    "                            margin:'0 0 0 3',\r",
                    "                            //width:48,\r",
                    "                            //margin:'0 0 0 3',\r",
                    "                            //action:'DeleteMe',\r",
                    "                            //icon :'../../ux/css/images/right2.gif',//'remove-button',\r",
                    "                            //columnWidth: 0.10,\r",
                    "                            //style: 'margin:0 0 0 49;',\r",
                    "                            //style: 'float: right;',\r",
                    "                            tooltip: 'Click to Delete settings',\r",
                    "                            handler : function (){\r",
                    "                                 this.findParentByType('container').destroy();\r",
                    "                                \r",
                    "                            }\r",
                    "                           }\r",
                    "\t\t\t\t\t\t\t     \r",
                    "\t\t\t\t\t\t\t  ]\r",
                    "\t\t\t\t\t\t}\r",
                    "\t                         \r",
                    "\t   ]"
                ]
            },
            "designerId": "2b123a88-5420-4bca-b78c-c3a96d882879"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onApplicationFormAfterRender",
                "implHandler": [
                    "var key = '';\r",
                    "var value = '';\r",
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "if (node.data.record != null) {\r",
                    "  if(node.data.record.Configuration!=null){\r",
                    "    if (node.data.record.Configuration.AppSettings != null) {\r",
                    "      if(node.data.record.Configuration.AppSettings.Settings!=null){\r",
                    "        for(var i=0;i<node.data.record.Configuration.AppSettings.Settings.length;i++){\r",
                    "          key = node.data.record.Configuration.AppSettings.Settings[i].Key;\r",
                    "          value = node.data.record.Configuration.AppSettings.Settings[i].Value;\r",
                    "          var newSetting = me.addSettings(key,value, ('key'+i), ('value'+i));\r",
                    "          newSetting[0].items[0].allowBlank = false;\r",
                    "          if(component.items.map['settingfieldset'])\r",
                    "          component.items.map['settingfieldset'].add(newSetting);\r",
                    "        }\r",
                    "      }\r",
                    "    }\r",
                    "  }\r",
                    "}"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "directory.ApplicationForm",
                "designer|controlQuery": "form"
            },
            "designerId": "6ec7c09e-ed7e-414b-b47e-bd07b8c2f64a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRefreshDataObjectCache",
                "implHandler": [
                    "    var me = this;\r",
                    "    var tree = me.getDirTree();\r",
                    "    var node = tree.getSelectedNode(); \r",
                    "\r",
                    "    Ext.Ajax.request({\r",
                    "      url: 'AdapterManager/RefreshObjectCache',\r",
                    "      method: 'POST',\r",
                    "      timeout: 3600000,  // 1 hour\r",
                    "      params: {\r",
                    "        'nodeid': node.data.id,//node.attributes.id,\r",
                    "        'objectType': node.data.text//node.text\r",
                    "      },\r",
                    "      success: function (response, request) {\r",
                    "        var responseObj = Ext.decode(response.responseText);\r",
                    "\r",
                    "        if (responseObj.Level == 0) {\r",
                    "          showDialog(450, 100, 'Refresh Cache Result', 'Object cache refreshed successfully.', Ext.Msg.OK, null);\r",
                    "        }\r",
                    "        else {\r",
                    "          showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);\r",
                    "        }\r",
                    "      },\r",
                    "      failure: function (response, request) {\r",
                    "        showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);\r",
                    "      }\r",
                    "    })\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=refreshdataobjectcache]"
            },
            "designerId": "5ffb4f71-6c11-471b-ac80-a3be745cc55e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRefreshCache",
                "implHandler": [
                    "    \r",
                    "    var me = this;\r",
                    "    var tree = me.getDirTree();\r",
                    "    var node = tree.getSelectedNode(); \r",
                    "    Ext.Ajax.request({\r",
                    "      url: 'AdapterManager/RefreshCache',\r",
                    "      method: 'POST',\r",
                    "      timeout: 28800000,  // 8 hours\r",
                    "      params: {\r",
                    "        'nodeid': node.data.id//node.attributes.id\r",
                    "      },\r",
                    "      success: function (response, request) {\r",
                    "        var responseObj = Ext.decode(response.responseText);\r",
                    "\r",
                    "        if (responseObj.Level == 0) {\r",
                    "          showDialog(450, 100, 'Refresh Cache Result', 'Cache refreshed successfully.', Ext.Msg.OK, null);\r",
                    "        }\r",
                    "        else {\r",
                    "          showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);\r",
                    "        }\r",
                    "      },\r",
                    "      failure: function (response, request) {\r",
                    "        showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);\r",
                    "      }\r",
                    "    })"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=refreshcache]"
            },
            "designerId": "0fabcfc6-47df-412c-8458-30b4d41a0a5b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onImportCache",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var win = Ext.widget('importcachewindow');\r",
                    "var form = win.down('form');\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "var formRecord = {\r",
                    "  nodeid: node.data.id \r",
                    "};\r",
                    "\r",
                    "\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=importcache]"
            },
            "designerId": "e3cfd022-b643-493c-b3eb-a091d55c4332"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteCache",
                "implHandler": [
                    "\r",
                    "    var me = this;\r",
                    "    var tree = me.getDirTree();\r",
                    "    var node = tree.getSelectedNode(); \r",
                    "    Ext.Ajax.request({\r",
                    "      url: 'AdapterManager/DeleteCache',\r",
                    "      method: 'POST',\r",
                    "      timeout: 120000,  // 2 minutes\r",
                    "      params: {\r",
                    "        'nodeid': node.data.id//node.attributes.id\r",
                    "      },\r",
                    "      success: function (response, request) {\r",
                    "        var responseObj = Ext.decode(response.responseText);\r",
                    "\r",
                    "        if (responseObj.Level == 0) {\r",
                    "          showDialog(450, 100, 'Delete Cache Result', 'Cache deleted successfully.', Ext.Msg.OK, null);\r",
                    "        }\r",
                    "        else {\r",
                    "          showDialog(500, 160, 'Delete Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);\r",
                    "        }\r",
                    "      },\r",
                    "      failure: function (response, request) {\r",
                    "        showDialog(500, 160, 'Delete Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);\r",
                    "      }\r",
                    "    })"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action = deletcache]"
            },
            "designerId": "836521ab-d6e7-43e5-9959-d8ef31aed428"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddVirtualProperty",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var win = Ext.widget('virtualpropertywindow');\r",
                    "var form = win.down('form');\r",
                    "var grid = form.down('grid');\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "var properties = [];\r",
                    "var formRecord = {\r",
                    "  objectName: node.data.text,\r",
                    "  scope:node.data.id.split('/')[0],\r",
                    "  app:node.data.id.split('/')[1]\r",
                    "};\r",
                    "var ii=0;\r",
                    "node.eachChild(function(child) {\r",
                    "  properties.push([ii, child.data.text, child.data.property.Name]);\r",
                    "  ii++;\r",
                    "});\r",
                    "\r",
                    "var mapCombo = grid.down('#propertyNameCmb').getEditor();//form.down('#propertyNameCmb');\r",
                    "mapCombo.store = Ext.create('Ext.data.SimpleStore', {\r",
                    "  fields: ['value', 'text', 'name'],\r",
                    "  autoLoad: true,\r",
                    "  data: properties\r",
                    "});\r",
                    "\r",
                    "\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=addvirtualproperty]"
            },
            "designerId": "248dcb1b-8d41-4b6d-a2f7-856d5487d487"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSaveVirtualProperties",
                "implHandler": [
                    "var me = this;\r",
                    "var form = button.up('form').getForm();\r",
                    "var objectName = form.findField('objectName').getValue();\r",
                    "var propertyName = form.findField('propertyName').getValue();\r",
                    "//var datatype = form.findField('datatype').getValue();\r",
                    "var delimeter = form.findField('delimeter').getValue();\r",
                    "var scope = form.findField('scope').getValue();\r",
                    "var app = form.findField('app').getValue();\r",
                    "\r",
                    "var virtualProperty = {};\r",
                    "virtualProperty.virtualProperties = [];\r",
                    "var folder = {};\r",
                    "folder.objectName = objectName;\r",
                    "folder.delimiter = delimeter;\r",
                    "folder.virtualPropertyValues = [];\r",
                    "folder.columnName = propertyName;\r",
                    "folder.propertyName = propertyName;\r",
                    "folder.dataType = 11;\r",
                    "folder.dataLength = 0;\r",
                    "folder.isNullable = true;\r",
                    "folder.keyType = 1;\r",
                    "folder.showOnIndex = false;\r",
                    "folder.numberOfDecimals = 0;\r",
                    "folder.isReadOnly = false;\r",
                    "folder.showOnSearch = false;\r",
                    "folder.isHidden = false;\r",
                    "folder.description = null;\r",
                    "folder.aliasDictionary = null;\r",
                    "folder.referenceType = null;\r",
                    "folder.isVirtual = true;\r",
                    "virtualProperty.virtualProperties.push(folder);\r",
                    "var gridStore = button.up('form').down('grid').getStore();\r",
                    "\r",
                    "for(var i=0;i<gridStore.data.length;i++){\r",
                    "  var virtualPropertyValues = {};\r",
                    "  if(gridStore.data.items[i].data.propertyType == 'Constant')\r",
                    "  virtualPropertyValues.type = 0;\r",
                    "  else\r",
                    "  virtualPropertyValues.type = 1;\r",
                    "\r",
                    "  virtualPropertyValues.valueText = gridStore.data.items[i].data.valueText;\r",
                    "  virtualPropertyValues.propertyName = gridStore.data.items[i].data.propertyName;\r",
                    "  virtualPropertyValues.length = gridStore.data.items[i].data.propertyLength;\r",
                    "  folder.virtualPropertyValues.push(virtualPropertyValues);\r",
                    "}\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'AdapterManager/SaveVirtualProperties',\r",
                    "  timeout: 600000,\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    scope: scope,\r",
                    "    app: app,\r",
                    "    tree: Ext.JSON.encode(virtualProperty)\r",
                    "  },\r",
                    "  success: function (response, request) {\r",
                    "\r",
                    "    var msg = 'Saved Successfully...'\r",
                    "    showDialog(300, 80, 'Saving Result', msg, Ext.Msg.OK, null);\r",
                    "\r",
                    "  },\r",
                    "  failure: function (response, request) {\r",
                    "    showDialog(400, 100, 'Saving Result', 'An error has occurred while saving virtual property.', Ext.Msg.OK, null);\r",
                    "\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "button[action=savevirtualproperties]"
            },
            "designerId": "3de0ac9a-d81b-4dbf-989e-4f82c22f3a85"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onEditVirtualProperty",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var win = Ext.widget('virtualpropertywindow');\r",
                    "win.setTitle('Edit Virtual Property');\r",
                    "var form = win.down('form');\r",
                    "var grid = form.down('grid');\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "var properties = [];\r",
                    "var formRecord = {\r",
                    "  objectName: node.data.text,\r",
                    "  scope:node.data.id.split('/')[0],\r",
                    "  app:node.data.id.split('/')[1]\r",
                    "};\r",
                    "var ii=0;\r",
                    "node.eachChild(function(child) {\r",
                    "  properties.push([ii, child.data.text, child.data.property.Name]);\r",
                    "  ii++;\r",
                    "});\r",
                    "\r",
                    "var mapCombo = grid.down('#propertyNameCmb').getEditor();//form.down('#propertyNameCmb');\r",
                    "mapCombo.store = Ext.create('Ext.data.SimpleStore', {\r",
                    "  fields: ['value', 'text', 'name'],\r",
                    "  autoLoad: true,\r",
                    "  data: properties\r",
                    "});\r",
                    "\r",
                    "\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=editvirtualproperty]"
            },
            "designerId": "039ddfc1-adf3-47c3-a9aa-968fb8b51256"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteVirtualProperty",
                "implHandler": [
                    "alert('going to dele...');"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deletevirtualproperty]"
            },
            "designerId": "ba03f465-18e8-432c-b41c-69669bfea836"
        }
    ]
}