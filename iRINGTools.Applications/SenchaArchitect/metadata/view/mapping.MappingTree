{
    "type": "Ext.tree.Panel",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "contextName": null,
        "endpoint": null,
        "baseUrl": null,
        "multiSelect": null,
        "stateEvents": [
            "itemcollapse",
            "itemexpand"
        ],
        "stateId": "mapping-treestate",
        "stateful": true,
        "border": true,
        "height": null,
        "minWidth": null,
        "width": null,
        "designer|userClassName": "mapping.MappingTree",
        "designer|userAlias": "mappingtree",
        "requires": [
            "AM.view.override.mapping.MappingTree"
        ],
        "collapsible": null,
        "title": null,
        "store": "MappingStore",
        "rootVisible": false,
        "selType": "rowmodel"
    },
    "configAlternates": {
        "border": "boolean",
        "multiSelect": "boolean"
    },
    "designerId": "37ca6ad3-7180-4c3d-bcd8-22f9493320a6",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "contextName",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "endpoint",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "baseUrl",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "multiSelect",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "Ext.tree.View",
            "reference": {
                "name": "viewConfig",
                "type": "object"
            },
            "codeClass": null,
            "designerId": "a291d01c-747c-4845-9481-a6e55174dd98",
            "cn": [
                {
                    "type": "Ext.tree.plugin.TreeViewDragDrop",
                    "reference": {
                        "name": "plugins",
                        "type": "array"
                    },
                    "codeClass": "Ext.tree.plugin.TreeViewDragDrop",
                    "userConfig": {
                        "ddGroup": "refdataGroup",
                        "enableDrag": false
                    },
                    "designerId": "2adf315c-0398-4c85-919d-2f78e1eff691",
                    "cn": [
                        {
                            "type": "basiceventbinding",
                            "reference": {
                                "name": "listeners",
                                "type": "array"
                            },
                            "codeClass": null,
                            "userConfig": {
                                "fn": "onBeforeNodeDrop",
                                "implHandler": [
                                    "\r",
                                    "var me = this;\r",
                                    "var pan = me.up('mappingpanel');\r",
                                    "me.getParentClass(overModel);\r",
                                    "var nodetype, thistype, icn, txt, templateId, rec, parentId, context, classMapIndex;\r",
                                    "var tempArr = pan.graph.split('/');//pan.graphName;\r",
                                    "var graphName = tempArr[tempArr.length-1];\r",
                                    "var modelType = data.records[0].data.type;\r",
                                    "if (overModel.data.type == 'RoleMapNode') {\r",
                                    "\r",
                                    "  reference = data.records[0].data.record.Uri;\r",
                                    "  label = data.records[0].data.record.Label;\r",
                                    "  roleId = overModel.data.record.id;\r",
                                    "  roleName = overModel.data.record.name;\r",
                                    "  rec = data.records[0].data.record;\r",
                                    "  txt = data.records[0].data.record.Label;\r",
                                    "  parentId = me.parentClass;\r",
                                    "  f = false;\r",
                                    "  var classIndex = me.parentClassIndex;\r",
                                    "  var index = overModel.parentNode.parentNode.indexOf(overModel.parentNode);\r",
                                    "  me.getEl().mask('Loading...');\r",
                                    "  //this.getEl().mask('Loading...');\r",
                                    "  Ext.Ajax.request({\r",
                                    "    url: 'mapping/makereference',//'mapping/mapreference',\r",
                                    "    method: 'POST',\r",
                                    "    params: {\r",
                                    "      refClassId: reference,\r",
                                    "      classId: parentId,\r",
                                    "      refClassLabel: label,\r",
                                    "      roleId: roleId,\r",
                                    "      roleName: roleName,\r",
                                    "      scope: pan.contextName,\r",
                                    "      //ctx: pan.contextName,\r",
                                    "      app: pan.endpoint,\r",
                                    "      templateIndex: index,\r",
                                    "      graph: graphName,\r",
                                    "      classIndex: classIndex\r",
                                    "      //baseUrl: pan.baseUrl\r",
                                    "    },\r",
                                    "    success: function (result, request) {\r",
                                    "      me.getEl().unmask();\r",
                                    "      //this.getEl().unmask();\r",
                                    "      me.onReload();\r",
                                    "    },\r",
                                    "    failure: function (result, request) {\r",
                                    "      //don't drop it\r",
                                    "      return false;\r",
                                    "    }\r",
                                    "  });\r",
                                    "}\r",
                                    "if(modelType == 'TemplateNode') { //(data.records[0].data.type == 'TemplateNode') {\r",
                                    "  ntype = overModel.data.type;\r",
                                    "  parentid = overModel.data.identifier;\r",
                                    "  classMapIndex = overModel.data.identifierIndex;\r",
                                    "  thistype = data.records[0].data.type;\r",
                                    "  icn = 'Content/img/template-map.png';\r",
                                    "  txt = data.records[0].data.record.Label;\r",
                                    "  templateId = data.records[0].data.identifier;\r",
                                    "  rec = data.records[0].data.record;\r",
                                    "  context = overModel.data.id + '/' + txt;\r",
                                    "  lf = false;\r",
                                    "  me.getEl().mask('Loading...');\r",
                                    "  Ext.Ajax.request({\r",
                                    "    url: 'mapping/addtemplatemap',\r",
                                    "    timeout: 600000,\r",
                                    "    method: 'POST',\r",
                                    "    params: {\r",
                                    "      contextName: pan.contextName,\r",
                                    "      ctx: context,//overModel.internalId,\r",
                                    "      endpoint: pan.endpoint,\r",
                                    "      baseUrl: pan.baseUrl,\r",
                                    "      nodetype: thistype,\r",
                                    "      parentType: ntype,\r",
                                    "      parentId: parentid,\r",
                                    "      classMapIndex: classMapIndex,\r",
                                    "      id: templateId,\r",
                                    "      graphName: graphName\r",
                                    "    },\r",
                                    "    success: function (result, request) {\r",
                                    "      //alert('success...');\r",
                                    "      me.onReload();\r",
                                    "      me.getEl().unmask();\r",
                                    "      return false;\r",
                                    "    },\r",
                                    "    failure: function (result, request) {\r",
                                    "      //alert('failure..');\r",
                                    "      //me.onReload();\r",
                                    "      //me.getEl().unmask();\r",
                                    "      return false;\r",
                                    "\r",
                                    "    }\r",
                                    "  });\r",
                                    "}\r",
                                    "else {\r",
                                    "  return false;\r",
                                    "}\r",
                                    "return false;\r",
                                    ""
                                ],
                                "name": "beforedrop",
                                "scope": "me"
                            },
                            "designerId": "95094aab-ec9f-4634-b1a4-bbe5fa1a1dfb"
                        }
                    ]
                }
            ]
        },
        {
            "type": "Ext.toolbar.Toolbar",
            "reference": {
                "name": "dockedItems",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "dock": "top",
                "width": null
            },
            "designerId": "2c635a91-7155-4759-93ac-8c9b1fb7c4a9",
            "cn": [
                {
                    "type": "Ext.button.Button",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "layout|flex": null,
                        "icon": "Content/img/16x16/view-refresh.png",
                        "text": "Reload Tree"
                    },
                    "designerId": "04534e97-86da-4915-867c-97f0e1aa28f9",
                    "cn": [
                        {
                            "type": "fixedfunction",
                            "reference": {
                                "name": "items",
                                "type": "array"
                            },
                            "codeClass": null,
                            "userConfig": {
                                "fn": "handler",
                                "designer|params": [
                                    "button",
                                    "event"
                                ],
                                "implHandler": [
                                    "var tree = button.up('toolbar').up('panel');\r",
                                    "var node = tree.getRootNode();\r",
                                    "tree.onReload(node);"
                                ]
                            },
                            "designerId": "1a6dcaee-5838-4ef5-aa56-8e8998924204"
                        }
                    ]
                },
                {
                    "type": "Ext.button.Button",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "layout|flex": null,
                        "icon": "Content/img/16x16/document-save.png",
                        "text": "Save"
                    },
                    "designerId": "2adf3184-ac0d-46d8-b1c7-c480fe35c97c",
                    "cn": [
                        {
                            "type": "fixedfunction",
                            "reference": {
                                "name": "items",
                                "type": "array"
                            },
                            "codeClass": null,
                            "userConfig": {
                                "fn": "handler",
                                "designer|params": [
                                    "button",
                                    "event"
                                ],
                                "implHandler": [
                                    "me.onSave();"
                                ]
                            },
                            "designerId": "82bbf5e6-2b97-4acb-bd8e-0373f85e7191"
                        }
                    ]
                }
            ]
        },
        {
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showContextMenu",
                "implHandler": [
                    "var me = this;\r",
                    "e.stopEvent();\r",
                    "var obj = record.store.getAt(index).data;\r",
                    "\r",
                    "if (obj.type == \"TemplateMapNode\") {\r",
                    "  var templatemapMenu = Ext.widget('templatemapmenu');\r",
                    "  templatemapMenu.showAt(e.getXY());\r",
                    "} else if (obj.type == \"RoleMapNode\") {\r",
                    "  var rolemapMenu = Ext.widget('rolemapmenu');\r",
                    "  rolemapMenu.showAt(e.getXY());\r",
                    "} else if (obj.type == \"ClassMapNode\") {\r",
                    "  var classmapMenu = Ext.widget('classmapmenu');\r",
                    "  classmapMenu.showAt(e.getXY());\r",
                    "}"
                ],
                "name": "itemcontextmenu",
                "scope": "me"
            },
            "designerId": "59e5cfbb-a06d-4dfe-9929-c8a2781031c8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "applyState",
                "designer|params": [
                    "state"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var nodes = state.expandedNodes || [],\r",
                    "  len = nodes.length;\r",
                    "me.collapseAll();\r",
                    "Ext.each(nodes, function (path) {\r",
                    "  me.expandPath(path, 'text');\r",
                    "});\r",
                    "me.callParent(arguments);"
                ]
            },
            "designerId": "3a9d7c9f-0c8e-4567-adf6-b7cc9e0383de"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getState",
                "implHandler": [
                    "var me = this;\r",
                    "var nodes = [], state = me.callParent();\r",
                    "me.getRootNode().eachChild(function (child) {\r",
                    "  // function to store state of tree recursively \r",
                    "  var storeTreeState = function (node, expandedNodes) {\r",
                    "    if (node.isExpanded() && node.childNodes.length > 0) {\r",
                    "      expandedNodes.push(node.getPath('text'));\r",
                    "      node.eachChild(function (child) {\r",
                    "        storeTreeState(child, expandedNodes);\r",
                    "      });\r",
                    "    }\r",
                    "  };\r",
                    "  storeTreeState(child, nodes);\r",
                    "});\r",
                    "Ext.apply(state, {\r",
                    "  expandedNodes: nodes\r",
                    "});\r",
                    "return state;"
                ]
            },
            "designerId": "60938214-271e-49cb-9193-46f378631790"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onReload",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var mappingPanel = me.up('mappingpanel');\r",
                    "var graphFullName = me.up('mappingpanel').graph;//me.up('mappingpanel').graphName;\r",
                    "var graphNameArr = graphFullName.split('/');\r",
                    "var graphName = graphNameArr[graphNameArr.length-1];\r",
                    "var path, graphNode, context, endpoint, id;\r",
                    "var node = me.getSelectedNode();\r",
                    "if (!node){\r",
                    "  node = me.getRootNode(); \r",
                    "  //context = node.firstChild.data.id.split('/')[0];\r",
                    "  //endpoint = node.firstChild.data.id.split('/')[1];\r",
                    "  //id = node.firstChild.data.id;\r",
                    "}else{\r",
                    "\r",
                    "  //context = node.data.id.split('/')[0];\r",
                    "  //endpoint = node.data.id.split('/')[1];\r",
                    "  //id = node.data.id;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var store = me.store;\r",
                    "var params = store.getProxy().extraParams;\r",
                    "/*var root = me.getRootNode();\r",
                    "root.eachChild(function(child) {\r",
                    "if(child.data.text == graphName)\r",
                    "graphNode = child;\r",
                    "});*/\r",
                    "var state = me.getState();\r",
                    "if (node) {\r",
                    "  //mappingPanel.body.mask('Loading...', 'x-mask-loading');\r",
                    "  /*path = node.getPath('text');\r",
                    "  store.load(node);\r",
                    "  if(node.isExpanded())\r",
                    "  node.collapse();\r",
                    "  */\r",
                    "  store.on('beforeload', function (store, operation, eopts) {\r",
                    "    //alert('before load of mapping tree..');\r",
                    "    //params.contextName = context;\r",
                    "    //params.endpoint = endpoint;\r",
                    "    //params.id = id;\r",
                    "    //params.tempNode = id;\r",
                    "    params.graph = graphName;\r",
                    "  }, me);\r",
                    "\r",
                    "  /*store.load({\r",
                    "  node: node,\r",
                    "  callback: function(records, options, success){\r",
                    "  mappingPanel.body.unmask();\r",
                    "\r",
                    "  }\r",
                    "  });\r",
                    "  */\r",
                    "\r",
                    "  store.load({\r",
                    "    callback: function (records, options, success) {\r",
                    "      \r",
                    "      var nodes = state.expandedNodes || [];\r",
                    "      var len = nodes.length;\r",
                    "      if(len>0)\r",
                    "      me.collapseAll();\r",
                    "      Ext.each(nodes, function (path) {\r",
                    "      \tme.expandPath(path, 'text');\r",
                    "      });\r",
                    "      //me.expandPath('/OctGraph/IdentificationByTag', 'text');\r",
                    "      // me.applyState(state);\r",
                    "    }\r",
                    "\r",
                    "  });\r",
                    "\r",
                    "}\r",
                    "\r",
                    "/*if(path) {\r",
                    "me.expandPath(path, 'text');\r",
                    "me.getSelectionModel().select(node);\r",
                    "}*/"
                ]
            },
            "designerId": "73376ff7-78cf-4038-96dd-5bfbe415812b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSave",
                "implHandler": [
                    "var me = this;\r",
                    "var mapPanel = me.isContained;\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/updateMapping',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    //contextName: mapPanel.context,\r",
                    "    //endpoint: mapPanel.endpoint,\r",
                    "    scope: mapPanel.contextName,\r",
                    "    application: mapPanel.endpoint,\r",
                    "    baseUrl: mapPanel.baseUrl\r",
                    "  },\r",
                    "  success: function (result, request) {\r",
                    "    me.onReload();\r",
                    "  },\r",
                    "  failure: function (result, request) {\r",
                    "    return false;\r",
                    "  }\r",
                    "});"
                ]
            },
            "designerId": "f7b5408b-67e1-4090-934b-208862d9e429"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getParentClass",
                "designer|params": [
                    "n"
                ],
                "implHandler": [
                    "if(n!=undefined)\r",
                    "{\r",
                    "  if (n.parentNode !== null && n.parentNode !== undefined) {\r",
                    "    if ((n.parentNode.data.type == 'ClassMapNode' || \r",
                    "    n.parentNode.data.type == 'GraphMapNode') && \r",
                    "    n.parentNode.data.identifier !== undefined) {\r",
                    "      this.parentClass = n.parentNode.data.identifier;\r",
                    "      this.parentClassIndex = n.parentNode.data.identifierIndex;\r",
                    "      return this.parentClass;\r",
                    "    }\r",
                    "    else {\r",
                    "      this.getParentClass(n.parentNode);\r",
                    "    }\r",
                    "  }\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "797ba171-8f6e-4f14-92ac-a2e8956cf122"
        },
        {
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBeforeLoad",
                "implHandler": [
                    "//alert('onBeforeLoad of tree.....'+operation.node.data.type);\r",
                    "\r",
                    "/*var tempIdArr = operation.node.data.id.split('/');\r",
                    "var tempId = tempIdArr[tempIdArr.length-1];\r",
                    "var tempNode;\r",
                    "if(store.tree.root.firstChild!=undefined)\t\t\r",
                    "tempNode = store.tree.root.firstChild.data.id+'/'+tempId;\r",
                    "*/\r",
                    "\r",
                    "//alert('this is beforeload...');\r",
                    "store.proxy.extraParams.type = operation.node.data.type;\r",
                    "store.proxy.extraParams.index = operation.node.data.index;\r",
                    "if (store.proxy.extraParams !== undefined) {\r",
                    "  store.proxy.extraParams.id = operation.node.data.id;\r",
                    "\r",
                    "  if(operation.node.data.type == 'ClassMapNode')\r",
                    "  store.proxy.extraParams.index = operation.node.data.identifierIndex;\r",
                    "  /*\r",
                    "  store.proxy.extraParams.id = operation.node.data.identifier;\r",
                    "  store.proxy.extraParams.tempNode = tempNode;\r",
                    "  */\r",
                    "}"
                ],
                "name": "beforeload",
                "scope": "me"
            },
            "designerId": "de2f8b80-9cdf-47df-a77a-b671d685ae89"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getSelectedNode",
                "implHandler": [
                    "var me = this;\r",
                    "var selected = me.getSelectionModel().getSelection();\r",
                    "return selected[0];"
                ]
            },
            "designerId": "d33a65fb-af75-4cf5-93fe-b8e94ffef6e3"
        },
        {
            "type": "processcfgfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "processMappingTree",
                "designer|params": [
                    "config"
                ],
                "implHandler": [
                    "//var storeId = Ext.data.IdGenerator.get(\"uuid\").generate();\r",
                    "//config.store = Ext.create('AM.store.MappingStore', {\r",
                    "//storeId: \"Mapping_\" + storeId\r",
                    "//}); \r",
                    "//return config;\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "ea9b7a41-7562-4e41-bdc8-9db2bc94e0f0"
        },
        {
            "type": "Ext.selection.RowModel",
            "reference": {
                "name": "selModel",
                "type": "object"
            },
            "codeClass": "Ext.selection.RowModel",
            "userConfig": {
                "mode": null
            },
            "designerId": "69a0059f-dff7-43fe-8859-52ee79bb6161"
        }
    ]
}