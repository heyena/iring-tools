/*
* File: Scripts/AM/view/directory/RootPopUpForm.js
*
* This file was generated by Sencha Architect version 2.2.2.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 4.1.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 4.1.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('AM.view.directory.RootPopUpForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.RootPopUpForm',
    requires: ['Ext.ux.form.CheckboxListCombo'],
    node: '',
    bodyStyle: 'padding:10px 5px 0',
    url: 'directory/Root',

    initComponent: function () {
        var me = this;

        me.initialConfig = Ext.apply({
            url: 'directory/Root'
        }, me.initialConfig);

        Ext.applyIf(me, {
            defaults: {
                anchor: '100%',
                msgTarget: 'side'
            },
            dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            items: [
            {
                xtype: 'tbfill'
            },
            {
                xtype: 'button',
                handler: function (button, event) {
                    me.onSave();
                },
                text: 'Ok'
            },
            {
                xtype: 'button',
                handler: function (button, event) {
                    me.onReset();
                },
                text: 'Cancel'
            }
          ]
        }
      ],
        items: [
            {
                xtype: 'hiddenfield',
                name: 'id'
            },
            {
                xtype: 'hiddenfield',
                name: 'path'
            },
            {
                xtype: 'hiddenfield',
                name: 'state'
            },
            {
                xtype: 'hiddenfield',
                name: 'oldContext'
            },
            {
                xtype: 'hiddenfield',
                name: 'name'
            },
            {
                xtype: 'textfield',
                fieldLabel: 'Display Name',
                name: 'displayName',
                allowBlank: false
            },
            {
                xtype: 'hiddenfield',
                itemId: 'contextname',
                name: 'contextName'
            },
            {
                xtype: 'checkboxlistcombo',
                width: 180,
                multiSelect: true,
                itemId: 'permissionitem',
                fieldLabel: 'Permissions:',
                labelSeparator: '',
                emptyText: '',
                allowBlank: true,
                name: 'permissions',
                displayField: 'permission',
                autoSelect: false,
                queryMode: 'remote',
                store: 'PermissionsS',
                valueField: 'permission',
                hidden: false
                /*store: new TIP.store.RepositoryStore({
                proxy: {
                type: 'ajax',
                url: 'getRepositories',
                reader: {
                type: 'json'
                },
                extraParams:{
                isReadOnly : true
                }
                }
                }),
                ,
                listeners: {
                beforequery : function(qe, eopt){
                var me  = this;
                me.store.reload();
                me.store.on('beforeload', function(store, action) {
                var params = store.proxy.extraParams;
                params.isReadOnly = true;
                }, me);
                }
                }*/
            }
          ]
        });

        me.callParent(arguments);
    },
    onSave: function () {
        var me = this;
        var win = me.up('window');
        var form = me.getForm();
        var folderName = form.findField('displayName').getValue();
        var state = form.findField('state').getValue();
        var contextNameField = form.findField('contextName');
        var node = me.node;

        //form.findField('contextName').setValue(folderName);
        //    var context = form.findField('contextCombo').getValue();
        //contextNameField.setValue(context);

        if (state == 'new')
            form.findField('name').setValue(folderName);

        //        if (form.findField('cacheDBConnStr').getValue() == this.cacheConnStrTpl)
        //            form.findField('cacheDBConnStr').setValue('');

        node.eachChild(function (n) {
            if (n.data.text == folderName) {
                if (state == 'new') {
                    Ext.widget('messagepanel', { title: 'Warning', msg: 'Folder name \"' + folderName + '\" already exists.' });
                    //showDialog(400, 100, 'Warning', 'Scope name \"' + folderName + '\" already exists.', Ext.Msg.OK, null);
                    return;
                }
            }
        });

        if (form.isValid()) {
            form.submit({
                waitMsg: 'Saving Data...',
                success: function (response, request) {
                    Ext.example.msg('Notification', 'Folder saved successfully!');
                    win.fireEvent('save', me);
                    var parentNode = node.parentNode;

//                    if (parentNode == undefined && node.data.text == 'Root') {
                        var nodeIndex = node.lastChild.data.index + 1;

                        var nodeToAdd;

                        Ext.each(Ext.JSON.decode(request.response.responseText).nodes, function (newNode) {
                            var isNodePresent = false;

                            Ext.each(node.childNodes, function (existingNode) {
                                if (existingNode.id == 'AM.model.DirectoryModel-' + newNode.id) {
                                    isNodePresent = true;
                                    return false;
                                }
                            });

                            if (!isNodePresent) {
                                nodeToAdd = newNode;
                                return false;
                            }
                        });

                        node.insertChild(nodeIndex, nodeToAdd);

                       //Might be required in update of folder
//                    } else {
//                        var nodeIndex = parentNode.indexOf(node);
//                        parentNode.removeChild(node);
//                        parentNode.insertChild(nodeIndex, Ext.JSON.decode(request.response.responseText).nodes[0]);
//                    }
                    me.setLoading(false);
                    //                    win.fireEvent('save', me);
                    //                    node.firstChild.expand();
                    //                    node.expandChildren();
                    //                    Ext.ComponentQuery.query('directorytree')[0].onReload();
                },
                failure: function (response, request) {
                    /*if (response.items != undefined && response.items[3].value !== undefined) {
                    var rtext = response.items[3].value;
                    Ext.widget('messagepanel', { title: 'Error saving folder changes', msg: 'Changes of ' + rtext + ' are not saved.'});
                    return;
                    }*/
                    //Ext.widget('messagepanel', { title: 'Warning', msg: 'Error saving changes!'});
                    var resp = Ext.decode(request.response.responseText);
                    var userMsg = resp['message'];
                    var detailMsg = resp['stackTraceDescription'];
                    var expPanel = Ext.widget('exceptionpanel', { title: 'Error Notification' });
                    Ext.ComponentQuery.query('#expValue', expPanel)[0].setValue(userMsg);
                    Ext.ComponentQuery.query('#expValue2', expPanel)[0].setValue(detailMsg);

                }
            });
        } else {
            Ext.widget('messagepanel', { title: 'Warning', msg: 'Please give folder name.' });
            return;
        }
    },

    onReset: function () {
        var me = this;
        var win = me.up('window');
        win.fireEvent('cancel', me);
    }
});