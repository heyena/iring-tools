/*
* File: Scripts/AM/controller/NHibernate.js
*
* This file was generated by Sencha Architect version 2.2.2.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 4.1.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 4.1.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('AM.controller.NHibernate', {
    extend: 'Ext.app.Controller',

    requires: [
        'AM.view.nhibernate.Utility'
    ],

    dataTypes: '',

    models: [
    'AvailItemsModel',
    'TableSelectModel',
    'RelationNameModel',
    'PropertyMapModel',
    'MultiSelect'
  ],
    stores: [
    'AvailItemsStore',
    'ProviderStore',
    'NHibernateTreeStore',
    'MultiStore',
    'RelatedObjectStore',
    'RelationsStore'
  ],
    views: [
    'nhibernate.ConnectionStringForm',
    'nhibernate.RelationsForm',
    'nhibernate.SelectTablesForm',
    'nhibernate.MultiSelectionGrid',
    'nhibernate.NhibernatePanel',
    'nhibernate.PropertyGrid',
    'nhibernate.DataObjectForm',
    'nhibernate.DataKeyForm',
    'nhibernate.NhibernateTree',
    'nhibernate.SelectPropertiesForm',
    'nhibernate.SelectDataKeysForm',
    'nhibernate.SetPropertyForm',
    'nhibernate.SetRelationForm',
    'nhibernate.RelationsGrid',
    'nhibernate.MultiSelectComponentGrid'
  ],

    refs: [
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'selectTablesForm',
        selector: 'selecttablesform',
        xtype: 'selecttablesform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'connectionStringForm',
        selector: 'connectionstringform',
        xtype: 'connectionstringform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'dataObjectForm',
        selector: 'dataobjectform',
        xtype: 'dataobjectform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'dataKeyForm',
        selector: 'datakeyform',
        xtype: 'datakeyform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'selectKeyFieldsForm',
        selector: 'selectdatakeysform',
        xtype: 'selectdatakeysform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'selectPropertiesForm',
        selector: 'selectpropertiesform',
        xtype: 'selectpropertiesform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'dataPropertyForm',
        selector: 'setpropertyform',
        xtype: 'setpropertyform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'relationsForm',
        selector: 'relationsform',
        xtype: 'relationsform'
    },
    {
        autoCreate: true,
        forceCreate: true,
        ref: 'setRelationForm',
        selector: 'setRelationForm',
        xtype: 'setrelationform'
    },
    {
        ref: 'dirTree',
        selector: 'viewport > directorypanel > directorytree',
        xtype: 'directorytree'
    },
    {
        ref: 'mainContent',
        selector: 'viewport > centerpanel > contentpanel',
        xtype: 'contentpanel'
    }
  ],

    onSaveDataObjects: function (button, e, eOpts) {
        var me = this;
        var content = this.getMainContent();
        var nhPanel = button.up('nhibernatepanel');

        var dbObjectsTree = nhPanel.down('nhibernatetree');
        var gridSelected = dbObjectsTree.selectedTables;
        var dirNode = dbObjectsTree.dirNode;

        if (gridSelected.length === 0) {
            gridSelected = dirNode.data.record.dbInfo.dbTableNames.items;
        }

        var contextName = dirNode.parentNode.data.text;
        var endpoint = dirNode.data.record.Name;
        var baseUrl = dirNode.data.record.BaseUrl;

        dirNode.data.record.dbInfo.dbProvider = dirNode.data.record.dbDict.Provider; //dbPro;
        dirNode.data.record.dbInfo.dbSchema = dirNode.data.record.dbDict.SchemaName//dbSch;

        var rootNode = dbObjectsTree.getRootNode();
        var treeProperty = me.getJsonTree(rootNode, dirNode, gridSelected);

        treeProperty.schemaName = dirNode.data.record.dbDict.SchemaName; //dbSch;

        content.body.mask();
        Ext.Ajax.request({
            url: 'AdapterManager/Trees',
            timeout: 600000,
            method: 'POST',
            params: {
                scope: contextName,
                app: endpoint,
                baseUrl: baseUrl,
                tree: Ext.JSON.encode(treeProperty)
            },
            success: function (response, request) {
                var rtext = response.responseText;
                var error = 'SUCCESS = FALSE';
                var index = rtext.toUpperCase().indexOf(error);

                if (index == -1) {
                    content.getActiveTab().close();
                    var navpanel = me.getDirTree();
                    navpanel.onReload(content);
                }
                else {
                    var msg = rtext.substring(index + error.length + 2, rtext.length - 1);
                    showDialog(400, 100, 'Saving Result - Error', msg, Ext.Msg.OK, null);
                }

                content.body.unmask();
            },
            failure: function (response, request) {
                showDialog(660, 300, 'Saving Result', 'An error has occurred while saving the configuration.', Ext.Msg.OK, null);
                content.body.unmask();
            }
        });
    },

    onSaveDataObject: function (button, e, eOpts) {
        var me = this;
        var form = button.up('dataobjectform');
        var panel = form.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var treeNode = tree.getSelectedNode();
        var dirNode = tree.dirNode;
        var dbDict = dirNode.data.record.dbDict;
        var relationFolderNode;
        if (treeNode) {
            var treeNodeProps = treeNode.raw.property; //treeNode.data.property;
            var objectNameField = form.getForm().findField('objectName');
            var objNam = objectNameField.getValue();

            if (objectNameField.validate())
                treeNodeProps.objectName = objNam;
            else {
                showDialog(400, 100, 'Warning', "Object Name is not valid. A valid object name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
                return;
            }

            var oldObjNam = treeNodeProps.objectName;
            treeNodeProps.tableName = form.getForm().findField('tableName').getValue();
            treeNodeProps.objectName = objNam;
            treeNodeProps.keyDelimeter = form.getForm().findField('keyDelimeter').getValue();
            treeNodeProps.description = form.getForm().findField('description').getValue();

            for (var ijk = 0; ijk < dbDict.dataObjects.length; ijk++) {
                var dataObject = dbDict.dataObjects[ijk];
                if (treeNode.data.text.toUpperCase() != dataObject.objectName.toUpperCase())
                    continue;

                dataObject.objectName = objNam;
                dataObject.description = form.getForm().findField('description').getValue();
                dataObject.keyDelimeter = form.getForm().findField('keyDelimeter').getValue();
            }

            treeNode.set('text', objNam);
            var rootNode = tree.getRootNode();

            for (var i = 0; i < rootNode.childNodes.length; i++) {
                var folderNode = rootNode.childNodes[i];
                var folderNodeProp = folderNode.raw.property;

                if (folderNode.childNodes[2])
                    relationFolderNode = folderNode.childNodes[2];
                else
                    relationFolderNode = folderNode.attributes.children[2];

                if (!relationFolderNode)
                    continue;

                if (relationFolderNode.childNodes)
                    var relChildenNodes = relationFolderNode.childNodes;
                else
                    var relChildenNodes = relationFolderNode.children;

                if (relChildenNodes) {
                    for (var k = 0; k < relChildenNodes.length; k++) {
                        var relationNode = relChildenNodes[k];

                        if (relationNode.data.text === '')//if (relationNode.text === '')
                            continue;

                        //if (relationNode.data)
                        //var relationNodeAttr = relationNode.data
                        var relationNodeAttr = relationNode.raw;
                        var relObjNam = relationNodeAttr.relatedObjectName;
                        if (relObjNam.toLowerCase() != objNam.toLowerCase() && relObjNam.toLowerCase() == oldObjNam.toLowerCase())
                            relationNodeAttr.relatedObjectName = objNam;

                        if (relationNodeAttr.relatedObjMap) {
                            var relatedObjPropMap = relationNodeAttr.relatedObjMap;

                            for (var iki = 0; iki < relatedObjPropMap.length; iki++) {
                                if (relatedObjPropMap[iki].relatedObjName.toLowerCase() == oldObjNam.toLowerCase())
                                    relatedObjPropMap[iki].relatedObjName = objNam;
                            }
                        }
                    }
                }
            }
        }
    },

    onResetDataObject: function (button, e, eOpts) {
        var me = this;
        var form = button.up('dataobjectform');
        var panel = form.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var dirNode = tree.dirNode;
        var dbDict = dirNode.data.record.dbDict;
        var treeNode = tree.getSelectedNode();
        var dObject;
        Ext.each(dbDict.dataObjects, function (dataObject) {
            //if(dataObject.objectName == treeNode.data.property.objectName)
            if (dataObject.objectName == treeNode.raw.property.objectName)
                dObject = dataObject;
        });

        /*if (treeNode.data.property) {
        form.getForm().findField('objectName').setValue(treeNode.data.record.Name);
        form.getForm().findField('objectNamespace').setValue(dObject.objectNamespace);
        form.getForm().findField('keyDelimiter').setValue(dObject.keyDelimeter);
        form.getForm().findField('description').setValue(dObject.description);
        }*/

        if (dObject) {
            //form.getForm().findField('objectName').setValue(dObject.objectName);
            //form.getForm().findField('objectNamespace').setValue(dObject.objectNamespace);
            //form.getForm().findField('keyDelimeter').setValue(dObject.keyDelimeter);
            //form.getForm().findField('description').setValue(dObject.description);
            var objectName = dObject.objectName;
            var objectNamespace = dObject.objectNamespace;
            var keyDelimeter = dObject.keyDelimeter;
            var description = dObject.description;
        } else {
            var objectName = form.objectName;
            var objectNamespace = form.objectNamespace;
            var keyDelimeter = form.keyDelimeter;
            var description = form.description;
        }
        form.getForm().findField('objectName').setValue(objectName);
        form.getForm().findField('objectNamespace').setValue(objectNamespace);
        form.getForm().findField('keyDelimeter').setValue(keyDelimeter);
        form.getForm().findField('description').setValue(description);
    },

    onSaveSelections: function (selected, cause, ctype, ccls, effect, etype, ecls) {
        //
        // get all nodes
        //
        var nodes = [];

        Ext.each(cause.childNodes, function (node) {
            nodes.push(node.copy());
        });

        if (effect != undefined) {
            Ext.each(effect.childNodes, function (node) {
                nodes.push(node.copy());
            });
        }

        //
        // refresh cause node
        //
        var cnodes = []

        Ext.each(selected, function (item) {
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].data.text === item) {
                    var node = nodes.splice(i, 1)[0];
                    node.set('type', ctype);
                    node.set('iconCls', ccls);
                    cnodes.push(node);
                }
            }
        });

        cause.removeAll();
        Ext.each(cnodes, function (node) {
            cause.appendChild(node);
        });

        //
        // refresh effected node
        //
        if (effect != undefined) {
            Ext.each(nodes, function (node) {
                node.set('type', etype);
                node.set('iconCls', ecls);
            });

            effect.removeAll();
            Ext.each(nodes, function (node) {
                effect.appendChild(node);
            });
        }
    },

    onSaveKeyProperties: function (button, e, eOpts) {
        var panel = button.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var selNode = tree.getSelectedNode();
        var form = panel.down('selectdatakeysform');

        var selectedPanel = form.down('#multiselectcomponentgrid');
        var selected = selectedPanel.getValues().itemselector.split(',');

        var keysNode = selNode.parentNode.findChild('text', 'Keys');
        var propsNode = selNode.parentNode.findChild('text', 'Properties');

        this.onSaveSelections(selected, keysNode, 'keyProperty', 'treeKey',
            propsNode, 'dataProperty', 'treeProperty');
    },

    onSaveDataProperties: function (button, e, eOpts) {
        var panel = button.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var selNode = tree.getSelectedNode();
        var form = panel.down('selectpropertiesform');

        var selectedPanel = form.down('#multiselectcomponentgrid');
        var selected = selectedPanel.getValues().itemselector.split(',');

        var keysNode = selNode.parentNode.findChild('text', 'Keys');
        var propsNode = selNode.parentNode.findChild('text', 'Properties');

        this.onSaveSelections(selected, propsNode, 'dataProperty', 'treeProperty');
    },

    onEditDbConnection: function (button, e, eOpts) {
        var me = this;
        var panel = button.up('nhibernatepanel');
        me.showConnectionStringForm(panel);
    },

    onResetKeyProperties: function (button, e, eOpts) {
        var me = this;
        var form = button.up('selectdatakeysform');
        var grid = form.down('multiselectiongrid');

        var panel = form.up('nhibernatepanel');
        var dataTree = panel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var rootNode = dataTree.getRootNode();
        var dataNode = dataTree.getSelectedNode();
        var selectKeys = [];
        var availTableName = [];
        var found = false;
        var repeatItem;

        for (var i = 0; i < dataNode.childNodes.length; i++) {
            var keyText = dataNode.childNodes[i].data.text;
            selectKeys.push(keyText);
        }

        var itemSelector = form.down('#multiselectcomponentgrid');
        itemSelector.items.items[0].bindStore(grid.getStore());

        if (selectKeys) {
            var records = [];
            for (var jj = 0; jj < selectKeys.length; jj++) {
                for (var kk = 0; kk < grid.getStore().data.length; kk++) {
                    if (selectKeys[jj] == grid.getStore().data.items[kk].data.text) {
                        records.push(grid.getStore().data.items[kk]);
                        itemSelector.items.items[0].items.items[0].items.items[0].getStore().remove(grid.getStore().data.items[kk]);
                        break;
                    }
                }
            }

            itemSelector.items.items[0].items.items[0].items.items[2].getStore().add(records);
        }
    },

    onSaveKeyProperty: function (button, e, eOpts) {
        var me = this;
        form = button.up('datakeyform');
        var panel = form.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var node = tree.getSelectedNode();
        var propertyNameField = form.getForm().findField('propertyName');
        var propertyName = propertyNameField.getValue();
        var isHidden = form.getForm().findField('isHidden').getValue();
        if (propertyNameField.validate()) {
            //            node.data.propert.propertyName = propertyName;
            //            node.data.property.isHidden = isHidden;
            //            node.data.property.nullable = form.getForm().findField('isNullable').getValue();
            //            node.data.property.showOnIndex = form.getForm().findField('showOnIndex').getValue();
            node.raw.property.propertyName = propertyName;
            node.raw.property.isHidden = isHidden;
            node.raw.property.nullable = form.getForm().findField('isNullable').getValue();
            node.raw.property.showOnIndex = form.getForm().findField('showOnIndex').getValue();

            node.set('text', propertyName);
        }
        else {
            showDialog(400, 100, 'Warning', "Key Property Name is not valid. A valid key property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
        }
    },

    onResetKeyProperty: function (button, e, eOpts) {
        var me = this;
        form = button.up('datakeyform');
        var panel = form.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var node = tree.getSelectedNode();
        var propertyNameField = form.getForm().findField('propertyName');
        propertyNameField.setValue(node.data.property.propertyName);
        var propertyName = propertyNameField.getValue();
        form.getForm().findField('isHidden').setValue(node.data.property.isHidden);
        form.getForm().findField('showOnIndex').setValue(node.data.property.showOnIndex);
        if (propertyNameField.validate()) {
            node.data.property.propertyName = propertyName;
            node.set('text', propertyName);
        }
        else {
            showDialog(400, 100, 'Warning', "Key Property Name is not valid. A valid key property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
        }

    },

    onSaveDataProperty: function (button, e, eOpts) {
        var me = this;
        form = button.up('setpropertyform');
        var panel = form.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var node = tree.getSelectedNode();
        var propertyNameField = form.getForm().findField('propertyName');
        var isHidden = form.getForm().findField('isHidden').getValue();
        var propertyName = propertyNameField.getValue();

        if (propertyNameField.validate()) {
            //            node.data.property.propertyName = propertyName;
            //            node.data.property.isHidden = isHidden;
            //            node.data.property.nullable = form.getForm().findField('isNullable').getValue();
            //            node.data.property.showOnIndex = form.getForm().findField('showOnIndex').getValue();
            node.raw.property.propertyName = propertyName;
            node.raw.property.isHidden = isHidden;
            node.raw.property.nullable = form.getForm().findField('isNullable').getValue();
            node.raw.property.showOnIndex = form.getForm().findField('showOnIndex').getValue();

            node.set('text', propertyName);
        }
        else {
            showDialog(400, 100, 'Warning', "Property Name is not valid. A valid property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
        }
    },

    onResetDataProperty: function (button, e, eOpts) {
        var me = this;
        form = button.up('setpropertyform');
        var panel = form.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');

        var node = tree.getSelectedNode();
        var propertyNameField = form.getForm().findField('propertyName');
        propertyNameField.setValue(node.data.property.columnName);
        form.getForm().findField('isHidden').setValue(node.data.property.isHidden);
        form.getForm().findField('showOnIndex').setValue(node.data.property.showOnIndex);

        var propertyName = propertyNameField.getValue();
        if (propertyNameField.validate()) {
            node.data.property.propertyName = propertyName;
            node.set('text', propertyName);
        }
        else {
            showDialog(400, 100, 'Warning', "Property Name is not valid. A valid property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
        }

    },

    onTreepanelItemClick: function (dataview, record, item, index, e, eOpts) {
        var me = this;
        var panel = dataview.up('nhibernatepanel');
        //var dataNode = record.store.getAt(index);
        var dataNode = record;
        panel.treeNode = dataNode;
        var nodeType = dataNode.data.type.toUpperCase();
        if (dataNode.isRoot()) {
            me.showSelectTablesForm(panel);
        }

        if (nodeType) {
            switch (nodeType) {
                case 'DATAOBJECT':
                    me.showDataObjectForm(panel);
                    break;
                case 'KEYS':
                    me.showSelectKeyFieldsForm(panel);
                    break;
                case 'KEYPROPERTY':
                    me.showDataKeyForm(panel);
                    break;
                case 'PROPERTIES':
                    me.showSelectPropertiesForm(panel);
                    break;
                case 'DATAPROPERTY':
                    me.showDataPropertyForm(panel);
                    break;
                case 'RELATIONSHIPS':
                    me.showRelationsForm(panel);
                    break;
                case 'RELATIONSHIP':
                    me.showSetRelationForm(panel);
                    break;
            }
        }
    },

    onConnectToDatabase: function (button, e, eOpts) {
        var me = this;
        var form = button.up('connectionstringform');
        var panel = form.up('nhibernatepanel');
        var dataTree = panel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var context = dirNode.parentNode.data.text; //dirNode.data.record.ContextName;
        var endpoint = dirNode.data.record.Name; //dirNode.data.record.Endpoint;
        var baseUrl = dirNode.data.record.BaseUrl;
        var content = me.getMainContent();
        var dbProvider = form.getForm().findField('dbProvider').getValue().toUpperCase();
        var dbName = form.getForm().findField('dbName');
        var portNumber = form.getForm().findField('portNumber');
        var host = form.getForm().findField('host');
        var dbServer = form.getForm().findField('dbServer');
        var dbInstance = form.getForm().findField('dbInstance');
        var serviceNamePane = form.items.items[10];
        var dbSchema = form.getForm().findField('dbSchema');
        var servieName = '';
        var serName = '';
        dbPro = dbProvider;
        dbSch = dbSchema.getValue();
        //dirNode.data.record.dbDict.Provider = dbProvider;
        //dirNode.data.record.dbDict.SchemaName = dbSchema.getValue();

        if (dbProvider.indexOf('ORACLE') > -1) {
            dbServer.setValue(host.getValue());
            dbName.setValue(dbSchema.getValue());
            servieName = serviceNamePane.items.items[0].value;
            serName = serviceNamePane.items.items[0].serName;
            dbInstance.setValue(servieName);
        }
        else if (dbProvider.indexOf('MSSQL') > -1) {
            host.setValue(dbServer.getValue());
            serviceName = dbInstance.getValue();
            dbSchema.setValue(dbSchema.getValue());
            //dbPro.setValue(dbProvider);
        }
        else if (dbProvider.indexOf('MYSQL') > -1) {
            dbName.setValue(dbSchema.getValue());
            dbInstance.setValue(dbSchema.getValue());
        }

        form.getForm().submit({
            url: 'AdapterManager/TableNames', //'nhibernate/TableNames',
            method: 'POST',
            timeout: 600000,
            params: {
                scope: context,
                app: endpoint,
                serName: serName,
                baseUrl: baseUrl
            },
            success: function (f, a) {
                dirNode.data.record.dbInfo = form.getForm().getValues();
                var dbInfo = dirNode.data.record.dbInfo;

                dbInfo.dbTableNames = Ext.JSON.decode(a.response.responseText);
                panel.dirNode = dirNode;

                me.showSelectTablesForm(panel);
                return;

            },
            failure: function (f, a) {
                if (a.response)
                    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
                else {
                    showDialog(400, 100, 'Warning', 'Please fill in every field in this form.', Ext.Msg.OK, null);
                }
            }
        });
    },

    onApplyDataObjects: function (button, e, eOpts) {
        var me = this;
        var content = this.getMainContent();
        var panel = button.up('nhibernatepanel');
        var dbObjectsTree = panel.down('nhibernatetree');
        var dirNode = dbObjectsTree.dirNode;
        var rootNode = dbObjectsTree.getRootNode();
        var form = panel.down('selecttablesform');
        var selected = form.down('multiselectcomponentgrid').items.items[0].items.items[2].store.data.items;

        var serName = '';
        var dbInfo = dirNode.data.record.dbInfo;
        var dbDict = dirNode.data.record.dbDict;

        var context = dirNode.parentNode.data.text;
        var datalayer = dirNode.data.record.DataLayer;
        var endpoint = dirNode.data.record.Name;
        var baseUrl = dirNode.data.record.BaseUrl;

        if (dbDict.Provider == null)
            dbDict.Provider = dbPro;
        if (dbDict.SchemaName == null)
            dbDict.SchemaName = dbSch;

        dbInfo.dbSchema = dbDict.SchemaName;
        //dbDict.enableSummary = form.getForm().findField('enableSummary').value;
        if (dbObjectsTree.disabled) {
            dbObjectsTree.enable();
        }

        if (dbInfo.serName)
            serName = dbInfo.serName;
        var flag = true;
        if (selected.length < 1) {
            while (rootNode.firstChild) {
                rootNode.removeChild(rootNode.firstChild);
                flag = false;
            }
            if (flag)
                showDialog(200, 100, 'Warning', 'No tables selected....', Ext.Msg.OK, null);
            return;
        } else {

            userTableNames = [];
            Ext.each(selected, function (table) {
                userTableNames.push(table.data.text);
            });
        }
        dbObjectsTree.selectedTables = userTableNames;

        var treeStore = dbObjectsTree.getStore();
        treeStore.on('beforeload', function (store, operation) {
            var params = store.proxy.extraParams;
            params.dbProvider = dirNode.data.record.dbDict.Provider; //dbPro;//dbDict.Provider;
            params.dbServer = dbInfo.dbServer;
            params.dbInstance = dbInfo.dbInstance;
            params.dbName = dbInfo.dbName;
            params.dbSchema = dirNode.data.record.dbDict.SchemaName; //dbSch;//dbInfo.dbSchema;
            params.dbPassword = dbInfo.dbPassword;
            params.dbUserName = dbInfo.dbUserName;
            params.portNumber = dbInfo.portNumber;
            params.tableNames = userTableNames;
            params.serName = serName;
            params.scope = dirNode.parentNode.data.text; //dirNode.data.record.ContextName;
            params.app = dirNode.data.record.Name; //dirNode.data.record.Endpoint;
            params.baseUrl = dirNode.data.record.BaseUrl;
        }, me);

        panel.body.mask('Loading...', 'x-mask-loading');

        treeStore.load({
            callback: function (records, options, success) {
                var rootNode = treeStore.getRootNode();
                panel.refreshTree(rootNode, dbDict);
            }
        });

        me.getTableNames(context, endpoint, baseUrl, dirNode);
        panel.body.unmask();
    },

    onResetDataObjects: function (button, e, eOpts) {
        var me = this;
        var form = button.up('selecttablesform');
        var grid = form.down('multiselectiongrid');

        var panel = form.up('nhibernatepanel');
        var dataTree = panel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var dbInfo = dirNode.data.record.dbInfo;
        var dbDict = dirNode.data.record.dbDict;
        var rootNode = dataTree.getRootNode();
        var selectTableNamesSingle = [];
        var availTableName = [];
        var found = false;
        var repeatItem;
        for (var i = 0; i < dbInfo.dbTableNames.items.length; i++) {
            repeatItem = dbInfo.dbTableNames.items[i];
            availTableName.push([repeatItem, repeatItem]);
        }

        for (var j = 0; j < availTableName.length; j++)
            for (var i = 0; i < rootNode.childNodes.length; i++) {
                //if (rootNode.childNodes[i].data.property.tableName.toLowerCase() == availTableName[j][0].toLowerCase()) {
                if (rootNode.childNodes[i].raw.property.objectName.toLowerCase() == availTableName[j][0].toLowerCase()) {
                    found = true;
                    availTableName.splice(j, 1);
                    j--;
                    break;
                }
            }

        for (var i = 0; i < rootNode.childNodes.length; i++) {
            var nodeText = rootNode.childNodes[i].raw.property.objectName; //rootNode.childNodes[i].data.property.tableName;
            selectTableNamesSingle.push(nodeText);
        }
        var itemSelector = form.down('#multiselectcomponentgrid');
        itemSelector.items.items[0].bindStore(grid.getStore());

        if (selectTableNamesSingle) {
            var records = [];
            for (var jj = 0; jj < selectTableNamesSingle.length; jj++) {
                for (var kk = 0; kk < grid.getStore().data.length; kk++) {
                    if (selectTableNamesSingle[jj] == grid.getStore().data.items[kk].data.text) {
                        records.push(grid.getStore().data.items[kk]);
                        itemSelector.items.items[0].items.items[0].items.items[0].getStore().remove(grid.getStore().data.items[kk]);
                        break;
                    }
                }
            }

            itemSelector.items.items[0].items.items[0].items.items[2].getStore().add(records);
        }


        //grid.selectItems(selectTableNamesSingle);
    },

    onFormCreaterelation: function (form, grid, relationName, eventOptions) {
        var me = this;
        var panel = form.up('nhibernatepanel');
        me.showSetRelationForm(panel);
    },

    onResetSelectPropertiesForm: function (button, e, eOpts) {

        var me = this;
        var form = button.up('selectpropertiesform');
        var grid = form.down('multiselectiongrid');

        var panel = form.up('nhibernatepanel');
        var dataTree = panel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var rootNode = dataTree.getRootNode();
        var dataNode = dataTree.getSelectedNode();
        var selectKeys = [];
        var availTableName = [];
        var found = false;
        var repeatItem;

        for (var i = 0; i < dataNode.childNodes.length; i++) {
            var keyText = dataNode.childNodes[i].data.text;
            selectKeys.push(keyText);
        }

        var itemSelector = form.down('#multiselectcomponentgrid');
        //itemSelector.items.items[2].bindStore(grid.getStore());
        itemSelector.items.items[0].items.items[0].items.items[2].bindStore(grid.getStore());
        if (selectKeys) {
            var records = [];
            var flag;
            for (var jj = 0; jj < dataNode.data.children.length; jj++) {
                flag = true;
                for (var kk = 0; kk < selectKeys.length; kk++) {
                    if (selectKeys[kk] == dataNode.data.children[jj].text) {
                        flag = false;
                        //records.push(grid.getStore().data.items[kk]);
                        //itemSelector.items.items[2].items.items[0].items.items[0].getStore().remove(grid.getStore().data.items[kk]);
                        break;
                    }
                }
                if (flag) {
                    var tempflag = true;
                    for (var ll = 0; ll < rootNode.childNodes.length; ll++) {
                        if (rootNode.childNodes[ll].data.text == dataNode.parentNode.data.text) {
                            for (var zz = 0; zz < rootNode.childNodes[ll].childNodes[0].childNodes.length; zz++) {
                                if (rootNode.childNodes[ll].childNodes[0].childNodes[zz].data.text == dataNode.data.children[jj].text)
                                    tempflag = false;
                            }
                        }
                    }
                    if (tempflag)
                        records.push(dataNode.data.children[jj]);
                }


            }
            itemSelector.items.items[0].items.items[0].items.items[0].getStore().removeAll();
            itemSelector.items.items[0].items.items[0].items.items[0].getStore().add(records);
            itemSelector.items.items[0].items.items[0].items.items[2].getStore().removeAll();
            itemSelector.items.items[0].items.items[0].items.items[2].getStore().add(dataNode.childNodes);
        }
    },

    onResetConnectionForm: function (button, e, eOpts) {
        var me = this;
        var form = button.up('connectionstringform');
        var panel = form.up('nhibernatepanel');
        var tree = panel.down('nhibernatetree');
        var dirNode = tree.dirNode;
        var dbInfo = dirNode.data.record.dbInfo;
        var dbDict = dirNode.data.record.dbDict;

        var dsConfigForm = button.up('connectionstringform').getForm(); //dsConfigPane.getForm();
        var Provider = null;

        if (dbDict.Provider)
            Provider = dbDict.Provider.toUpperCase();

        var dbName = dsConfigForm.findField('dbName');
        var portNumber = dsConfigForm.findField('portNumber');
        var host = dsConfigForm.findField('host');
        var dbServer = dsConfigForm.findField('dbServer');
        var dbInstance = dsConfigForm.findField('dbInstance');
        //var serviceName = dsConfigPane.items.items[10];
        var serviceName = dsConfigForm.findField('field_serviceName');
        var sid = dsConfigForm.findField('field_sid');
        var radioGroup = button.up('connectionstringform').query('#radioGroup')[0];
        var dbSchema = dsConfigForm.findField('dbSchema');
        var userName = dsConfigForm.findField('dbUserName');
        var password = dsConfigForm.findField('dbPassword');
        var dbProvider = dsConfigForm.findField('dbProvider');
        var oraclecontainer = button.up('connectionstringform').down('#oraclecontainer');
        if (dbInfo) {
            if (Provider) {
                if (Provider.indexOf('ORACLE') > -1) {
                    dbName.hide();
                    dbServer.hide();
                    dbInstance.hide();

                    dbServer.setValue(dbInfo.dbServer);
                    dbInstance.setValue(dbInfo.dbInstance);
                    dbName.setValue(dbInfo.dbName);

                    userName.setValue(dbInfo.dbUserName);
                    password.setValue(dbInfo.dbPassword);
                    dbProvider.setValue(dbDict.Provider);
                    dbSchema.setValue(dbDict.SchemaName);

                    host.setValue(dbInfo.dbServer);
                    host.show();

                    oraclecontainer.show();
                    //sid.show();
                    //radioGroup.show();

                    serviceName.show();
                    creatRadioField(serviceName, serviceName.id, dbInfo.dbInstance, dbInfo.serName);

                    portNumber.setValue(dbInfo.portNumber);
                    portNumber.show();
                }
                else if (Provider.indexOf('MSSQL') > -1) {
                    portNumber.hide();
                    host.hide();
                    serviceName.hide();

                    oraclecontainer.hide();
                    //sid.hide();
                    //radioGroup.hide();

                    dbServer.setValue(dbInfo.dbServer);
                    dbServer.show();
                    dbInstance.setValue(dbInfo.dbInstance);
                    dbInstance.show();
                    dbName.setValue(dbInfo.dbName);
                    dbName.show();
                    dbProvider.setValue(dbDict.Provider);
                    host.setValue(dbInfo.dbServer);
                    portNumber.setValue(dbInfo.portNumber);
                    userName.setValue(dbInfo.dbUserName);
                    password.setValue(dbInfo.dbPassword);
                    dbSchema.setValue(dbDict.SchemaName);
                }
            }
        }
        else {
            //new application setting default value
            dbServer.setValue('localhost');
            dbServer.show();
            dbInstance.setValue('default');
            dbInstance.show();
            dbSchema.setValue('dbo');
            portNumber.setValue('1433');
            portNumber.hide();

            dbName.setValue('');
            dbName.clearInvalid();
            dbName.show();
            userName.setValue('');
            password.setValue('');
            dbProvider.setValue('MsSql2008');
            host.setValue('');
            host.hide();
            serviceName.hide();

            oraclecontainer.hide();
            //sid.hide();
            //radioGroup.hide();

            userName.clearInvalid();
            password.clearInvalid();
        }
    },

    onConfigNHibernate: function () {
        var me = this;
        var dirNode = me.getDirTree().getSelectedNode();
        var context = dirNode.parentNode.data.text;
        var endpoint = dirNode.data.record.Name;

        var content = me.getMainContent();
        var title = 'NHConfig.' + context + '.' + endpoint;
        var panel = content.down('nhibernatepanel[title=' + title + ']');

        if (!panel) {
            me.getDataTypes();

            var panel = Ext.create('AM.view.nhibernate.NhibernatePanel', {
                title: title,
                dirNode: dirNode
            });

            tree = panel.down('nhibernatetree');
            tree.onReload();

            content.add(panel);
        }

        content.setActiveTab(panel);
    },

    init: function (application) {
        var me = this;
        me.application.addEvents('confignhibernate');
        Ext.QuickTips.init();

        this.control({
            "nhibernatepanel button[action=savedbobjectstree]": {
                click: this.onSaveDataObjects
            },
            "dataobjectform button[action=dataobjectformapply]": {
                click: this.onSaveDataObject
            },
            "dataobjectform button[action=dataobjectformreset]": {
                click: this.onResetDataObject
            },
            "selectdatakeysform button[action=saveselectkeys]": {
                click: this.onSaveKeyProperties
            },
            "selectpropertiesform button[action=saveselectproperties]": {
                click: this.onSaveDataProperties
            },
            "nhibernatetree button[action=editdbconnection]": {
                click: this.onEditDbConnection
            },
            "selectdatakeysform button[action=resetselectkeys]": {
                click: this.onResetKeyProperties
            },
            "button[action=savekeyfield]": {
                click: this.onSaveKeyProperty
            },
            "datakeyform button[action=resetkeyproperty]": {
                click: this.onResetKeyProperty
            },
            "setpropertyform button[action=savedataproperty]": {
                click: this.onSaveDataProperty
            },
            "setpropertyform button[action=resetdataproperty]": {
                click: this.onResetDataProperty
            },
            "nhibernatetree": {
                itemclick: this.onTreepanelItemClick
            },
            "button[action=connecttodatabase]": {
                click: this.onConnectToDatabase
            },
            "button[action=applyobjects]": {
                click: this.onApplyDataObjects
            },
            "selecttablesform button[action=resetobjects]": {
                click: this.onResetDataObjects
            },
            "form": {
                createrelation: this.onFormCreaterelation
            },
            "selectpropertiesform button[action=resetselectproperties] ": {
                click: this.onResetSelectPropertiesForm
            },
            " button[action=resetconnectionform]": {
                click: this.onResetConnectionForm
            }
        });

        application.on({
            confignhibernate: {
                fn: this.onConfigNHibernate,
                scope: this
            }
        });
    },

    getDbDictionary: function (context, endpoint, baseUrl, successCallback) {
        var me = this;

        Ext.Ajax.request({
            url: 'AdapterManager/DBDictionary',
            method: 'POST',
            timeout: 6000000,
            params: {
                scope: context,
                app: endpoint,
                baseUrl: baseUrl
            },
            success: function (response, request) {
                var dbDict = Ext.JSON.decode(response.responseText);
                successCallback(dbDict);
            },
            failure: function (response, request) {
                //TODO: show error
            }
        });
    },

    getTableNames: function (context, endpoint, baseUrl, dirNode) {
        var me = this;
        var dbInfo = dirNode.data.record.dbInfo;
        var dbDict = dirNode.data.record.dbDict;

        Ext.Ajax.request({
            url: 'AdapterManager/TableNames',
            method: 'POST',
            timeout: 6000000,
            params: {
                scope: context,
                app: endpoint,
                dbProvider: dbDict.Provider,
                dbServer: dbInfo.dbServer,
                dbInstance: dbInfo.dbInstance,
                dbName: dbInfo.dbName,
                dbSchema: dbDict.SchemaName,
                dbUserName: dbInfo.dbUserName,
                dbPassword: dbInfo.dbPassword,
                portNumber: dbInfo.portNumber,
                serName: dbInfo.serName,
                baseUrl: baseUrl
            },
            success: function (response, request) {
                dirNode.data.record.dbInfo.dbTableNames = Ext.JSON.decode(response.responseText);
            },
            failure: function (f, a) {
                if (a.response)
                    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
            }
        });
    },

    setTableNames: function (dbDict) {
        var selectTableNames = [];

        for (var i = 0; i < dbDict.dataObjects.length; i++) {
            var tableName = (dbDict.dataObjects[i].tableName ? dbDict.dataObjects[i].tableName : dbDict.dataObjects[i]);
            selectTableNames.push(tableName);
        }
        return selectTableNames;
    },

    getChildItems: function (node) {
        var items = [];

        for (var i = 0; i < node.childNodes.length; i++) {
            var item = node.childNodes[i].data.text;
            items.push(item);
        }

        return items;
    },

    showSelectTablesForm: function (nhibernatePanel) {
        var me = this, form = me.getSelectTablesForm();
        var dataTree = nhibernatePanel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var selected = [];
        var dict = dataTree.getStore().tree.root.childNodes;

        Ext.each(dict, function (table) {
            selected.push(table.data.text);
        });

        var tables = dirNode.data.record.dbInfo.dbTableNames.items;
        var grid = form.down('#tablesSelectionGrid');
        var itemSelector = form.down('#multiselectcomponentgrid');

        grid.loadItems(tables);
        for (var i = 0; i < tables.length; i++) {
            grid.getStore().data.items[i].data.text = tables[i];
            grid.getStore().data.items[i].data.value = tables[i];
        }

        itemSelector.items.items[0].bindStore(grid.getStore());
        itemSelector.items.items[0].setValue(selected);

        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
    },

    showConnectionStringForm: function (nhibernatePanel) {
        var me = this, form = me.getConnectionStringForm();
        var dataTree = nhibernatePanel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var dbDict = dirNode.data.record.dbDict;
        var dbInfo = dirNode.data.record.dbInfo;
        var combo = form.down('#providerCombo');
        combo.on('select', function (combo, record, options) {
            var dbProvider = record[0].data.Provider.toUpperCase();
            var dbName = form.getForm().findField('dbName');
            var portNumber = form.getForm().findField('portNumber');
            var host = form.getForm().findField('host');
            var dbServer = form.getForm().findField('dbServer');
            var dbInstance = form.getForm().findField('dbInstance');
            var serviceName = form.down('#oraclecontainer');
            var dbSchema = form.getForm().findField('dbSchema');
            var userName = form.getForm().findField('dbUserName');
            var password = form.getForm().findField('dbPassword');
            var sid = form.getForm().findField('field_sid');
            var serName = form.getForm().findField('field_serviceName');

            if (dbProvider.indexOf('ORACLE') > -1) {
                if (dbName.hidden === false) {
                    dbName.hide();
                    dbServer.hide();
                    dbInstance.hide();
                }

                if (host.hidden === true) {
                    if (dbDict.Provider) {
                        if (dbDict.Provider.toUpperCase().indexOf('ORACLE') > -1) {
                            host.setValue(dbInfo.dbServer);
                            sid.setValue(dbInfo.dbInstance);
                            serName.setValue(dbInfo.serName);
                            serviceName.show();
                            host.show();
                            userName.setValue(dbInfo.dbUserName);
                            password.setValue(dbInfo.dbPassword);
                            dbSchema.setValue(dbDict.SchemaName);
                        }
                        else
                            me.resetConfigOracle(host, dbSchema, userName, password, serviceName, sid, serName);
                    }
                    else
                        me.resetConfigOracle(host, dbSchema, userName, password, serviceName, sid, serName);

                    portNumber.setValue('1521');
                    portNumber.show();
                }
            }
            else if (dbProvider.indexOf('MSSQL') > -1) {
                if (host.hidden === false) {
                    portNumber.hide();
                    host.hide();
                    sid.clearInvalid();
                    sid.disable();
                    serName.clearInvalid();
                    serName.disable();
                    serviceName.hide();
                }

                if (dbName.hidden === true) {
                    if (dbDict.Provider) {
                        if (dbDict.Provider.toUpperCase().indexOf('MSSQL') > -1) {
                            dbName.setValue(dbInfo.dbName);
                            dbServer.setValue(dbInfo.dbServer);
                            dbInstance.setValue(dbInfo.dbInstance);
                            dbName.show();
                            dbServer.show();
                            dbInstance.show();
                            sid.clearInvalid();
                            sid.disable();
                            serName.clearInvalid();
                            serName.disable();
                            dbSchema.setValue(dbDict.SchemaName);
                            userName.setValue(dbInfo.dbUserName);
                            password.setValue(dbInfo.dbPassword);
                        }
                        else
                            me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);
                    }
                    else
                        me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);
                }

                portNumber.setValue('1433');
            }
            else if (dbProvider.indexOf('MYSQL') > -1) {
                if (dbServer.hidden === true) {
                    dbServer.setValue('');
                    dbServer.clearInvalid();
                    dbServer.show();
                }

                if (host.hidden === false) {
                    portNumber.hide();
                    host.hide();
                    sid.clearInvalid();
                    sid.disable();
                    serName.clearInvalid();
                    serName.disable();
                    serviceName.hide();
                    portNumber.setValue('3306');
                }

            }

        }, me);

        var cmbStore = combo.getStore();
        var cmbProxy = cmbStore.getProxy();

        cmbStore.on('beforeload', function (store, action) {
            cmbProxy.extraParams.baseUrl = dirNode.data.record.BaseUrl;
        });

        cmbStore.load();

        form.setActive(dirNode.data.record.dbInfo);

        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
    },

    showDataObjectForm: function (nhibernatePanel) {
        var me = this, form = me.getDataObjectForm();
        var keyDelimeter;
        var description;
        var objectNamespace;
        var dataTree = nhibernatePanel.down('nhibernatetree');
        var treeNode = dataTree.getSelectedNode();

        objectNamespace = treeNode.raw.property.objectNamespace;
        description = treeNode.raw.property.description;
        keyDelimeter = treeNode.raw.property.keyDelimeter;

        var dirNode = dataTree.dirNode;
        var dbDict = dirNode.data.record.dbDict;

        if (dbDict) {
            for (var ijk = 0; ijk < dbDict.dataObjects.length; ijk++) {
                var dataObject = dbDict.dataObjects[ijk];
                if (treeNode.data.text.toUpperCase() != dataObject.objectName.toUpperCase())
                    continue;
                description = dataObject.description;
                //description = treeNode.raw.property.description;
                keyDelimeter = dataObject.keyDelimeter;
                //keyDelimeter = treeNode.raw.property.keyDelimiter; 
            }
        }


        if (keyDelimeter === 'null' || !keyDelimeter || keyDelimeter === undefined)
            keyDelimeter = '_';

        form.getForm().findField('tableName').setValue(treeNode.raw.text);
        form.getForm().findField('objectNamespace').setValue(treeNode.raw.property.objectNamespace);
        form.getForm().findField('objectName').setValue(treeNode.raw.property.objectName);
        form.getForm().findField('keyDelimeter').setValue(keyDelimeter);
        form.getForm().findField('description').setValue(description);

        form.keyDelimeter = keyDelimeter;
        form.description = description;
        form.objectNamespace = objectNamespace;
        form.objectName = treeNode.raw.property.objectName;
        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
    },

    showRelationsForm: function (nhibernatePanel) {
        var me = this, form = me.getRelationsForm();
        var grid = form.down('relationsgrid');

        var gridStore = grid.getStore();
        gridStore.removeAll();

        var dataTree = nhibernatePanel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var treeNode = dataTree.getSelectionModel().getSelection()[0];

        var context = dirNode.data.property.Context;
        var endpoint = dirNode.data.property.Name;

        grid.endpoint = form.endpoint = endpoint;
        grid.context = form.context = context;
        grid.node = form.node = treeNode;
        grid.rootNode = form.rootNode = dataTree.getRootNode();

        treeNode.eachChild(function (n) {
            gridStore.add({ 'relationName': n.data.text });
        });

        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
    },

    showSetRelationForm: function (nhibernatepanel) {
        var me = this;
        var panel = nhibernatepanel.down('#nhibernateContent');
        var dataTree = nhibernatepanel.down('nhibernatetree');
        var dataNode = dataTree.getSelectedNode();
        var dirNode = dataTree.dirNode;
        var relationFolderNode, contextName, endpoint, rootNode, relationName;

        rootNode = dataTree.getRootNode();
        endpoint = dirNode.data.text; //dirNode.data.record.endpoint;
        contextName = dirNode.parentNode.data.text; //dirNode.data.record.context;

        if (dataNode.data.type == 'relationships') {
            relationFolderNode = dataNode;
            if (dataNode.firstChild)
                relationName = dataNode.firstChild.data.text;
        } else {
            relationFolderNode = dataNode.parentNode;
            relationName = dataNode.data.text;
        }

        var dataObjectNode = relationFolderNode.parentNode;
        var relatedObjects = [];
        var thisObj = dataObjectNode.data.text;

        rootNode.eachChild(function (child) {
            if (child.data.text != thisObj) {
                relatedObjects.push([child.data.text, child.data.text, child.data.text]);
                // relatedObjects.push([child.data.text, child.data.text, child.data.property.tableName]);
            }
        });

        var relatedObjectName = relationFolderNode.childNodes[0].data.relatedObjectName; //relationFolderNode.childNodes[0].raw.relatedObjectName;
        var relatedObject;
        rootNode.eachChild(function (child) {
            if (child.data.text == relatedObjectName) {
                relatedObject = child;
            }
        });
        var relatedObjectPropertyNodes = [];
        if (relatedObject != undefined && relatedObject.childNodes[0] != undefined && relatedObject.childNodes[1] != undefined) {
            relatedObject.childNodes[0].eachChild(function (child) {
                relatedObjectPropertyNodes.push([child.data.text, child.data.text, child.data.property.columnName]);
            });
            relatedObject.childNodes[1].eachChild(function (child) {
                relatedObjectPropertyNodes.push([child.data.text, child.data.text, child.data.property.columnName]);
            });
        }

        var keysNode = dataObjectNode.childNodes[0];
        var propertiesNode = dataObjectNode.childNodes[1];

        var propertyNodes = [];
        keysNode.eachChild(function (child) {
            propertyNodes.push([child.data.text, child.data.text, child.data.property.columnName]);
        });

        propertiesNode.eachChild(function (child) {
            propertyNodes.push([child.data.text, child.data.text, child.data.property.columnName]);
        });


        var form = me.getSetRelationForm();
        var grid = form.down('relationPropertyGrid');
        var gridStore;
        gridStore = grid.getStore();

        var propertyNameCmb = form.down('#propertyNameCmb');
        propertyNameCmb.store = Ext.create('Ext.data.SimpleStore', {
            fields: ['value', 'text', 'name'],
            autoLoad: true,
            data: propertyNodes
        });

        propertyNameCmb.valueField = 'text';

        var relatedObjectCombo = form.down('#relatedObjectCmb');
        relatedObjectCombo.store = Ext.create('Ext.data.SimpleStore', {
            fields: ['value', 'text'],
            autoLoad: true,
            data: relatedObjects
        });

        relatedObjectCombo.valueField = 'value';

        var mapPropertyNameCmb = form.down('#mapPropertyNameCmb');
        mapPropertyNameCmb.store = Ext.create('Ext.data.SimpleStore', {
            fields: ['value', 'text', 'name'],
            autoLoad: true,
            data: relatedObjectPropertyNodes
        });
        mapPropertyNameCmb.valueField = 'text';

        form.endpoint = endpoint;
        form.contextName = contextName;
        form.rootNode = rootNode;
        form.node = relationFolderNode;

        relationFolderNode.eachChild(function (relation) {
            if (relation.data.text == relationName) {
                var data;
                if (relation.data.relationshipType)
                    data = relation.data;
                else
                    data = relation.raw;
                var pMap;
                if (data.propertyMap) {
                    gridStore.removeAll();
                    for (var i = 0; i < data.propertyMap.length; i++) {
                        pMap = data.propertyMap[i];
                        if (pMap) {

                            var record = [{
                                'property': pMap.dataPropertyName,
                                'relatedProperty': pMap.relatedPropertyName
                            }];
                            var exist = gridStore.find('property', pMap.dataPropertyName);
                            if (exist == -1)
                                gridStore.add(record);

                        }
                    }

                } else
                    gridStore.removeAll();

                form.getForm().findField('relationType').setValue(data.relationshipType);
                form.getForm().findField('relatedObjectName').setValue(data.relatedObjectName);
                //form.getForm().findField('mapPropertyName').on('select',function(){alert('going to change...');});
            }
        });


        form.getForm().findField('relationshipName').setValue(relationName);
        form.getForm().findField('objectName').setValue(thisObj);
        if (utilsObj.parentNode != null && utilsObj.parentNode != dataNode.parentNode.parentNode.data.text) {
            utilsObj.relationGridStore = [];
            utilsObj.parentNode = dataNode.parentNode.parentNode.data.text;
        }
        if (utilsObj.relationGridStore.length == 0) {
            utilsObj.parentNode = dataNode.parentNode.parentNode.data.text;
            gridStore.each(function (record) {
                utilsObj.relationGridStore.push({ 'dataPropertyName': record.data.property, 'relatedPropertyName': record.data.relatedProperty });
            });
        }
        panel.removeAll();
        panel.add(form);
    },

    getConnStringParts: function (connString, dirNode) {
        var me = this;
        var dsValue, serName;
        var connStrParts = connString.split(';');
        var dbDict = dirNode.data.record.dbDict;
        var provider = dbDict.Provider.toUpperCase();

        if (dirNode.data.record.dbInfo === undefined) {
            dirNode.data.record.dbInfo = {};
        }

        if (!dirNode.data.record.dbInfo.dbUserName)
            dirNode.data.record.dbInfo.dbName = dbDict.SchemaName;

        for (var i = 0; i < connStrParts.length; i++) {
            var pair = connStrParts[i].split('=');
            switch (pair[0].toUpperCase()) {
                case 'DATA SOURCE':
                    if (provider.indexOf('MSSQL') > -1) {
                        dsValue = pair[1].split('\\');
                        dirNode.data.record.dbInfo.dbServer = (dsValue[0].toLowerCase() == '.' ? 'localhost' : dsValue[0]);
                        dirNode.data.record.dbInfo.dbInstance = dsValue[1];
                        dirNode.data.record.dbInfo.portNumber = 1433;
                        dirNode.data.record.dbInfo.serName = '';
                    }
                    else if (provider.indexOf('MYSQL') > -1) {
                        dirNode.data.record.dbInfo.dbServer = (pair[1].toLowerCase() == '.' ? 'localhost' : pair[1]);
                        dirNode.data.record.dbInfo.portNumber = 3306;
                    }
                    else if (provider.indexOf('ORACLE') > -1) {
                        var dsStr = connStrParts[i].substring(12, connStrParts[i].length);
                        dsValue = dsStr.split('=');
                        for (var j = 0; j < dsValue.length; j++) {
                            dsValue[j] = dsValue[j].substring(dsValue[j].indexOf('(') + 1, dsValue[j].length);
                            switch (dsValue[j].toUpperCase()) {
                                case 'HOST':
                                    var server = dsValue[j + 1];
                                    var port = dsValue[j + 2];
                                    var index = server.indexOf(')');
                                    server = server.substring(0, index);
                                    dirNode.data.record.dbInfo.portNumber = port.substring(0, 4);
                                    dirNode.data.record.dbInfo.dbServer = (server.toLowerCase() == '.' ? 'localhost' : server);
                                    break;
                                case 'SERVICE_NAME':
                                    serName = dsValue[j + 1];
                                    index = sername.indexOf(')');
                                    dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);
                                    dirNode.data.record.dbInfo.serName = 'SERVICE_NAME';
                                    break;
                                case 'SID':
                                    serName = dsValue[j + 1];
                                    index = sername.indexOf(')');
                                    dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);
                                    dirNode.data.record.dbInfo.serName = 'SID';
                                    break;
                            }
                        }
                    }
                    break;
                case 'INITIAL CATALOG':
                    dirNode.data.record.dbInfo.dbName = pair[1];
                    break;
                case 'USER ID':
                    dirNode.data.record.dbInfo.dbUserName = pair[1];
                    break;
                case 'PASSWORD':
                    dirNode.data.record.dbInfo.dbPassword = pair[1];
                    break;
            }
        }
        return dirNode.data.record.dbInfo;
    },

    showSelectKeyFieldsForm: function (nhibernatePanel) {
        var me = this;
        var form = me.getSelectKeyFieldsForm();
        var dataTree = nhibernatePanel.down('nhibernatetree');
        var selNode = dataTree.getSelectedNode();
        var dirNode = dataTree.dirNode;
        var context = dirNode.parentNode.data.text; //dirNode.data.record.context;
        var endpoint = dirNode.data.record.Name; //dirNode.data.record.endpoint;
        var baseUrl = dirNode.data.record.baseUrl;

        var grid = form.down('#multiSelectDataKeys');
        var itemSelector = form.down('#multiselectcomponentgrid');

        var configuredObjects = dirNode.data.record.dbDict.dataObjects;
        var workingObjectNode = selNode.parentNode;

        var selectedKeys = me.getChildItems(selNode.parentNode.findChild('text', 'Keys'));
        var availKeys = [];

        Ext.each(configuredObjects, function (obj) {
            if (obj.tableName == workingObjectNode.data.tableName) {
                Ext.each(obj.dataProperties, function (prop) {
                    availKeys.push(prop.propertyName);
                });
            }
        });

        grid.down('gridcolumn').setText('Select Key Properties');
        grid.loadItems(availKeys);

        for (var i = 0; i < availKeys.length; i++) {
            grid.getStore().data.items[i].data.text = availKeys[i];
            grid.getStore().data.items[i].data.value = availKeys[i];
        }

        itemSelector.items.items[0].bindStore(grid.getStore());
        itemSelector.items.items[0].setValue(selectedKeys);

        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
    },

    showSelectPropertiesForm: function (nhibernatePanel) {
        var me = this, form = me.getSelectPropertiesForm();
        var dataTree = nhibernatePanel.down('nhibernatetree');
        var selNode = dataTree.getSelectedNode();
        var dirNode = dataTree.dirNode;
        var context = dirNode.data.record.context;
        var endpoint = dirNode.data.record.endpoint;
        var baseUrl = dirNode.data.record.baseUrl;

        var itemSelector = form.down('#multiselectcomponentgrid');
        var grid = form.down('#propertiesSelectionGrid');

        var configuredObjects = dirNode.data.record.dbDict.dataObjects;
        var workingObjectNode = selNode.parentNode;

        var selectedKeys = me.getChildItems(selNode.parentNode.findChild('text', 'Keys'));
        var selectedProps = me.getChildItems(selNode.parentNode.findChild('text', 'Properties'));
        var availProps = [];

        Ext.each(configuredObjects, function (obj) {
            if (obj.tableName == workingObjectNode.data.tableName) {
                Ext.each(obj.dataProperties, function (prop) {
                    if (selectedKeys.indexOf(prop.propertyName) === -1) {
                        availProps.push(prop.propertyName);
                    }
                });
            }
        });

        grid.down('gridcolumn').setText('Select Data Properties');
        grid.loadItems(availProps);

        for (var i = 0; i < availProps.length; i++) {
            grid.getStore().data.items[i].data.text = availProps[i];
            grid.getStore().data.items[i].data.value = availProps[i];
        }

        itemSelector.items.items[0].bindStore(grid.getStore());
        itemSelector.items.items[0].setValue(selectedProps);

        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
    },

    showDataKeyForm: function (nhibernatePanel) {
        var me = this;
        var form = me.getDataKeyForm();
        var dataTree = nhibernatePanel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var treeNode = nhibernatePanel.treeNode;

        form.setActiveRecord(treeNode.data.property);

        var property = treeNode.data.property;

        if (property.showOnIndex.toString().toLowerCase() == 'true') {
            form.getForm().findField('showOnIndex').setValue(true);
        }
        else {
            form.getForm().findField('showOnIndex').setValue(false);
        }

        if (property.nullable.toString().toLowerCase() == 'true') {
            form.getForm().findField('isNullable').setValue(true);
        }
        else {
            form.getForm().findField('isNullable').setValue(false);
        }

        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
    },

    showDataPropertyForm: function (nhibernatePanel) {
        var me = this, form = me.getDataPropertyForm();

        var dataTree = nhibernatePanel.down('nhibernatetree');
        var dirNode = dataTree.dirNode;
        var treeNode = nhibernatePanel.treeNode;

        form.setActiveRecord(treeNode.data.property);
        var property = treeNode.data.property;

        if (property.showOnIndex.toString().toLowerCase() == 'true') {
            form.getForm().findField('showOnIndex').setValue(true);
        }
        else {
            form.getForm().findField('showOnIndex').setValue(false);
        }

        if (property.nullable.toString().toLowerCase() == 'true') {
            form.getForm().findField('isNullable').setValue(true);
        }
        else {
            form.getForm().findField('isNullable').setValue(false);
        }

        panel = nhibernatePanel.down('#nhibernateContent');
        panel.removeAll();
        panel.add(form);
        Ext.getBody().unmask();
    },

    getJsonTree: function (rootNode, dirNode, selectedTables) {
        var me = this;
        var treeProperty = {};
        treeProperty.dataObjects = [];
        treeProperty.IdentityConfiguration = null;
        var dbInfo = dirNode.data.record.dbInfo;
        var dbDict = dirNode.data.record.dbDict;
        var tProp = me.setTreeProperty(dbInfo, dbDict, selectedTables);
        treeProperty.connectionString = tProp.connectionString;
        if (treeProperty.connectionString !== null && treeProperty.connectionString.length > 0) {
            var base64 = AM.view.nhibernate.Utility;
            treeProperty.connectionString = base64.encode(tProp.connectionString);
        }
        treeProperty.schemaName = tProp.schemaName;
        treeProperty.provider = tProp.provider;
        //        treeProperty.enableSummary = tProp.enableSummary;

        var keyName;
        for (var i = 0; i < rootNode.childNodes.length; i++) {
            var folder = me.getFolderFromChildNode(rootNode.childNodes[i], dbDict.dataObjects[i]);
            treeProperty.dataObjects.push(folder);
        }

        /*for (var i = 0; i < dbDict.dataObjects.length; i++) {
        var folder = me.getFolderFromChildNode(dbDict.dataObjects[i]);
        treeProperty.dataObjects.push(folder);
        }*/

        dbDict.ConnectionString = treeProperty.connectionString;
        dbDict.SchemaName = treeProperty.schemaName;
        dbDict.Provider = treeProperty.provider;
        dbDict.dataObjects = treeProperty.dataObjects;
        //        dbDict.enableSummary = treeProperty.enableSummary;
        return treeProperty;
    },

    setTreeProperty: function (dbInfo, dbDict, selected) {
        var me = this;
        var treeProperty = {};
        if (selected) {
            //            treeProperty.enableSummary = dbDict.enableSummary;
            treeProperty.provider = dbDict.Provider; //dbPro;
        }
        //        else if (dbDict.enableSummary)
        //            treeProperty.enableSummary = dbDict.enableSummary;
        //        else
        //            treeProperty.enableSummary = false;

        if (dbInfo) {
            var dbServer = dbInfo.dbServer;
            dbServer = (dbServer.toLowerCase() == 'localhost' ? '.' : dbServer);
            var upProvider = treeProperty.provider.toUpperCase();
            var serviceName = '';
            var serName = '';
            if (dbInfo.serName) {
                serviceName = serviceNamePane.items.items[0].value;
                serName = serviceNamePane.items.items[0].serName;
            }
            else if (dbInfo) {
                if (dbInfo.dbInstance)
                    serviceName = dbInfo.dbInstance;
                if (dbInfo.serName)
                    serName = dbInfo.serName;
            }

            if (upProvider.indexOf('MSSQL') > -1) {
                var dbInstance = dbInfo.dbInstance;
                var dbDatabase = dbInfo.dbName;
                if (dbInstance.toUpperCase() == "DEFAULT") {
                    var dataSrc = 'Data Source=' + dbServer + ';Initial Catalog=' + dbDatabase;
                } else {
                    var dataSrc = 'Data Source=' + dbServer + '\\' + dbInstance + ';Initial Catalog=' + dbDatabase;
                }
            }
            else if (upProvider.indexOf('ORACLE') > -1)
                var dataSrc = 'Data Source=' +
      '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=' +
      dbServer + ')(PORT=' + dbInfo.portNumber +
      ')))(CONNECT_DATA=(SERVER=DEDICATED)(' + serName + '=' + serviceName + ')))';
            else if (upProvider.indexOf('MYSQL') > -1)
                var dataSrc = 'Data Source=' + dbServer;
            treeProperty.connectionString = dataSrc + ';User ID=' + dbInfo.dbUserName + ';Password=' + dbInfo.dbPassword;
            treeProperty.schemaName = dbDict.SchemaName;
        }
        else {
            treeProperty.provider = dbDict.Provider;
            var dbServer = dbInfo.dbServer;
            var upProvider = treeProperty.provider.toUpperCase();
            dbServer = (dbServer.toLowerCase() == 'localhost' ? '.' : dbServer);

            if (upProvider.indexOf('MSSQL') > -1) {
                if (dbInfo.dbInstance) {
                    if (dbInfo.dbInstance.toUpperCase() == "DEFAULT") {
                        var dataSrc = 'Data Source=' + dbServer + ';Initial Catalog=' + dbInfo.dbName;
                    } else {
                        var dataSrc = 'Data Source=' + dbServer + '\\' + dbInfo.dbInstance + ';Initial Catalog=' + dbInfo.dbName;
                    }
                }
            }
            else if (upProvider.indexOf('ORACLE') > -1)
                var dataSrc = 'Data Source=' + '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=' +
      dbServer + ')(PORT=' + dbInfo.portNumber + ')))(CONNECT_DATA=(SERVER=DEDICATED)(' +
      dbInfo.serName + '=' + dbInfo.dbInstance + ')))';
            else if (upProvider.indexOf('MYSQL') > -1)
                var dataSrc = 'Data Source=' + dbServer;

            treeProperty.connectionString = dataSrc + ';User ID=' + dbInfo.dbUserName + ';Password=' + dbInfo.dbPassword;
            treeProperty.schemaName = dbDict.SchemaName;
        }
        return treeProperty;
    },

    getFolderFromChildNode: function (folderNode, dbDictNode) {
        var me = this;
        var folderNodeProp = folderNode.data.property;
        var folder = {};
        var keyName = '';
        if (dbDictNode) {
            folder.tableName = dbDictNode.tableName; //folderNode.data.text;//folderNodeProp.tableName;
            folder.objectNamespace = dbDictNode.objectNamespace; //folderNode.raw.property.objectNamespace;//folderNodeProp.objectNamespace;
            folder.objectName = dbDictNode.objectName; //folderNode.raw.property.objectName;//folderNodeProp.objectName;
            folder.description = dbDictNode.description; //folderNode.raw.property.description;//'';//folderNodeProp.description;
            if (dbDictNode.keyDelimeter && dbDictNode.keyDelimeter != null)
                folder.keyDelimeter = dbDictNode.keyDelimeter; //folderNode.raw.property.keyDelimeter;
            else
                folder.keyDelimeter = '_';
        }
        else {
            folder.tableName = folderNode.data.text;
            folder.objectNamespace = folderNode.raw.property.objectNamespace; //folderNodeProp.objectNamespace;
            folder.objectName = folderNode.raw.property.objectName; //folderNodeProp.objectName;
            folder.description = folderNode.raw.property.description; //'';//folderNodeProp.description;

            if (folderNode.raw.property.keyDelimeter && folderNode.raw.property.keyDelimeter != 'null')
                folder.keyDelimeter = folderNode.raw.property.keyDelimeter;
            //folderNode.raw.property.keyDelimeter = folderNode.raw.property.keyDelimeter;  
            else
                folder.keyDelimeter = '_';
        }

        folder.keyProperties = [];
        folder.dataProperties = [];
        folder.dataRelationships = [];

        //        folderNode.eachChild(function (child) {});

        for (var j = 0; j < folderNode.childNodes.length; j++) {
            if (folderNode.childNodes[0])
                var keyFolderNode = folderNode.childNodes[0];

            if (folderNode.childNodes[1])
                var propertyFolderNode = folderNode.childNodes[1];

            if (folderNode.childNodes[2])
                var relationFolderNode = folderNode.childNodes[2];

            if (folderNode.childNodes[j])
                subFolderNodeText = folderNode.childNodes[j].data.text;

            switch (subFolderNodeText) {
                case 'Keys':
                    if (keyFolderNode)
                        var keyChildenNodes = keyFolderNode.childNodes;

                    for (var k = 0; k < keyChildenNodes.length; k++) {
                        var keyNode = keyChildenNodes[k];
                        var keyProps = {};
                        var keyNodeProf = keyNode.data.property;

                        keyProps.keyPropertyName = keyNode.data.text;
                        keyName = keyNode.data.text;
                        folder.keyProperties.push(keyProps);
                        var tagProps = {};
                        tagProps.columnName = keyNodeProf.columnName;
                        tagProps.propertyName = keyNode.data.text;

                        if (typeof keyNodeProf.dataType == 'string')
                            tagProps.dataType = me.getDataTypeIndex(keyNodeProf.dataType);
                        else
                            tagProps.dataType = keyNodeProf.dataType;

                        tagProps.dataLength = keyNodeProf.dataLength;

                        if (keyNodeProf.nullable)
                            tagProps.isNullable = keyNodeProf.nullable.toString().toLowerCase();
                        else
                            tagProps.isNullable = 'false';
                        if (keyNodeProf.isHidden)
                            tagProps.isHidden = keyNodeProf.isHidden.toString().toLowerCase();
                        else
                            tagProps.isHidden = 'false';

                        //tagProps.isHidden = 'false';

                        if (!keyNodeProf.keyType)
                            tagProps.keyType = 1;
                        else
                            if (typeof keyNodeProf.keyType != 'string')
                                tagProps.keyType = keyNodeProf.keyType;
                            else {
                                switch (keyNodeProf.keyType.toLowerCase()) {
                                    case 'assigned':
                                        tagProps.keyType = 1;
                                        break;
                                    case 'unassigned':
                                        tagProps.keyType = 0;
                                        break;
                                    default:
                                        tagProps.keyType = 1;
                                        break;
                                }
                            }

                        if (keyNodeProf.showOnIndex)
                            tagProps.showOnIndex = keyNodeProf.showOnIndex.toString().toLowerCase();
                        else
                            tagProps.showOnIndex = 'false';

                        tagProps.numberOfDecimals = keyNodeProf.numberOfDecimals;
                        folder.dataProperties.push(tagProps);
                    }
                    break;
                case 'Properties':
                    if (folderNode.childNodes[1]) {
                        var propChildenNodes = propertyFolderNode.childNodes;
                        if (propChildenNodes.length > 0)
                            folder = me.prepareProperties(folder, propChildenNodes, 'false', keyName);
                    }
                    break;
                case 'Relationships':
                    if (!relationFolderNode)
                        break;

                    if (relationFolderNode.childNodes)
                        var relChildenNodes = relationFolderNode.childNodes;

                    if (relChildenNodes)
                        for (var k = 0; k < relChildenNodes.length; k++) {
                            var relationNode = relChildenNodes[k];
                            var found = false;
                            for (var ik = 0; ik < folder.dataRelationships.length; ik++)
                                if (relationNode.data.text.toLowerCase() == folder.dataRelationships[ik].relationshipName.toLowerCase()) {
                                    found = true;
                                    break;
                                }

                            if (found || relationNode.data.text === '')
                                continue;

                            //relationNodeAttr = relationNode.data;
                            relationNodeAttr = relationNode.raw;
                            var relation = {};
                            relation.propertyMaps = [];
                            var pMap;
                            if (relationNode.data.propertyMap != undefined)
                                pMap = relationNode.data.propertyMap;
                            else
                                pMap = relationNodeAttr.propertyMap;
                            for (var m = 0; m < pMap.length; m++) {
                                var propertyPairNode = pMap[m];
                                var propertyPair = {};

                                propertyPair.dataPropertyName = propertyPairNode.dataPropertyName;
                                propertyPair.relatedPropertyName = propertyPairNode.relatedPropertyName;
                                relation.propertyMaps.push(propertyPair);
                            }

                            relation.relatedObjectName = relationNodeAttr.relatedObjectName;
                            relation.relationshipName = relationNodeAttr.text;
                            relation.relationshipType = relationNodeAttr.relationshipTypeIndex;
                            folder.dataRelationships.push(relation);
                        }
                    break;
            }
        }
        return folder;
    },

    prepareProperties: function (folder, propChildNodes, ifHidden, keyName) {
        var me = this;
        var hasData = false;
        if (propChildNodes.length === 0) return folder;
        for (var k = 0; k < propChildNodes.length; k++) {
            var propertyNode = propChildNodes[k];

            if (propertyNode.data !== undefined) {
                if (propertyNode.data.property !== undefined) {
                    var propertyNodeProf = propertyNode.data.property;
                    hasData = true;
                }
            }

            if (!hasData)
                var propertyNodeProf = propertyNode.data.property; //propertyNode.raw.property;

            var props = {};

            props.columnName = propertyNodeProf.columnName; //propertyNode.raw.property.columnName;
            props.propertyName = propertyNodeProf.propertyName; //propertyNode.raw.property.propertyName;

            if (typeof propertyNode.raw.property.dataType.toLowerCase() == 'string')
                props.dataType = me.getDataTypeIndex(propertyNode.raw.property.dataType);
            else
                props.dataType = propertyNodeProf.dataType;

            props.dataLength = propertyNode.raw.property.dataLength;

            if (propertyNode.raw.property.nullable)
                props.isNullable = propertyNode.raw.property.nullable.toString().toLowerCase();
            else
                props.isNullable = 'false';

            if (keyName !== '') {
                if (props.columnName == keyName)
                    props.keyType = 1;
                else
                    props.keyType = 0;
            }
            else
                props.keyType = 0;

            if (propertyNode.raw.property.showOnIndex)
                props.showOnIndex = propertyNode.raw.property.showOnIndex.toString().toLowerCase();
            else
                props.showOnIndex = 'false';

            props.isHidden = propertyNode.raw.property.isHidden.toString().toLowerCase(); //ifHidden;
            props.numberOfDecimals = propertyNode.raw.property.numberOfDecimals;
            folder.dataProperties.push(props);
        }
        return folder;
    },

    getDataTypeIndex: function (dataType) {
        var me = this;
        if (me.dataTypes === undefined)
            return;

        var i = 0;

        while (me.dataTypes[i] === undefined)
            i++;

        for (var k = i; k < me.dataTypes.length; k++) {
            if (me.dataTypes[k][1] == dataType)
                return me.dataTypes[k][0];
        }
    },

    getDataTypes: function () {
        var me = this;
        Ext.Ajax.request({
            url: 'AdapterManager/DataType',
            method: 'GET',
            timeout: 6000000,
            success: function (response, request) {
                var dataTypeName = Ext.JSON.decode(response.responseText);
                me.dataTypes = [];
                var i = 0;
                while (!dataTypeName[i])
                    i++;
                while (dataTypeName[i]) {
                    me.dataTypes.push([i, dataTypeName[i]]);
                    i++;
                }
            },
            failure: function (f, a) {
                if (a.response)
                    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
            }
        });
    },

    resetConfigOracle: function (host, dbSchema, userName, password, serviceName, sid, serName) {
        host.setValue('');
        host.clearInvalid();

        host.show();

        dbSchema.setValue('');
        dbSchema.clearInvalid();

        userName.setValue('');
        userName.clearInvalid();

        password.setValue('');
        password.clearInvalid();
        serviceName.show();

        sid.setValue('');
        sid.clearInvalid();

        sid.setValue('');
        sid.clearInvalid();
    },

    resetConfigMsSql: function (dbName, dbServer, dbInstance, dbSchema, userName, password) {
        dbName.setValue('');
        dbName.clearInvalid();
        dbName.show();

        dbServer.setValue('localhost');
        dbServer.show();

        dbInstance.setValue('default');
        dbInstance.show();

        dbSchema.setValue('dbo');

        userName.setValue('');
        userName.clearInvalid();

        password.setValue('');
        password.clearInvalid();
    }
});
