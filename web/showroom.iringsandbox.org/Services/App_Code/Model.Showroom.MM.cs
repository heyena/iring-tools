//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Iesi.Collections.Generic;
using org.iringtools.library;

namespace org.iringtools.adapter.datalayer.proj_Showroom.MM
{
  public class HISTORY : IDataObject
  {
    public virtual String Id { get; set; }
    public virtual String DESCRIPTION
    {
      get { return Id; }
      set { Id = value; }
    }
    
    public virtual object GetPropertyValue(string propertyName)
    {
      switch (propertyName)
      {
        case "Id": return Id;
        case "DESCRIPTION": return DESCRIPTION;
        default: throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual void SetPropertyValue(string propertyName, object value)
    {
      switch (propertyName)
      {
        case "Id":
          Id = Convert.ToString(value);
          break;
        case "DESCRIPTION":
          if (value != null) DESCRIPTION = Convert.ToString(value);
          break;
        default:
          throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual IList<IDataObject> GetRelatedObjects(string relatedObjectType)
    {
      switch (relatedObjectType)
      {
        default:
          throw new NotImplementedException("This method has been deprecated.");
        }
      }
    }
    
    public class LINE : IDataObject
    {
      public virtual String Id { get; set; }
      public virtual String TAGNO
      {
        get { return Id; }
        set { Id = value; }
      }
      public virtual String ITEM { get; set; }
      public virtual String JOB_NO { get; set; }
      public virtual String CIN { get; set; }
      public virtual String UNIT_SUBDIV { get; set; }
      public virtual String GROUPCODE { get; set; }
      public virtual String B_SYS_LOC { get; set; }
      public virtual String SEQCODE { get; set; }
      public virtual String LINESEQNO { get; set; }
      public virtual String CLIENTSYSLOC { get; set; }
      public virtual Single? DIAMETER { get; set; }
      public virtual String CLASS { get; set; }
      public virtual String DSGNCODE { get; set; }
      public virtual Single? LENGTH { get; set; }
      public virtual String ABV_BEL_RACK { get; set; }
      public virtual String HEAT_TRACE { get; set; }
      public virtual String INSULATED_YN { get; set; }
      public virtual String INSL_MATL { get; set; }
      public virtual String INS_PURP { get; set; }
      public virtual Single? INS_THK { get; set; }
      public virtual String PAINTCODE { get; set; }
      public virtual String COLORCODE { get; set; }
      public virtual String CRITICAL_PIPE { get; set; }
      public virtual String LOCATION { get; set; }
      public virtual String PID { get; set; }
      public virtual String PIDREV { get; set; }
      public virtual String HOLDDESC { get; set; }
      public virtual String REV { get; set; }
      public virtual String HYDRO { get; set; }
      public virtual DateTime? INSTALLED { get; set; }
      public virtual String BSAP { get; set; }
      public virtual String DELETED { get; set; }
      public virtual String DEL_BY { get; set; }
      public virtual String UPDATED { get; set; }
      public virtual String UPDATED_BY { get; set; }
      public virtual DateTime? DATED { get; set; }
      public virtual String LOCKFLAG { get; set; }
      public virtual Double? LOCKLEVEL { get; set; }
      public virtual String LOCKREASON { get; set; }
      public virtual String LENGTH_UOM { get; set; }
      public virtual String ATTACHMENT_GROUP_ID { get; set; }
      
      public virtual object GetPropertyValue(string propertyName)
      {
        switch (propertyName)
        {
          case "Id": return Id;
          case "ITEM": return ITEM;
          case "JOB_NO": return JOB_NO;
          case "CIN": return CIN;
          case "TAGNO": return TAGNO;
          case "UNIT_SUBDIV": return UNIT_SUBDIV;
          case "GROUPCODE": return GROUPCODE;
          case "B_SYS_LOC": return B_SYS_LOC;
          case "SEQCODE": return SEQCODE;
          case "LINESEQNO": return LINESEQNO;
          case "CLIENTSYSLOC": return CLIENTSYSLOC;
          case "DIAMETER": return DIAMETER;
          case "CLASS": return CLASS;
          case "DSGNCODE": return DSGNCODE;
          case "LENGTH": return LENGTH;
          case "ABV_BEL_RACK": return ABV_BEL_RACK;
          case "HEAT_TRACE": return HEAT_TRACE;
          case "INSULATED_YN": return INSULATED_YN;
          case "INSL_MATL": return INSL_MATL;
          case "INS_PURP": return INS_PURP;
          case "INS_THK": return INS_THK;
          case "PAINTCODE": return PAINTCODE;
          case "COLORCODE": return COLORCODE;
          case "CRITICAL_PIPE": return CRITICAL_PIPE;
          case "LOCATION": return LOCATION;
          case "PID": return PID;
          case "PIDREV": return PIDREV;
          case "HOLDDESC": return HOLDDESC;
          case "REV": return REV;
          case "HYDRO": return HYDRO;
          case "INSTALLED": return INSTALLED;
          case "BSAP": return BSAP;
          case "DELETED": return DELETED;
          case "DEL_BY": return DEL_BY;
          case "UPDATED": return UPDATED;
          case "UPDATED_BY": return UPDATED_BY;
          case "DATED": return DATED;
          case "LOCKFLAG": return LOCKFLAG;
          case "LOCKLEVEL": return LOCKLEVEL;
          case "LOCKREASON": return LOCKREASON;
          case "LENGTH_UOM": return LENGTH_UOM;
          case "ATTACHMENT_GROUP_ID": return ATTACHMENT_GROUP_ID;
          default: throw new Exception("Property [" + propertyName + "] does not exist.");
        }
      }
      
      public virtual void SetPropertyValue(string propertyName, object value)
      {
        switch (propertyName)
        {
        case "Id":
          Id = Convert.ToString(value);
          break;
          case "ITEM":
            if (value != null) ITEM = Convert.ToString(value);
            break;
          case "JOB_NO":
            if (value != null) JOB_NO = Convert.ToString(value);
            break;
          case "CIN":
            if (value != null) CIN = Convert.ToString(value);
            break;
          case "TAGNO":
            if (value != null) TAGNO = Convert.ToString(value);
            break;
          case "UNIT_SUBDIV":
            if (value != null) UNIT_SUBDIV = Convert.ToString(value);
            break;
          case "GROUPCODE":
            if (value != null) GROUPCODE = Convert.ToString(value);
            break;
          case "B_SYS_LOC":
            if (value != null) B_SYS_LOC = Convert.ToString(value);
            break;
          case "SEQCODE":
            if (value != null) SEQCODE = Convert.ToString(value);
            break;
          case "LINESEQNO":
            if (value != null) LINESEQNO = Convert.ToString(value);
            break;
          case "CLIENTSYSLOC":
            if (value != null) CLIENTSYSLOC = Convert.ToString(value);
            break;
          case "DIAMETER":
            if (value != null) DIAMETER = Convert.ToSingle(value);
            break;
          case "CLASS":
            if (value != null) CLASS = Convert.ToString(value);
            break;
          case "DSGNCODE":
            if (value != null) DSGNCODE = Convert.ToString(value);
            break;
          case "LENGTH":
            if (value != null) LENGTH = Convert.ToSingle(value);
            break;
          case "ABV_BEL_RACK":
            if (value != null) ABV_BEL_RACK = Convert.ToString(value);
            break;
          case "HEAT_TRACE":
            if (value != null) HEAT_TRACE = Convert.ToString(value);
            break;
          case "INSULATED_YN":
            if (value != null) INSULATED_YN = Convert.ToString(value);
            break;
          case "INSL_MATL":
            if (value != null) INSL_MATL = Convert.ToString(value);
            break;
          case "INS_PURP":
            if (value != null) INS_PURP = Convert.ToString(value);
            break;
          case "INS_THK":
            if (value != null) INS_THK = Convert.ToSingle(value);
            break;
          case "PAINTCODE":
            if (value != null) PAINTCODE = Convert.ToString(value);
            break;
          case "COLORCODE":
            if (value != null) COLORCODE = Convert.ToString(value);
            break;
          case "CRITICAL_PIPE":
            if (value != null) CRITICAL_PIPE = Convert.ToString(value);
            break;
          case "LOCATION":
            if (value != null) LOCATION = Convert.ToString(value);
            break;
          case "PID":
            if (value != null) PID = Convert.ToString(value);
            break;
          case "PIDREV":
            if (value != null) PIDREV = Convert.ToString(value);
            break;
          case "HOLDDESC":
            if (value != null) HOLDDESC = Convert.ToString(value);
            break;
          case "REV":
            if (value != null) REV = Convert.ToString(value);
            break;
          case "HYDRO":
            if (value != null) HYDRO = Convert.ToString(value);
            break;
          case "INSTALLED":
            if (value != null) INSTALLED = Convert.ToDateTime(value);
            break;
          case "BSAP":
            if (value != null) BSAP = Convert.ToString(value);
            break;
          case "DELETED":
            if (value != null) DELETED = Convert.ToString(value);
            break;
          case "DEL_BY":
            if (value != null) DEL_BY = Convert.ToString(value);
            break;
          case "UPDATED":
            if (value != null) UPDATED = Convert.ToString(value);
            break;
          case "UPDATED_BY":
            if (value != null) UPDATED_BY = Convert.ToString(value);
            break;
          case "DATED":
            if (value != null) DATED = Convert.ToDateTime(value);
            break;
          case "LOCKFLAG":
            if (value != null) LOCKFLAG = Convert.ToString(value);
            break;
          case "LOCKLEVEL":
            if (value != null) LOCKLEVEL = Convert.ToDouble(value);
            break;
          case "LOCKREASON":
            if (value != null) LOCKREASON = Convert.ToString(value);
            break;
          case "LENGTH_UOM":
            if (value != null) LENGTH_UOM = Convert.ToString(value);
            break;
          case "ATTACHMENT_GROUP_ID":
            if (value != null) ATTACHMENT_GROUP_ID = Convert.ToString(value);
            break;
          default:
            throw new Exception("Property [" + propertyName + "] does not exist.");
        }
      }
      
      public virtual IList<IDataObject> GetRelatedObjects(string relatedObjectType)
      {
        switch (relatedObjectType)
        {
          default:
            throw new NotImplementedException("This method has been deprecated.");
          }
        }
      }
      
      public class LINE_DWG : IDataObject
      {
        public virtual String Id { get; set; }
        public virtual String ATTACHMENT_ID
        {
          get { return Id; }
          set { Id = value; }
        }
        public virtual String ATTACHMENT_GROUP_ID { get; set; }
        public virtual String ATTACHMENT_OBJECT_TYPE { get; set; }
        public virtual String ATTACHMENT_CHILD_ID { get; set; }
        public virtual Int32? ATTACHMENT_ORDER { get; set; }
        public virtual String ATTACHMENT_REVISION_CHARACTER { get; set; }
        public virtual String ATTACHMENT_RELATION_TYPE { get; set; }
        public virtual Int64? ATTACHMENT_SIZE { get; set; }
        public virtual String ATTACHMENT_MIME_TYPE { get; set; }
        public virtual String ATTACHMENT_FILE_EXTENSION { get; set; }
        public virtual String ATTACHMENT_FILE_NAME { get; set; }
        public virtual String ATTACHMENT_REVISION_TYPE { get; set; }
        public virtual String ATTACHMENT_ROLE_FLAG { get; set; }
        public virtual String ATTACHMENT_CHECK_SUM { get; set; }
        public virtual String ATTACHMENT_DIFFERENCING_TOKEN { get; set; }
        public virtual DateTime? ATTACHMENT_LAST_UPDATED { get; set; }
        public virtual String ATTACHMENT_COMPRESSION_FLAG { get; set; }
        public virtual String ATTACHMENT_COMPRESSION_TYPE { get; set; }
        
        public virtual object GetPropertyValue(string propertyName)
        {
          switch (propertyName)
          {
            case "Id": return Id;
            case "ATTACHMENT_GROUP_ID": return ATTACHMENT_GROUP_ID;
            case "ATTACHMENT_ID": return ATTACHMENT_ID;
            case "ATTACHMENT_OBJECT_TYPE": return ATTACHMENT_OBJECT_TYPE;
            case "ATTACHMENT_CHILD_ID": return ATTACHMENT_CHILD_ID;
            case "ATTACHMENT_ORDER": return ATTACHMENT_ORDER;
            case "ATTACHMENT_REVISION_CHARACTER": return ATTACHMENT_REVISION_CHARACTER;
            case "ATTACHMENT_RELATION_TYPE": return ATTACHMENT_RELATION_TYPE;
            case "ATTACHMENT_SIZE": return ATTACHMENT_SIZE;
            case "ATTACHMENT_MIME_TYPE": return ATTACHMENT_MIME_TYPE;
            case "ATTACHMENT_FILE_EXTENSION": return ATTACHMENT_FILE_EXTENSION;
            case "ATTACHMENT_FILE_NAME": return ATTACHMENT_FILE_NAME;
            case "ATTACHMENT_REVISION_TYPE": return ATTACHMENT_REVISION_TYPE;
            case "ATTACHMENT_ROLE_FLAG": return ATTACHMENT_ROLE_FLAG;
            case "ATTACHMENT_CHECK_SUM": return ATTACHMENT_CHECK_SUM;
            case "ATTACHMENT_DIFFERENCING_TOKEN": return ATTACHMENT_DIFFERENCING_TOKEN;
            case "ATTACHMENT_LAST_UPDATED": return ATTACHMENT_LAST_UPDATED;
            case "ATTACHMENT_COMPRESSION_FLAG": return ATTACHMENT_COMPRESSION_FLAG;
            case "ATTACHMENT_COMPRESSION_TYPE": return ATTACHMENT_COMPRESSION_TYPE;
            default: throw new Exception("Property [" + propertyName + "] does not exist.");
          }
        }
        
        public virtual void SetPropertyValue(string propertyName, object value)
        {
          switch (propertyName)
          {
        case "Id":
          Id = Convert.ToString(value);
          break;
            case "ATTACHMENT_GROUP_ID":
              if (value != null) ATTACHMENT_GROUP_ID = Convert.ToString(value);
              break;
            case "ATTACHMENT_ID":
              if (value != null) ATTACHMENT_ID = Convert.ToString(value);
              break;
            case "ATTACHMENT_OBJECT_TYPE":
              if (value != null) ATTACHMENT_OBJECT_TYPE = Convert.ToString(value);
              break;
            case "ATTACHMENT_CHILD_ID":
              if (value != null) ATTACHMENT_CHILD_ID = Convert.ToString(value);
              break;
            case "ATTACHMENT_ORDER":
              if (value != null) ATTACHMENT_ORDER = Convert.ToInt32(value);
              break;
            case "ATTACHMENT_REVISION_CHARACTER":
              if (value != null) ATTACHMENT_REVISION_CHARACTER = Convert.ToString(value);
              break;
            case "ATTACHMENT_RELATION_TYPE":
              if (value != null) ATTACHMENT_RELATION_TYPE = Convert.ToString(value);
              break;
            case "ATTACHMENT_SIZE":
              if (value != null) ATTACHMENT_SIZE = Convert.ToInt64(value);
              break;
            case "ATTACHMENT_MIME_TYPE":
              if (value != null) ATTACHMENT_MIME_TYPE = Convert.ToString(value);
              break;
            case "ATTACHMENT_FILE_EXTENSION":
              if (value != null) ATTACHMENT_FILE_EXTENSION = Convert.ToString(value);
              break;
            case "ATTACHMENT_FILE_NAME":
              if (value != null) ATTACHMENT_FILE_NAME = Convert.ToString(value);
              break;
            case "ATTACHMENT_REVISION_TYPE":
              if (value != null) ATTACHMENT_REVISION_TYPE = Convert.ToString(value);
              break;
            case "ATTACHMENT_ROLE_FLAG":
              if (value != null) ATTACHMENT_ROLE_FLAG = Convert.ToString(value);
              break;
            case "ATTACHMENT_CHECK_SUM":
              if (value != null) ATTACHMENT_CHECK_SUM = Convert.ToString(value);
              break;
            case "ATTACHMENT_DIFFERENCING_TOKEN":
              if (value != null) ATTACHMENT_DIFFERENCING_TOKEN = Convert.ToString(value);
              break;
            case "ATTACHMENT_LAST_UPDATED":
              if (value != null) ATTACHMENT_LAST_UPDATED = Convert.ToDateTime(value);
              break;
            case "ATTACHMENT_COMPRESSION_FLAG":
              if (value != null) ATTACHMENT_COMPRESSION_FLAG = Convert.ToString(value);
              break;
            case "ATTACHMENT_COMPRESSION_TYPE":
              if (value != null) ATTACHMENT_COMPRESSION_TYPE = Convert.ToString(value);
              break;
            default:
              throw new Exception("Property [" + propertyName + "] does not exist.");
          }
        }
        
        public virtual IList<IDataObject> GetRelatedObjects(string relatedObjectType)
        {
          switch (relatedObjectType)
          {
            default:
              throw new NotImplementedException("This method has been deprecated.");
            }
          }
        }
        
        public class VALVE : IDataObject
        {
          public virtual String Id { get; set; }
          public virtual String TAGNO
          {
            get { return Id; }
            set { Id = value; }
          }
          public virtual String ITEM { get; set; }
          public virtual String JOB_NO { get; set; }
          public virtual String CIN { get; set; }
          public virtual String UNIT_SUBDIV { get; set; }
          public virtual String GROUPCODE { get; set; }
          public virtual String B_SYS_LOC { get; set; }
          public virtual String SEQCODE { get; set; }
          public virtual String CLIENTSYSLOC { get; set; }
          public virtual String VALVESEQNO { get; set; }
          public virtual String SUFFIX { get; set; }
          public virtual Int32? QUANTITY { get; set; }
          public virtual String CHAIN_OP { get; set; }
          public virtual String LINESEQNO { get; set; }
          public virtual String REL_FIELD { get; set; }
          public virtual String MPAGSPECIALTY { get; set; }
          public virtual String MPAGTAKEOFF { get; set; }
          public virtual String PWDESCRIPTION { get; set; }
          public virtual String STELLITE { get; set; }
          public virtual String SCHEDULE { get; set; }
          public virtual String CONST_REMARKS { get; set; }
          public virtual Single? DIAMETER { get; set; }
          public virtual String CODE { get; set; }
          public virtual String END_PREP { get; set; }
          public virtual String OP_ORIEN { get; set; }
          public virtual String ACTUATOR { get; set; }
          public virtual String STOCK_CODE { get; set; }
          public virtual String TYPE { get; set; }
          public virtual Single? LENGTH { get; set; }
          public virtual String LINE_CLASS { get; set; }
          public virtual String ABV_BEL_RACK { get; set; }
          public virtual String HEAT_TRACE { get; set; }
          public virtual String INSULATED_YN { get; set; }
          public virtual String INSL_MATL { get; set; }
          public virtual Single? INS_THK { get; set; }
          public virtual String LOCATION { get; set; }
          public virtual String PID { get; set; }
          public virtual String PIDREV { get; set; }
          public virtual DateTime? ENGR_REL { get; set; }
          public virtual String HOLDDESC { get; set; }
          public virtual String PID_LOC { get; set; }
          public virtual String REV { get; set; }
          public virtual String ISO_DWG { get; set; }
          public virtual String SPOOLSEQNO { get; set; }
          public virtual String SPOOLSUFFIX { get; set; }
          public virtual String SPOOLSEQCOD { get; set; }
          public virtual String MR_NO { get; set; }
          public virtual String LOCK_DEVICE { get; set; }
          public virtual String VENDSUPL { get; set; }
          public virtual String STARTUP { get; set; }
          public virtual String VENDOR { get; set; }
          public virtual String SCN { get; set; }
          public virtual String STOR_LOC { get; set; }
          public virtual String MWR { get; set; }
          public virtual String BSAP { get; set; }
          public virtual String DELETED { get; set; }
          public virtual String DEL_BY { get; set; }
          public virtual String UPDATED { get; set; }
          public virtual String UPDATED_BY { get; set; }
          public virtual DateTime? DATED { get; set; }
          public virtual String LOCKFLAG { get; set; }
          public virtual Double? LOCKLEVEL { get; set; }
          public virtual String LOCKREASON { get; set; }
          public virtual DateTime? SHOP_REQ { get; set; }
          public virtual String LENGTH_UOM { get; set; }
          
          public virtual object GetPropertyValue(string propertyName)
          {
            switch (propertyName)
            {
              case "Id": return Id;
              case "ITEM": return ITEM;
              case "JOB_NO": return JOB_NO;
              case "CIN": return CIN;
              case "TAGNO": return TAGNO;
              case "UNIT_SUBDIV": return UNIT_SUBDIV;
              case "GROUPCODE": return GROUPCODE;
              case "B_SYS_LOC": return B_SYS_LOC;
              case "SEQCODE": return SEQCODE;
              case "CLIENTSYSLOC": return CLIENTSYSLOC;
              case "VALVESEQNO": return VALVESEQNO;
              case "SUFFIX": return SUFFIX;
              case "QUANTITY": return QUANTITY;
              case "CHAIN_OP": return CHAIN_OP;
              case "LINESEQNO": return LINESEQNO;
              case "REL_FIELD": return REL_FIELD;
              case "MPAGSPECIALTY": return MPAGSPECIALTY;
              case "MPAGTAKEOFF": return MPAGTAKEOFF;
              case "PWDESCRIPTION": return PWDESCRIPTION;
              case "STELLITE": return STELLITE;
              case "SCHEDULE": return SCHEDULE;
              case "CONST_REMARKS": return CONST_REMARKS;
              case "DIAMETER": return DIAMETER;
              case "CODE": return CODE;
              case "END_PREP": return END_PREP;
              case "OP_ORIEN": return OP_ORIEN;
              case "ACTUATOR": return ACTUATOR;
              case "STOCK_CODE": return STOCK_CODE;
              case "TYPE": return TYPE;
              case "LENGTH": return LENGTH;
              case "LINE_CLASS": return LINE_CLASS;
              case "ABV_BEL_RACK": return ABV_BEL_RACK;
              case "HEAT_TRACE": return HEAT_TRACE;
              case "INSULATED_YN": return INSULATED_YN;
              case "INSL_MATL": return INSL_MATL;
              case "INS_THK": return INS_THK;
              case "LOCATION": return LOCATION;
              case "PID": return PID;
              case "PIDREV": return PIDREV;
              case "ENGR_REL": return ENGR_REL;
              case "HOLDDESC": return HOLDDESC;
              case "PID_LOC": return PID_LOC;
              case "REV": return REV;
              case "ISO_DWG": return ISO_DWG;
              case "SPOOLSEQNO": return SPOOLSEQNO;
              case "SPOOLSUFFIX": return SPOOLSUFFIX;
              case "SPOOLSEQCOD": return SPOOLSEQCOD;
              case "MR_NO": return MR_NO;
              case "LOCK_DEVICE": return LOCK_DEVICE;
              case "VENDSUPL": return VENDSUPL;
              case "STARTUP": return STARTUP;
              case "VENDOR": return VENDOR;
              case "SCN": return SCN;
              case "STOR_LOC": return STOR_LOC;
              case "MWR": return MWR;
              case "BSAP": return BSAP;
              case "DELETED": return DELETED;
              case "DEL_BY": return DEL_BY;
              case "UPDATED": return UPDATED;
              case "UPDATED_BY": return UPDATED_BY;
              case "DATED": return DATED;
              case "LOCKFLAG": return LOCKFLAG;
              case "LOCKLEVEL": return LOCKLEVEL;
              case "LOCKREASON": return LOCKREASON;
              case "SHOP_REQ": return SHOP_REQ;
              case "LENGTH_UOM": return LENGTH_UOM;
              default: throw new Exception("Property [" + propertyName + "] does not exist.");
            }
          }
          
          public virtual void SetPropertyValue(string propertyName, object value)
          {
            switch (propertyName)
            {
        case "Id":
          Id = Convert.ToString(value);
          break;
              case "ITEM":
                if (value != null) ITEM = Convert.ToString(value);
                break;
              case "JOB_NO":
                if (value != null) JOB_NO = Convert.ToString(value);
                break;
              case "CIN":
                if (value != null) CIN = Convert.ToString(value);
                break;
              case "TAGNO":
                if (value != null) TAGNO = Convert.ToString(value);
                break;
              case "UNIT_SUBDIV":
                if (value != null) UNIT_SUBDIV = Convert.ToString(value);
                break;
              case "GROUPCODE":
                if (value != null) GROUPCODE = Convert.ToString(value);
                break;
              case "B_SYS_LOC":
                if (value != null) B_SYS_LOC = Convert.ToString(value);
                break;
              case "SEQCODE":
                if (value != null) SEQCODE = Convert.ToString(value);
                break;
              case "CLIENTSYSLOC":
                if (value != null) CLIENTSYSLOC = Convert.ToString(value);
                break;
              case "VALVESEQNO":
                if (value != null) VALVESEQNO = Convert.ToString(value);
                break;
              case "SUFFIX":
                if (value != null) SUFFIX = Convert.ToString(value);
                break;
              case "QUANTITY":
                if (value != null) QUANTITY = Convert.ToInt32(value);
                break;
              case "CHAIN_OP":
                if (value != null) CHAIN_OP = Convert.ToString(value);
                break;
              case "LINESEQNO":
                if (value != null) LINESEQNO = Convert.ToString(value);
                break;
              case "REL_FIELD":
                if (value != null) REL_FIELD = Convert.ToString(value);
                break;
              case "MPAGSPECIALTY":
                if (value != null) MPAGSPECIALTY = Convert.ToString(value);
                break;
              case "MPAGTAKEOFF":
                if (value != null) MPAGTAKEOFF = Convert.ToString(value);
                break;
              case "PWDESCRIPTION":
                if (value != null) PWDESCRIPTION = Convert.ToString(value);
                break;
              case "STELLITE":
                if (value != null) STELLITE = Convert.ToString(value);
                break;
              case "SCHEDULE":
                if (value != null) SCHEDULE = Convert.ToString(value);
                break;
              case "CONST_REMARKS":
                if (value != null) CONST_REMARKS = Convert.ToString(value);
                break;
              case "DIAMETER":
                if (value != null) DIAMETER = Convert.ToSingle(value);
                break;
              case "CODE":
                if (value != null) CODE = Convert.ToString(value);
                break;
              case "END_PREP":
                if (value != null) END_PREP = Convert.ToString(value);
                break;
              case "OP_ORIEN":
                if (value != null) OP_ORIEN = Convert.ToString(value);
                break;
              case "ACTUATOR":
                if (value != null) ACTUATOR = Convert.ToString(value);
                break;
              case "STOCK_CODE":
                if (value != null) STOCK_CODE = Convert.ToString(value);
                break;
              case "TYPE":
                if (value != null) TYPE = Convert.ToString(value);
                break;
              case "LENGTH":
                if (value != null) LENGTH = Convert.ToSingle(value);
                break;
              case "LINE_CLASS":
                if (value != null) LINE_CLASS = Convert.ToString(value);
                break;
              case "ABV_BEL_RACK":
                if (value != null) ABV_BEL_RACK = Convert.ToString(value);
                break;
              case "HEAT_TRACE":
                if (value != null) HEAT_TRACE = Convert.ToString(value);
                break;
              case "INSULATED_YN":
                if (value != null) INSULATED_YN = Convert.ToString(value);
                break;
              case "INSL_MATL":
                if (value != null) INSL_MATL = Convert.ToString(value);
                break;
              case "INS_THK":
                if (value != null) INS_THK = Convert.ToSingle(value);
                break;
              case "LOCATION":
                if (value != null) LOCATION = Convert.ToString(value);
                break;
              case "PID":
                if (value != null) PID = Convert.ToString(value);
                break;
              case "PIDREV":
                if (value != null) PIDREV = Convert.ToString(value);
                break;
              case "ENGR_REL":
                if (value != null) ENGR_REL = Convert.ToDateTime(value);
                break;
              case "HOLDDESC":
                if (value != null) HOLDDESC = Convert.ToString(value);
                break;
              case "PID_LOC":
                if (value != null) PID_LOC = Convert.ToString(value);
                break;
              case "REV":
                if (value != null) REV = Convert.ToString(value);
                break;
              case "ISO_DWG":
                if (value != null) ISO_DWG = Convert.ToString(value);
                break;
              case "SPOOLSEQNO":
                if (value != null) SPOOLSEQNO = Convert.ToString(value);
                break;
              case "SPOOLSUFFIX":
                if (value != null) SPOOLSUFFIX = Convert.ToString(value);
                break;
              case "SPOOLSEQCOD":
                if (value != null) SPOOLSEQCOD = Convert.ToString(value);
                break;
              case "MR_NO":
                if (value != null) MR_NO = Convert.ToString(value);
                break;
              case "LOCK_DEVICE":
                if (value != null) LOCK_DEVICE = Convert.ToString(value);
                break;
              case "VENDSUPL":
                if (value != null) VENDSUPL = Convert.ToString(value);
                break;
              case "STARTUP":
                if (value != null) STARTUP = Convert.ToString(value);
                break;
              case "VENDOR":
                if (value != null) VENDOR = Convert.ToString(value);
                break;
              case "SCN":
                if (value != null) SCN = Convert.ToString(value);
                break;
              case "STOR_LOC":
                if (value != null) STOR_LOC = Convert.ToString(value);
                break;
              case "MWR":
                if (value != null) MWR = Convert.ToString(value);
                break;
              case "BSAP":
                if (value != null) BSAP = Convert.ToString(value);
                break;
              case "DELETED":
                if (value != null) DELETED = Convert.ToString(value);
                break;
              case "DEL_BY":
                if (value != null) DEL_BY = Convert.ToString(value);
                break;
              case "UPDATED":
                if (value != null) UPDATED = Convert.ToString(value);
                break;
              case "UPDATED_BY":
                if (value != null) UPDATED_BY = Convert.ToString(value);
                break;
              case "DATED":
                if (value != null) DATED = Convert.ToDateTime(value);
                break;
              case "LOCKFLAG":
                if (value != null) LOCKFLAG = Convert.ToString(value);
                break;
              case "LOCKLEVEL":
                if (value != null) LOCKLEVEL = Convert.ToDouble(value);
                break;
              case "LOCKREASON":
                if (value != null) LOCKREASON = Convert.ToString(value);
                break;
              case "SHOP_REQ":
                if (value != null) SHOP_REQ = Convert.ToDateTime(value);
                break;
              case "LENGTH_UOM":
                if (value != null) LENGTH_UOM = Convert.ToString(value);
                break;
              default:
                throw new Exception("Property [" + propertyName + "] does not exist.");
            }
          }
          
          public virtual IList<IDataObject> GetRelatedObjects(string relatedObjectType)
          {
            switch (relatedObjectType)
            {
              default:
                throw new NotImplementedException("This method has been deprecated.");
              }
            }
          }
        }
