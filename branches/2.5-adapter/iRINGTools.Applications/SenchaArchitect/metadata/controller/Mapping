{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "parentClass": "",
        "models": [
            "MappingModel"
        ],
        "stores": [
            "MappingStore"
        ],
        "views": [
            "common.PropertyPanel",
            "common.ContentPanel",
            "common.CenterPanel",
            "mapping.MappingTree",
            "directory.GraphMapForm",
            "mapping.ClassMapForm",
            "mapping.ClassMapWindow",
            "mapping.PropertyMapWindow",
            "directory.GraphMapWindow",
            "mapping.ValueListMapWindow",
            "mapping.ValueListMapForm",
            "mapping.ValueListWindow",
            "mapping.MappingPanel",
            "mapping.ValueListForm"
        ],
        "designer|userClassName": "Mapping"
    },
    "designerId": "5fd4e1f1-2736-412f-8d21-bfa7afb08b0b",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "parentClass",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteTemplateMap",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var dirTree = me.getDirTree();\r",
                    "var panel = content.down('mappingpanel');\r",
                    "var tree = content.down('mappingtree'),\r",
                    "node = tree.getSelectedNode();\r",
                    "var nodeId = node.data.id.split('/');\r",
                    "var text = nodeId[nodeId.length-1];\r",
                    "var mapingNode = node.data.parentId+'/'+text;\r",
                    "me.getParentClass(node);\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/deleteTemplateMap',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    //contextName: panel.contextName,\r",
                    "    //endpoint: panel.endpoint,\r",
                    "    scope: panel.contextName,\r",
                    "    application: panel.endpoint,\r",
                    "    baseUrl: panel.baseUrl,\r",
                    "    mappingNode: mapingNode,//node.data.id,\r",
                    "    parentIdentifier: me.parentClass,\r",
                    "    identifier: node.data.identifier,\r",
                    "    index: node.parentNode.indexOf(node)\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    tree.onReload();\r",
                    "\r",
                    "  },\r",
                    "  failure: function () { \r",
                    "\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=templatemapdelete]"
            },
            "designerId": "5060182c-bc98-4686-997e-d2e77e27180c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dirTree",
                "selector": "viewport > directorypanel > directorytree"
            },
            "designerId": "5ec6b0d3-1178-4b6d-88f9-cef556b499b3"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainContent",
                "selector": "viewport > centerpanel > contentpanel"
            },
            "designerId": "bae8ae9d-5948-4601-9499-2e8a68436f63"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getObjectType",
                "designer|params": [
                    "type"
                ],
                "implHandler": [
                    "switch (type) {\r",
                    "  case 0:\r",
                    "  return 'Unknown';\r",
                    "  case 1:\r",
                    "  return 'Property';\r",
                    "  case 2:\r",
                    "  return 'Possessor';\r",
                    "  case 3:\r",
                    "  return 'Reference';\r",
                    "  case 4:\r",
                    "  return 'FixedValue';\r",
                    "  case 5:\r",
                    "  return 'DataProperty';\r",
                    "  case 6:\r",
                    "  return 'ObjectProperty';\r",
                    "}"
                ]
            },
            "designerId": "330d115b-b143-454f-936c-ebe9188de96e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getParentClass",
                "designer|params": [
                    "n"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "if ( n.parentNode !== null && n.parentNode !== undefined) {\r",
                    "  if ((n.parentNode.data.type == 'ClassMapNode' || \r",
                    "  n.parentNode.data.type == 'GraphMapNode') && \r",
                    "  n.parentNode.data.identifier !== undefined) {\r",
                    "    me.parentClass = n.parentNode.data.identifier;\r",
                    "    return me.parentClass;\r",
                    "  }\r",
                    "  else {\r",
                    "    me.getParentClass(n.parentNode);\r",
                    "  }\r",
                    "}\r",
                    "return me.parentClass;\r",
                    ""
                ]
            },
            "designerId": "8ab6cf81-9df4-42ba-bbca-7fe69585d746"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onEditOrNewGraph",
                "implHandler": [
                    "var me = this;\r",
                    "var nodeId, contextName, endpoint, baseUrl, graphName, \r",
                    "objectName, classLabel, classUrl, identifier, wintitle;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode(),\r",
                    "  record = node.data.record;\r",
                    "var contextName;// This is scope\r",
                    "var endpoint; //This is application\r",
                    "var delimeter;\r",
                    "if(record)\r",
                    "delimeter = record.classTemplateMaps[0].classMap.identifierDelimiter;\r",
                    "else\r",
                    "delimeter = '_';\r",
                    "if (record) {\r",
                    "  identifier = record.classTemplateMaps[0].classMap.identifiers[0];\r",
                    "  if(record.classTemplateMaps[0].classMap.identifiers.length>1){\r",
                    "    for(var i=1;i<record.classTemplateMaps[0].classMap.identifiers.length;i++){\r",
                    "      identifier = identifier+','+record.classTemplateMaps[0].classMap.identifiers[i];\r",
                    "    }\r",
                    "  } \r",
                    "\r",
                    "  //identifier = getLastXString(record.record.classTemplateMaps[0].classMap.identifiers[0], 1).split('.')[1];\r",
                    "  //graphName = record.record.name;\r",
                    "  graphName = record.name;\r",
                    "  objectName = record.dataObjectName;//getLastXString(record.classTemplateMaps[0].classMap.identifiers[0], 1).split('.')[0];\r",
                    "  //objectName = contextName + '/' + endpoint + '/' + 'DataObjects/DataObject/' + \r",
                    "  //record.classTemplateMaps[0].classMap.identifiers[0].replace('.', '/');\r",
                    "  //classLabel = record.record.classTemplateMaps[0].classMap.name;\r",
                    "  // classUrl = record.record.classTemplateMaps[0].classMap.id;\r",
                    "  classLabel = record.classTemplateMaps[0].classMap.name;\r",
                    "  classUrl = record.classTemplateMaps[0].classMap.id;\r",
                    "  contextName = node.parentNode.parentNode.parentNode.data.text;\r",
                    "  endpoint = node.parentNode.parentNode.data.text; \r",
                    "}\r",
                    "else{\r",
                    "  contextName = node.parentNode.parentNode.data.text;\r",
                    "  endpoint = node.parentNode.data.text; \r",
                    "}\r",
                    "\r",
                    "if(item.itemId == 'editgraph') {\r",
                    "  wintitle = 'Edit Graph \\\"' + graphName + '\\\"'; \r",
                    "} else {\r",
                    "  wintitle = 'Add GraphMap';\r",
                    "}\r",
                    "var conf = {\r",
                    "  id: 'tab-' + node.data.id,\r",
                    "  title: wintitle ,\r",
                    "  iconCls: 'tabsGraph',\r",
                    "  //height: 200,\r",
                    "  //width: 430\r",
                    "};\r",
                    "\r",
                    "var win = Ext.widget('graphmapwindow', conf);\r",
                    "\r",
                    "/*if(node) {\r",
                    "nodeId = node.data.id;\r",
                    "contextName = node.data.property.context;\r",
                    "endpoint = node.data.property.endpoint;\r",
                    "baseUrl = node.data.property.baseUrl; \r",
                    "}*/\r",
                    "var formRecord = {\r",
                    "  'scope': contextName,\r",
                    "  'app': endpoint,\r",
                    "  'oldGraphName': graphName,\r",
                    "  'graphName': graphName,\r",
                    "  'objectName': objectName,\r",
                    "  'classId': classUrl,\r",
                    "  'identifier': identifier,\r",
                    "  'className': classLabel,\r",
                    "  'delimiter':delimeter\r",
                    "  //'baseUrl': baseUrl,\r",
                    "  //'mappingNode': nodeId,\r",
                    "\r",
                    "  //'oldClassUrl': classUrl,\r",
                    "  //'oldClassLabel': classLabel,\r",
                    "\r",
                    "};\r",
                    "\r",
                    "var form = win.down('form').getForm();\r",
                    "form.setValues(formRecord);\r",
                    "\r",
                    "\r",
                    "win.down('form').updateDDContainers(record);\r",
                    "\r",
                    "win.on('save', function () {\r",
                    "  win.close(); \r",
                    "  tree.onReload();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=editnewgraph]"
            },
            "designerId": "b9c1914a-36eb-4758-98a1-27f2fe763bfa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openGraphMap",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "var content = me.getMainContent(),\r",
                    "  context = node.parentNode.parentNode.parentNode.data.text;//node.data.property.context,\r",
                    "  endpoint = node.parentNode.parentNode.data.text//node.data.property.endpoint,\r",
                    "  // baseUrl = node.data.property.baseUrl,\r",
                    "  graphName = node.internalId;//node.data.text;\r",
                    "\ttitle = 'GraphMap - ' + context + \".\" + endpoint + '.' + node.data.text;\r",
                    "\r",
                    "var templateTypes = ['Qualification', 'Definition'];\r",
                    "var mapPanel = content.down('mappingpanel[title='+title+']');\r",
                    "if(!mapPanel) {\r",
                    "  mapPanel = Ext.widget('mappingpanel', {\r",
                    "    'title': title, \r",
                    "    'contextName': context,\r",
                    "    //'baseUrl': baseUrl, \r",
                    "    'graph': graphName,\r",
                    "    'endpoint': endpoint\r",
                    "  });\r",
                    "  var mapProp = mapPanel.down('propertypanel');\r",
                    "\r",
                    "  var mapTree = mapPanel.down('mappingtree');\r",
                    "  var treeStore = mapTree.getStore();\r",
                    "  var params = treeStore.getProxy().extraParams;\r",
                    "\r",
                    "  treeStore.on('beforeload', function (store, operation, eopts) {\r",
                    "    params.contextName = context;\r",
                    "    params.endpoint = endpoint;\r",
                    "    //params.baseUrl = baseUrl;\r",
                    "    params.id = node.parentNode.parentNode.internalId;\r",
                    "    params.tempNode = node.parentNode.parentNode.internalId;\r",
                    "    params.graph = graphName;\r",
                    "  }, me);\r",
                    "\r",
                    "  mapTree.on('beforeitemexpand', function () {\r",
                    "    content.getEl().mask('Loading...');\r",
                    "  }, me);\r",
                    "\r",
                    "  mapTree.on('load', function () {\r",
                    "    content.getEl().unmask();\r",
                    "  }, me);\r",
                    "  mapTree.on('itemexpand', function () {\r",
                    "    content.getEl().unmask();\r",
                    "  }, me);\r",
                    "\r",
                    "  mapTree.on('itemclick', function (tablepanel, record, item, index, e) {\r",
                    "    var obj = record.store.getAt(index).data;\r",
                    "    if (obj.property && obj.property !== \"\" && obj.property.length) {\r",
                    "      mapProp.setSource(obj.property);\r",
                    "    } else {\r",
                    "      if (obj.record.type>=0  && !obj.record.roleMaps) {\r",
                    "        var arrStr = '';\r",
                    "        for (var i in obj.record) {\r",
                    "          if (i != 'type' && obj.record[i] !== null && obj.record[i] !== '') {\r",
                    "            arrStr += i + '=' + obj.record[i] + '&';\r",
                    "          }\r",
                    "        }\r",
                    "        var type = me.getObjectType(obj.record.type);\r",
                    "        //arrStr += 'typeDescription=' + type;\r",
                    "        arrStr += 'type=' + type;\r",
                    "        var arr = Ext.Object.fromQueryString(arrStr);\r",
                    "        mapProp.setSource(arr);\r",
                    "      }\r",
                    "      else {\r",
                    "        //mapProp.setSource(obj.record);\r",
                    "        \r",
                    "        for (var propName in obj.record) {\r",
                    "          if (propName != 'dataLength') {\r",
                    "            var propValue = obj.record.type;\r",
                    "            \r",
                    "            if (propName == 'type') {\r",
                    "              if(propValue!='Qualification' && propValue!='Definition')  \r",
                    "                propValue = templateTypes[propValue];\r",
                    "              \r",
                    "            }\r",
                    "            obj.record.type = propValue;\r",
                    "            mapProp.setSource(obj.record);\r",
                    "          }\r",
                    "        }\r",
                    "      }\r",
                    "    }\r",
                    "\r",
                    "  });\r",
                    "  treeStore.load();\r",
                    "  content.add(mapPanel);\r",
                    "}\r",
                    "\r",
                    "content.setActiveTab(mapPanel);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=opengraph]"
            },
            "designerId": "b7ba3102-7727-4cfb-9140-e1d437893654"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addClassMap",
                "implHandler": [
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var mapPanel = content.down('mappingpanel');\r",
                    "var tree = mapPanel.down('mappingtree');\r",
                    "var graph  = mapPanel.graph.split('/');\r",
                    "graph = graph[graph.length-1];\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "me.getParentClass(node);\r",
                    "\r",
                    "var index = node.parentNode.parentNode.indexOf(node.parentNode);\r",
                    "var win = Ext.widget('classmapwindow', {\r",
                    "  mappingNode: node,\r",
                    "  formid: 'propertytarget-' + mapPanel.contextName + '-' + mapPanel.endpoint\r",
                    "});\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  win.close();\r",
                    "  tree.onReload();\r",
                    "  if (node.get('expanded') === false)\r",
                    "  node.expand();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function() {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "var formRecord = {\r",
                    "  'scope': mapPanel.contextName,\r",
                    "  'app': mapPanel.endpoint,\r",
                    "  //'baseUrl': mapPanel.baseUrl,\r",
                    "  'graph': graph,//mapPanel.graph,\r",
                    "  'templateIndex': index,\r",
                    "  'roleName': node.data.text,\r",
                    "  'parentClassId': node.parentNode.parentNode.data.identifier\r",
                    "};\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.show();\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=addclassmap]"
            },
            "designerId": "de34633b-4bd5-4aa9-8cda-ff7e1b37d65c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "mapProperty",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var mapPanel = content.down('mappingpanel');\r",
                    "var tree = mapPanel.down('mappingtree');\r",
                    "node = tree.getSelectedNode();\r",
                    "var mappingNode  = node.parentNode.data.parentId+'/'+node.data.record.name;\r",
                    "\r",
                    "  win = Ext.widget('propertymapwindow', {\r",
                    "    'classId': node.parentNode.parentNode.data.identifier,\r",
                    "    'mappingNode': node\r",
                    "  });\r",
                    "var roleName = getLastXString(node.data.id, 1);\r",
                    "var index = node.parentNode.parentNode.indexOf(node.parentNode);\r",
                    "win.on('save', function () {\r",
                    "  win.close();\r",
                    "  alert('going to reload after save...');\r",
                    "  tree.store.load();\r",
                    "  if (node.get('expanded') === false)\r",
                    "  node.expand();\r",
                    "}, me);\r",
                    "\r",
                    "var formRecord = {\r",
                    "  'contextName': mapPanel.contextName,\r",
                    "  'endpoint': mapPanel.endpoint,\r",
                    "  'baseUrl': mapPanel.baseUrl,\r",
                    "  'graphName': mapPanel.graph,\r",
                    "  'index': index,\r",
                    "  'roleName': roleName,\r",
                    "  'mappingNode':mappingNode,\r",
                    "  'classId':node.parentNode.parentNode.data.identifier\r",
                    "};\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.on('Cancel', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=mapproperty]"
            },
            "designerId": "4ca3b82d-a490-4800-ae29-3dc85134a776"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMakeReference",
                "implHandler": [
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var mapPanel = content.down('mappingpanel');\r",
                    "var tree = mapPanel.down('mappingtree');\r",
                    "  node = tree.getSelectedNode();\r",
                    "  parentNode = node.parentNode;\r",
                    "var tempId = node.parentNode.data.parentId;\r",
                    "var contextParts = tempId.split('/');\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/makereference',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    scope: contextParts[0],//mapPanel.contextName,\r",
                    "    app: contextParts[1],//mapPanel.endpoint,\r",
                    "    graph: contextParts[2],//mapPanel.graphName,\r",
                    "    roleName: getLastXString(node.data.id, 1),\r",
                    "    classId: parentNode.parentNode.data.identifier,\r",
                    "    //roleId:,\r",
                    "    //refClassId:,\r",
                    "    //refClassLabel:,\r",
                    "    //index: parentNode.parentNode.indexOf(parentNode)\r",
                    "    templateIndex: parentNode.parentNode.indexOf(parentNode),\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () { }\r",
                    "});\r",
                    "\r",
                    "\t\t\t\t\t\t"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=makereference]"
            },
            "designerId": "c9d6a430-7cbb-4bec-8700-b1467283727b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onEditOrNewValueMap",
                "implHandler": [
                    "var me = this;\r",
                    "var wintitle, contextName, endpoint, baseUrl, valueList, interName, classUrl, classLabel;\r",
                    "var tree = this.getDirTree(),\r",
                    "  node = tree.getSelectedNode(),\r",
                    "  record = node.data.record;\r",
                    "\r",
                    "if(item.itemId == 'editvaluemap') {\r",
                    "  wintitle = 'Edit Value List \\\"' + node.data.text + '\\\"';\r",
                    "} else {\r",
                    "  wintitle = 'Add new ValueListMap to valueList \\\"' + node.data.text + '\\\"';\r",
                    "}\r",
                    "\r",
                    "if(node.data.record && node.data.type == 'ListMapNode') {\r",
                    "  //interName = node.data.record.record.internalValue;\r",
                    "   interName = node.data.record.internalValue;\r",
                    "  //classUrl = node.data.record.record.uri;\r",
                    "  classUrl = node.data.record.uri;\r",
                    "  classLabel = node.data.text.split('[')[0];\r",
                    "}\r",
                    "\r",
                    "contextName = node.data.property.context;\r",
                    "endpoint = node.data.property.endpoint;\r",
                    "baseUrl = node.data.property.baseUrl;\r",
                    "\r",
                    "var arr = [];\r",
                    "arr = node.data.id.split('ValueList');\r",
                    "var arr1 = arr[arr.length - 1];\r",
                    "valueList = arr1.split('/')[1];\r",
                    "\r",
                    "var win = Ext.widget('valuelistmapwindow', {\r",
                    "  id:'tab-' + node.data.id, title: wintitle\r",
                    "});\r",
                    "\r",
                    "var formRecord = {\r",
                    "  'contextName': contextName,\r",
                    "  'endpoint': endpoint,\r",
                    "  'valueList': valueList,\r",
                    "  'baseUrl': baseUrl,\r",
                    "  'mappingNode': node.data.id,\r",
                    "  'internalName': interName,\r",
                    "  'classUrl': classUrl,\r",
                    "  'classLabel': classLabel,\r",
                    "  'oldClassUrl': classUrl\r",
                    "};\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.on('save', function () {\r",
                    "  win.close();\r",
                    "  tree.onReload();\r",
                    "  if (node.get('expanded') === false)\r",
                    "  node.expand();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "win.down('form').updateDDContainer(record);\r",
                    "\r",
                    "win.show();\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=editnewvaluemap]"
            },
            "designerId": "a421d200-9844-4d5c-929a-142554942e2d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteValueMap",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree(),\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/deleteValueMap',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    contextName: node.data.property.context,\r",
                    "    endpoint: node.data.property.endpoint,\r",
                    "    baseUrl: node.data.property.baseUrl,\r",
                    "    valueList: node.parentNode.data.property.Name,\r",
                    "    //oldClassUrl: node.data.record.record.uri\r",
                    "     oldClassUrl: node.data.record.uri,\r",
                    "     mappingNode:node.data.id\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    var parentNode = node.parentNode;                 \r",
                    "    tree.getSelectionModel().select(parentNode);\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () { }\r",
                    "\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deletevaluemap]"
            },
            "designerId": "b74bbd0c-1ebd-468f-a081-103c71b83fbf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onResetMapping",
                "implHandler": [
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var mapPanel = content.down('mappingpanel');\r",
                    "var tree = mapPanel.down('mappingtree'),\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "me.getParentClass(node);\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/resetmapping',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    contextName: mapPanel.contextName,\r",
                    "    endpoint: mapPanel.endpoint,\r",
                    "    baseUrl: mapPanel.baseUrl,\r",
                    "    roleId: node.data.record.id,\r",
                    "    templateId: node.parentNode.data.record.id,\r",
                    "    parentClassId: node.parentNode.parentNode.data.identifier,\r",
                    "    graphName: mapPanel.graphName,\r",
                    "    index: node.parentNode.parentNode.indexOf(node.parentNode)\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () { }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=resetmapping]"
            },
            "designerId": "b58a2f73-e046-4b1b-9b9e-108def03c707"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMapValueList",
                "implHandler": [
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var mapPanel = content.down('mappingpanel');\r",
                    "var tree = mapPanel.down('mappingtree'),\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "me.getParentClass(node);\r",
                    "\r",
                    "var win = Ext.widget('valuelistwindow');\r",
                    "\r",
                    "var formRecord = {\r",
                    "  'mappingNode': node,\r",
                    "  'index': node.parentNode.parentNode.indexOf(node.parentNode),\r",
                    "  'classId': me.parentClass,\r",
                    "  'graphName': mapPanel.graphName,\r",
                    "  'roleName': node.data.record.name,\r",
                    "  'contextName': mapPanel.contextName,\r",
                    "  'endpoint': mapPanel.endpoint,\r",
                    "  'baseUrl': mapPanel.baseUrl\r",
                    "};\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.getForm().setValues(formRecord);\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  win.destroy();\r",
                    "  tree.onReload();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=mapvaluelist]"
            },
            "designerId": "4d47b873-3c75-4952-9cad-82f3f8e19d6e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onEditOrNewValueList",
                "implHandler": [
                    "var me = this; \r",
                    "var state, oldValueList, contextName, endpoint, baseUrl, valueList, wintitle;\r",
                    "var tree = this.getDirTree(),\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "\r",
                    "if(item.itemId == 'editvaluelist') {\r",
                    "  state = 'edit';\r",
                    "  nodeId = node.data.id;\r",
                    "  valueListName = node.data.record.name;//node.data.record.record.name;\r",
                    "  wintitle = 'Edit Value List \\\"' + node.data.text + '\\\"';\r",
                    "} else {\r",
                    "  state = 'new';\r",
                    "  nodeId = node.data.id;\r",
                    "  valueListName = null;\r",
                    "  wintitle = 'Add New ValueList';\r",
                    "}\r",
                    "\r",
                    "var win = Ext.widget('valuelistwindow', {\r",
                    "  id: 'tab-' + node.data.id,\r",
                    "  title: wintitle\r",
                    "});\r",
                    "\r",
                    "var formRecord = {\r",
                    "  'state': state,\r",
                    "  'oldValueList': valueListName,//valueList,\r",
                    "  'mappingNode':nodeId,\r",
                    "  'valueList': valueListName\r",
                    "  //'contextName': node.data.property.context,\r",
                    "  //'endpoint': node.data.property.endpoint,\r",
                    "  //'baseUrl': node.data.property.baseUrl,\r",
                    "\r",
                    "};\r",
                    "\r",
                    "var form = win.down('form').getForm();\r",
                    "form.setValues(formRecord);\r",
                    "\r",
                    "win.on('save', function () {\r",
                    "  win.close();\r",
                    "  tree.onReload();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();\r",
                    "/*\r",
                    "if(item.itemId == 'editvaluelist') {\r",
                    "state = 'edit';\r",
                    "valueList = node.data.record.record.name;\r",
                    "wintitle = 'Edit Value List \\\"' + node.data.text + '\\\"';\r",
                    "} else {\r",
                    "state = 'new';\r",
                    "wintitle = 'Add New ValueList';\r",
                    "}\r",
                    "\r",
                    "var win = Ext.widget('valuelistwindow', {\r",
                    "id: 'tab-' + node.data.id,\r",
                    "title: wintitle\r",
                    "});\r",
                    "\r",
                    "var formRecord = {\r",
                    "'state': state,\r",
                    "'oldValueList': valueList,\r",
                    "'contextName': node.data.property.context,\r",
                    "'endpoint': node.data.property.endpoint,\r",
                    "'baseUrl': node.data.property.baseUrl,\r",
                    "'valueList': valueList\r",
                    "};\r",
                    "\r",
                    "var form = win.down('form').getForm();\r",
                    "form.setValues(formRecord);\r",
                    "\r",
                    "win.on('save', function () {\r",
                    "win.close();\r",
                    "tree.onReload();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('reset', function () {\r",
                    "win.close();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();\r",
                    "*/"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=editnewvaluelist]"
            },
            "designerId": "06ab17bd-89d7-49d9-987b-75fa9a8a5054"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMakePossessor",
                "implHandler": [
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var mapPanel = content.down('mappingpanel');\r",
                    "var tree = mapPanel.down('mappingtree'),\r",
                    "node = tree.getSelectedNode(), \r",
                    "parentNode = node.parentNode;\r",
                    "var tempId = node.parentNode.data.parentId;\r",
                    "var nodeId = node.data.id.split('/');\r",
                    "var text = nodeId[nodeId.length-1];\r",
                    "var mapingNode = tempId+'/'+text;\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/makePossessor',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    //contextName: mapPanel.contextName,\r",
                    "    //endpoint: mapPanel.endpoint,\r",
                    "    //baseUrl: mapPanel.baseUrl,\r",
                    "    //graphName: mapPanel.graphName,\r",
                    "   // roleName: getLastXString(node.data.id, 1),\r",
                    "    mappingNode : mapingNode,\r",
                    "    node: node,\r",
                    "    classId: parentNode.parentNode.data.identifier,\r",
                    "    index: parentNode.parentNode.indexOf(parentNode)\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () { }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=makepossessor]"
            },
            "designerId": "80fccd50-31f2-4927-bbb4-e1ebc4486aba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteGraphMap",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree(),\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/deletegraphmap',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    scope: node.parentNode.parentNode.parentNode.data.text,//node.data.property.context,\r",
                    "    application: node.parentNode.parentNode.data.text,//node.data.property.endpoint,\r",
                    "    baseUrl: node.data.property.baseUrl,\r",
                    "    mappingNode: node.id,\r",
                    "    graphName: getLastXString(node.id, 1)\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    var parentNode = node.parentNode;\r",
                    "    tree.getSelectionModel().select(parentNode);\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () { }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deletegraph]"
            },
            "designerId": "84bfa7a1-0e07-4f85-838a-e9ffa54ffa2b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteValueList",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree(),\r",
                    "  node = tree.getSelectedNode(),\r",
                    "  parentNode = node.parentNode,\r",
                    "  valueList = getLastXString(node.id, 1);\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'mapping/deletevaluelist',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    //contextName: node.data.property.context,\r",
                    "    //endpoint: node.data.property.endpoint,\r",
                    "    //baseUrl: node.data.property.baseUrl,\r",
                    "    valueList: valueList,\r",
                    "    mappingNode:node.data.id\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    tree.getSelectionModel().select(parentNode);\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () { }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deletevaluelist]"
            },
            "designerId": "d190fba5-e3fa-45ca-a837-4e19955d55f1"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    ""
                ]
            },
            "designerId": "e95395ff-66ac-4951-8c8f-c9dc64371802"
        }
    ]
}