{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "DirectoryModel",
            "BaseUrlModel",
            "DataLayerModel",
            "ContextModel",
            "DynamicModel"
        ],
        "stores": [
            "DirectoryTreeStore",
            "ContextStore",
            "BaseUrlStore",
            "DataLayerStore"
        ],
        "views": [
            "common.PropertyPanel",
            "common.CenterPanel",
            "common.ContentPanel",
            "directory.DirectoryPanel",
            "directory.DirectoryTree",
            "directory.ApplicationWindow",
            "directory.ScopeWindow",
            "directory.DataLayerForm",
            "directory.DataGridPanel",
            "directory.GraphMapForm",
            "directory.GraphMapWindow",
            "directory.ScopeForm",
            "directory.ContextCombo",
            "directory.DataLayerWindow",
            "directory.AvailBaseUrlCombo",
            "directory.DataLayerCombo",
            "directory.ApplicationForm",
            "menus.ScopesMenu",
            "menus.AppDataMenu",
            "menus.ApplicationMenu",
            "menus.ValueListsMenu",
            "menus.ValueListMenu",
            "menus.GraphsMenu",
            "menus.GraphMenu",
            "menus.TemplatemapMenu",
            "menus.RolemapMenu",
            "menus.ClassmapMenu",
            "menus.ValueListMapMenu",
            "menus.AppDataRefreshMenu"
        ],
        "designer|userClassName": "Directory"
    },
    "designerId": "06f88f22-c6f5-473b-a55b-a40aae8ad3b2",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "handleMetachange",
                "implHandler": [
                    "var me = this,\r",
                    "  store = grid.getStore(),\r",
                    "  columns = meta.columns;\r",
                    "\r",
                    "grid.metachange = true;\r",
                    "grid.reconfigure(store, columns);"
                ],
                "name": "metachange",
                "scope": "me",
                "designer|targetType": "directory.DataGridPanel",
                "designer|controlQuery": "gridpanel"
            },
            "designerId": "419a2796-2b02-43f2-80e2-1f459a715add"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dirTree",
                "selector": "viewport > directorypanel > directorytree"
            },
            "designerId": "74124cf2-5a4d-4881-b199-3e617bc25f5f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dirProperties",
                "selector": "viewport > directorypanel > propertypanel"
            },
            "designerId": "048c0fd2-3b90-408a-befe-c7c07a292475"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainContent",
                "selector": "viewport > centerpanel > contentpanel"
            },
            "designerId": "2c579f89-2e9c-4b29-b613-09f675f670ef"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBeforeLoad",
                "implHandler": [
                    "var me = this;\r",
                    "if (operation.node !== null) {\r",
                    "  var operationNode = operation.node.data;\r",
                    "  var params = store.proxy.extraParams;\r",
                    "\r",
                    "  if (operationNode.type !== null)\r",
                    "  params.type = operationNode.type;\r",
                    "\r",
                    "  if (operationNode.record !== null && operationNode.record.Related !== null)\r",
                    "  params.related = operationNode.record.Related;\r",
                    "\r",
                    "  if (operationNode.record !== null) {\r",
                    "    operationNode.leaf = false;\r",
                    "\r",
                    "    if (operationNode.record.context)\r",
                    "    params.contextName = operationNode.record.context;\r",
                    "\r",
                    "    if (operationNode.record.BaseUrl)\r",
                    "    params.baseUrl = operationNode.record.BaseUrl;\r",
                    "\r",
                    "    if (operationNode.record.endpoint)\r",
                    "    params.endpoint = operationNode.record.endpoint;\r",
                    "\r",
                    "    if (operationNode.record.securityRole)\r",
                    "    params.security = operationNode.record.securityRole;\r",
                    "\r",
                    "    if (operationNode.text !== null)\r",
                    "    params.text = operationNode.text;\r",
                    "  }\r",
                    "  else if (operationNode.property !== null) {\r",
                    "    operationNode.leaf = false;\r",
                    "\r",
                    "    if (operationNode.property.context)\r",
                    "    params.contextName = operationNode.property.context;\r",
                    "\r",
                    "    if (operationNode.property.endpoint)\r",
                    "    params.endpoint = operationNode.property.endpoint;\r",
                    "\r",
                    "    if (operationNode.property.baseUrl)\r",
                    "    params.baseUrl = operationNode.property.baseUrl;\r",
                    "\r",
                    "    if (operationNode.text !== null)\r",
                    "    params.text = operationNode.text;\r",
                    "  }\r",
                    "}"
                ],
                "name": "beforeload",
                "scope": "me",
                "designer|targetType": "directory.DirectoryTree",
                "designer|controlQuery": "directorypanel directorytree"
            },
            "designerId": "c9d57b89-b9c7-4e6b-8056-ea9fa38f9918"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newOrEditScope",
                "implHandler": [
                    "var me = this;\r",
                    "var state, context, description, wintitle;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "context = node.data.record.context;\r",
                    "\r",
                    "if(node.parentNode) {\r",
                    "  path = node.internalId;\r",
                    "} else {\r",
                    "  path = '';\r",
                    "}\r",
                    "\r",
                    "if(item.itemId !== 'newscope' && node.data.record !== undefined) {\r",
                    "  name = node.data.record.Name;\r",
                    "  description = node.data.record.Description;\r",
                    "  wintitle = 'Edit Scope \\\"' + node.data.text + '\\\"';\r",
                    "  state = 'edit';\r",
                    "\r",
                    "} else {\r",
                    "  description = '';\r",
                    "  context = '';\r",
                    "  state = 'new';\r",
                    "  wintitle = 'Add New Scope';\r",
                    "\r",
                    "}\r",
                    "\r",
                    "var conf = {\r",
                    "  id: 'tab-' + node.data.id,\r",
                    "  title: wintitle,\r",
                    "  iconCls: 'tabsScope'\r",
                    "};\r",
                    "\r",
                    "var win = Ext.widget('scopewindow', conf);\r",
                    "\r",
                    "win.on('save', function () {\r",
                    "  win.destroy(); \r",
                    "  node.collapse();\r",
                    "  tree.expandPath(node.getPath(), 'text');\r",
                    "}, me);\r",
                    "\r",
                    "win.on('cancel', function () {\r",
                    "  win.destroy();\r",
                    "}, me);\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.node = node;\r",
                    "\r",
                    "form.getForm().findField('State').setValue(state);\r",
                    "form.getForm().findField('Scope').setValue(context);\r",
                    "form.getForm().findField('Name').setValue(context);\r",
                    "form.getForm().findField('Description').setValue(description);\r",
                    "\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=neweditscope]"
            },
            "designerId": "2a48375f-27f1-49a8-91c3-78266acbd3b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deleteScope",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = this.getDirTree();\r",
                    "var parent, path;\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'directory/DeleteScope',//'directory/deleteEntry',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    'nodeid': node.data.id\r",
                    "\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    var parentNode = node.parentNode;\r",
                    "    parentNode.removeChild(node);                   \r",
                    "    tree.getSelectionModel().select(parentNode);\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () {\r",
                    "    var message = 'Error deleting folder!';\r",
                    "    showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deletescope]"
            },
            "designerId": "9834062c-d166-4173-a2c8-024020df7624"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "newOrEditEndpoint",
                "implHandler": [
                    "var me = this;\r",
                    "var name, description, datalayer, assembly,showconfig,endpoint,wintitle, state, path, context;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "\r",
                    "\r",
                    "if(item.itemId == 'editendpoint') {\r",
                    "  name = node.data.record.ContextName;\r",
                    "  description = node.data.record.Description;\r",
                    "  datalayer = node.data.record.DataLayer;\r",
                    "  assembly = node.data.record.Assembly;\r",
                    "  application = name;\r",
                    "  wintitle =  'Edit Application \\\"' + node.data.text + '\\\"';\r",
                    "  endpoint = node.data.record.Endpoint; \r",
                    "  state = 'edit';\r",
                    "} else {\r",
                    "  wintitle = 'Add New Application';\r",
                    "  state = '';\r",
                    "  assembly = '';\r",
                    "  endpoint = '';\r",
                    "  description = '';\r",
                    "}\r",
                    "\r",
                    "context = node.data.record.Name;\r",
                    "\r",
                    "var conf = { \r",
                    "  id: 'newwin-' + node.data.id, \r",
                    "  title: wintitle, \r",
                    "  iconCls: 'tabsApplication',\r",
                    "  node: node\r",
                    "};\r",
                    "\r",
                    "var win = Ext.widget('applicationwindow', conf);\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.getForm().findField('context').setValue(context);\r",
                    "\r",
                    "win.on('save', function () { \r",
                    "  win.close();\r",
                    "\r",
                    "  tree.expandPath(node.getPath(), 'text');\r",
                    "}, me);\r",
                    "\r",
                    "win.on('Cancel', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "var dlCmb = me.getDatalayerCombo();\r",
                    "\r",
                    "dlCmb.on('select', function(combo, records, eopts) {\r",
                    "  if (records !== null && node.data.record !== null) {\r",
                    "    form.getForm().findField('assembly').setValue(records[0].data.assembly);\r",
                    "  }\r",
                    "}, me);\r",
                    "\r",
                    "dlCmb.on('afterrender', function (combo, eopts) {\r",
                    "  if (assembly !== '') {\r",
                    "    combo.setValue(assembly);\r",
                    "  }\r",
                    "}, me);\r",
                    "\r",
                    "form.getForm().findField('state').setValue(state);\r",
                    "form.getForm().findField('oldAssembly').setValue(assembly);\r",
                    "form.getForm().findField('endpoint').setValue(endpoint);\r",
                    "form.getForm().findField('description').setValue(description);\r",
                    "form.getForm().findField('context').setValue(context);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=neweditendpoint]"
            },
            "designerId": "c5edb0f5-01c0-4a12-810e-486578797bb6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deleteEndpoint",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'directory/deleteapplication',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    \"nodeid\": node.data.id\r",
                    "  },\r",
                    "  success: function () {\r",
                    "    var parentNode = node.parentNode;\r",
                    "    parentNode.removeChild(node);                   \r",
                    "    tree.getSelectionModel().select(parentNode);\r",
                    "    tree.onReload();\r",
                    "  },\r",
                    "  failure: function () {\r",
                    "    //Ext.Msg.alert('Warning', 'Error!!!');\r",
                    "    var message = 'Error deleting endpoint!';\r",
                    "    showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=deleteendpoint]"
            },
            "designerId": "922ccc55-6a34-4a0c-b220-52bbb6eb087d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onNewDataLayer",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "conf = {\r",
                    "  id: 'tab-' + node.data.id,\r",
                    "  title: 'Add Data Layer'\r",
                    "};\r",
                    "var win = Ext.widget('datalayerwindow', conf);\r",
                    "\r",
                    "var form = win.down('form');\r",
                    "form.getForm().findField('state').setValue('new');\r",
                    "\r",
                    "win.on('Save', function () {\r",
                    "  tree.store.load();\r",
                    "  if (node.get('expanded') === false)\r",
                    "  node.expand();\r",
                    "}, me);\r",
                    "\r",
                    "win.on('Cancel', function () {\r",
                    "  win.close();\r",
                    "}, me);\r",
                    "\r",
                    "win.show();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=newdatalayer]"
            },
            "designerId": "1e52d240-a33e-43ce-9485-31517e5e5ef4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRegenerateAll",
                "implHandler": [
                    "var me = this;\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'directory/RegenAll',\r",
                    "  method: 'GET',\r",
                    "  success: function (result, request) {\r",
                    "    var responseObj = Ext.decode(result.responseText);\r",
                    "    var msg = '';\r",
                    "    for (var i = 0; i < responseObj.StatusList.length; i++) {\r",
                    "      var status = responseObj.StatusList[i];\r",
                    "      if (msg !== '') {\r",
                    "        msg += '\\r\\n';\r",
                    "      }\r",
                    "      msg += status.Identifier + ':\\r\\n';\r",
                    "      for (var j = 0; j < status.Messages.length; j++) {\r",
                    "        msg += '    ' + status.Messages[j] + '\\r\\n';\r",
                    "      }\r",
                    "    }\r",
                    "    showDialog(600, 340, 'NHibernate Regeneration Result', msg, Ext.Msg.OK, null);\r",
                    "  },\r",
                    "  failure: function (result, request) {\r",
                    "    var msg = result.responseText;\r",
                    "    showDialog(500, 240, 'NHibernate Regeneration Error', msg, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=regenerateall]"
            },
            "designerId": "1287fa6f-684f-43e7-97e9-64aa698508e2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onShowDataGrid",
                "implHandler": [
                    "var me = this;    \r",
                    "var tree = this.getDirTree();\r",
                    "var node = tree.getSelectedNode(),\r",
                    "  content = me.getMainContent(),\r",
                    "  contextName = node.data.property.ContextName,\r",
                    "  endpointName = node.data.property.Endpoint,\r",
                    "  baseurl = node.data.property.baseUrl;\r",
                    "\r",
                    "var graph = node.data.text;\r",
                    "var title = 'Data Grid ' + contextName + '.' + endpointName + '.' + graph;\r",
                    "\r",
                    "var gridPanel = content.down('dynamicgrid[title='+title+']');\r",
                    "\r",
                    "if (!gridPanel) {\r",
                    "\r",
                    "  content.getEl().mask(\"Loading...\", \"x-mask-loading\");\r",
                    "  gridPanel = Ext.widget('dynamicgrid', {'title': title});\r",
                    "\r",
                    "  var gridStore = gridPanel.getStore();\r",
                    "  var gridProxy = gridStore.getProxy();\r",
                    "\r",
                    "  gridStore.on('beforeload', function (store, action) {\r",
                    "    var params = store.proxy.extraParams;\r",
                    "    params.context = contextName;\r",
                    "    params.start = (store.currentPage - 1) * store.pageSize;\r",
                    "    params.limit = store.pageSize;\r",
                    "    params.endpoint = endpointName;\r",
                    "    params.baseUrl = baseurl;\r",
                    "    params.graph = graph;\r",
                    "  }, me);\r",
                    "\r",
                    "  gridProxy.on('exception', function(proxy, response, operation) {\r",
                    "    content.getEl().unmask();\r",
                    "    gridPanel.destroy();\r",
                    "    var rtext = response.responseText;\r",
                    "    var error = 'SUCCESS = FALSE';\r",
                    "    var index = rtext.toUpperCase().indexOf(error);\r",
                    "    var msg = rtext.substring(index + error.length + 2, rtext.length - 1);\r",
                    "    showDialog(500, 300, 'Error', msg, Ext.Msg.OK, null);\r",
                    "  }, me);\r",
                    "\r",
                    "\r",
                    "  gridStore.load();\r",
                    "\r",
                    "  content.getEl().unmask();\r",
                    "  content.add(gridPanel);\r",
                    "}\r",
                    "content.setActiveTab(gridPanel);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=showdata]"
            },
            "designerId": "1c77f61b-be38-4544-aaa0-ec005d64b0ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRefreshFacade",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = this.getDirTree(),\r",
                    "  node = tree.getSelectedNode();\r",
                    "\r",
                    "tree.getEl().mask('Loading', 'x-mask-loading');\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'facade/refreshFacade',\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    contextName: node.data.id,\r",
                    "    baseUrl: node.data.property.baseUrl\r",
                    "  },\r",
                    "  success: function (o) {\r",
                    "    tree.onReload();\r",
                    "    tree.getEl().unmask();\r",
                    "  },\r",
                    "  failure: function (f, a) {\r",
                    "    tree.getEl().unmask();\r",
                    "    showDialog(400,300, 'Warning', 'Error Refreshing Facade!!!', Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=refreshfacade]"
            },
            "designerId": "57c3b303-1e1b-4a39-87f8-958702284482"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "contextCombo",
                "selector": "contextcombo"
            },
            "designerId": "0bac987b-3339-47f5-9eb5-76188e0ce0fb"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "datalayerCombo",
                "selector": "datalayercombo"
            },
            "designerId": "59e33146-dbba-4d81-9baf-380296b65010"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "baseUrlCombo",
                "selector": "availbaseurlcombo"
            },
            "designerId": "4c5113d8-400f-4fee-9097-f3a761c800b5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onConfigureEndpoint",
                "implHandler": [
                    "var me = this;\r",
                    "var tree = me.getDirTree();\r",
                    "var node = tree.getSelectedNode();\r",
                    "var datalayer = node.data.record.DataLayer;\r",
                    "\r",
                    "switch(datalayer) {\r",
                    "  case 'NHibernateLibrary':\r",
                    "  me.application.fireEvent('confignhibernate', me);\r",
                    "  break;\r",
                    "  case 'SpreadsheetDatalayer':\r",
                    "  me.application.fireEvent('configspreadsheet', me);\r",
                    "  break;\r",
                    "  default:\r",
                    "  showDialog(300, 300, 'Warning', 'Datalayer ' + datalayer + ' is not configurable...', Ext.msg.OK, null);\r",
                    "  break;\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=configureendpoint]"
            },
            "designerId": "dfe2cc71-4b34-422c-8c32-d48bac3ee3a3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showContextMenu",
                "implHandler": [
                    "var me = this,\r",
                    "  tree = me.getDirTree();\r",
                    "e.stopEvent();\r",
                    "node = record.store.getAt(index);\r",
                    "\r",
                    "tree.getSelectionModel().select(node);\r",
                    "//tree.onClick(dataview, record, 0, index, e);\r",
                    "\r",
                    "var obj = node.data;\r",
                    "\r",
                    "if (obj.type === \"ScopesNode\") {\r",
                    "  var scopesMenu = Ext.widget('scopesmenu');\r",
                    "  scopesMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ScopeNode\") {\r",
                    "  var scopeMenu = Ext.widget('scopemenu');\r",
                    "  scopeMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ApplicationNode\") {\r",
                    "  var applicationMenu = Ext.widget('applicationmenu');\r",
                    "  applicationMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"DataObjectNode\") {\r",
                    "  var appDataMenu = Ext.widget('appdatamenu');  \r",
                    "  appDataMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ValueListsNode\") {\r",
                    "  var valueListsMenu = Ext.widget('valuelistsmenu');\r",
                    "  valueListsMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ValueListNode\") {\r",
                    "  var valueListMenu = Ext.widget('valuelistmenu');\r",
                    "  valueListMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"ListMapNode\") {\r",
                    "  var valueListMapMenu = Ext.widget('valuelistmapmenu');\r",
                    "  valueListMapMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"GraphsNode\") {\r",
                    "  var graphsMenu = Ext.widget('graphsmenu');\r",
                    "  graphsMenu.showAt(e.getXY());\r",
                    "} else if (obj.type === \"GraphNode\") {\r",
                    "  var graphMenu = Ext.widget('graphmenu');\r",
                    "  graphMenu.showAt(e.getXY());\r",
                    "}else if (obj.type === \"DataObjectsNode\") {\r",
                    "  var graphMenu = Ext.widget('appdatarefreshmenu');\r",
                    "  graphMenu.showAt(e.getXY());\r",
                    "}\r",
                    ""
                ],
                "name": "itemcontextmenu",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "directorytree"
            },
            "designerId": "68175308-5fcb-468f-b26a-268c27070109"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAppDataRefreshClick",
                "implHandler": [
                    "alert('Ha.ha.ha');"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.menu.Item",
                "designer|controlQuery": "menuitem[action=refreshdata]"
            },
            "designerId": "732ae82a-ac3f-4629-9af2-93f6c58d7ccb"
        }
    ]
}