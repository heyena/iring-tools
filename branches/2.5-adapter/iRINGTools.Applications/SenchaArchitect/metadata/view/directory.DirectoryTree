{
    "type": "Ext.tree.Panel",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "stateEvents": [
            "temcollapse",
            "itemexpand"
        ],
        "stateId": "directory-treestate",
        "stateful": true,
        "height": null,
        "loader": null,
        "width": null,
        "designer|userClassName": "directory.DirectoryTree",
        "designer|userAlias": "directorytree",
        "title": null,
        "store": "DirectoryTreeStore"
    },
    "designerId": "2db71765-76f0-4f2a-a25b-ef028a9633da",
    "cn": [
        {
            "type": "Ext.tree.View",
            "reference": {
                "name": "viewConfig",
                "type": "object"
            },
            "codeClass": null,
            "userConfig": {
                "stateId": null
            },
            "designerId": "f6615855-8fc8-4677-8215-c2af677ac7df",
            "cn": [
                {
                    "type": "Ext.tree.plugin.TreeViewDragDrop",
                    "reference": {
                        "name": "plugins",
                        "type": "array"
                    },
                    "codeClass": "Ext.tree.plugin.TreeViewDragDrop",
                    "userConfig": {
                        "dragField": "text",
                        "ddGroup": "propertyGroup",
                        "dragGroup": "propertyGroup",
                        "dragText": "{0}",
                        "dropGroup": null,
                        "enableDrag": null,
                        "enableDrop": false,
                        "nodeHighlightOnDrop": null,
                        "nodeHighlightOnRepair": null
                    },
                    "designerId": "288e2440-e339-43b5-b796-42ad710c4de4",
                    "customConfigs": [
                        {
                            "group": "(Custom Properties)",
                            "name": "dragField",
                            "type": "string"
                        }
                    ]
                }
            ]
        },
        {
            "type": "Ext.toolbar.Toolbar",
            "reference": {
                "name": "dockedItems",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "dock": "top",
                "container|padding": 4
            },
            "designerId": "d6c514dc-06dc-4f44-a592-77d3c55ffc8d",
            "cn": [
                {
                    "type": "Ext.button.Button",
                    "reference": {
                        "name": "items",
                        "type": "array"
                    },
                    "codeClass": null,
                    "userConfig": {
                        "scope": null,
                        "layout|flex": null,
                        "icon": null,
                        "iconCls": "am-view-refresh",
                        "text": "Reload Tree"
                    },
                    "designerId": "da9e4018-f3fc-4bee-b0b3-bee73985e3fa",
                    "customConfigs": [
                        {
                            "group": "(Custom Properties)",
                            "name": "scope",
                            "type": "string"
                        }
                    ],
                    "cn": [
                        {
                            "type": "fixedfunction",
                            "reference": {
                                "name": "items",
                                "type": "array"
                            },
                            "codeClass": null,
                            "userConfig": {
                                "fn": "handler",
                                "designer|params": [
                                    "button",
                                    "event"
                                ],
                                "implHandler": [
                                    "me.onReload();"
                                ]
                            },
                            "designerId": "e64ad5bd-5eaf-465c-b337-06d900a4fc67"
                        }
                    ]
                }
            ]
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getState",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var nodes = [], state = me.callParent();\r",
                    "me.getRootNode().eachChild(function (child) {\r",
                    "  // function to store state of tree recursively \r",
                    "  var storeTreeState = function (node, expandedNodes) {\r",
                    "    if (node.isExpanded() && node.childNodes.length > 0) {\r",
                    "      expandedNodes.push(node.getPath('text'));\r",
                    "\r",
                    "      node.eachChild(function (child) {\r",
                    "        storeTreeState(child, expandedNodes);\r",
                    "      });\r",
                    "    }\r",
                    "  };\r",
                    "  storeTreeState(child, nodes);\r",
                    "});\r",
                    "Ext.apply(state, {\r",
                    "  expandedNodes: nodes\r",
                    "});\r",
                    "return state;"
                ]
            },
            "designerId": "9a5d9e7d-c752-485e-98d8-19f815f3534e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "applyState",
                "designer|params": [
                    "state"
                ],
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var nodes = state.expandedNodes || [],\r",
                    "  len = nodes.length;\r",
                    "me.collapseAll();\r",
                    "Ext.each(nodes, function (path) {\r",
                    "  me.expandPath(path, 'text');\r",
                    "});\r",
                    "me.callParent(arguments);"
                ]
            },
            "designerId": "d9481aa0-dbfe-43e0-b3c5-a31d352eb30c"
        },
        {
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onClick",
                "implHandler": [
                    "var me = this;\r",
                    "try {\r",
                    "  var obj = record.store.getAt(index);\r",
                    "  var pan = dataview.up('panel').up('panel'),\r",
                    "    prop = pan.down('propertygrid');\r",
                    "  prop.setSource(obj.data.property);\r",
                    "} catch (e) {\r",
                    "  //  alert(e);\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me"
            },
            "designerId": "8334bb65-527f-4990-b3d2-eb9a4b42a54d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onReload",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "var node = me.getSelectedNode();\r",
                    "var nodeInternalId = node.internalId;\r",
                    "var context = node.parentNode.data.text;\r",
                    "var endpoint= node.data.record.Name;\r",
                    "var baseUrl = node.data.record.BaseUrl;\r",
                    "var dataRecord = node.data.record;\r",
                    "var store = me.store;\r",
                    "var path;\r",
                    "var panel = me.up();\r",
                    "var state = me.getState();\r",
                    "var dirNode;\r",
                    "me.body.mask('Loading...', 'x-mask-loading');\r",
                    "if (!node)\r",
                    "node = me.getRootNode(); \r",
                    "if (node) {\r",
                    "\r",
                    "  Ext.Ajax.request({\r",
                    "    url: 'AdapterManager/DBDictionary',//'NHibernate/DBDictionary',\r",
                    "    method: 'POST',\r",
                    "    timeout: 6000000,\r",
                    "    params: {\r",
                    "      scope: context,\r",
                    "      app: endpoint,\r",
                    "      baseUrl: baseUrl\r",
                    "    },\r",
                    "    success: function (response, request) {\r",
                    "      dbDict = Ext.JSON.decode(response.responseText);\r",
                    "      if(dbDict) {\r",
                    "        var cstr = dbDict.ConnectionString;\r",
                    "        if(cstr) {\r",
                    "          var nhibernateTreeObject = Ext.widget('nhibernatetree');\r",
                    "          //node.data.record.dbDict = dbDict;\r",
                    "          //dbInfo = me.getConnStrParts(cstr, node);//me.getConnStringParts(cstr, dirNode);\r",
                    "          //var selectTableNames = me.setTableNames(dbDict);\r",
                    "          dbInfo = nhibernateTreeObject.getConnStrParts(cstr, node);\r",
                    "        }\r",
                    "      }\r",
                    "    },\r",
                    "    failure: function (response, request) {\r",
                    "      //var dataObjPanel = content.items.map[contextName + '.' + endpoint + '.-nh-config'];;\r",
                    "    }\r",
                    "  });\r",
                    "\r",
                    "\r",
                    "\r",
                    "  store.load({\r",
                    "    callback: function (records, options, success) {\r",
                    "      var nodes = state.expandedNodes || [],\r",
                    "        len = nodes.length;\r",
                    "      me.collapseAll();\r",
                    "      Ext.each(nodes, function (path) {\r",
                    "        me.expandPath(path, 'text');\r",
                    "        //dirNode = store.getNodeById(nodeInternalId);\r",
                    "        //console.log(dirNode);\r",
                    "      });\r",
                    "      me.body.unmask();\r",
                    "    }\r",
                    "\r",
                    "  });\r",
                    "  store.on('beforeload', function (store, action) {\r",
                    "    //alert('beforeload...');\r",
                    "    dirNode = store.getNodeById(nodeInternalId);\r",
                    "    if(dirNode!=undefined){\r",
                    "      if(dirNode.data.record!=undefined){\r",
                    "        //if(dirNode.data.record.dbInfo == undefined)\r",
                    "        //dirNode.data.record.dbInfo = dbInfo;//dataRecord.dbInfo;\r",
                    "        //if(dirNode.data.record.dbDict == undefined)\r",
                    "        //dirNode.data.record.dbDict = dbDict;//dataRecord.dbDict;\r",
                    "      }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "  }, me);\r",
                    "  store.on('load', function (store, action) {\r",
                    "    //alert('afterload...');\r",
                    "    dirNode = store.getNodeById(nodeInternalId);\r",
                    "    if(dirNode!=undefined){\r",
                    "      if(dirNode.data.record!=undefined){\r",
                    "        if(dirNode.data.record.dbInfo == undefined)\r",
                    "        dirNode.data.record.dbInfo = dbInfo;//dataRecord.dbInfo;\r",
                    "        if(dirNode.data.record.dbDict == undefined)\r",
                    "        dirNode.data.record.dbDict = dbDict;//dataRecord.dbDict;\r",
                    "      }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "  }, me);\r",
                    "}"
                ]
            },
            "designerId": "3f0c4b56-94b4-4ff2-b544-8280aa254637"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getSelectedNode",
                "implHandler": [
                    "var me = this;\r",
                    "var selected = me.getSelectionModel().getSelection();\r",
                    "return selected[0];"
                ]
            },
            "designerId": "d165d993-cd30-4afe-80cc-55991c3e9f93"
        }
    ]
}