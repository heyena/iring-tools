/*
 * File: Scripts/AM/view/nhibernate/SetRelationForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.nhibernate.SetRelationForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.setrelationform',

  requires: [
    'AM.view.nhibernate.RelationPropertyGrid'
  ],

  rootNode: '',
  endpoint: '',
  contextName: '',
  node: '',
  bodyStyle: 'background:#eee;padding:10 0 0 10',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          cls: 'x-form-item',
          style: 'font-weight:bold;',
          text: 'Configure Relationship'
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          fieldLabel: 'Relationship Name',
          labelWidth: 160,
          name: 'relationshipName',
          readOnly: true,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          fieldLabel: 'Object Name',
          labelWidth: 160,
          name: 'objectName',
          readOnly: true,
          allowBlank: false
        },
        {
          xtype: 'combobox',
          anchor: '100%',
          itemId: 'relatedObjectCmb',
          fieldLabel: 'Related Object Name',
          labelWidth: 160,
          name: 'relatedObjectName',
          selectOnFocus: true,
          queryMode: 'local',
          valueField: 'value',
          listeners: {
            select: {
              fn: me.onRelatedObjectSelect,
              scope: me
            }
          }
        },
        {
          xtype: 'combobox',
          anchor: '100%',
          itemId: 'relationType',
          fieldLabel: 'Relation Type',
          labelWidth: 160,
          name: 'relationType',
          allowBlank: false,
          queryMode: 'local',
          store: [
            [
              'OneToOne',
              'OneToOne'
            ],
            [
              'OneToMany',
              'OneToMany'
            ]
          ]
        },
        {
          xtype: 'combobox',
          anchor: '100%',
          itemId: 'propertyNameCmb',
          fieldLabel: 'Property Name',
          labelWidth: 160,
          name: 'propertyName',
          queryMode: 'local',
          listeners: {
            select: {
              fn: me.onPropertySelect,
              scope: me
            }
          }
        },
        {
          xtype: 'combobox',
          anchor: '100%',
          itemId: 'mapPropertyNameCmb',
          fieldLabel: 'Mapping Property',
          labelWidth: 160,
          name: 'mapPropertyName',
          queryMode: 'local'
        },
        {
          xtype: 'relationPropertyGrid',
          height: 600,
          anchor: '100%'
        }
      ],
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'top',
          items: [
            {
              xtype: 'button',
              iconCls: 'am-apply',
              text: 'Apply',
              listeners: {
                click: {
                  fn: me.onPropertyMapClick,
                  scope: me
                }
              }
            },
            {
              xtype: 'tbspacer'
            },
            {
              xtype: 'button',
              iconCls: 'am-edit-clear',
              text: 'Reset'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onRelatedObjectSelect: function(combo, records, eOpts) {
    var me = this;
    var form = combo.up('setrelationform');
    var rootNode = form.rootNode;
    var relatedObjectName = records[0].data.text;

    if (relatedObjectName !== '') {
      var relatedDataObjectNode = rootNode.findChild('text', relatedObjectName);
      var relationConfigPanel = form.getForm();
      var mappingProperties = [];

      if (relatedDataObjectNode.childNodes[1]) {
        keysNode = relatedDataObjectNode.childNodes[0];
        propertiesNode = relatedDataObjectNode.childNodes[1];
        var ii = 0;

        keysNode.eachChild(function(child) {
          mappingProperties.push([ii, child.data.text, child.data.property.columnName]);
          ii++;
        });

        propertiesNode.eachChild(function(child) {
          mappingProperties.push([ii, child.data.text, child.data.property.columnName]);
          ii++;
        });
      }

      var mapCombo = form.down('#mapPropertyNameCmb');
      mapCombo.store = Ext.create('Ext.data.SimpleStore', {
        fields: ['value', 'text', 'name'],
        autoLoad: true,
        data: mappingProperties
      });
    }
  },

  onPropertySelect: function(combo, records, eOpts) {

  },

  onPropertyMapClick: function(button, e, eOpts) {
    var me = this;
    var form = button.up('setrelationform');
    var grid = form.down('relationPropertyGrid');

    var newNodeName = form.getForm().findField('relationshipName').getValue();
    var objectName = form.getForm().findField('objectName').getValue();

    var relationTypeCmb = form.down('#relationType');
    var ptropertyCmb = form.down('#propertyNameCmb');
    var mapPropertyCmb = form.down('#mapPropertyNameCmb');

    var node = form.node.findChild('text', newNodeName);
    node.set('title', newNodeName);

    node.data.relationshipType = relationTypeCmb.getValue();
    node.data.relationshipTypeIndex = relationTypeCmb.store.find('field1',node.data.relationshipType);

    var relatedName = form.getForm().findField('relatedObjectName').getValue();
    node.data.relatedObjectName = relatedName;

    var propertyMap = [];

    if(node.data.propertyMap) {
      for (i = 0; i < node.data.propertyMap.length; i++)
      propertyMap.push([node.data.propertyMap[i].dataPropertyName, node.data.propertyMap[i].relatedPropertyName]);
    } else {
      node.data.propertyMap = [];
      grid.getStore().each(function(record) {
        node.data.propertyMap.push({'dataPropertyName': record.data.property, 'relatedPropertyName': record.data.relatedProperty});
      });
    }
  }

});