/*
 * File: Scripts/AM/view/directory/ApplicationForm.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.directory.ApplicationForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.applicationform',

  requires: [
    'AM.view.directory.DataLayerCombo'
  ],

  record: '',
  border: true,
  bodyStyle: 'padding:10px 5px 0',
  method: 'POST',
  url: 'directory/application',

  initComponent: function() {
    var me = this;

    me.initialConfig = Ext.apply({
      method: 'POST',
      url: 'directory/application'
    }, me.initialConfig);

    Ext.applyIf(me, {
      defaults: {
        msgTarget: 'side',
        anchor: '100%'
      },
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'bottom',
          items: [
            {
              xtype: 'tbfill'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onSave();
              },
              text: 'Ok'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onReset();
              },
              text: 'Cancel'
            }
          ]
        }
      ],
      items: [
        {
          xtype: 'hiddenfield',
          name: 'oldAssembly'
        },
        {
          xtype: 'hiddenfield',
          name: 'assembly'
        },
        {
          xtype: 'hiddenfield',
          name: 'contextValue'
        },
        {
          xtype: 'hiddenfield',
          name: 'state'
        },
        {
          xtype: 'hiddenfield',
          name: 'path'
        },
        {
          xtype: 'textfield',
          fieldLabel: 'Endpoint Name',
          name: 'endpoint'
        },
        {
          xtype: 'textareafield',
          fieldLabel: 'Description',
          name: 'description'
        },
        {
          xtype: 'textfield',
          disabled: true,
          fieldLabel: 'Context Name',
          name: 'context'
        },
        {
          xtype: 'datalayercombo'
        }
      ]
    });

    me.callParent(arguments);
  },

  onSave: function() {
    var me = this;
    var win = me.up('window');
    var endpointName = me.getForm().findField('endpoint').getValue();

    var dlCombo = me.down('combo');

    var state = me.getForm().findField('state').getValue();
    me.getForm().submit({
      waitMsg: 'Saving Data...',
      success: function (response, request) {

        win.fireEvent('save', me);
      },
      failure: function (response, request) {
        var rtext = request.result;
        if (rtext.toUpperCase().indexOf('FALSE') > 0) {
        var ind = rtext.indexOf('}');
        var len = rtext.length - ind - 1;
        var msg = rtext.substring(ind + 1, rtext.length - 1);
        showDialog(400, 100, 'Error saving endpoint changes', msg, Ext.Msg.OK, null);
        return;
      }
      var message = 'Error saving changes!';
      showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
    }
  });
  },

  onReset: function() {
    var me = this;
    var win = me.up('window');
    win.fireEvent('Cancel', me);
  }

});