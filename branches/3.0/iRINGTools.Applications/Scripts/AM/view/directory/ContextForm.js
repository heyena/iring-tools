/*
* File: Scripts/AM/view/directory/ContextForm.js
*
* This file was generated by Sencha Architect version 2.2.2.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 4.1.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 4.1.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('AM.view.directory.ContextForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.contextform',
    requires: ['Ext.ux.form.CheckboxListCombo'],
    node: '',
    border: 2,
    bodyPadding: 10,
    bodyStyle: 'padding:10px 5px 0',
    url: 'directory/Context',
    cacheConnStrTpl: 'Data Source={hostname\\dbInstance};Initial Catalog={dbName};User ID={userId};Password={password}',

    initComponent: function () {
        var me = this;

        me.initialConfig = Ext.apply({
            url: 'directory/Context'
        }, me.initialConfig);

        Ext.applyIf(me, {
            defaults: {
                anchor: '100%',
                msgTarget: 'side'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            handler: function (button, event) {
                                me.onSave();
                            },
                            text: 'Ok'
                        },
                        {
                            xtype: 'button',
                            handler: function (button, event) {
                                me.onReset();
                            },
                            text: 'Cancel'
                        }
                    ]
                }
            ],
            items: [
            {
                xtype: 'hiddenfield',
                name: 'id'
            },
            {
                xtype: 'hiddenfield',
                name: 'path'
            },
            {
                xtype: 'hiddenfield',
                name: 'state'
            },
            {
                xtype: 'hiddenfield',
                name: 'oldContext'
            },
            {
                xtype: 'hiddenfield',
                name: 'name'
            },
            {
                xtype: 'textfield',
                fieldLabel: 'Display Name',
                name: 'displayName',
                allowBlank: false
            }, {
                xtype: 'textfield',
                fieldLabel: 'Internal Name',
                name: 'internalName',
                allowBlank: false
            },
            {
                xtype: 'hiddenfield',
                itemId: 'contextname',
                name: 'contextName'
            },
            {
                xtype: 'textareafield',
                fieldLabel: 'Description',
                name: 'description'
            },
            {
                xtype: 'textareafield',
                fieldLabel: 'Cache ConnStr',
                name: 'cacheDBConnStr',
                value: this.cacheConnStrTpl
            },
            {
                xtype: 'checkboxlistcombo',
                width: 180,
                multiSelect: true,
                name: 'ResourceGroups',
                itemId: 'ResourceGroupId',
                fieldLabel: 'Groups for the User:',
                emptyText: 'Select a Groups for the User...',
                forceSelection: true,
                allowBlank: true,
                displayField: 'groupName',
                autoSelect: false,
                queryMode: 'remote',
                store: 'ResourceGroupStore',
                valueField: 'groupId'
            }
          ]
        });

        me.callParent(arguments);
    },

    onSave: function () {
        var me = this;
        var win = me.up('window');
        var form = me.getForm();
        var ResourceGroups = this.getForm().findField('ResourceGroups').getValue();
        var folderName = form.findField('displayName').getValue();
        var state = form.findField('state').getValue();
        var contextNameField = form.findField('contextName');
        var node = me.node;
        if (form.findField('cacheDBConnStr').getValue() == this.cacheConnStrTpl)
            form.findField('cacheDBConnStr').setValue('');

        if (form.isValid()) {
            if (ResourceGroups != '') {
                form.submit({
                    waitMsg: 'Saving Data...',
                    params: {
                        record: node.get('record')
                    },
                    success: function (response, request) {

                        var objResponseText = Ext.JSON.decode(request.response.responseText);
                        if (objResponseText["message"] == "duplicatecontext") {
                            showDialog(400, 50, 'Alert', "Context with this internal name already exists", Ext.Msg.OK, null);
                            return;
                        }

                        win.fireEvent('save', me);

                        var currentNode;

                        if (state == 'new') {
                            currentNode = node;
                        }
                        else {
                            currentNode = node.parentNode;
                        }

                        while (currentNode.firstChild) {
                            currentNode.removeChild(currentNode.firstChild);
                        }

                        var index = 0;

                        Ext.each(Ext.JSON.decode(request.response.responseText).nodes, function (newNode) {
                            currentNode.insertChild(index, newNode);
                            index++;
                        });

                        me.setLoading(false);

                        me.setLoading(false);

                        if (objResponseText["message"] == "contextadded") {
                            showDialog(400, 50, 'Alert', "Context added successfully!", Ext.Msg.OK, null);
                        }
                        if (objResponseText["message"] == "contextupdated") {
                            showDialog(400, 50, 'Alert', "Context updated successfully!", Ext.Msg.OK, null);
                        }
                    },
                    failure: function (response, request) {
                        var objResponseText = Ext.decode(request.response.responseText);
                        var userMsg = objResponseText['message'];
                        var detailMsg = objResponseText['stackTraceDescription'];
                        var expPanel = Ext.widget('exceptionpanel', { title: 'Error Notification' });
                        Ext.ComponentQuery.query('#expValue', expPanel)[0].setValue(userMsg);
                        Ext.ComponentQuery.query('#expValue2', expPanel)[0].setValue(detailMsg);

                    }
                });
            }
            else {
                showDialog(400, 50, 'Alert', "Select atleast one Group before saving", Ext.Msg.OK, null);
            }
        }
        else {
            Ext.widget('messagepanel', { title: 'Warning', msg: 'Please complete all required fields.' });
            return;
        }
    },

    onReset: function () {
        var me = this;
        var win = me.up('window');
        win.fireEvent('cancel', me);
    }
});