/*
 * File: Scripts/AM/view/mapping/ValueListForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.mapping.ValueListForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.valuelistform',
    bodyStyle: 'padding:10px 5px 0',
    method: 'POST',
    node: '',
    url: 'mapping/valueList',
    initComponent: function () {
        var me = this;
        me.initialConfig = Ext.apply({
            method: 'POST',
            url: 'mapping/valueList'
        }, me.initialConfig);

        Ext.applyIf(me, {
            defaults: {
                anchor: '100%',
                msgTarget: 'side'
            },
            dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            items: [
            {
                xtype: 'tbfill'
            },
            {
                xtype: 'button',
                handler: function (button, event) {
                    me.onSave();
                },
                text: 'Ok'
            },
            {
                xtype: 'button',
                handler: function (button, event) {
                    me.onReset();
                },
                text: 'Cancel'
            }
          ]
        }
      ],
            items: [
        {
            xtype: 'hiddenfield',
            name: 'state'
        },
         {
             xtype: 'hiddenfield',
             name: 'applicationId'
         },
        {
            xtype: 'hiddenfield',
            name: 'mappingNode'
        },
        {
            xtype: 'hiddenfield',
            name: 'oldValueList'
        },
        {
            xtype: 'hiddenfield',
            name: 'contextName'
        },
        {
            xtype: 'hiddenfield',
            name: 'endpoint'
        },
        {
            xtype: 'hiddenfield',
            name: 'baseUrl'
        },
        {
            xtype: 'textfield',
            fieldLabel: 'Value List Name',
            name: 'valueList',
            allowBlank: false
        }
      ]
        });

        me.callParent(arguments);
    },

    onSave: function () {
        var me = this;
        var win = me.up('window');
        var form = me.getForm();
        var node = me.node;
        if (form.findField('valueList').getValue() === '') {
            //showDialog(400, 100, 'Warning', 'Please type in a value list name before saving.', Ext.Msg.OK, null);
            Ext.widget('messagepanel', { title: 'Warning', msg: 'Please type in a value list name before saving.' });
            return;
        }
        form.submit({
            waitMsg: 'Saving Data...',
            success: function (response, request) {
                Ext.example.msg('Notification', 'ValueList saved successfully!');
                //win.fireEvent('Save', me);
                var res = Ext.JSON.decode(request.response.responseText);
                var newNode = Ext.JSON.decode(request.response.responseText).node[0];
                if (res.success) {
                    
                    var parentNode = node.parentNode;

                    if (node.data.type == 'ValueListsNode') {
                        var nodeIndex;
                        if (node.childNodes && node.childNodes.length > 0)
                            nodeIndex = node.lastChild.data.index + 1;
                        else
                            nodeIndex = 0;
                        //newNode.leaf = true;
                        node.insertChild(nodeIndex, newNode);
                    } else if (node.data.type == 'ValueListNode') {
                        var nodeIndex = parentNode.indexOf(node);
                        parentNode.removeChild(node);
                        //if(newNode.children == null)
                        //newNode.leaf = true;
                        parentNode.insertChild(nodeIndex, newNode);
                    }
                    
                    me.setLoading(false);
                } else {
                    Ext.widget('messagepanel', { title: 'Error', msg: res.message });
                }
				win.fireEvent('Save', me);
            },
            failure: function (response, request) {
                var resp = Ext.decode(request.response.responseText);
				var userMsg = resp['message'];
				var detailMsg = resp['stackTraceDescription'];
				var expPanel = Ext.widget('exceptionpanel', { title: 'Error Notification'});
				Ext.ComponentQuery.query('#expValue',expPanel)[0].setValue(userMsg);
				Ext.ComponentQuery.query('#expValue2',expPanel)[0].setValue(detailMsg);
            }
        });
    },

    onReset: function () {
        var me = this;
        var win = me.up('window');
        win.fireEvent('reset', me);
    }

});