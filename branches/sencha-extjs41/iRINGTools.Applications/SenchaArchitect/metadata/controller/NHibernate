{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "NHibernate",
        "models": [
            "AvailItemsModel",
            "TableSelectModel",
            "RelationNameModel",
            "PropertyMapModel",
            "MultiSelect"
        ],
        "stores": [
            "AvailItemsStore",
            "ProviderStore",
            "NHibernateTreeStore",
            "MultiStore"
        ],
        "views": [
            "nhibernate.ConnectionStringForm",
            "nhibernate.RelationsForm",
            "nhibernate.RelationPanel",
            "nhibernate.SelectTablesForm",
            "nhibernate.MultiSelectionGrid",
            "nhibernate.NhibernatePanel",
            "nhibernate.KeyPropertyForm"
        ]
    },
    "id": "ExtBox1-ext-gen3053",
    "designerId": "732f42fe-9dc6-418c-8ca8-80f24bb50936",
    "cn": [
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onConfignhibernate",
                "fn": "onConfignhibernate",
                "implHandler": [
                    "var me = this;\r",
                    "var dirTree = me.getDirTree(),\r",
                    "dirNode = dirTree.getSelectedNode(),\r",
                    "content = me.getMainContent();\r",
                    "\r",
                    "var dbDict, dbInfo;\r",
                    "\r",
                    "var context = dirNode.data.record.context;\r",
                    "var datalayer = dirNode.data.record.DataLayer;\r",
                    "var endpoint = dirNode.data.record.endpoint;\r",
                    "var baseUrl = dirNode.data.record.BaseUrl;\r",
                    "var title = 'Nhibernate Configuration - ' + context + '.' + endpoint;\r",
                    "\r",
                    "var panel = content.down('nhibernatepanel[title='+title+']');\r",
                    "\r",
                    "if(!panel) {\r",
                    "  panel = Ext.widget('nhibernatepanel', {\r",
                    "    'title': title\r",
                    "  });  \r",
                    "  content.add(panel);\r",
                    "\r",
                    "  var tree = panel.down('nhibernatetree');\r",
                    "  var treeStore = tree.getStore();\r",
                    "  var treeProxy = treeStore.getProxy();\r",
                    "\r",
                    "  dbDict = me.getDbDictionary(context, endpoint, baseUrl, function(dbDict) { \r",
                    "    if(dbDict.ConnectionString !== null) {\r",
                    "      var base64 = AM.view.nhibernate.Utility;\r",
                    "      dbDict.ConnectionString = base64.decode(dbDict.ConnectionString);\r",
                    "      if(dbDict) {\r",
                    "        var cstr = dbDict.ConnectionString;\r",
                    "        if(cstr) {\r",
                    "          dirNode.data.record.dbDict = dbDict;\r",
                    "          dbInfo = me.getConnStringParts(cstr, dirNode);\r",
                    "          var selectTableNames = me.setTableNames(dbDict);\r",
                    "\r",
                    "          treeStore.on('beforeload', function (store, action) {\r",
                    "            var params = treeProxy.extraParams;\r",
                    "            params.dbProvider = dbDict.Provider;\r",
                    "            params.dbServer = dbInfo.dbServer;\r",
                    "            params.dbInstance = dbInfo.dbInstance;\r",
                    "            params.dbName = dbInfo.dbName;\r",
                    "            params.dbSchema = dbDict.SchemaName;\r",
                    "            params.dbPassword = dbInfo.dbPassword;\r",
                    "            params.dbUserName = dbInfo.dbUserName;\r",
                    "            params.portNumber = dbInfo.portNumber;\r",
                    "            params.tableNames = selectTableNames;\r",
                    "            params.serName = dbInfo.serName;\r",
                    "            params.contextName = context;\r",
                    "            params.endpoint = endpoint;\r",
                    "            params.baseUrl = baseUrl;\r",
                    "          }, me);\r",
                    "\r",
                    "          treeStore.load();\r",
                    "          me.getTableNames(context, endpoint, baseUrl, dirNode);\r",
                    "        }\r",
                    "      }\r",
                    "    } else {\r",
                    "      me.getDataTypes();\r",
                    "      if (dbInfo !== null && dbInfo !== undefined)\r",
                    "      dirNode.data.record.dbInfo = dbInfo;\r",
                    "\r",
                    "      if (dbDict !== null && dbDict !== undefined)\r",
                    "      dirNode.data.record.dbDict = dbDict;\r",
                    "      me.showConnectionStringForm(panel, node);\r",
                    "      tree.disable();\r",
                    "\r",
                    "    }\r",
                    "  });\r",
                    "\r",
                    "}\r",
                    "\r",
                    "content.setActiveTab(panel);"
                ],
                "name": "confignhibernate",
                "scope": "this"
            },
            "designerId": "82baa5f2-a803-456f-8a4b-e6e5a431f42f"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "init",
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "me.application.addEvents('confignhibernate');"
                ]
            },
            "designerId": "abaf4912-6a1c-4fd1-9541-74c897fa76df"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "dirTree",
                "ref": "dirTree",
                "selector": "viewport > directorypanel > directorytree",
                "xtype": "directorytree"
            },
            "designerId": "a567ac8d-0260-4852-9b38-a7d2efc77d0f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "mainContent",
                "ref": "mainContent",
                "selector": "viewport > centerpanel > contentpanel",
                "xtype": "contentpanel"
            },
            "designerId": "834c3422-cae6-4615-82af-7d8c35c57bad"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectTablesForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "selectTablesForm",
                "selector": "selecttablesform",
                "xtype": "selecttablesform"
            },
            "designerId": "8bbeb51d-23e6-4aff-a6ff-f6cfc1adf177"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "connectionStringForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "connectionStringForm",
                "selector": "connectionstringform",
                "xtype": "connectionstringform"
            },
            "designerId": "195135e4-e893-40c4-9e55-579b7f801453"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getDbDictionary",
                "fn": "getDbDictionary",
                "designer|params": [
                    "context",
                    "endpoint",
                    "baseUrl",
                    "successCallback"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var dbDict, dbInfo;\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'NHibernate/DBDictionary',\r",
                    "  method: 'POST',\r",
                    "  timeout: 6000000,\r",
                    "  params: {\r",
                    "    scope: context,\r",
                    "    app: endpoint,\r",
                    "    baseUrl: baseUrl\r",
                    "  },\r",
                    "  success: function (response, request) {\r",
                    "    dbDict = Ext.JSON.decode(response.responseText);\r",
                    "    successCallback(dbDict);\r",
                    "  },\r",
                    "  failure: function (response, request) {\r",
                    "    //var dataObjPanel = content.items.map[contextName + '.' + endpoint + '.-nh-config'];;\r",
                    "  }\r",
                    "});"
                ]
            },
            "designerId": "8280a8ae-21d9-4e16-b388-4a178353e729"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getTableNames",
                "fn": "getTableNames",
                "designer|params": [
                    "context",
                    "endpoint",
                    "baseUrl",
                    "dirNode"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var dbInfo = dirNode.data.record.dbInfo;\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'NHibernate/TableNames',\r",
                    "  method: 'POST',\r",
                    "  timeout: 6000000,\r",
                    "  params: {\r",
                    "    scope: context,\r",
                    "    app: endpoint,\r",
                    "    dbProvider: dbDict.Provider,\r",
                    "    dbServer: dbInfo.dbServer,\r",
                    "    dbInstance: dbInfo.dbInstance,\r",
                    "    dbName: dbInfo.dbName,\r",
                    "    dbSchema: dbDict.SchemaName,\r",
                    "    dbUserName: dbInfo.dbUserName,\r",
                    "    dbPassword: dbInfo.dbPassword,\r",
                    "    portNumber: dbInfo.portNumber,\r",
                    "    serName: dbInfo.serName,\r",
                    "    baseUrl: baseUrl\r",
                    "  },\r",
                    "  success: function (response, request) {\r",
                    "    dirNode.data.record.dbInfo.dbTableNames = Ext.JSON.decode(response.responseText);\r",
                    "  },\r",
                    "  failure: function (f, a) {\r",
                    "    if (a.response)\r",
                    "    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ]
            },
            "designerId": "95192dbc-81f5-4ac7-8b20-ad9be22d9a52"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "setTableNames",
                "fn": "setTableNames",
                "designer|params": [
                    "dbDict"
                ],
                "implHandler": [
                    "  var selectTableNames = [];\r",
                    "\r",
                    "  for (var i = 0; i < dbDict.dataObjects.length; i++) {\r",
                    "    var tableName = (dbDict.dataObjects[i].tableName ? dbDict.dataObjects[i].tableName : dbDict.dataObjects[i]);\r",
                    "    selectTableNames.push(tableName);\r",
                    "  }\r",
                    "  return selectTableNames;"
                ]
            },
            "designerId": "0573e2fd-252f-4155-b2b4-bd710c3b86c8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getAvailableItems",
                "fn": "getAvailableItems",
                "designer|params": [
                    "node"
                ],
                "implHandler": [
                    "var availItems = [];\r",
                    "var propertiesNode = node.parentNode.childNodes[1];\r",
                    "\r",
                    "for (var i = 0; i < propertiesNode.childNodes.length; i++) {\r",
                    "  var itemName = propertiesNode.childNodes[i].text;\r",
                    "  var found = false;\r",
                    "\r",
                    "  for (var j = 0; j < node.childNodes.length; j++) {\r",
                    "    if (node.childNodes[j].text.toLowerCase() == itemName.toLowerCase()) {\r",
                    "      found = true;\r",
                    "      break;\r",
                    "    }\r",
                    "  }\r",
                    "  if (!found) {\r",
                    "    availItems.push([itemName, itemName]);\r",
                    "  }\r",
                    "}\r",
                    "return availItems;"
                ]
            },
            "designerId": "a80490c1-9a7c-4e05-b8ef-4fe23a7a276a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getSelectedItems",
                "fn": "getSelectedItems",
                "designer|params": [
                    "node"
                ],
                "implHandler": [
                    "var selectedItems = [];\r",
                    "var propertiesNode = node.parentNode.childNodes[1];\r",
                    "\r",
                    "for (var i = 0; i < node.childNodes.length; i++) {\r",
                    "  var keyName = node.childNodes[i].text;\r",
                    "  selectedItems.push([keyName, keyName]);\r",
                    "}\r",
                    "return selectedItems;"
                ]
            },
            "designerId": "82e893d1-0600-42df-b6ce-6bcf86d2d7d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showTableSelectionForm",
                "fn": "showTableSelectionForm",
                "designer|params": [
                    "nhibernatePanel",
                    "node"
                ],
                "implHandler": [
                    "var me = this, \r",
                    "form = me.getSelectTablesForm();\r",
                    "var selected = [];\r",
                    "var tables = node.data.record.dbInfo.dbTableNames.items;\r",
                    "var dict = node.data.record.dbDict.dataObjects;\r",
                    "Ext.each(dict, function(table) {\r",
                    "  selected.push(table.tableName);\r",
                    "});\r",
                    "var grid = form.down('multiselectiongrid');\r",
                    "grid.loadItems(tables);\r",
                    "grid.selectItems(selected);\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "\r",
                    "panel.removeAll();\r",
                    "\r",
                    "panel.add(form);\r",
                    "panel.doLayout();\r",
                    ""
                ]
            },
            "designerId": "9d09026c-708e-447c-801d-f60ea204561e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onTreepanelItemClick",
                "fn": "onTreepanelItemClick",
                "implHandler": [
                    "var me = this;\r",
                    "var content = me.getMainContent();\r",
                    "var dirTree = me.getDirTree();\r",
                    "var node = dirTree.getSelectedNode();\r",
                    "var panel = tablepanel.up('nhibernatepanel');\r",
                    "var dataNode = record.store.getAt(index);\r",
                    "var nodeType = dataNode.data.type.toUpperCase();\r",
                    "if (dataNode.isRoot) {\r",
                    "  \r",
                    "}\r",
                    "if (nodeType) {\r",
                    "  switch (nodeType) {\r",
                    "    case 'DATAOBJECTS':\r",
                    "    me.showTableSelectionForm(panel, node);\r",
                    "    break;\r",
                    "    case 'DATAOBJECT':\r",
                    "    me.showTableSelectionForm(panel, node);\r",
                    "    break;\r",
                    "    case 'KEYS':\r",
                    "    //setKeysFolder(me, editor, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "    case 'KEYPROPERTY':\r",
                    "    //setKeyProperty(me, editor, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "    case 'PROPERTIES':\r",
                    "    //setPropertiesFolder(me, editor, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "    case 'DATAPROPERTY':\r",
                    "    //setDataProperty(me, editor, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "    case 'RELATIONSHIPS':\r",
                    "    //setRelations(editor, tree, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "    case 'RELATIONSHIP':\r",
                    "    //setRelationFields(editor, rootNode, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "  }\r",
                    "}\r",
                    "\r",
                    ""
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "nhibernate.NhibernateTree",
                "designer|controlQuery": "nhibernatetree"
            },
            "designerId": "e55b2200-d766-4630-82b3-5b08d50e9064"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDbObjectChanges",
                "fn": "onDbObjectChanges",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "selecttablesform button[action=applyobjects]"
            },
            "designerId": "2614218c-652a-4d5c-b7ff-3857efbb8661"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onDbObjectsReset",
                "fn": "onDbObjectsReset",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "selecttablesform button[action=resetobjects]"
            },
            "designerId": "8baeba5d-afa4-4e6e-8872-2e56d805f5f1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showConnectionStringForm",
                "fn": "showConnectionStringForm",
                "designer|params": [
                    "nhibernatePanel",
                    "node"
                ],
                "implHandler": [
                    "var me = this,\r",
                    "form = me.getConnectionStringForm();\r",
                    "var combo = form.down('#providerCombo');\r",
                    "combo.on('select', function (combo, record, options) {\r",
                    "  var dbProvider = record[0].data.Provider.toUpperCase();\r",
                    "  var dbName = me.getForm().findField('dbName');\r",
                    "  var portNumber = me.getForm().findField('portNumber');\r",
                    "  var host = me.getForm().findField('host');\r",
                    "  var dbServer = me.getForm().findField('dbServer');\r",
                    "  var dbInstance = me.getForm().findField('dbInstance');\r",
                    "  var serviceName = me.items.items[10];\r",
                    "  var dbSchema = me.getForm().findField('dbSchema');\r",
                    "  var userName = me.getForm().findField('dbUserName');\r",
                    "  var password = me.getForm().findField('dbPassword');\r",
                    "\r",
                    "  if (dbProvider.indexOf('ORACLE') > -1) {\r",
                    "    if (dbName.hidden === false) {\r",
                    "      dbName.hide();\r",
                    "      dbServer.hide();\r",
                    "      dbInstance.hide();\r",
                    "    }\r",
                    "\r",
                    "    if (host.hidden === true) {\r",
                    "      if (dbDict.Provider) {\r",
                    "        if (dbDict.Provider.toUpperCase().indexOf('ORACLE') > -1) {\r",
                    "          host.setValue(dbInfo.dbServer);\r",
                    "          serviceName.show();\r",
                    "          creatRadioField(serviceName, dbInfo.dbInstance, dbInfo.serName, contextName, endpoint);\r",
                    "          host.show();\r",
                    "          userName.setValue(dbInfo.dbUserName);\r",
                    "          password.setValue(dbInfo.dbPassword);\r",
                    "          dbSchema.setValue(dbDict.SchemaName);\r",
                    "        }\r",
                    "        else\r",
                    "          changeConfigOracle(host, dbSchema, userName, password, serviceName, contextName, endpoint);\r",
                    "      }\r",
                    "      else\r",
                    "        changeConfigOracle(host, dbSchema, userName, password, serviceName, contextName, endpoint);\r",
                    "\r",
                    "      portNumber.setValue('1521');\r",
                    "      portNumber.show();\r",
                    "    }\r",
                    "  }\r",
                    "  else if (dbProvider.indexOf('MSSQL') > -1) {\r",
                    "    if (host.hidden === false) {\r",
                    "      portNumber.hide();\r",
                    "      host.hide();\r",
                    "      serviceName.hide();\r",
                    "    }\r",
                    "\r",
                    "    if (dbName.hidden === true) {\r",
                    "      if (dbDict.Provider) {\r",
                    "        if (dbDict.Provider.toUpperCase().indexOf('MSSQL') > -1) {\r",
                    "          dbName.setValue(dbInfo.dbName);\r",
                    "          dbServer.setValue(dbInfo.dbServer);\r",
                    "          dbInstance.setValue(dbInfo.dbInstance);\r",
                    "          dbName.show();\r",
                    "          dbServer.show();\r",
                    "          dbInstance.show();\r",
                    "          dbSchema.setValue(dbDict.SchemaName);\r",
                    "          userName.setValue(dbInfo.dbUserName);\r",
                    "          password.setValue(dbInfo.dbPassword);\r",
                    "        }\r",
                    "        else\r",
                    "          changeConfig(dbName, dbServer, dbInstance, dbSchema, userName, password);\r",
                    "      }\r",
                    "      else\r",
                    "        changeConfig(dbName, dbServer, dbInstance, dbSchema, userName, password);\r",
                    "    }\r",
                    "\r",
                    "    portNumber.setValue('1433');\r",
                    "  }\r",
                    "  else if (dbProvider.indexOf('MYSQL') > -1) {\r",
                    "    if (dbServer.hidden === true) {\r",
                    "      dbServer.setValue('');\r",
                    "      dbServer.clearInvalid();\r",
                    "      dbServer.show();\r",
                    "    }\r",
                    "\r",
                    "    if (host.hidden === false) {\r",
                    "      portNumber.hide();\r",
                    "      host.hide();\r",
                    "      serviceName.hide();\r",
                    "      portNumber.setValue('3306');\r",
                    "    }\r",
                    "    \r",
                    "  }\r",
                    "          \r",
                    "}, me);\r",
                    "\r",
                    "var cmbStore = combo.getStore();\r",
                    "var cmbProxy = cmbStore.getProxy();\r",
                    "cmbStore.on('beforeload', function(store, action) {\r",
                    "  cmbProxy.extraParams.baseUrl = node.data.record.BaseUrl;\r",
                    "});\r",
                    "cmbStore.load();\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "panel.removeAll();\r",
                    "panel.doLayout();\r",
                    "panel.add(form);"
                ]
            },
            "designerId": "b2ce807b-c0fd-424f-a32b-a3a71dd4ef62"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getConnStringParts",
                "fn": "getConnStringParts",
                "designer|params": [
                    "connString",
                    "dirNode"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var dsValue, serName;\r",
                    "var connStrParts = connString.split(';');\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "var provider = dbDict.Provider.toUpperCase();\r",
                    "\r",
                    "if (dirNode.data.record.dbInfo === undefined) {\r",
                    "  dirNode.data.record.dbInfo = {};\r",
                    "}\r",
                    "\r",
                    "if (!dirNode.data.record.dbInfo.dbUserName)\r",
                    "  dirNode.data.record.dbInfo.dbName = dbDict.SchemaName;\r",
                    "\r",
                    "for (var i = 0; i < connStrParts.length; i++) {\r",
                    "  var pair = connStrParts[i].split('=');\r",
                    "  switch (pair[0].toUpperCase()) {\r",
                    "    case 'DATA SOURCE':\r",
                    "      if (provider.indexOf('MSSQL') > -1) {\r",
                    "        dsValue = pair[1].split('\\\\');\r",
                    "        dirNode.data.record.dbInfo.dbServer = (dsValue[0].toLowerCase() == '.' ? 'localhost' : dsValue[0]);\r",
                    "        dirNode.data.record.dbInfo.dbInstance = dsValue[1];\r",
                    "        dirNode.data.record.dbInfo.portNumber = 1433;\r",
                    "        dirNode.data.record.dbInfo.serName = '';\r",
                    "      }\r",
                    "      else if (provider.indexOf('MYSQL') > -1) {\r",
                    "        dirNode.data.record.dbInfo.dbServer = (pair[1].toLowerCase() == '.' ? 'localhost' : pair[1]);\r",
                    "        dirNode.data.record.dbInfo.portNumber = 3306;\r",
                    "      }\r",
                    "      else if (provider.indexOf('ORACLE') > -1) {\r",
                    "        var dsStr = connStrParts[i].substring(12, connStrParts[i].length);\r",
                    "        dsValue = dsStr.split('=');\r",
                    "        for (var j = 0; j < dsValue.length; j++) {\r",
                    "          dsValue[j] = dsValue[j].substring(dsValue[j].indexOf('(') + 1, dsValue[j].length);\r",
                    "          switch (dsValue[j].toUpperCase()) {\r",
                    "            case 'HOST':\r",
                    "              var server = dsValue[j + 1];\r",
                    "              var port = dsValue[j + 2];\r",
                    "              var index = server.indexOf(')');\r",
                    "              server = server.substring(0, index);\r",
                    "              dirNode.data.record.dbInfo.portNumber = port.substring(0, 4);\r",
                    "              dirNode.data.record.dbInfo.dbServer = (server.toLowerCase() == '.' ? 'localhost' : server);\r",
                    "              break;\r",
                    "            case 'SERVICE_NAME':\r",
                    "              serName = dsValue[j + 1];\r",
                    "              index = sername.indexOf(')');\r",
                    "              dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);\r",
                    "              dirNode.data.record.dbInfo.serName = 'SERVICE_NAME';\r",
                    "              break;\r",
                    "            case 'SID':\r",
                    "              serName = dsValue[j + 1];\r",
                    "              index = sername.indexOf(')');\r",
                    "              dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);\r",
                    "              dirNode.data.record.dbInfo.serName = 'SID';\r",
                    "              break;\r",
                    "          }\r",
                    "        }\r",
                    "      }\r",
                    "      break;\r",
                    "    case 'INITIAL CATALOG':\r",
                    "      dirNode.data.record.dbInfo.dbName = pair[1];\r",
                    "      break;\r",
                    "    case 'USER ID':\r",
                    "      dirNode.data.record.dbInfo.dbUserName = pair[1];\r",
                    "      break;\r",
                    "    case 'PASSWORD':\r",
                    "      dirNode.data.record.dbInfo.dbPassword = pair[1];\r",
                    "      break;\r",
                    "  }\r",
                    "}\r",
                    "return dirNode.data.record.dbInfo;"
                ]
            },
            "designerId": "e6408b80-6349-457d-8324-fe89ff39f707"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getDataTypes",
                "fn": "getDataTypes",
                "implHandler": [
                    "Ext.Ajax.request({\r",
                    "  url: 'NHibernate/DataType',\r",
                    "  method: 'GET',\r",
                    "  timeout: 6000000,\r",
                    "  success: function (response, request) {\r",
                    "    var dataTypeName = Ext.JSON.decode(response.responseText);\r",
                    "    AM.view.nhibernate.dataTypes = [];\r",
                    "    dataTypes = [];\r",
                    "    var i = 0;\r",
                    "    while (!dataTypeName[i])\r",
                    "    i++;\r",
                    "    while (dataTypeName[i]) {\r",
                    "      AM.view.nhibernate.dataTypes.push([i, dataTypeName[i]]);\r",
                    "      i++;\r",
                    "    }\r",
                    "  },\r",
                    "  failure: function (f, a) {\r",
                    "    if (a.response)\r",
                    "    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ]
            },
            "designerId": "36f62e6e-efae-4a55-80be-7b79ff4ae1a1"
        }
    ]
}