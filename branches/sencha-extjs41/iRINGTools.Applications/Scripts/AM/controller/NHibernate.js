/*
 * File: Scripts/AM/controller/NHibernate.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.controller.NHibernate', {
  extend: 'Ext.app.Controller',

  models: [
    'AvailItemsModel',
    'TableSelectModel',
    'RelationNameModel',
    'PropertyMapModel',
    'MultiSelect'
  ],
  stores: [
    'AvailItemsStore',
    'ProviderStore',
    'NHibernateTreeStore',
    'MultiStore'
  ],
  views: [
    'nhibernate.ConnectionStringForm',
    'nhibernate.RelationsForm',
    'nhibernate.RelationPanel',
    'nhibernate.SelectTablesForm',
    'nhibernate.MultiSelectionGrid',
    'nhibernate.NhibernatePanel',
    'nhibernate.PropertyGrid'
  ],

  refs: [
    {
      ref: 'dirTree',
      selector: 'viewport > directorypanel > directorytree',
      xtype: 'directorytree'
    },
    {
      ref: 'mainContent',
      selector: 'viewport > centerpanel > contentpanel',
      xtype: 'contentpanel'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'selectTablesForm',
      selector: 'selecttablesform',
      xtype: 'selecttablesform'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'connectionStringForm',
      selector: 'connectionstringform',
      xtype: 'connectionstringform'
    }
  ],

  onTreepanelItemClick: function(tablepanel, record, item, index, e, options) {
    var me = this;
    var content = me.getMainContent();
    var dirTree = me.getDirTree();
    var node = dirTree.getSelectedNode();
    var panel = tablepanel.up('nhibernatepanel');
    var dataNode = record.store.getAt(index);
    var nodeType = dataNode.data.type.toUpperCase();
    if (dataNode.isRoot) {

    }
    if (nodeType) {
      switch (nodeType) {
        case 'DATAOBJECTS':
        me.showTableSelectionForm(panel, node);
        break;
        case 'DATAOBJECT':
        me.showTableSelectionForm(panel, node);
        break;
        case 'KEYS':
        //setKeysFolder(me, editor, dataNode, contextName, endpoint);
        break;
        case 'KEYPROPERTY':
        //setKeyProperty(me, editor, dataNode, contextName, endpoint);
        break;
        case 'PROPERTIES':
        //setPropertiesFolder(me, editor, dataNode, contextName, endpoint);
        break;
        case 'DATAPROPERTY':
        //setDataProperty(me, editor, dataNode, contextName, endpoint);
        break;
        case 'RELATIONSHIPS':
        //setRelations(editor, tree, dataNode, contextName, endpoint);
        break;
        case 'RELATIONSHIP':
        //setRelationFields(editor, rootNode, dataNode, contextName, endpoint);
        break;
      }
    }


  },

  onDbObjectChanges: function(button, e, options) {

  },

  onDbObjectsReset: function(button, e, options) {

  },

  onConnectToDatabase: function(button, e, options) {
    var me = this;
    var form = button.up('connectionstringform');
    var panel = form.up('nhibernatepanel');
    var dataTree = panel.down('nhibernatetree');
    var dirNode = form.dirNode;
    var context = dirNode.data.record.context;
    var endpoint = dirNode.data.record.endpoint;
    var baseUrl = dirNode.data.record.BaseUrl;
    var content = me.getMainContent();
    var dbProvider = form.getForm().findField('dbProvider').getValue().toUpperCase();
    var dbName = form.getForm().findField('dbName');
    var portNumber = form.getForm().findField('portNumber');
    var host = form.getForm().findField('host');
    var dbServer = form.getForm().findField('dbServer');
    var dbInstance = form.getForm().findField('dbInstance');
    var serviceNamePane = form.items.items[10];
    var dbSchema = form.getForm().findField('dbSchema');
    var servieName = '';
    var serName = '';

    dirNode.data.record.dbDict.Provider = dbProvider;

    if (dbProvider.indexOf('ORACLE') > -1) {
      dbServer.setValue(host.getValue());
      dbName.setValue(dbSchema.getValue());
      servieName = serviceNamePane.items.items[0].value;
      serName = serviceNamePane.items.items[0].serName;
      dbInstance.setValue(servieName);
    }
    else if (dbProvider.indexOf('MSSQL') > -1) {
      host.setValue(dbServer.getValue());
      serviceName = dbInstance.getValue();
    }
    else if (dbProvider.indexOf('MYSQL') > -1) {
      dbName.setValue(dbSchema.getValue());
      dbInstance.setValue(dbSchema.getValue());
    }

    form.getForm().submit({
      url: 'nhibernate/TableNames',
      timeout: 600000,
      params: {
        scope: context,
        app: endpoint,
        serName: serName,
        baseUrl: baseUrl
      },
      success: function (f, a) {
        dirNode.data.record.dbInfo = form.getForm().getValues();
        var dbInfo = dirNode.data.record.dbInfo;

        dbInfo.dbTableNames = Ext.JSON.decode(a.response.responseText);
        me.showTableSelectionForm(panel, dirNode);
        return;

      },
      failure: function (f, a) {
        if (a.response)
        showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
        else {
          showDialog(400, 100, 'Warning', 'Please fill in every field in this form.', Ext.Msg.OK, null);
        }
      }//,
      // waitMsg: 'Loading ...'
    });
  },

  onSaveDbTables: function(button, e, options) {

  },

  onConfignhibernate: function() {
    var me = this;
    var dirTree = me.getDirTree(),
    dirNode = dirTree.getSelectedNode(),
    content = me.getMainContent();

    var dbDict, dbInfo;

    var context = dirNode.data.record.context;
    var datalayer = dirNode.data.record.DataLayer;
    var endpoint = dirNode.data.record.endpoint;
    var baseUrl = dirNode.data.record.BaseUrl;
    var title = 'Nhibernate Configuration - ' + context + '.' + endpoint;

    var panel = content.down('nhibernatepanel[title='+title+']');

    if(!panel) {
      panel = Ext.widget('nhibernatepanel', {
        'title': title
      });  
      content.add(panel);

      var tree = panel.down('nhibernatetree');
      var treeStore = tree.getStore();
      var treeProxy = treeStore.getProxy();

      dbDict = me.getDbDictionary(context, endpoint, baseUrl, function(dbDict) { 
        if(dbDict.ConnectionString !== null) {
          var base64 = AM.view.nhibernate.Utility;
          dbDict.ConnectionString = base64.decode(dbDict.ConnectionString);
          if(dbDict) {
            var cstr = dbDict.ConnectionString;
            if(cstr) {
              dirNode.data.record.dbDict = dbDict;
              dbInfo = me.getConnStringParts(cstr, dirNode);
              var selectTableNames = me.setTableNames(dbDict);

              treeStore.on('beforeload', function (store, action) {
                var params = treeProxy.extraParams;
                params.dbProvider = dbDict.Provider;
                params.dbServer = dbInfo.dbServer;
                params.dbInstance = dbInfo.dbInstance;
                params.dbName = dbInfo.dbName;
                params.dbSchema = dbDict.SchemaName;
                params.dbPassword = dbInfo.dbPassword;
                params.dbUserName = dbInfo.dbUserName;
                params.portNumber = dbInfo.portNumber;
                params.tableNames = selectTableNames;
                params.serName = dbInfo.serName;
                params.contextName = context;
                params.endpoint = endpoint;
                params.baseUrl = baseUrl;
              }, me);

              treeStore.load();
              me.getTableNames(context, endpoint, baseUrl, dirNode);
            }
          }
        } else {
          me.getDataTypes();
          if (dbInfo !== null && dbInfo !== undefined)
          dirNode.data.record.dbInfo = dbInfo;

          if (dbDict !== null && dbDict !== undefined)
          dirNode.data.record.dbDict = dbDict;
          me.showConnectionStringForm(panel, dirNode);
          tree.disable();

        }
      });

    }

    content.setActiveTab(panel);
  },

  init: function(application) {
    var me = this;
    me.application.addEvents('confignhibernate');

    this.control({
      "nhibernatetree": {
        itemclick: this.onTreepanelItemClick
      },
      "selecttablesform button[action=applyobjects]": {
        click: this.onDbObjectChanges
      },
      "selecttablesform button[action=resetobjects]": {
        click: this.onDbObjectsReset
      },
      "button[action=connecttodatabase]": {
        click: this.onConnectToDatabase
      },
      "button[action=applyobjects]": {
        click: this.onSaveDbTables
      }
    });

    application.on({
      confignhibernate: {
        fn: this.onConfignhibernate,
        scope: this
      }
    });
  },

  getDbDictionary: function(context, endpoint, baseUrl, successCallback) {
    var me = this;
    var dbDict, dbInfo;
    Ext.Ajax.request({
      url: 'NHibernate/DBDictionary',
      method: 'POST',
      timeout: 6000000,
      params: {
        scope: context,
        app: endpoint,
        baseUrl: baseUrl
      },
      success: function (response, request) {
        dbDict = Ext.JSON.decode(response.responseText);
        successCallback(dbDict);
      },
      failure: function (response, request) {
        //var dataObjPanel = content.items.map[contextName + '.' + endpoint + '.-nh-config'];;
      }
    });
  },

  getTableNames: function(context, endpoint, baseUrl, dirNode) {
    var me = this;
    var dbInfo = dirNode.data.record.dbInfo;
    var dbDict = dirNode.data.record.dbDict;

    Ext.Ajax.request({
      url: 'NHibernate/TableNames',
      method: 'POST',
      timeout: 6000000,
      params: {
        scope: context,
        app: endpoint,
        dbProvider: dbDict.Provider,
        dbServer: dbInfo.dbServer,
        dbInstance: dbInfo.dbInstance,
        dbName: dbInfo.dbName,
        dbSchema: dbDict.SchemaName,
        dbUserName: dbInfo.dbUserName,
        dbPassword: dbInfo.dbPassword,
        portNumber: dbInfo.portNumber,
        serName: dbInfo.serName,
        baseUrl: baseUrl
      },
      success: function (response, request) {
        dirNode.data.record.dbInfo.dbTableNames = Ext.JSON.decode(response.responseText);
      },
      failure: function (f, a) {
        if (a.response)
        showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
      }
    });
  },

  setTableNames: function(dbDict) {
    var selectTableNames = [];

    for (var i = 0; i < dbDict.dataObjects.length; i++) {
      var tableName = (dbDict.dataObjects[i].tableName ? dbDict.dataObjects[i].tableName : dbDict.dataObjects[i]);
      selectTableNames.push(tableName);
    }
    return selectTableNames;
  },

  getAvailableItems: function(node) {
    var availItems = [];
    var propertiesNode = node.parentNode.childNodes[1];

    for (var i = 0; i < propertiesNode.childNodes.length; i++) {
      var itemName = propertiesNode.childNodes[i].text;
      var found = false;

      for (var j = 0; j < node.childNodes.length; j++) {
        if (node.childNodes[j].text.toLowerCase() == itemName.toLowerCase()) {
          found = true;
          break;
        }
      }
      if (!found) {
        availItems.push([itemName, itemName]);
      }
    }
    return availItems;
  },

  getSelectedItems: function(node) {
    var selectedItems = [];
    var propertiesNode = node.parentNode.childNodes[1];

    for (var i = 0; i < node.childNodes.length; i++) {
      var keyName = node.childNodes[i].text;
      selectedItems.push([keyName, keyName]);
    }
    return selectedItems;
  },

  showTableSelectionForm: function(nhibernatePanel, node) {
    var me = this, 
    form = me.getSelectTablesForm();
    var selected = [];
    var tables = node.data.record.dbInfo.dbTableNames.items;
    var dict = node.data.record.dbDict.dataObjects;
    Ext.each(dict, function(table) {
      selected.push(table.tableName);
    });
    var grid = form.down('multiselectiongrid');
    grid.loadItems(tables);
    grid.selectItems(selected);
    panel = nhibernatePanel.down('#nhibernateContent');

    panel.removeAll();

    panel.add(form);
    panel.doLayout();

    Ext.getBody().unmask();

  },

  showConnectionStringForm: function(nhibernatePanel, node) {
    var me = this,
    form = me.getConnectionStringForm();
    form.dirNode = node;
    var dbDict = node.data.record.dbDict;
    var combo = form.down('#providerCombo');
    combo.on('select', function (combo, record, options) {
      var dbProvider = record[0].data.Provider.toUpperCase();
      var dbName = form.getForm().findField('dbName');
      var portNumber = form.getForm().findField('portNumber');
      var host = form.getForm().findField('host');
      var dbServer = form.getForm().findField('dbServer');
      var dbInstance = form.getForm().findField('dbInstance');
      var serviceName = form.down('#oraclecontainer');
      var dbSchema = form.getForm().findField('dbSchema');
      var userName = form.getForm().findField('dbUserName');
      var password = form.getForm().findField('dbPassword');
      var sid = form.getForm().findField('field_sid');
      var serName = form.getForm().findField('field_serviceName');

      if (dbProvider.indexOf('ORACLE') > -1) {
        if (dbName.hidden === false) {
          dbName.hide();
          dbServer.hide();
          dbInstance.hide();
        }

        if (host.hidden === true) {
          if (dbDict.Provider) {
            if (dbDict.Provider.toUpperCase().indexOf('ORACLE') > -1) {
              host.setValue(dbInfo.dbServer);
              sid.setValue(dbInfo.dbInstance);
              serName.setValue(dbInfo.serName);
              serviceName.show();
              host.show();
              userName.setValue(dbInfo.dbUserName);
              password.setValue(dbInfo.dbPassword);
              dbSchema.setValue(dbDict.SchemaName);
            }
            else
            me.resetConfigOracle(host, dbSchema, userName, password, serviceName);
          }
          else
          me.resetConfigOracle(host, dbSchema, userName, password, serviceName);

          portNumber.setValue('1521');
          portNumber.show();
        }
      }
      else if (dbProvider.indexOf('MSSQL') > -1) {
        if (host.hidden === false) {
          portNumber.hide();
          host.hide();
          serviceName.hide();
        }

        if (dbName.hidden === true) {
          if (dbDict.Provider) {
            if (dbDict.Provider.toUpperCase().indexOf('MSSQL') > -1) {
              dbName.setValue(dbInfo.dbName);
              dbServer.setValue(dbInfo.dbServer);
              dbInstance.setValue(dbInfo.dbInstance);
              dbName.show();
              dbServer.show();
              dbInstance.show();
              dbSchema.setValue(dbDict.SchemaName);
              userName.setValue(dbInfo.dbUserName);
              password.setValue(dbInfo.dbPassword);
            }
            else
            me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);
          }
          else
          me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);
        }

        portNumber.setValue('1433');
      }
      else if (dbProvider.indexOf('MYSQL') > -1) {
        if (dbServer.hidden === true) {
          dbServer.setValue('');
          dbServer.clearInvalid();
          dbServer.show();
        }

        if (host.hidden === false) {
          portNumber.hide();
          host.hide();
          serviceName.hide();
          portNumber.setValue('3306');
        }

      }

    }, me);

    var cmbStore = combo.getStore();
    var cmbProxy = cmbStore.getProxy();
    cmbStore.on('beforeload', function(store, action) {
      cmbProxy.extraParams.baseUrl = node.data.record.BaseUrl;
    });
    cmbStore.load();
    panel = nhibernatePanel.down('#nhibernateContent');
    panel.removeAll();
    panel.doLayout();
    panel.add(form);
  },

  getConnStringParts: function(connString, dirNode) {
    var me = this;
    var dsValue, serName;
    var connStrParts = connString.split(';');
    var dbDict = dirNode.data.record.dbDict;
    var provider = dbDict.Provider.toUpperCase();

    if (dirNode.data.record.dbInfo === undefined) {
      dirNode.data.record.dbInfo = {};
    }

    if (!dirNode.data.record.dbInfo.dbUserName)
    dirNode.data.record.dbInfo.dbName = dbDict.SchemaName;

    for (var i = 0; i < connStrParts.length; i++) {
      var pair = connStrParts[i].split('=');
      switch (pair[0].toUpperCase()) {
        case 'DATA SOURCE':
        if (provider.indexOf('MSSQL') > -1) {
          dsValue = pair[1].split('\\');
          dirNode.data.record.dbInfo.dbServer = (dsValue[0].toLowerCase() == '.' ? 'localhost' : dsValue[0]);
          dirNode.data.record.dbInfo.dbInstance = dsValue[1];
          dirNode.data.record.dbInfo.portNumber = 1433;
          dirNode.data.record.dbInfo.serName = '';
        }
        else if (provider.indexOf('MYSQL') > -1) {
          dirNode.data.record.dbInfo.dbServer = (pair[1].toLowerCase() == '.' ? 'localhost' : pair[1]);
          dirNode.data.record.dbInfo.portNumber = 3306;
        }
        else if (provider.indexOf('ORACLE') > -1) {
          var dsStr = connStrParts[i].substring(12, connStrParts[i].length);
          dsValue = dsStr.split('=');
          for (var j = 0; j < dsValue.length; j++) {
            dsValue[j] = dsValue[j].substring(dsValue[j].indexOf('(') + 1, dsValue[j].length);
            switch (dsValue[j].toUpperCase()) {
              case 'HOST':
              var server = dsValue[j + 1];
              var port = dsValue[j + 2];
              var index = server.indexOf(')');
              server = server.substring(0, index);
              dirNode.data.record.dbInfo.portNumber = port.substring(0, 4);
              dirNode.data.record.dbInfo.dbServer = (server.toLowerCase() == '.' ? 'localhost' : server);
              break;
              case 'SERVICE_NAME':
              serName = dsValue[j + 1];
              index = sername.indexOf(')');
              dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);
              dirNode.data.record.dbInfo.serName = 'SERVICE_NAME';
              break;
              case 'SID':
              serName = dsValue[j + 1];
              index = sername.indexOf(')');
              dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);
              dirNode.data.record.dbInfo.serName = 'SID';
              break;
            }
          }
        }
        break;
        case 'INITIAL CATALOG':
        dirNode.data.record.dbInfo.dbName = pair[1];
        break;
        case 'USER ID':
        dirNode.data.record.dbInfo.dbUserName = pair[1];
        break;
        case 'PASSWORD':
        dirNode.data.record.dbInfo.dbPassword = pair[1];
        break;
      }
    }
    return dirNode.data.record.dbInfo;
  },

  getDataTypes: function() {
    Ext.Ajax.request({
      url: 'NHibernate/DataType',
      method: 'GET',
      timeout: 6000000,
      success: function (response, request) {
        var dataTypeName = Ext.JSON.decode(response.responseText);
        AM.view.nhibernate.dataTypes = [];
        dataTypes = [];
        var i = 0;
        while (!dataTypeName[i])
        i++;
        while (dataTypeName[i]) {
          AM.view.nhibernate.dataTypes.push([i, dataTypeName[i]]);
          i++;
        }
      },
      failure: function (f, a) {
        if (a.response)
        showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
      }
    });
  },

  resetConfigOracle: function(host, dbSchema, userName, password, serviceName) {
    host.setValue('');
    host.clearInvalid();

    host.show();

    dbSchema.setValue('');
    dbSchema.clearInvalid();

    userName.setValue('');
    userName.clearInvalid();

    password.setValue('');
    password.clearInvalid();
    serviceName.show();
    //creatRadioField(serviceName, '', '', 1, context, endpoint);  
  },

  resetConfigMsSql: function(dbName, dbServer, dbInstance, dbSchema, userName, password) {
    dbName.setValue('');
    dbName.clearInvalid();
    dbName.show();

    dbServer.setValue('localhost');
    dbServer.show();

    dbInstance.setValue('default');
    dbInstance.show();

    dbSchema.setValue('dbo');

    userName.setValue('');
    userName.clearInvalid();

    password.setValue('');
    password.clearInvalid();
  }

});
