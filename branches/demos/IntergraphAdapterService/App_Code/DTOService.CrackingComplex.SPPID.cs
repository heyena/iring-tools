//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Xsl;
using Ninject;
using org.iringtools.library;
using org.iringtools.utility;

namespace org.iringtools.adapter.proj_CrackingComplex.SPPID
{
  public class DTOService : IDTOService
  {
    IKernel _kernel = null;
    IDataLayer _dataLayer = null;
    AdapterSettings _settings = null;
    
    [Inject]
    public DTOService(IKernel kernel, IDataLayer dataLayer, AdapterSettings settings)
    {
      _kernel = kernel;
      _dataLayer = dataLayer;
      _settings = settings;
    }
    
    public T TransformList<T>(string graphName, List<DataTransferObject> dtoList, string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
    {
      string dtoPath = xmlPath + graphName + "DTO.xml";
      Mapping mapping = Utility.Read<Mapping>(mappingUri, false);
      
      switch (graphName)
      {
        case "EQUIPMENT":
          List<EQUIPMENT> EQUIPMENTList = new List<EQUIPMENT>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            EQUIPMENTList.Add((EQUIPMENT)dto);
          }
          
          Utility.Write<List<EQUIPMENT>>(EQUIPMENTList, dtoPath);
          break;
        
        case "INSTRUMENT":
          List<INSTRUMENT> INSTRUMENTList = new List<INSTRUMENT>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            INSTRUMENTList.Add((INSTRUMENT)dto);
          }
          
          Utility.Write<List<INSTRUMENT>>(INSTRUMENTList, dtoPath);
          break;
        
        case "LINE":
          List<LINE> LINEList = new List<LINE>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            LINEList.Add((LINE)dto);
          }
          
          Utility.Write<List<LINE>>(LINEList, dtoPath);
          break;
        
        case "PipingComp":
          List<PipingComp> PipingCompList = new List<PipingComp>();
          
          foreach (DataTransferObject dto in dtoList)
          {
            PipingCompList.Add((PipingComp)dto);
          }
          
          Utility.Write<List<PipingComp>>(PipingCompList, dtoPath);
          break;
      }
      
      XsltArgumentList xsltArgumentList = new XsltArgumentList();
      xsltArgumentList.AddParam("dtoFilename", String.Empty, dtoPath);
      
      return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
    }
    
    public DataTransferObject Create(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "EQUIPMENT":
          dto = new EQUIPMENT("http://rdl.rdlfacade.org/data#R20981279868", graphName, identifier);
          break;
        
        case "INSTRUMENT":
          dto = new INSTRUMENT("http://rdl.rdlfacade.org/data#R98505918404", graphName, identifier);
          break;
        
        case "LINE":
          dto = new LINE("http://rdl.rdlfacade.org/data#R19192462550", graphName, identifier);
          break;
        
        case "PipingComp":
          dto = new PipingComp("http://rdl.rdlfacade.org/data#R65135201747", graphName, identifier);
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> CreateList(string graphName, List<string> identifiers)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();

      foreach (string identifier in identifiers)
      {
        dtoList.Add(Create(graphName, identifier));
      }

      return dtoList;
    }
    
    public DataTransferObject GetDTO(string graphName, string identifier)
    {
      DataTransferObject dto = null;
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EquipmentEQUIPMENTDO = 
            (from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
             where EquipmentList.ItemTag == identifier
             select EquipmentList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.Equipment>();   
        
          if (EquipmentEQUIPMENTDO != default(Bechtel.IntergraphDataLayer.SPPID.Equipment))
          {                        
            dto = new EQUIPMENT(EquipmentEQUIPMENTDO);
            dto.Identifier = EquipmentEQUIPMENTDO.ItemTag;
            break; 
          }
          
          break;
        
        case "INSTRUMENT":
          var InstrumentINSTRUMENTDO = 
            (from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
             where InstrumentList.ItemTag == identifier
             select InstrumentList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.Instrument>();   
        
          if (InstrumentINSTRUMENTDO != default(Bechtel.IntergraphDataLayer.SPPID.Instrument))
          {                        
            dto = new INSTRUMENT(InstrumentINSTRUMENTDO);
            dto.Identifier = InstrumentINSTRUMENTDO.ItemTag;
            break; 
          }
          
          break;
        
        case "LINE":
          var PipeRunLINEDO = 
            (from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
             where PipeRunList.ItemTag == identifier
             select PipeRunList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.PipeRun>();   
        
          if (PipeRunLINEDO != default(Bechtel.IntergraphDataLayer.SPPID.PipeRun))
          {                        
            dto = new LINE(PipeRunLINEDO);
            dto.Identifier = PipeRunLINEDO.ItemTag;
            break; 
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDO = 
            (from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
             where PipingCompList.ItemTag == identifier
             select PipingCompList).FirstOrDefault<Bechtel.IntergraphDataLayer.SPPID.PipingComp>();   
        
          if (PipingCompPipingCompDO != default(Bechtel.IntergraphDataLayer.SPPID.PipingComp))
          {                        
            dto = new PipingComp(PipingCompPipingCompDO);
            dto.Identifier = PipingCompPipingCompDO.ItemTag;
            break; 
          }
          
          break;
      }
      
      return dto;
    }
    
    public List<DataTransferObject> GetList(string graphName)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EQUIPMENTEquipmentDOList = 
            from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
            select EquipmentList;  
    
          foreach (var EquipmentDO in EQUIPMENTEquipmentDOList)
          {   					
            EQUIPMENT dto = new EQUIPMENT(EquipmentDO);
            dto.Identifier = EquipmentDO.ItemTag;
            dtoList.Add(dto);
          }
          
          break;
        
        case "INSTRUMENT":
          var INSTRUMENTInstrumentDOList = 
            from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
            select InstrumentList;  
    
          foreach (var InstrumentDO in INSTRUMENTInstrumentDOList)
          {   					
            INSTRUMENT dto = new INSTRUMENT(InstrumentDO);
            dto.Identifier = InstrumentDO.ItemTag;
            dtoList.Add(dto);
          }
          
          break;
        
        case "LINE":
          var LINEPipeRunDOList = 
            from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
            select PipeRunList;  
    
          foreach (var PipeRunDO in LINEPipeRunDOList)
          {   					
            LINE dto = new LINE(PipeRunDO);
            dto.Identifier = PipeRunDO.ItemTag;
            dtoList.Add(dto);
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDOList = 
            from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
            select PipingCompList;  
    
          foreach (var PipingCompDO in PipingCompPipingCompDOList)
          {   					
            PipingComp dto = new PipingComp(PipingCompDO);
            dto.Identifier = PipingCompDO.ItemTag;
            dtoList.Add(dto);
          }
          
          break;
      }
      
      return dtoList;
    }
    
    public Dictionary<string, string> GetListREST(string graphName)
    {
      Dictionary<string, string> identifierUriPairs = new Dictionary<string, string>();
      String endpoint = OperationContext.Current.Channel.LocalAddress.ToString();
      
      switch (graphName)
      {
        case "EQUIPMENT":
          var EQUIPMENTEquipmentDOList = 
            from EquipmentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Equipment>()
            select EquipmentList;  

          foreach (var EquipmentDO in EQUIPMENTEquipmentDOList)
          {
            string identifier = EquipmentDO.ItemTag;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "INSTRUMENT":
          var INSTRUMENTInstrumentDOList = 
            from InstrumentList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.Instrument>()
            select InstrumentList;  

          foreach (var InstrumentDO in INSTRUMENTInstrumentDOList)
          {
            string identifier = InstrumentDO.ItemTag;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "LINE":
          var LINEPipeRunDOList = 
            from PipeRunList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>()
            select PipeRunList;  

          foreach (var PipeRunDO in LINEPipeRunDOList)
          {
            string identifier = PipeRunDO.ItemTag;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
        
        case "PipingComp":
          var PipingCompPipingCompDOList = 
            from PipingCompList in _dataLayer.GetList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>()
            select PipingCompList;  

          foreach (var PipingCompDO in PipingCompPipingCompDOList)
          {
            string identifier = PipingCompDO.ItemTag;
            identifierUriPairs.Add(identifier, endpoint + "/" + graphName + "/" + identifier);  
          }
          
          break;
      }
      
      return identifierUriPairs;
    }
    
    public Response Post(string graphName, DataTransferObject dto)
    {
      Response response = new Response();
      
      if (dto != null)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            Bechtel.IntergraphDataLayer.SPPID.Equipment EQUIPMENTDO = (Bechtel.IntergraphDataLayer.SPPID.Equipment)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.Equipment>(EQUIPMENTDO));
            break;
          
          case "INSTRUMENT":
            Bechtel.IntergraphDataLayer.SPPID.Instrument INSTRUMENTDO = (Bechtel.IntergraphDataLayer.SPPID.Instrument)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.Instrument>(INSTRUMENTDO));
            break;
          
          case "LINE":
            Bechtel.IntergraphDataLayer.SPPID.PipeRun LINEDO = (Bechtel.IntergraphDataLayer.SPPID.PipeRun)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.PipeRun>(LINEDO));
            break;
          
          case "PipingComp":
            Bechtel.IntergraphDataLayer.SPPID.PipingComp PipingCompDO = (Bechtel.IntergraphDataLayer.SPPID.PipingComp)dto.GetDataObject();
            response.Append(_dataLayer.Post<Bechtel.IntergraphDataLayer.SPPID.PipingComp>(PipingCompDO));
            break;
        }
      }
      
      return response;
    }
    
    public Response PostList(string graphName, List<DataTransferObject> dtoList)
    {
      Response response = new Response();
      
      if (dtoList != null && dtoList.Count<DataTransferObject>() > 0)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            List<Bechtel.IntergraphDataLayer.SPPID.Equipment> EQUIPMENTDOList = new List<Bechtel.IntergraphDataLayer.SPPID.Equipment>();

            foreach (DataTransferObject dto in dtoList)
            {
              EQUIPMENTDOList.Add((Bechtel.IntergraphDataLayer.SPPID.Equipment)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.Equipment>(EQUIPMENTDOList));
            break;
          
          case "INSTRUMENT":
            List<Bechtel.IntergraphDataLayer.SPPID.Instrument> INSTRUMENTDOList = new List<Bechtel.IntergraphDataLayer.SPPID.Instrument>();

            foreach (DataTransferObject dto in dtoList)
            {
              INSTRUMENTDOList.Add((Bechtel.IntergraphDataLayer.SPPID.Instrument)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.Instrument>(INSTRUMENTDOList));
            break;
          
          case "LINE":
            List<Bechtel.IntergraphDataLayer.SPPID.PipeRun> LINEDOList = new List<Bechtel.IntergraphDataLayer.SPPID.PipeRun>();

            foreach (DataTransferObject dto in dtoList)
            {
              LINEDOList.Add((Bechtel.IntergraphDataLayer.SPPID.PipeRun)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.PipeRun>(LINEDOList));
            break;
          
          case "PipingComp":
            List<Bechtel.IntergraphDataLayer.SPPID.PipingComp> PipingCompDOList = new List<Bechtel.IntergraphDataLayer.SPPID.PipingComp>();

            foreach (DataTransferObject dto in dtoList)
            {
              PipingCompDOList.Add((Bechtel.IntergraphDataLayer.SPPID.PipingComp)dto.GetDataObject());
            }

            response.Append(_dataLayer.PostList<Bechtel.IntergraphDataLayer.SPPID.PipingComp>(PipingCompDOList));
            break;
        }
      }
      
      return response;
    }
    
    public object CreateList(string graphName, string dtoListString)
    {
      List<DataTransferObject> dtoList = new List<DataTransferObject>();
      
      if (dtoListString != null && dtoListString != String.Empty)
      {
        switch (graphName)
        {
          case "EQUIPMENT":
            XmlReader EQUIPMENTReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument EQUIPMENTFile = XDocument.Load(EQUIPMENTReader);
            EQUIPMENTFile = Utility.RemoveNamespace(EQUIPMENTFile);
            List<EQUIPMENT> EQUIPMENTList = new List<EQUIPMENT>(); 
            var EQUIPMENTQuery = from c in EQUIPMENTFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in EQUIPMENTQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              EQUIPMENT graphObject = new EQUIPMENT();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              EQUIPMENTList.Add(graphObject);
            }

            foreach (EQUIPMENT dto in EQUIPMENTList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "INSTRUMENT":
            XmlReader INSTRUMENTReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument INSTRUMENTFile = XDocument.Load(INSTRUMENTReader);
            INSTRUMENTFile = Utility.RemoveNamespace(INSTRUMENTFile);
            List<INSTRUMENT> INSTRUMENTList = new List<INSTRUMENT>(); 
            var INSTRUMENTQuery = from c in INSTRUMENTFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in INSTRUMENTQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              INSTRUMENT graphObject = new INSTRUMENT();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              INSTRUMENTList.Add(graphObject);
            }

            foreach (INSTRUMENT dto in INSTRUMENTList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "LINE":
            XmlReader LINEReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument LINEFile = XDocument.Load(LINEReader);
            LINEFile = Utility.RemoveNamespace(LINEFile);
            List<LINE> LINEList = new List<LINE>(); 
            var LINEQuery = from c in LINEFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in LINEQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              LINE graphObject = new LINE();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              LINEList.Add(graphObject);
            }

            foreach (LINE dto in LINEList)
            {
              dtoList.Add(dto);
            }
            
            break;
          
          case "PipingComp":
            XmlReader PipingCompReader = XmlReader.Create(new StringReader(dtoListString));
            XDocument PipingCompFile = XDocument.Load(PipingCompReader);
            PipingCompFile = Utility.RemoveNamespace(PipingCompFile);
            List<PipingComp> PipingCompList = new List<PipingComp>(); 
            var PipingCompQuery = from c in PipingCompFile.Elements("Envelope").Elements("Payload").Elements("DataTransferObject") select c;

            foreach (var dto in PipingCompQuery)
            {
              var propertyQuery = from c in dto.Elements("Properties").Elements("Property") select c;
              PipingComp graphObject = new PipingComp();

              foreach (var dtoProperty in propertyQuery)
              {
                for (int i = 0; i < graphObject._properties.Count; i++)
                {
                  if (dtoProperty.Attribute("name").Value == graphObject._properties[i].OIMProperty)
                  {
                    graphObject._properties[i].Value = dtoProperty.Attribute("value").Value.ToString();
                  }
                }
              }

              PipingCompList.Add(graphObject);
            }

            foreach (PipingComp dto in PipingCompList)
            {
              dtoList.Add(dto);
            }
            
            break;
        }
      }
      
      return dtoList;
    }
    
    public DataDictionary GetDictionary()
    {
      return _dataLayer.GetDictionary();
    }

    public Response RefreshDictionary()
    {
      return _dataLayer.RefreshDictionary();
    }
  }
}
