//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsA09FB6ED5A516D0CDEC6E7050A4BF7AE))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySetsA09FB6ED5A516D0CDEC6E7050A4BF7AE : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views
        /// </Summary>
        public ViewsForBaseEntitySetsA09FB6ED5A516D0CDEC6E7050A4BF7AE()
        {
            this.EdmEntityContainerName = "Entities";
            this.StoreEntityContainerName = "orgids_adiiringadapterdataLayerModelStoreContainer";
            this.HashOverMappingClosure = "fa63ea816f1302c621e8242a6f74d1df";
            this.HashOverAllExtentViews = "15c661daf357ec6dabbd630efe013d7a";
            this.ViewCount = 8;
        }
        
        // The method returns the view for the index given.
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                // return view for orgids_adiiringadapterdataLayerModelStoreContainer.InLinePipingComponent
                return new System.Collections.Generic.KeyValuePair<string, string>("orgids_adiiringadapterdataLayerModelStoreContainer.InLinePipingComponent", @"
    SELECT VALUE -- Constructing InLinePipingComponent
        [org.ids_adi.iring.adapter.dataLayer.Model.Store].InLinePipingComponent(T1.InLinePipingComponent_tag, T1.InLinePipingComponent_componentType, T1.InLinePipingComponent_diameter, T1.InLinePipingComponent_uomDiameter, T1.InLinePipingComponent_rating, T1.InLinePipingComponent_system, T1.InLinePipingComponent_unit, T1.InLinePipingComponent_projectNumber, T1.InLinePipingComponent_pid, T1.InLinePipingComponent_lineTag, T1.InLinePipingComponent_quantity, T1.InLinePipingComponent_isCloned)
    FROM (
        SELECT 
            T.tag AS InLinePipingComponent_tag, 
            T.componentType AS InLinePipingComponent_componentType, 
            T.diameter AS InLinePipingComponent_diameter, 
            T.uomDiameter AS InLinePipingComponent_uomDiameter, 
            T.rating AS InLinePipingComponent_rating, 
            T.system AS InLinePipingComponent_system, 
            T.unit AS InLinePipingComponent_unit, 
            T.projectNumber AS InLinePipingComponent_projectNumber, 
            T.pid AS InLinePipingComponent_pid, 
            T.lineTag AS InLinePipingComponent_lineTag, 
            T.quantity AS InLinePipingComponent_quantity, 
            T.isCloned AS InLinePipingComponent_isCloned, 
            True AS _from0
        FROM Entities.InLinePipingComponent AS T
    ) AS T1");
            }
            else
            {
                if ((index == 1))
                {
                    // return view for Entities.InLinePipingComponent
                    return new System.Collections.Generic.KeyValuePair<string, string>("Entities.InLinePipingComponent", @"
    SELECT VALUE -- Constructing InLinePipingComponent
        [org.ids_adi.iring.adapter.dataLayer.Model].InLinePipingComponent(T1.InLinePipingComponent_tag, T1.InLinePipingComponent_componentType, T1.InLinePipingComponent_diameter, T1.InLinePipingComponent_uomDiameter, T1.InLinePipingComponent_rating, T1.InLinePipingComponent_system, T1.InLinePipingComponent_unit, T1.InLinePipingComponent_projectNumber, T1.InLinePipingComponent_pid, T1.InLinePipingComponent_lineTag, T1.InLinePipingComponent_quantity, T1.InLinePipingComponent_isCloned)
    FROM (
        SELECT 
            T.tag AS InLinePipingComponent_tag, 
            T.componentType AS InLinePipingComponent_componentType, 
            T.diameter AS InLinePipingComponent_diameter, 
            T.uomDiameter AS InLinePipingComponent_uomDiameter, 
            T.rating AS InLinePipingComponent_rating, 
            T.system AS InLinePipingComponent_system, 
            T.unit AS InLinePipingComponent_unit, 
            T.projectNumber AS InLinePipingComponent_projectNumber, 
            T.pid AS InLinePipingComponent_pid, 
            T.lineTag AS InLinePipingComponent_lineTag, 
            T.quantity AS InLinePipingComponent_quantity, 
            T.isCloned AS InLinePipingComponent_isCloned, 
            True AS _from0
        FROM orgids_adiiringadapterdataLayerModelStoreContainer.InLinePipingComponent AS T
    ) AS T1");
                }
                else
                {
                    if ((index == 2))
                    {
                        // return view for orgids_adiiringadapterdataLayerModelStoreContainer.KOPot
                        return new System.Collections.Generic.KeyValuePair<string, string>("orgids_adiiringadapterdataLayerModelStoreContainer.KOPot", @"
    SELECT VALUE -- Constructing KOPot
        [org.ids_adi.iring.adapter.dataLayer.Model.Store].KOPot(T1.KOPot_tag, T1.KOPot_description)
    FROM (
        SELECT 
            T.tag AS KOPot_tag, 
            T.description AS KOPot_description, 
            True AS _from0
        FROM Entities.KOPot AS T
    ) AS T1");
                    }
                    else
                    {
                        if ((index == 3))
                        {
                            // return view for Entities.KOPot
                            return new System.Collections.Generic.KeyValuePair<string, string>("Entities.KOPot", @"
    SELECT VALUE -- Constructing KOPot
        [org.ids_adi.iring.adapter.dataLayer.Model].KOPot(T1.KOPot_tag, T1.KOPot_description)
    FROM (
        SELECT 
            T.tag AS KOPot_tag, 
            T.description AS KOPot_description, 
            True AS _from0
        FROM orgids_adiiringadapterdataLayerModelStoreContainer.KOPot AS T
    ) AS T1");
                        }
                        else
                        {
                            if ((index == 4))
                            {
                                // return view for orgids_adiiringadapterdataLayerModelStoreContainer.Line
                                return new System.Collections.Generic.KeyValuePair<string, string>("orgids_adiiringadapterdataLayerModelStoreContainer.Line", @"
    SELECT VALUE -- Constructing Line
        [org.ids_adi.iring.adapter.dataLayer.Model.Store].Line(T1.Line_tag, T1.Line_diameter, T1.Line_uomDiameter, T1.Line_system)
    FROM (
        SELECT 
            T.tag AS Line_tag, 
            T.diameter AS Line_diameter, 
            T.uomDiameter AS Line_uomDiameter, 
            T.system AS Line_system, 
            True AS _from0
        FROM Entities.Line AS T
    ) AS T1");
                            }
                            else
                            {
                                if ((index == 5))
                                {
                                    // return view for Entities.Line
                                    return new System.Collections.Generic.KeyValuePair<string, string>("Entities.Line", @"
    SELECT VALUE -- Constructing Line
        [org.ids_adi.iring.adapter.dataLayer.Model].Line(T1.Line_tag, T1.Line_diameter, T1.Line_uomDiameter, T1.Line_system)
    FROM (
        SELECT 
            T.tag AS Line_tag, 
            T.diameter AS Line_diameter, 
            T.uomDiameter AS Line_uomDiameter, 
            T.system AS Line_system, 
            True AS _from0
        FROM orgids_adiiringadapterdataLayerModelStoreContainer.Line AS T
    ) AS T1");
                                }
                                else
                                {
                                    if ((index == 6))
                                    {
                                        // return view for orgids_adiiringadapterdataLayerModelStoreContainer.VacuumTower
                                        return new System.Collections.Generic.KeyValuePair<string, string>("orgids_adiiringadapterdataLayerModelStoreContainer.VacuumTower", @"
    SELECT VALUE -- Constructing VacuumTower
        [org.ids_adi.iring.adapter.dataLayer.Model.Store].VacuumTower(T1.VacuumTower_tag, T1.VacuumTower_description)
    FROM (
        SELECT 
            T.tag AS VacuumTower_tag, 
            T.description AS VacuumTower_description, 
            True AS _from0
        FROM Entities.VacuumTower AS T
    ) AS T1");
                                    }
                                    else
                                    {
                                        if ((index == 7))
                                        {
                                            // return view for Entities.VacuumTower
                                            return new System.Collections.Generic.KeyValuePair<string, string>("Entities.VacuumTower", @"
    SELECT VALUE -- Constructing VacuumTower
        [org.ids_adi.iring.adapter.dataLayer.Model].VacuumTower(T1.VacuumTower_tag, T1.VacuumTower_description)
    FROM (
        SELECT 
            T.tag AS VacuumTower_tag, 
            T.description AS VacuumTower_description, 
            True AS _from0
        FROM orgids_adiiringadapterdataLayerModelStoreContainer.VacuumTower AS T
    ) AS T1");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            throw new System.IndexOutOfRangeException();
        }
    }
}
