<#@ include file=".\Templates\Common.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a DTOModel.tt.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ServiceModel;
using System.Xml.Xsl;
using org.iringtools.library;
using org.iringtools.adapter.dataLayer;
using org.iringtools.utility;

namespace <#= modelNamespace #> 
{
<#
foreach (GraphMap graphMap in mapping.graphMaps)
{
	graphMap.name = NameSafe(graphMap.name);
	graphMap.classId = graphMap.classId.Replace("rdl:", "http://rdl.rdlfacade.org/data#");
#>
	[DataContract(Name = "<#= graphMap.name #>", Namespace = "<#= dtoNamespace #>" )]
	[XmlRoot(Namespace = "<#= dtoNamespace #>")]
	public class <#= graphMap.name #> : DataTransferObject
	{
<#
	ProcessGraphMap(graphMap);
#>

		public <#= graphMap.name #>(string classId, string graphName, string identifier) 
			: base(classId, graphName)
		{   
<# 
	foreach (ExtendedDataProperty extendedDataProperty in extendedDataProperties)
	{

#>			_properties.Add(new DTOProperty(@"<#= extendedDataProperty.propertyName #>", @"<#= extendedDataProperty.dtoPropertyPath #>", null, typeof(<#= extendedDataProperty.dataType #>), <#= Convert.ToString(extendedDataProperty.isPropertyKey).ToLower() #>, <#= Convert.ToString(extendedDataProperty.isRequired).ToLower() #>));
<#
	}
#>

			Identifier = identifier;
			ClassId = classId;
		}
<# 
	foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
	{	
		string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
#>	
		public <#= graphMap.name + "(" + qualifiedDataObjectName #> dataObject)
			: this("<#= graphMap.classId #>", "<#= graphMap.name #>", null, dataObject) {}
			
		public <#= graphMap.name #>(string classId, string graphName, string identifier, <#= qualifiedDataObjectName #> dataObject) 
			: this(classId, graphName, identifier)
		{  
			if (dataObject != null)
			{
<# 
		foreach (ExtendedDataProperty extendedDataProperty in extendedDataProperties)
		{
#>
				<#= extendedDataProperty.propertyPath #> = (<#= extendedDataProperty.dataType #>)dataObject.<#= extendedDataProperty.propertyName #>;				
<#
		}
#>
			}
			
<#
		foreach (string initStatement in initStatements)
		{
#>
			<#= initStatement #>;
<#
		}
#>	      
			_dataObject = dataObject;
		} 
		
<#
	}
#>
		public <#= graphMap.name #>()
			: this("<#= graphMap.classId #>", "<#= graphMap.name #>", null) {}			

<#
	
	// Generate data contract member methods
	foreach (ExtendedDataProperty extendedDataProperty in extendedDataProperties)
	{
		String nullableType = extendedDataProperty.dataType;
		
		// Convert to nullable type for some data types
		if (extendedDataProperty.dataType == "DateTime" || 
			extendedDataProperty.dataType == "Double" || 
			extendedDataProperty.dataType == "Float" || 
			extendedDataProperty.dataType == "Decimal" ||
			extendedDataProperty.dataType.StartsWith("Int"))
		{
			nullableType = "global::System.Nullable<" + extendedDataProperty.dataType + ">";
		}
		
		if (extendedDataProperty.isDataMember)
		{
#>		[DataMember(Name = "<#= extendedDataProperty.propertyPath #>", EmitDefaultValue = false)] 
<#
		}
#>
		[XmlIgnore]
		public <#= nullableType + " " + extendedDataProperty.propertyPath #>
		{
			get
			{
				return (<#= extendedDataProperty.dataType #>)GetPropertyValue("<#= extendedDataProperty.dtoPropertyPath #>");
			}

			set
			{
				SetPropertyValue("<#= extendedDataProperty.dtoPropertyPath #>", value);
			}
		}
		
<#
	}
#>
		public override object GetDataObject()
		{
<# 
	int dataObjectMapCount = 0;
	
    foreach (DataObjectMap dataObjectMap in graphMap.dataObjectMaps)
	{	
		string qualifiedDataObjectName = GetQualifiedDataObjectName(dataObjectMap.name);
		
		if (!String.IsNullOrEmpty(dataObjectMap.inFilter))
		{
			// Determine whether "if" or "else if" to use
			if (++dataObjectMapCount == 1)
			{
#>
			if (<#= dataObjectMap.inFilter #>) // inFilter
			{
<#
			}
			else
			{
#>
			else if (<#= dataObjectMap.inFilter #>) // inFilter
			{
<# 
			}		
		}	
#>
				if (_dataObject == null)
				{
					_dataObject = new <#= qualifiedDataObjectName #>();
<# 
			foreach (ExtendedDataProperty extendedDataProperty in extendedDataProperties)
			{
				
				if (extendedDataProperty.isPropertyKey)
				{
#>					((<#= qualifiedDataObjectName #>)_dataObject).<#= extendedDataProperty.propertyName #> = (<#= extendedDataProperty.dataType #>)this._identifier;
<#				
				}
			}
#>
				}
				
<# 
			foreach (ExtendedDataProperty extendedDataProperty in extendedDataProperties)
			{
				
				if (!extendedDataProperty.isPropertyKey)
				{
				
#>				((<#= qualifiedDataObjectName #>)_dataObject).<#= extendedDataProperty.propertyName #> = (<#= extendedDataProperty.dataType #>)this.<#= extendedDataProperty.propertyPath #>;
<#				
				}
			}

		if (!String.IsNullOrEmpty(dataObjectMap.inFilter))
		{
#>
			}
<#		    
		}
	}	
#>

			return _dataObject;
		}
		
		public override string Serialize()
		{
			return Utility.SerializeDataContract<<#= graphMap.name #>>(this);
		}

		public override void Write(string path)
		{
			Utility.Write<<#= graphMap.name #>>(this, path);
		}
	    
		public override T Transform<T>(string xmlPath, string stylesheetUri, string mappingUri, bool useDataContractDeserializer)
		{
			string dtoPath = xmlPath + this.GraphName + ".xml";
			Mapping mapping = Utility.Read<Mapping>(mappingUri, false);

			List<<#= graphMap.name #>> list = new List<<#= graphMap.name #>> { this };
			Utility.Write<List<<#= graphMap.name #>>>(list, dtoPath);

			XsltArgumentList xsltArgumentList = new XsltArgumentList();
			xsltArgumentList.AddParam("dtoFilename", "", dtoPath);

			return Utility.Transform<Mapping, T>(mapping, stylesheetUri, xsltArgumentList, false, useDataContractDeserializer);
		}		
	}
	
<#
}
#>	
}

<#+
static string classPath = string.Empty;
static string dataContractPath = string.Empty;
static string templatePath = string.Empty;
static string dtoTemplatePath = string.Empty;
static List<ExtendedDataProperty> extendedDataProperties = new List<ExtendedDataProperty>();
static List<string> initStatements = new List<string>();

class ExtendedDataProperty : DataProperty 
{
	public string propertyPath;
	public string dtoPropertyPath;
	public bool isDataMember;
}

bool ContainsDataProperty(string propertyPath)
{
	foreach (ExtendedDataProperty extendedDataProperty in extendedDataProperties)
	{
		if (extendedDataProperty.propertyPath == propertyPath)
		{
			return true;
		}
	}
	
	return false;
}

void ProcessGraphMap(GraphMap graphMap) 
{  
	extendedDataProperties.Clear();
	initStatements.Clear();
	
	foreach (TemplateMap templateMap in graphMap.templateMaps)
	{
		classPath = string.Empty;
		dataContractPath = string.Empty;
		templatePath = string.Empty;
		dtoTemplatePath = string.Empty;
		ProcessTemplateMap(templateMap, graphMap.dataObjectMaps, true);
	}
}

void ProcessTemplateMap(TemplateMap templateMap, List<DataObjectMap> dataObjectMaps, bool isDataMember) 
{
	foreach (RoleMap roleMap in templateMap.roleMaps)              
	{ 
		templateMap.name = NameSafe(templateMap.name);
		roleMap.name = NameSafe(roleMap.name);
		
		if (templateMap.type == TemplateType.Property)
		{
			ProcessRoleMap(templateMap.name, roleMap, dataObjectMaps, isDataMember);
		}
		else if (templateMap.type == TemplateType.Relationship)
		{
		    roleMap.classMap.name = NameSafe(roleMap.classMap.name);
		    
			if (classPath == string.Empty)  // classMap is graphMap
			{
				classPath = "Template" + templateMap.name;
				dataContractPath = "tpl_" + templateMap.name;
				templatePath = "tpl_" + templateMap.name;
				dtoTemplatePath = "tpl:" + templateMap.name;
				initStatements.Add(dataContractPath + " = new " + classPath + "()");
				
			}
			else 
			{
				classPath += ".Template" + templateMap.name;	
				dataContractPath += ".tpl_" + templateMap.name;		
				templatePath += "_tpl_" + templateMap.name;
				dtoTemplatePath += ".tpl:" + templateMap.name;
				initStatements.Add(dataContractPath + " = new " + classPath + "()");
			}
#>
	[DataContract(Namespace = "<#= dtoNamespace #>" )]
	[XmlRoot(Namespace = "<#= dtoNamespace #>")]
	public class Template<#= templateMap.name #>
	{
		[DataContract(Namespace = "<#= dtoNamespace #>" )]
		[XmlRoot(Namespace = "<#= dtoNamespace #>")]
		public class Class<#= roleMap.classMap.name #>
		{
			[DataMember(EmitDefaultValue=false)]
			[XmlIgnore]
			public string Identifier { get; set; }
			
<#+
			ProcessClassMap(roleMap, dataObjectMaps);
#>		}

		[DataMember(Name = "<#= "tpl_" + roleMap.name + "_rdl_" + roleMap.classMap.name #>", EmitDefaultValue = false)]
		[XmlIgnore]
		public Class<#= roleMap.classMap.name + " tpl_" + roleMap.name + "_rdl_" + roleMap.classMap.name #> { get; set; }
	}
	
	[DataMember(EmitDefaultValue = false)]
	[XmlIgnore]
	public Template<#= templateMap.name + " tpl_" + templateMap.name #> { get; set; }     
       
<#+
		}
	}
}

void ProcessRoleMap(String templateName, RoleMap roleMap, List<DataObjectMap> dataObjectMaps, bool isDataMember)
{
	foreach (DataObjectMap dataObjectMap in dataObjectMaps)
	{	
		DataObject dataObject = GetDataObject(dataObjectMap.name);
		  
		if (dataObject != null)
		{		
			bool foundDataProperty = false;
			
			foreach (DataProperty dataProperty in dataObject.dataProperties)
			{
				if (roleMap.propertyName == dataProperty.propertyName)
				{
					ExtendedDataProperty extendedDataProperty = new ExtendedDataProperty();
					
					extendedDataProperty.propertyName = dataProperty.propertyName;
					extendedDataProperty.dataType = dataProperty.dataType;
					extendedDataProperty.isPropertyKey = dataProperty.isPropertyKey;
					extendedDataProperty.isRequired = dataProperty.isRequired;
					
					if (templatePath == String.Empty)
					{
					  extendedDataProperty.propertyPath = "tpl_" + templateName + "_tpl_" + roleMap.name;
					  extendedDataProperty.dtoPropertyPath = "tpl:" + templateName + ".tpl:" + roleMap.name;
					}
					else
					{
					  extendedDataProperty.propertyPath = templatePath + "_tpl_" + templateName + "_tpl_" + roleMap.name;
					  extendedDataProperty.dtoPropertyPath = dtoTemplatePath + ".tpl:" + templateName + ".tpl:" + roleMap.name;
					}
					
					if (ContainsDataProperty(extendedDataProperty.propertyPath))
					{
					  extendedDataProperty.propertyPath += extendedDataProperties.Count;	
					  extendedDataProperty.dtoPropertyPath += extendedDataProperties.Count;				
					}
					
					extendedDataProperty.isDataMember = isDataMember;					
					extendedDataProperties.Add(extendedDataProperty);
					
					if (!isDataMember)
					{
					    initStatements.Add(dataContractPath + ".tpl_" + templateName + "_tpl_" + roleMap.name + " = " + extendedDataProperty.propertyPath);
#>
			[DataMember(EmitDefaultValue = false)]
			public <#= dataProperty.dataType + " tpl_" + templateName + "_tpl_" + roleMap.name #> { get; set; }
					
<#+
					}
					
					foundDataProperty = true;
					break;
				}
			}
			
			//if (!foundDataProperty)
			//{
			//	throw new Exception ("Property \"" + roleMap.propertyName + "\" does not exist in data object \"" + dataObject.objectName + "\" of data dictionary.");
			//}
			
			break;
		}
		else
		{
			throw new Exception("Data object map \"" + dataObjectMap.name + "\" does not exist in data dictionary.");
		}
	}
}

void ProcessClassMap(RoleMap roleMap, List<DataObjectMap> dataObjectMaps)
{			
	classPath += ".Class" + roleMap.classMap.name;
	dataContractPath += ".tpl_" + roleMap.name + "_rdl_" + roleMap.classMap.name;		
	templatePath += "_tpl_" + roleMap.name + "_rdl_" + roleMap.classMap.name;
	dtoTemplatePath += ".tpl:" + roleMap.name + ".rdl:" + roleMap.classMap.name;
	initStatements.Add(dataContractPath + " = new " + classPath + "()");
	
	string combinedClassId = String.Empty;
	string[] classIds = roleMap.classMap.identifier.Split(new string[]{","}, StringSplitOptions.RemoveEmptyEntries);
	
	foreach (string classId in classIds)
	{
		if (combinedClassId != String.Empty)
		{
			combinedClassId += " + ";
		}
		
		combinedClassId += "((GetPropertyValueByInternalName(\"" + classId.Trim() + "\") != null) ? GetPropertyValueByInternalName(\"" + classId.Trim() + "\").ToString() : \"\")";
	}
	
	initStatements.Add(dataContractPath + ".Identifier = " + combinedClassId);
	
	string lastClassMapPath = classPath;
	string lastDataContractPath = dataContractPath;
	string lastTemplateMapPath = templatePath;
	string lastDtoTemplateMapPath = dtoTemplatePath;
			
	foreach (TemplateMap templateMap in roleMap.classMap.templateMaps)
	{
		classPath = lastClassMapPath;
		dataContractPath = lastDataContractPath;
		templatePath = lastTemplateMapPath;
		dtoTemplatePath = lastDtoTemplateMapPath;
		ProcessTemplateMap(templateMap, dataObjectMaps, false);
	}
}
#>