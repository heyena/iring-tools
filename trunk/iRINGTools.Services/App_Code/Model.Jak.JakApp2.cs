//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Globalization;
using System.Collections.Generic;
using Iesi.Collections.Generic;
using org.iringtools.library;

namespace org.iringtools.adapter.datalayer.proj_Jak.JakApp2
{
  public class VALVE2 : IDataObject
  {
    public virtual String Id { get; set; }
    public virtual String CODE_COM_GRP
    {
      get { return Id; }
      set { Id = value; }
    }
    public virtual String TAG { get; set; }
    public virtual String UNIT { get; set; }
    public virtual String ENG_SYS { get; set; }
    public virtual String ENG_SYS_CLIENT { get; set; }
    public virtual String CODE_COM_GRP_CLIENT { get; set; }
    public virtual Decimal? SEQUENCE_NUMBER { get; set; }
    public virtual String SUFFIX { get; set; }
    
    public virtual object GetPropertyValue(string propertyName)
    {
      switch (propertyName)
      {
        case "Id": return Id;
        case "CODE_COM_GRP": return CODE_COM_GRP;
        case "TAG": return TAG;
        case "UNIT": return UNIT;
        case "ENG_SYS": return ENG_SYS;
        case "ENG_SYS_CLIENT": return ENG_SYS_CLIENT;
        case "CODE_COM_GRP_CLIENT": return CODE_COM_GRP_CLIENT;
        case "SEQUENCE_NUMBER": return SEQUENCE_NUMBER;
        case "SUFFIX": return SUFFIX;
        default: throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual void SetPropertyValue(string propertyName, object value)
    {
      switch (propertyName)
      {
        case "Id":
          Id = Convert.ToString(value);
          break;
        case "CODE_COM_GRP":
          CODE_COM_GRP = Convert.ToString(value);
          break;
        case "TAG":
          TAG = Convert.ToString(value);
          break;
        case "UNIT":
          UNIT = Convert.ToString(value);
          break;
        case "ENG_SYS":
          ENG_SYS = Convert.ToString(value);
          break;
        case "ENG_SYS_CLIENT":
          ENG_SYS_CLIENT = Convert.ToString(value);
          break;
        case "CODE_COM_GRP_CLIENT":
          CODE_COM_GRP_CLIENT = Convert.ToString(value);
          break;
        case "SEQUENCE_NUMBER":
          SEQUENCE_NUMBER = Convert.ToDecimal(value);
          break;
        case "SUFFIX":
          SUFFIX = Convert.ToString(value);
          break;
        default:
          throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual IList<IDataObject> GetRelatedObjects(string relatedObjectType)
    {
      switch (relatedObjectType)
      {
        default:
          throw new Exception("Related object [" + relatedObjectType + "] does not exist.");
      }
    }
  }
}

namespace org.iringtools.adapter.datalayer.proj_Jak.JakApp2
{
  public class VALVES : IDataObject
  {
    public virtual String Id { get; set; }
    public virtual String VSUFFIX
    {
      get { return Id; }
      set { Id = value; }
    }
    public virtual String VAREA { get; set; }
    public virtual String VTYP { get; set; }
    public virtual String VTRAIN { get; set; }
    public virtual String VNUM { get; set; }
    
    public virtual object GetPropertyValue(string propertyName)
    {
      switch (propertyName)
      {
        case "Id": return Id;
        case "VSUFFIX": return VSUFFIX;
        case "VAREA": return VAREA;
        case "VTYP": return VTYP;
        case "VTRAIN": return VTRAIN;
        case "VNUM": return VNUM;
        default: throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual void SetPropertyValue(string propertyName, object value)
    {
      switch (propertyName)
      {
        case "Id":
          Id = Convert.ToString(value);
          break;
        case "VSUFFIX":
          VSUFFIX = Convert.ToString(value);
          break;
        case "VAREA":
          VAREA = Convert.ToString(value);
          break;
        case "VTYP":
          VTYP = Convert.ToString(value);
          break;
        case "VTRAIN":
          VTRAIN = Convert.ToString(value);
          break;
        case "VNUM":
          VNUM = Convert.ToString(value);
          break;
        default:
          throw new Exception("Property [" + propertyName + "] does not exist.");
      }
    }
    
    public virtual IList<IDataObject> GetRelatedObjects(string relatedObjectType)
    {
      switch (relatedObjectType)
      {
        default:
          throw new Exception("Related object [" + relatedObjectType + "] does not exist.");
      }
    }
  }
}
