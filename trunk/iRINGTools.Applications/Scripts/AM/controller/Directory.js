/*
 * File: Scripts/AM/controller/Directory.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.controller.Directory', {
  extend: 'Ext.app.Controller',

  models: [
    'DirectoryModel',
    'BaseUrlModel',
    'DataLayerModel',
    'ContextModel',
    'DynamicModel',
    'FileDownloadModel',
    'VirtualPropertyModel'
  ],
  stores: [
    'DirectoryTreeStore',
    'ContextStore',
    'BaseUrlStore',
    'DataLayerStore',
    'FileDownloadStore',
    'VirtualPropertyStore'
  ],
  views: [
    'common.PropertyPanel',
    'common.CenterPanel',
    'common.ContentPanel',
    'directory.DirectoryPanel',
    'directory.DirectoryTree',
    'directory.ApplicationWindow',
    'directory.ScopeWindow',
    'directory.DataLayerForm',
    'directory.DataGridPanel',
    'directory.GraphMapForm',
    'directory.GraphMapWindow',
    'directory.ScopeForm',
    'directory.ContextCombo',
    'directory.DataLayerWindow',
    'directory.AvailBaseUrlCombo',
    'directory.DataLayerCombo',
    'directory.ApplicationForm',
    'menus.ScopesMenu',
    'menus.AppDataMenu',
    'menus.ApplicationMenu',
    'menus.ValueListsMenu',
    'menus.ValueListMenu',
    'menus.GraphsMenu',
    'menus.GraphMenu',
    'menus.TemplatemapMenu',
    'menus.RolemapMenu',
    'menus.ClassmapMenu',
    'menus.ValueListMapMenu',
    'menus.AppDataRefreshMenu',
    'directory.FileUpoadForm',
    'directory.FileUploadWindow',
    'directory.DownloadGrid',
    'directory.FileDownloadWindow',
    'directory.ImportCacheForm',
    'directory.ImportCacheWindow',
    'directory.DownloadForm',
    'directory.VirtualPropertyForm',
    'directory.VirtualPropertyGrid',
    'directory.VirtualPropertyWindow',
    'menus.VirtualPropertyMenu'
  ],

  refs: [
    {
      ref: 'dirTree',
      selector: 'viewport > directorypanel > directorytree'
    },
    {
      ref: 'dirProperties',
      selector: 'viewport > directorypanel > propertypanel'
    },
    {
      ref: 'mainContent',
      selector: 'viewport > centerpanel > contentpanel'
    },
    {
      ref: 'contextCombo',
      selector: 'contextcombo'
    },
    {
      ref: 'datalayerCombo',
      selector: 'datalayercombo'
    },
    {
      ref: 'baseUrlCombo',
      selector: 'availbaseurlcombo'
    }
  ],

  handleMetachange: function() {
    var me = this,
      store = grid.getStore(),
      columns = meta.columns;

    grid.metachange = true;
    grid.reconfigure(store, columns);
  },

  onBeforeLoad: function(store, operation, eOpts) {
    var me = this;
    if (operation.node !== null) {
      var operationNode = operation.node.data;
      var params = store.proxy.extraParams;

      if (operationNode.type !== null)
      params.type = operationNode.type;

      if (operationNode.record !== null && operationNode.record.Related !== null)
      params.related = operationNode.record.Related;

      if (operationNode.record !== null) {
        operationNode.leaf = false;

        if (operationNode.record.context)
        params.contextName = operationNode.record.context;

        if (operationNode.record.BaseUrl)
        params.baseUrl = operationNode.record.BaseUrl;

        if (operationNode.record.endpoint)
        params.endpoint = operationNode.record.endpoint;

        if (operationNode.record.securityRole)
        params.security = operationNode.record.securityRole;

        if (operationNode.text !== null)
        params.text = operationNode.text;
      }
      else if (operationNode.property !== null) {
        operationNode.leaf = false;

        if (operationNode.property.context)
        params.contextName = operationNode.property.context;

        if (operationNode.property.endpoint)
        params.endpoint = operationNode.property.endpoint;

        if (operationNode.property.baseUrl)
        params.baseUrl = operationNode.property.baseUrl;

        if (operationNode.text !== null)
        params.text = operationNode.text;
      }
    }
  },

  newOrEditScope: function(item, e, eOpts) {

    var me = this;
    var path, state, context, description, wintitle, displayName;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var cacheDBConnStr = 'Data Source={hostname\\dbInstance};Initial Catalog={dbName};User ID={userId};Password={password}';

    context = node.data.record.context;

    if(node.parentNode) {
      path = node.internalId;
    } else {
      path = '';
    }

    if(item.itemId == 'editfolder' && node.data.record !== undefined) {
      name = node.data.record.Name;
      displayName = node.data.record.DisplayName;
      description = node.data.record.Description;
      wintitle = 'Edit Scope \"' + node.data.text + '\"';
      state = 'edit';
      if (node.data.record.Configuration != null && node.data.record.Configuration.AppSettings != null &&
      node.data.record.Configuration.AppSettings.Settings != null) {
        Ext.each(node.data.record.Configuration.AppSettings.Settings, function (settings, index) {
          if (settings.Key == "iRINGCacheConnStr")
          cacheDBConnStr = settings.Value;
        });
      }

    } else {
      name = '';
      //displayName = '';
      state = 'new';
      wintitle = 'Add Scope';
    }

    var conf = {
      id: 'tab-' + node.data.id,
      title: wintitle,
      iconCls: 'tabsScope'
    };

    var win = Ext.widget('scopewindow', conf);

    win.on('save', function () {
      win.destroy();
      //me.onAppDataRefreshClick(item, e, eOpts);

    }, me);

    win.on('cancel', function () {
      win.destroy();
    }, me);

    var form = win.down('form');
    form.node = node;

    var combo = me.getContextCombo();

    combo.store.on('load', function(store, action) {
      if(context === '') {
        if(store)
        if(store.data.items[0])
        context = store.data.items[0].data.context;
      }
    }, me);

    combo.on('afterrender', function (combo, eopts) {
      if(context !== '' && context !== undefined && combo.store.data.length == 1)
      combo.setValue(context);
    }, me);

    form.getForm().findField('path').setValue(path);
    form.getForm().findField('state').setValue(state);
    form.getForm().findField('oldContext').setValue(context);
    form.getForm().findField('description').setValue(description);
    form.getForm().findField('name').setValue(name);
    form.getForm().findField('displayName').setValue(displayName);
    form.getForm().findField('contextName').setValue(name);
    form.getForm().findField('cacheDBConnStr').setValue(cacheDBConnStr);

    win.show();
  },

  deleteScope: function(item, e, eOpts) {
    var me = this;
    var tree = this.getDirTree();
    var parent, path;
    var node = tree.getSelectedNode();

    Ext.Ajax.request({
      url: 'directory/DeleteScope',//'directory/deleteEntry',
      method: 'POST',
      params: {
        'nodeid': node.data.id
        //'path': node.data.id,
        //'type': 'folder',
        //'baseUrl': '',
        //'contextName': node.data.property.Context
      },
      success: function () {
        var parentNode = node.parentNode;
        parentNode.removeChild(node);                   
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () {
        var message = 'Error deleting folder!';
        showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
      }
    });
  },

  newOrEditEndpoint: function(item, e, eOpts) {
    var me = this;
    var name,displayName, description, datalayer, assembly,application, baseurl, showconfig,endpoint,wintitle, state, path, context;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();

    context = node.parentNode.data.text;//node.data.record.ContextName;
    if(item.itemId == 'editendpoint') {
      //name = node.data.record.Name;
      name = node.data.record.Name;
      displayName = node.data.record.DisplayName;
      description = node.data.record.Description;
      datalayer = node.data.record.DataLayer;
      assembly = node.data.record.Assembly;
      application = name;
      wintitle =  'Edit Application \"' + node.data.text + '\"';
      endpoint = node.data.record.Name;//node.data.record.Endpoint; 
      state = 'edit';

    } else {
      wintitle = 'Add Application';
      //state = 'new';
      state = '';
      application = '';
      context = node.data.record.Name;
      path = node.internalId;
    }



    var conf = { 
      id: 'newwin-' + node.data.id, 
      title: wintitle, 
      iconCls: 'tabsApplication',
      node: node,
      modal:true
    };

    var win = Ext.widget('applicationwindow', conf);

    var form = win.down('form');

    win.on('save', function () { 
      win.close();
      //me.onAppDataRefreshClick(item, e, eOpts);
      //tree.expandPath(node.getPath(), 'text');
    }, me);

    win.on('Cancel', function () {
      win.close();
    }, me);

    var dlCmb = me.getDatalayerCombo();

    dlCmb.on('select', function(combo, records, eopts) {
      if (records !== null && node.data.record !== null) {
        form.getForm().findField('assembly').setValue(records[0].data.assembly);
      }
    }, me);

    dlCmb.on('afterrender', function (combo, eopts) {
      if (assembly !== '') {
        combo.setValue(assembly);
      }
    }, me);

    form.getForm().findField('path').setValue(path);
    form.getForm().findField('state').setValue(state);
    form.getForm().findField('scope').setValue(context);
    form.getForm().findField('oldAssembly').setValue(assembly);
    //form.getForm().findField('name').setValue(endpoint);
    form.getForm().findField('name').setValue(name);
    form.getForm().findField('displayName').setValue(displayName);

    form.getForm().findField('description').setValue(description);
    //form.getForm().findField('context').setValue(context);
    form.getForm().findField('context').setValue(name);
    form.getForm().findField('assembly').setValue(assembly);
    form.getForm().findField('application').setValue(application);
    win.show();
  },

  deleteEndpoint: function(item, e, eOpts) {
    var me = this;

    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    Ext.Ajax.request({
      url: 'directory/deleteapplication',
      method: 'POST',
      params: {
        nodeid: node.data.id
        //'path': node.data.id,
        //'type': 'endpoint',
        //'baseUrl': node.data.record.BaseUrl,
        //'contextName': node.data.property.Context
      },
      success: function () {
        var parentNode = node.parentNode;
        parentNode.removeChild(node);                   
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () {
        //Ext.Msg.alert('Warning', 'Error!!!');
        var message = 'Error deleting endpoint!';
        showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
      }
    });
  },

  onNewDataLayer: function(item, e, eOpts) {
    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    conf = {
      id: 'tab-' + node.data.id,
      title: 'Add Data Layer'
    };
    var win = Ext.widget('datalayerwindow', conf);

    var form = win.down('form');
    form.getForm().findField('state').setValue('new');

    win.on('Save', function () {
      tree.store.load();
      if (node.get('expanded') === false)
      node.expand();
    }, me);

    win.on('Cancel', function () {
      win.close();
    }, me);

    win.show();
  },

  onRegenerateAll: function(item, e, eOpts) {
    var me = this;
    Ext.Ajax.request({
      url:'AdapterManager/RegenAll', //'directory/RegenAll',
      method: 'GET',
      success: function (result, request) {
        var responseObj = Ext.decode(result.responseText);
        var msg = '';
        for (var i = 0; i < responseObj.StatusList.length; i++) {
          var status = responseObj.StatusList[i];
          if (msg !== '') {
            msg += '\r\n';
          }
          msg += status.Identifier + ':\r\n';
          for (var j = 0; j < status.Messages.length; j++) {
            msg += '    ' + status.Messages[j] + '\r\n';
          }
        }
        showDialog(600, 340, 'NHibernate Regeneration Result', msg, Ext.Msg.OK, null);
      },
      failure: function (result, request) {
        var msg = result.responseText;
        showDialog(500, 240, 'NHibernate Regeneration Error', msg, Ext.Msg.OK, null);
      }
    });
  },

  onShowDataGrid: function(item, e, eOpts) {
    var me = this;
    var tree = this.getDirTree();
    var node = tree.getSelectedNode();
    content = me.getMainContent();
    //contextName = node.data.property.context,
    contextName = node.parentNode.parentNode.parentNode.data.property['Internal Name'];
    //endpointName = node.data.property.endpoint,
    endpointName = node.parentNode.parentNode.data.property['Internal Name'];
    //baseurl = node.data.property.baseUrl;

    var graph = node.data.text;
    //var title = 'Data Grid ' + contextName + '.' + endpointName + '.' + graph;
    var title = contextName + '.' + endpointName + '.' + graph;
    var gridPanel = content.down('dynamicgrid[title=' + title + ']');

    if (!gridPanel) {

      content.getEl().mask("Loading...", "x-mask-loading");
      gridPanel = Ext.widget('dynamicgrid', { 'title': title });

      gridStore = gridPanel.getStore();
      var gridProxy = gridStore.getProxy();

      gridStore.on('beforeload', function (store, action) {
        var params = store.proxy.extraParams;
        //params.context = contextName;
        params.start = (store.currentPage - 1) * store.pageSize;
        params.limit = store.pageSize;
        params.app = endpointName;//node.parentNode.parentNode.data.property.Name;
        params.scope = contextName;//node.parentNode.parentNode.parentNode.data.property.Name ;
        //params.endpoint = endpointName;
        //params.baseUrl = baseurl;
        params.graph = graph;
      }, me);

      gridProxy.on('exception', function (proxy, response, operation) {
        content.getEl().unmask();
        gridPanel.destroy();
        var rtext = response.responseText;
        var error = 'SUCCESS = FALSE';
        var index = rtext.toUpperCase().indexOf(error);
        var msg = rtext.substring(index + error.length + 2, rtext.length - 1);
        showDialog(500, 300, 'Error', msg, Ext.Msg.OK, null);
      }, me);

      gridStore.load({
        callback: function (records, response) {
          if(records!=undefined){
            if (records[0]) {
              gridPanel.reconfigure(gridStore, records[0].store.proxy.reader.metaData.columns);
              content.getEl().unmask();
            } else {
              if (response){
                //showDialog(200, 50, 'Warning', 'Authentication failure', Ext.Msg.OK, null);
                showDialog(500, 300, 'Error', response.response.responseText, Ext.Msg.OK, null);
              }
              return true;
            }
          }

        }
      });
      content.getEl().unmask();
      content.add(gridPanel);
    }
    content.setActiveTab(gridPanel);
  },

  onRefreshFacade: function(item, e, eOpts) {
    var me = this;
    var tree = this.getDirTree(),
      node = tree.getSelectedNode();

    tree.getEl().mask('Loading', 'x-mask-loading');
    Ext.Ajax.request({
      url: 'facade/refreshFacade',
      method: 'POST',
      params: {
        //contextName: node.data.id,
        scope:node.data.id,
        //baseUrl: node.data.property.baseUrl
      },
      success: function (o) {
        tree.onReload();
        tree.getEl().unmask();
      },
      failure: function (f, a) {
        tree.getEl().unmask();
        showDialog(400,300, 'Warning', 'Error Refreshing Facade!!!', Ext.Msg.OK, null);
      }
    });
  },

  onConfigureEndpoint: function(item, e, eOpts) {

    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var datalayer = node.data.record.DataLayer;

    switch(datalayer) {
      case 'NHibernateLibrary':
      me.application.fireEvent('confignhibernate', me);
      break;
      case 'SpreadsheetLibrary':
      me.application.fireEvent('configspreadsheet', me);
      break;
      default:
      showDialog(300, 300, 'Warning', 'Datalayer ' + datalayer + ' is not configurable...', Ext.msg.OK, null);
      break;
    }

  },

  showContextMenu: function(dataview, record, item, index, e, eOpts) {
    var me = this,
      tree = me.getDirTree();
    e.stopEvent();
    node = record.store.getAt(index);

    tree.getSelectionModel().select(node);
    //tree.onClick(dataview, record, 0, index, e);

    var obj = node.data;

    if (obj.type === "ScopesNode") {
      var scopesMenu = Ext.widget('scopesmenu');
      scopesMenu.showAt(e.getXY());
    } else if (obj.type === "ScopeNode") {
      var scopeMenu = Ext.widget('scopemenu');
      scopeMenu.showAt(e.getXY());
    } else if (obj.type === "ApplicationNode") {
      var applicationMenu = Ext.widget('applicationmenu');
      applicationMenu.showAt(e.getXY());
    } else if (obj.type === "DataObjectNode") {
      var appDataMenu = Ext.widget('appdatamenu');  
      appDataMenu.showAt(e.getXY());
    } else if (obj.type === "ValueListsNode") {
      var valueListsMenu = Ext.widget('valuelistsmenu');
      valueListsMenu.showAt(e.getXY());
    } else if (obj.type === "ValueListNode") {
      var valueListMenu = Ext.widget('valuelistmenu');
      valueListMenu.showAt(e.getXY());
    } else if (obj.type === "ListMapNode") {
      var valueListMapMenu = Ext.widget('valuelistmapmenu');
      valueListMapMenu.showAt(e.getXY());
    } else if (obj.type === "GraphsNode") {
      scopForExport = node.parentNode.parentNode.data.text;
      appForExport = node.parentNode.data.text;  
      var graphsMenu = Ext.widget('graphsmenu');
      graphsMenu.showAt(e.getXY());
    } else if (obj.type === "GraphNode") {
      var graphMenu = Ext.widget('graphmenu');
      graphMenu.showAt(e.getXY());
    }else if (obj.type === "DataObjectsNode") {
      var graphMenu = Ext.widget('appdatarefreshmenu');
      if (node.data.property["Data Mode"] == "Live") {
        if (node.parentNode.data.property["LightweightDataLayer"] == "No") {
          graphMenu.items.map['switchToCached'].setVisible(true);
          graphMenu.items.map['switchToLive'].setVisible(false);

        }
        graphMenu.items.map['refreshCacheId'].setVisible(true);	
        graphMenu.items.map['importCacheId'].setVisible(true);	
      }else if (node.parentNode.data.property["LightweightDataLayer"] == "No") {
        graphMenu.items.map['switchToCached'].setVisible(false);
        graphMenu.items.map['switchToLive'].setVisible(true);
        graphMenu.items.map['refreshCacheId'].setVisible(false);	
        graphMenu.items.map['importCacheId'].setVisible(false);	
      }

      graphMenu.showAt(e.getXY());
    }else if(obj.type === "DataPropertyNode"){
      if(obj.property){
        if(obj.property.isVirtual=='True'){
          var virtualpropertymenu = Ext.widget('virtualpropertymenu');
          virtualpropertymenu.showAt(e.getXY());
        }

      }

    }

  },

  onAppDataRefreshClick: function(item, e, eOpts) {

    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var store = tree.store;//me.store;

    if (!node)
    node = me.getRootNode();
    var state = tree.getState();
    var nodeState = '/Scopes/'+node.internalId;
    //var path = node.getPath('text');
    //store.load(node);
    tree.body.mask('Loading...', 'x-mask-loading');
    //store.load(node);
    //store.load({
    //});
    store.load({
      node:node,
      callback: function (records, options, success) {
        //var nodes = state.expandedNodes || [],
        //len = nodes.length;
        //tree.collapseAll();
        //Ext.each(nodes, function (path) {
        //tree.expandPath('/Scopes/test/ABC/Data Objects', 'text');
        //});
        tree.body.unmask();
      }

    });

  },

  onShowDataGridd: function(dataview, record, item, index, e, eOpts) {
    var me = this;
    if(record.data.type == 'GraphNode')
    me.application.fireEvent('opengraphmap', me);    
    //me.onShowGrap(item, e, eOpts);
    else
    me.onShowDataGrid(item, e, eOpts);
  },

  onTextfieldBlur: function(component, e, eOpts) {

    if(component.dataIndex!=undefined){
      var me = this;
      var gridPanel  = me.getMainContent().activeTab;
      var gridStore = gridPanel.getStore();
      var gridProxy = gridStore.getProxy();
      gridStore.currentPage = 1;
      gridProxy.on('exception', function (proxy, response, operation) {
        //centerPanel.getEl().unmask();
        gridPanel.destroy();
        var rtext = response.responseText;
        if(rtext!=undefined){
          var error = 'SUCCESS = FALSE';
          var index = rtext.toUpperCase().indexOf(error);
          msg = rtext;
          showDialog(500, 300, 'Error', msg, Ext.Msg.OK, null);

        }

      }, me);
      gridStore.load({
        callback: function (records, response) 
        {                                     
          if(records!=undefined && records[0]!=undefined && records[0].store.proxy.reader.metaData) {
            gridPanel.reconfigure(gridStore,  records[0].store.proxy.reader.metaData.columns);
          }

        }
      });

    }
  },

  onFileUpload: function(item, e, eOpts) {

    var me = this;
    var win = Ext.widget('fileuploadwindow');
    var form = win.down('form');
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();

    var formRecord = {
      scope: node.parentNode.data.text,
      application: node.data.text 
    };


    form.getForm().setValues(formRecord);

    win.on('Save', function () {
      win.destroy();
    }, me);

    win.on('reset', function () {
      win.destroy();
    }, me);

    win.show();
  },

  onFileDownload: function(item, e, eOpts) {
    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var win = Ext.widget('filedownloadwindows');
    var scope = node.parentNode.data.text;
    var app = node.data.text;
    //win.scope = node.parentNode.data.text;
    //win.application = node.data.text ;
    var form = win.down('downloadform');
    var formRecord = {
      scope: scope,//node.parentNode.data.text,
      application: app 
    };
    var grid = form.down('grid');
    var store = grid.getStore();
    var storeProxy = store.getProxy();
    form.getForm().setValues(formRecord);
    /*
    win.on('Save', function () {
    win.destroy();
    }, me);

    win.on('reset', function () {
    win.destroy();
    }, me);
    */
    store.on('beforeload', function (store, action) {
      var params = storeProxy.extraParams;
      params.scope = scope;
      params.application = app;
    }, me);


    store.load({
      callback: function (records, options, success) {
        if(store.data.length == 0){
          store.add({'File':'No Record found to download'});
          grid.reconfigure(store);
        }



      }
    });

    win.show();
  },

  onAddSettings: function(button, e, eOpts) {
    var me = this;
    var nameID;
    var valueID;
    var myFieldSet = Ext.getCmp('settingfieldset');
    if(myFieldSet.items.items.length>=1){
      var nameID = 'key'+(myFieldSet.items.items.length+1);
      var valueID = 'value'+(myFieldSet.items.items.length+1);
    }else{
      var nameID = 'key1';
      var valueID = 'value1';
    }
    var newSetting = me.addSettings("", "", nameID, valueID);
    myFieldSet.add(newSetting);
    myFieldSet.doLayout();
    myFieldSet.items.items[myFieldSet.items.length-1].items.items[0].allowBlank = false;

  },

  onApplicationFormAfterRender: function(component, eOpts) {
    var key = '';
    var value = '';
    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    if (node.data.record != null) {
      if(node.data.record.Configuration!=null){
        if (node.data.record.Configuration.AppSettings != null) {
          if(node.data.record.Configuration.AppSettings.Settings!=null){
            for(var i=0;i<node.data.record.Configuration.AppSettings.Settings.length;i++){
              key = node.data.record.Configuration.AppSettings.Settings[i].Key;
              value = node.data.record.Configuration.AppSettings.Settings[i].Value;
              var newSetting = me.addSettings(key,value, ('key'+i), ('value'+i));
              newSetting[0].items[0].allowBlank = false;
              if(component.items.map['settingfieldset'])
              component.items.map['settingfieldset'].add(newSetting);
            }
          }
        }
      }
    }
  },

  onRefreshDataObjectCache: function(item, e, eOpts) {
    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode(); 

    Ext.Ajax.request({
      url: 'AdapterManager/RefreshObjectCache',
      method: 'POST',
      timeout: 3600000,  // 1 hour
      params: {
        'nodeid': node.data.id,//node.attributes.id,
        'objectType': node.data.text//node.text
      },
      success: function (response, request) {
        var responseObj = Ext.decode(response.responseText);

        if (responseObj.Level == 0) {
          showDialog(450, 100, 'Refresh Cache Result', 'Object cache refreshed successfully.', Ext.Msg.OK, null);
        }
        else {
          showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);
        }
      },
      failure: function (response, request) {
        showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);
      }
    })

  },

  onRefreshCache: function(item, e, eOpts) {

    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode(); 
    Ext.Ajax.request({
      url: 'AdapterManager/RefreshCache',
      method: 'POST',
      timeout: 28800000,  // 8 hours
      params: {
        'nodeid': node.data.id//node.attributes.id
      },
      success: function (response, request) {
        var responseObj = Ext.decode(response.responseText);

        if (responseObj.Level == 0) {
          showDialog(450, 100, 'Refresh Cache Result', 'Cache refreshed successfully.', Ext.Msg.OK, null);
        }
        else {
          showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);
        }
      },
      failure: function (response, request) {
        showDialog(500, 160, 'Refresh Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);
      }
    })
  },

  onImportCache: function(item, e, eOpts) {

    var me = this;
    var win = Ext.widget('importcachewindow');
    var form = win.down('form');
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();

    var formRecord = {
      nodeid: node.data.id 
    };


    form.getForm().setValues(formRecord);

    win.on('Save', function () {
      win.destroy();
    }, me);

    win.on('reset', function () {
      win.destroy();
    }, me);

    win.show();
  },

  onDeleteCache: function(item, e, eOpts) {

    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode(); 
    Ext.Ajax.request({
      url: 'AdapterManager/DeleteCache',
      method: 'POST',
      timeout: 120000,  // 2 minutes
      params: {
        'nodeid': node.data.id//node.attributes.id
      },
      success: function (response, request) {
        var responseObj = Ext.decode(response.responseText);

        if (responseObj.Level == 0) {
          showDialog(450, 100, 'Delete Cache Result', 'Cache deleted successfully.', Ext.Msg.OK, null);
        }
        else {
          showDialog(500, 160, 'Delete Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);
        }
      },
      failure: function (response, request) {
        showDialog(500, 160, 'Delete Cache Error', responseObj.Messages.join(), Ext.Msg.OK, null);
      }
    })
  },

  onAddVirtualProperty: function(item, e, eOpts) {

    var me = this;
    var win = Ext.widget('virtualpropertywindow');
    var form = win.down('form');
    var grid = form.down('grid');
    grid.getStore().removeAll();
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var properties = [];
    var formRecord = {
      objectName: node.data.text,
      scope:node.data.id.split('/')[0],
      app:node.data.id.split('/')[1]
    };
    var ii=0;
    node.eachChild(function(child) {
      properties.push([ii, child.data.text, child.data.property.Name]);
      ii++;
    });

    var mapCombo = grid.down('#propertyNameCmb').getEditor();//form.down('#propertyNameCmb');
    mapCombo.store = Ext.create('Ext.data.SimpleStore', {
      fields: ['value', 'text', 'name'],
      autoLoad: true,
      data: properties
    });


    form.getForm().setValues(formRecord);

    win.on('Save', function () {
      win.destroy();
    }, me);

    win.on('reset', function () {
      win.destroy();
    }, me);

    win.show();
  },

  onSaveVirtualProperties: function(button, e, eOpts) {
    var me = this;
    var form = button.up('form').getForm();
    var win = button.up('window');
    var objectName = form.findField('objectName').getValue();
    var propertyName = form.findField('propertyName').getValue();
    var delimeter = form.findField('delimeter').getValue();
    var scope = form.findField('scope').getValue();
    var app = form.findField('app').getValue();
    var oldPropertyName = form.findField('oldPropertyName').getValue();
    var properties;
    Ext.Ajax.request({
      url: 'AdapterManager/VirtualProperties',
      timeout: 600000,
      params: {
        scope: scope,
        app: app
      },
      success: function (response, request) {
        var folder = {};
        var flag = true;
        var res = Ext.decode(response.responseText);
        if(res.virtualProperties.length>=1){ //Adding if few properties alrady exist.
          properties = res;
          for(var i =0;i<res.virtualProperties.length;i++){
            if(res.virtualProperties[i].propertyName == oldPropertyName){
              folder = res.virtualProperties[i];
              flag = false;
            }
          }

        }else{ //Adding new virtual property if existing properties are zero.

          var virtualProperty = {};
          virtualProperty.virtualProperties = [];
          properties = virtualProperty;

        }


        folder.objectName = objectName;
        folder.delimiter = delimeter;
        folder.virtualPropertyValues = [];
        folder.columnName = propertyName;
        folder.propertyName = propertyName;
        folder.dataType = 11;
        folder.dataLength = 0;
        folder.isNullable = true;
        folder.keyType = 1;
        folder.showOnIndex = false;
        folder.numberOfDecimals = 0;
        folder.isReadOnly = false;
        folder.showOnSearch = false;
        folder.isHidden = false;
        folder.description = null;
        folder.aliasDictionary = null;
        folder.referenceType = null;
        folder.isVirtual = true;
        //virtualProperty.virtualProperties.push(folder);
        if(flag){
          var flagForExisting = true;
          for(var k=0;k<properties.virtualProperties.length;k++){
            if(properties.virtualProperties[k].propertyName == propertyName)
            flagForExisting = false;
          }
          if(flagForExisting)
          properties.virtualProperties.push(folder);
          else{
            var msg = 'Can not add duplicate property.'
            showDialog(300, 80, 'Saving Result', msg, Ext.Msg.OK, null);
            return false;
          }

        }			

        var gridStore = button.up('form').down('grid').getStore();

        for(var i=0;i<gridStore.data.length;i++){
          var virtualPropertyValues = {};
          if(gridStore.data.items[i].data.propertyType == 'Constant')
          virtualPropertyValues.type = 0;
          else
          virtualPropertyValues.type = 1;

          virtualPropertyValues.valueText = gridStore.data.items[i].data.valueText;
          virtualPropertyValues.propertyName = gridStore.data.items[i].data.propertyName;
          virtualPropertyValues.length = gridStore.data.items[i].data.propertyLength;
          folder.virtualPropertyValues.push(virtualPropertyValues);
        }

        Ext.Ajax.request({
          url: 'AdapterManager/SaveVirtualProperties',
          timeout: 600000,
          method: 'POST',
          params: {
            scope: scope,
            app: app,
            tree: Ext.JSON.encode(properties)
          },
          success: function (response, request) {

            win.fireEvent('save', me);
            me.getDirTree().onReload();
          },
          failure: function (response, request) {
            showDialog(400, 100, 'Saving Result', 'An error has occurred while saving virtual property.', Ext.Msg.OK, null);

          }
        });


      },
      failure: function (response, request) {
        showDialog(400, 100, 'Error', 'An error has occurred while getting virtual property.', Ext.Msg.OK, null);

      }
    });


  },

  onEditVirtualProperty: function(item, e, eOpts) {
    var me = this;
    var win = Ext.widget('virtualpropertywindow');
    win.setTitle('Edit Virtual Property');
    var form = win.down('form');
    var grid = form.down('grid');
    var store = grid.getStore();
    store.removeAll();
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    form.getForm().findField('oldPropertyName').setValue(node.data.text);
    Ext.Ajax.request({
      url: 'AdapterManager/VirtualProperties',
      timeout: 600000,
      params: {
        scope: node.data.id.split('/')[0],
        app: node.data.id.split('/')[1]
        //tree: Ext.JSON.encode(virtualProperty)
      },
      success: function (response, request) {
        var vProperties = Ext.decode(response.responseText).virtualProperties;
        var res = vProperties[0];
        for(j=0;j<vProperties.length;j++){
          if(vProperties[j].propertyName == node.data.text){
            res = vProperties[j];
            break;
          }
        }

        var properties = [];
        var formRecord = {
          objectName: res.objectName,
          scope:node.data.id.split('/')[0],
          app:node.data.id.split('/')[1],
          propertyName:res.propertyName,
          delimeter:res.delimiter
        };
        var ii=0;
        node.parentNode.eachChild(function(child) {
          properties.push([ii, child.data.text, child.data.property.Name]);
          ii++;
        });

        var mapCombo = grid.down('#propertyNameCmb').getEditor();//form.down('#propertyNameCmb');
        mapCombo.store = Ext.create('Ext.data.SimpleStore', {
          fields: ['value', 'text', 'name'],
          autoLoad: true,
          data: properties
        });

        form.getForm().setValues(formRecord);
        if(res.virtualPropertyValues!=undefined){
          for(var i=0;i<res.virtualPropertyValues.length;i++){
            var model = Ext.create('AM.model.VirtualPropertyModel');
            model.data.propertyLength = res.virtualPropertyValues[i].length;
            model.data.propertyName = res.virtualPropertyValues[i].propertyName;
            if(res.virtualPropertyValues[i].type == 0)    
            model.data.propertyType = 'Constant';
            else
            model.data.propertyType = 'Property';
            model.data.valueText = res.virtualPropertyValues[i].valueText;
            store.add(model);
          }
        }


        win.on('Save', function () {
          win.destroy();
        }, me);

        win.on('reset', function () {
          win.destroy();
        }, me);

        win.show();
        //var directoryTree = Ext.widget('directorytree');
        //win.fireEvent('save', me);
        //directoryTree.onReload();
      },
      failure: function (response, request) {
        showDialog(400, 100, 'Saving Result', 'An error has occurred while saving virtual property.', Ext.Msg.OK, null);

      }
    });





  },

  onDeleteVirtualProperty: function(item, e, eOpts) {
    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var scope = node.data.id.split('/')[0];
    var app = node.data.id.split('/')[1];

    Ext.Ajax.request({
      url: 'AdapterManager/VirtualProperties',
      timeout: 600000,
      params: {
        scope: scope,
        app: app
        //tree: Ext.JSON.encode(virtualProperty)
      },
      success: function (response, request) {
        var res = Ext.decode(response.responseText);

        for(var i=0;i<res.virtualProperties.length;i++){
          if(res.virtualProperties[i].propertyName == node.data.text){
            res.virtualProperties.splice(i,1);
            break;
          }
        }

        Ext.Ajax.request({
          url: 'AdapterManager/SaveVirtualProperties',
          timeout: 600000,
          method: 'POST',
          params: {
            scope: scope,
            app: app,
            tree:Ext.JSON.encode(res)
          },
          success: function (response, request) {

            me.getDirTree().onReload();
          },
          failure: function (response, request) {
            showDialog(400, 100, 'Saving Result', 'An error has occurred while saving virtual property.', Ext.Msg.OK, null);

          }
        });

      },
      failure: function (response, request) {
        showDialog(400, 100, 'Error', 'An error has occurred while deleting virtual property.', Ext.Msg.OK, null);

      }
    });

  },

  onSwitchToCached: function(item, e, eOpts) {
    var me = this;
    me.switchDataMode('Cache');
  },

  onSwitchToLive: function(item, e, eOpts) {
    var me = this;
    me.switchDataMode('Live');
  },

  refreshScopes: function(item, e, eOpts) {
    this.getDirTree().onReload();
  },

  init: function(application) {
    scopForExport = null;
    appForExport = null;
    Ext.QuickTips.init();

    this.control({
      "gridpanel": {
        metachange: this.handleMetachange
      },
      "directorypanel directorytree": {
        beforeload: this.onBeforeLoad
      },
      "menuitem[action=neweditscope]": {
        click: this.newOrEditScope
      },
      "menuitem[action=deletescope]": {
        click: this.deleteScope
      },
      "menuitem[action=neweditendpoint]": {
        click: this.newOrEditEndpoint
      },
      "menuitem[action=deleteendpoint]": {
        click: this.deleteEndpoint
      },
      "menuitem[action=newdatalayer]": {
        click: this.onNewDataLayer
      },
      "menuitem[action=regenerateall]": {
        click: this.onRegenerateAll
      },
      "menuitem[action=showdata]": {
        click: this.onShowDataGrid
      },
      "menuitem[action=refreshfacade]": {
        click: this.onRefreshFacade
      },
      "menuitem[action=configureendpoint]": {
        click: this.onConfigureEndpoint
      },
      "directorytree": {
        itemcontextmenu: this.showContextMenu,
        itemdblclick: this.onShowDataGridd
      },
      "menuitem[action=refreshdata]": {
        click: this.onAppDataRefreshClick
      },
      "textfield": {
        blur: this.onTextfieldBlur
      },
      "menuitem[action=fileupload]": {
        click: this.onFileUpload
      },
      "menuitem[action=filedownload]": {
        click: this.onFileDownload
      },
      "button[action = addsettings]": {
        click: this.onAddSettings
      },
      "form": {
        afterrender: this.onApplicationFormAfterRender
      },
      "menuitem[action=refreshdataobjectcache]": {
        click: this.onRefreshDataObjectCache
      },
      "menuitem[action=refreshcache]": {
        click: this.onRefreshCache
      },
      "menuitem[action=importcache]": {
        click: this.onImportCache
      },
      "menuitem[action = deletcache]": {
        click: this.onDeleteCache
      },
      "menuitem[action=addvirtualproperty]": {
        click: this.onAddVirtualProperty
      },
      "button[action=savevirtualproperties]": {
        click: this.onSaveVirtualProperties
      },
      "menuitem[action=editvirtualproperty]": {
        click: this.onEditVirtualProperty
      },
      "menuitem[action=deletevirtualproperty]": {
        click: this.onDeleteVirtualProperty
      },
      "menuitem[action=switchToCached]": {
        click: this.onSwitchToCached
      },
      "menuitem[action=switchToLive]": {
        click: this.onSwitchToLive
      },
      "menuitem[action=refreshscopes]": {
        click: this.refreshScopes
      }
    });
  },

  onShowGrap: function(items, e, eOpts) {
    //alert('onShowGrap...');
    var me = this;
    var tree = this.getDirTree();
    var node = tree.getSelectedNode();
    content = me.getMainContent();
    contextName = node.parentNode.parentNode.parentNode.data.property['Internal Name'];
    endpointName = node.parentNode.parentNode.data.property['Internal Name'];
    var graph = node.data.text;
  },

  addSettings: function(key, value, nameID, valueID) {
    return[ {
      xtype: 'container',
      margin:'10 20 0 96',
      //bodyStyle: 'padding:10px 20px 0 70px',
      layout:'column',
      items: [
      {
        xtype: 'textfield',
        name:nameID,
        value:key,
        columnWidth:'0.30',
        //width:164,
        allowBlank: true
      },
      {
        xtype: 'textarea',
        name:valueID,
        value:value,
        columnWidth:'0.60',
        grow : false,
        //width:270,  // height: 50,
        margin:'0 0 0 3',
        //margin:'0 0 0 3'
      },
      {
        xtype: 'button',
        //flex: 1,
        text: 'Delete',
        columnWidth:'0.10',
        margin:'0 0 0 3',
        //width:48,
        //margin:'0 0 0 3',
        //action:'DeleteMe',
        //icon :'../../ux/css/images/right2.gif',//'remove-button',
        //columnWidth: 0.10,
        //style: 'margin:0 0 0 49;',
        //style: 'float: right;',
        tooltip: 'Click to Delete settings',
        handler : function (){
          this.findParentByType('container').destroy();

        }
      }

      ]
    }

    ]
  },

  switchDataMode: function(mode) {
    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();    
    //var node = this.directoryPanel.getSelectionModel().getSelectedNode();
    //Ext.getCmp('content-panel').getEl().mask('Processing...', 'x-mask-loading');

    Ext.Ajax.request({
      url: 'AdapterManager/SwitchDataMode',
      method: 'POST',
      timeout: 3600000,
      params: {
        'nodeid': node.data.id,
        'mode': mode
      },
      success: function (response, request) {
        var responseObj = Ext.decode(response.responseText);

        if (responseObj.Level == 0) {
          showDialog(450, 100, 'Result', 'Data Mode switched to [' + mode + '].', Ext.Msg.OK, null);
        }
        else {
          showDialog(500, 160, 'Result', responseObj.Messages.join('\n'), Ext.Msg.OK, null);
        }
        tree.onReload();
        //node.parentNode.reload();
        //Ext.getCmp('content-panel').getEl().unmask();
      },
      failure: function (response, request) {
        showDialog(500, 160, 'Error', responseObj.Messages.join('\n'), Ext.Msg.OK, null);
        //node.parentNode.reload();
        //Ext.getCmp('content-panel').getEl().unmask();
      }
    });
  }

});
