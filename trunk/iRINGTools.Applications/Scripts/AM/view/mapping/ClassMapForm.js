/*
 * File: Scripts/AM/view/mapping/ClassMapForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.mapping.ClassMapForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.classmapform',

    mappingNode: '',
    parentClassId: '',
    formid: '',
    bodyStyle: 'padding:10px 5px 0',
    method: 'POST',
    url: 'mapping/addclassmap',

    initComponent: function () {
        var me = this;

        me.initialConfig = Ext.apply({
            method: 'POST',
            url: 'mapping/addclassmap'
        }, me.initialConfig);

        Ext.applyIf(me, {
            items: [
        {
            xtype: 'fieldset',
            hidden: true,
            items: [
            {
                xtype: 'hiddenfield',
                name: 'graph'
            },
            {
                xtype: 'hiddenfield',
                name: 'templateIndex'
            },
            {
                xtype: 'hiddenfield',
                name: 'parentClassId'
            },
            {
                xtype: 'hiddenfield',
                name: 'parentClassIndex'
            },
            {
                xtype: 'hiddenfield',
                name: 'roleName'
            },
            {
                xtype: 'hiddenfield',
                name: 'dataObject'
            },
            {
                xtype: 'hiddenfield',
                name: 'propertyName'
            },
            {
                xtype: 'hiddenfield',
                name: 'baseUrl'
            },
            {
                xtype: 'hiddenfield',
                name: 'app'
            },
            {
                xtype: 'hiddenfield',
                name: 'scope'
            },
            {
                xtype: 'hiddenfield',
                name: 'relation'
            },
            {
                xtype: 'hiddenfield',
                name: 'classId'
            },
            {
                xtype: 'hiddenfield',
                name: 'classIndex'
            },
            {
                xtype: 'hiddenfield',
                name: 'className'
            },
            {
                xtype: 'hiddenfield',
                name: 'objectName'
            },
            {
                xtype: 'hiddenfield',
                name: 'identifier'
            },
            {
                xtype: 'hiddenfield',
                name: 'newEdit'
            }
          ]
        },
        {
            xtype: 'label',
            margin: '10 0 0 0',
            text: 'Identifier Delimiter (required for composite identifier):'
        },
        {
            xtype: 'textfield',
            margin: '5 0 15 25',
            width: 100,
            name: 'delimeter',
            value: '_',
            allowBlank: false
        },
        {
            xtype: 'label',
            margin: '10 0 0 0',
            text: 'Identifier:'
        },
        {
            xtype: 'container',
            anchor: '100%',
            html: 'Drop a Property Node(s) here.',
            itemId: 'cmpcontainer',
            margin: '5 0 15 25',
            style: 'border:1px silver solid;margin:5px;padding:8px;height:40px',
            styleHtmlContent: true
        },
        {
            xtype: 'label',
            margin: '10 0 0 0',
            text: 'Class:'
        },
        {
            xtype: 'container',
            anchor: '100%',
            html: 'Drop a Class Node here.',
            itemId: 'cmccontainer',
            margin: '5 0 15 25',
            style: 'border:1px silver solid;margin:5px;padding:8px;height:40px',
            styleHtmlContent: true
        }
      ],
            dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            items: [
            {
                xtype: 'tbfill'
            },
            {
                xtype: 'button',
                handler: function (button, event) {
                    me.onSave();
                },
                text: 'Ok'
            },
            {
                xtype: 'button',
                handler: function (button, event) {
                    me.onResetButtonClick();
                },
                text: 'Reset'
            },
            {
                xtype: 'button',
                handler: function (button, event) {
                    me.onReset();
                },
                text: 'Cancel'
            }
          ]
        }
      ],
            listeners: {
                afterrender: {
                    fn: me.onFormAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onFormAfterRender: function (component, eOpts) {
        var me = this;
        var pcont = me.down('#cmpcontainer');
        var propertyDropTarget = new Ext.dd.DropTarget(pcont.getEl(), {
            scope: me,
            ddGroup: 'propertyGroup',
            copy: false,
            overClass: 'over',
            notifyOver: function (dragSource, event, data) {
                if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode')
                    return this.dropNotAllowed;
                else
                    return this.dropAllowed;
            },
            notifyDrop: function (dragSource, event, data) {
                if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode') {
                    return false;
                }
                else {

                    var ident = getLastXString(data.records[0].data.id, 1);
                    var object = "";

                    var key = ""; //key1+'.'+key2;
                    var selNode = Ext.getCmp("directoryTreeID").down("directorytree").getSelectedNode();

                    var propertyArr = data.records[0].data.id.split('/');
                    if (selNode.parentNode.data.type == "RelationshipNode") {
                        key = propertyArr[propertyArr.length - 3] + '.' + propertyArr[propertyArr.length - 2] + '.' + propertyArr[propertyArr.length - 1];
                        object = propertyArr[propertyArr.length - 3] + '.' + propertyArr[propertyArr.length - 2];
                    } else {
                        key = propertyArr[propertyArr.length - 2] + '.' + propertyArr[propertyArr.length - 1];
                        object = getLastXString(data.records[0].data.id, 2);
                    }
                    if (me.getForm().findField('identifier').getValue() != 'Drop property node(s) here.') {

                        var existingIdentifier = me.getForm().findField('identifier').getValue();
                        var objectName = me.getForm().findField('objectName').getValue();
                        var tempObjName = "";
                        if (existingIdentifier != '') {
                            if (selNode.parentNode.data.type == "RelationshipNode") {
                                tempObjName = existingIdentifier.split('.')[0] +'.'+ existingIdentifier.split('.')[1];
                            } else {
                                tempObjName = existingIdentifier.split('.')[0];
                            }

                            if (object != tempObjName) {
                                //var message = 'Properties must root from the same data object as graph!';
                                //showDialog(400, 100, 'Error', message, Ext.Msg.OK, null);
                                Ext.widget('messagepanel', { title: 'Error', msg: 'Properties must root from the same data object as graph!' });
                                return false;
                            }

                            if (existingIdentifier.indexOf(key) != -1) {
                                //var message = 'Duplicate properties are not allowed!';
                                //showDialog(400, 100, 'Error', message, Ext.Msg.OK, null);
                                Ext.widget('messagepanel', { title: 'Error', msg: 'Duplicate properties are not allowed!' });
                                return false;
                            }
                            key = existingIdentifier + ',' + key;
                        } else
                            key = key;
                        me.getForm().findField('identifier').setValue(key);
                    } else {
                        me.getForm().findField('identifier').setValue(key);
                    }
                    me.getForm().findField('objectName').setValue(object); //(data.records[0].data.id);
                    me.getForm().findField('relation').setValue(data.records[0].data.property.Related);
                    //var msg = 'Property: ' + data.records[0].data.id.split('/')[data.records[0].data.id.split('/').length - 1];
                    pcont.update(key);
                    return true;
                }
            },
            notifyEnter: function (dd, e, data) {
                if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode')
                    return this.dropNotAllowed;
                else
                    return this.dropAllowed;
            }
        });

        var ccont = me.down('#cmccontainer');
        var classDropTarget = new Ext.dd.DropTarget(ccont.getEl(), {
            scope: me,
            //ddGroup: 'refdataGroup',
            ddGroup: 'propertyGroup',
            copy: false,
            overClass: 'over',
            notifyEnter: function (dd, e, data) {
                if (data.records[0].data.type != 'ClassNode')
                    return this.dropNotAllowed;
                else
                    return this.dropAllowed;
            },
            notifyOver: function (dragSource, event, data) {
                if (data.records[0].data.type != 'ClassNode')
                    return this.dropNotAllowed;
                else
                    return this.dropAllowed;
            },
            notifyDrop: function (dragSource, event, data) {
                if (data.records[0].data.type != 'ClassNode') {
                    //var message = 'Please slect a RDL Class...';
                    //showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
                    Ext.widget('messagepanel', { title: 'Warning', msg: 'Please slect a RDL Class.' });
                    return false;
                }
                me.getForm().findField('className').setValue(data.records[0].data.record.Label);
                me.getForm().findField('classId').setValue(data.records[0].data.record.Uri);
                var msg = data.records[0].data.record.Label; //'Class Label: ' + data.records[0].data.record.Label;
                ccont.update(msg);
                return true;
            }
        });
    },

    onReset: function () {
        var me = this;
        var win = me.up('window');
        me.getForm().reset();
        win.destroy();
    },

    onSave: function () {
        var me = this;
        var win = me.up('window');
        var form = me.getForm();
        var message;
        //if ((form.findField('identifier').getValue().trim() == 'Drop property node(s) here.' || form.findField('identifier').getValue().trim() == '') || (form.findField('className').getValue().trim() == 'Drop a class node here.' || form.findField('className').getValue().trim() == '')) {
        //if (((form.findField('identifier').getValue().indexOf('Drop property node(s) here.') >= 0) || form.findField('identifier').getValue == '') || ((form.findField('className').getValue().indexOf('Drop a class node here.') >= 0) || form.findField('className').getValue() == '')) {
        //FK - Regular expression to create trim functionality by replacing the the spaces.
        if ((form.findField('identifier').getValue().replace(/^\s+|\s+$/g, '') == 'Drop property node(s) here.' || form.findField('identifier').getValue().replace(/^\s+|\s+$/g, '') == '') || (form.findField('className').getValue().replace(/^\s+|\s+$/g, '') == 'Drop a class node here.' || form.findField('className').getValue().replace(/^\s+|\s+$/g, '') == '')) {
            Ext.widget('messagepanel', { title: 'Warning', msg: 'Required fields can not be blank!' });
            return;
        }

        if (me.getForm().isValid()) {
            me.submit({
                waitMsg: 'Saving Data...',
                success: function (result, request) {
                    me.result = request.result;
                    win.fireEvent('save', me);
                },
                failure: function (result, request) {
                    var resp = Ext.decode(request.response.responseText);
                    var userMsg = resp['message'];
                    var detailMsg = resp['stackTraceDescription'];
                    var expPanel = Ext.widget('exceptionpanel', { title: 'Error Notification' });
                    Ext.ComponentQuery.query('#expValue', expPanel)[0].setValue(userMsg);
                    Ext.ComponentQuery.query('#expValue2', expPanel)[0].setValue(detailMsg);
                }
            });
        } else {
            // message = 'Form is not complete. Cannot save record.';
            // showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
            Ext.widget('messagepanel', { title: 'Warning', msg: 'Form is not complete. Cannot save record.' });
        }


    },

    onResetButtonClick: function () {

        var me = this;
        var win = me.up('window');
        me.getForm().reset();
        me.getForm().findField('objectName').setValue('');
        me.getForm().findField('identifier').setValue('Drop property node(s) here.');
        me.down('#cmpcontainer').update('Drop property node(s) here.');
    },

    updateDDContainers: function (record) {
        var me = this;
        var pcon = me.down('#cmpcontainer');
        var ccon = me.down('#cmccontainer');
        var identifier = 'Drop property node(s) here.';
        var classlabel = 'Drop a class node here.';
        var classId = '';
        var classIndex = '0';
        var newEdit = 'NEW';
        var delimeter = '_';
        /*if (record != null && record.classMap != null) {
        identifier = record.classMap.identifiers[0];
        if (record.classMap.identifiers.length > 1) {
        for (var i = 1; i < record.classMap.identifiers.length; i++) {
        identifier = identifier + ',' + record.classMap.identifiers[i];
        }
        }
        classlabel = record.classMap.name;
        classId = record.classMap.id;
        classIndex = record.classMap.index;
        newEdit = 'EDIT';
        if (record.classMap.identifierDelimiter != null)
        delimeter = record.classMap.identifierDelimiter;
        }*/
        if (record != null) {
            identifier = record['identifier'];
            /*var identifierArr = identifier.split(',');
            if (identifierArr.length > 1) {
            for (var i = 1; i < identifierArr.length; i++) {
            identifier = identifier + ',' + identifierArr[i].split('.')[1];
            }
            }*/
            classlabel = record['class name'];
            classId = record['class id'];
            //classIndex = record.classMap.index;
            newEdit = 'EDIT';
            if (record['identifier delimiter'] != null)
                delimeter = record['identifier delimiter'];
        }
        pcon.update(identifier);
        ccon.update(classlabel);
        me.getForm().findField('newEdit').setValue(newEdit);
        me.getForm().findField('identifier').setValue(identifier);
        me.getForm().findField('className').setValue(classlabel);
        me.getForm().findField('classId').setValue(classId);
        me.getForm().findField('classIndex').setValue(classIndex);
        me.getForm().findField('delimeter').setValue(delimeter);



        //if(record!=null)
        //var classlabel = 'Class Label: ' + label;
        // else
        // var classlabel = 'Drop a class node here.';


        //ccon.update(classlabel);
    }

});