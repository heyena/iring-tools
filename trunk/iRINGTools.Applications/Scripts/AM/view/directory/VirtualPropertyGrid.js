/*
 * File: Scripts/AM/view/directory/VirtualPropertyGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.directory.VirtualPropertyGrid', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.virtualpropertygrid',

  itemId: 'virtualGrid',
  bodyBorder: false,
  frameHeader: false,
  header: false,
  title: 'My Grid Panel',
  store: 'VirtualPropertyStore',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      columns: [
        {
          xtype: 'rownumberer',
          width: 40,
          align: 'left',
          text: 'Sr. No'
        },
        {
          xtype: 'gridcolumn',
          dataIndex: 'type',
          text: 'Type',
          flex: 1,
          editor: {
            xtype: 'combobox',
            store: [
              [
                'Constant',
                'Constant'
              ],
              [
                'Temporary',
                'Temporary'
              ]
            ]
          }
        },
        {
          xtype: 'gridcolumn',
          itemId: 'propertyNameCmb',
          dataIndex: 'propertyName',
          text: 'Property',
          flex: 1,
          editor: {
            xtype: 'combobox',
            itemId: 'propertyNameEditorCmb'
          }
        },
        {
          xtype: 'numbercolumn',
          dataIndex: 'length',
          text: 'Length',
          flex: 1,
          editor: {
            xtype: 'numberfield'
          }
        },
        {
          xtype: 'gridcolumn',
          dataIndex: 'valueText',
          text: 'Text',
          flex: 1,
          editor: {
            xtype: 'textfield'
          }
        }
      ],
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'top',
          items: [
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onAddRecord();
              },
              iconCls: 'am-list-add',
              text: 'Add'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onRemoveRecord();
              },
              iconCls: 'am-list-remove',
              text: 'Remove'
            }
          ]
        }
      ],
      plugins: [
        Ext.create('Ext.grid.plugin.RowEditing', {
          autoCancel: false,
          clicksToMoveEditor: 1
        })
      ]
    });

    me.callParent(arguments);
  },

  onAddRecord: function() {
    var me = this; //me here is grid refrence...
    var rowEditing = me.editingPlugin;
    //rowEditing.cancelEdit();
    var store = me.getStore();
    var sm = me.getSelectionModel();
    // Create a model instance
    var r = Ext.create('AM.model.VirtualPropertyModel', {
      type: '',
      propertyName: '',
      length: 0,
      valueText: ''
    });

    store.insert(0, r);
    rowEditing.startEdit(0, 0);
  },

  onRemoveRecord: function() {

    var me = this; //me here is grid refrence...
    var store = me.getStore();
    var sm = me.getSelectionModel();
    var rowEditing = me.editingPlugin;
    //rowEditing.cancelEdit();
    store.remove(sm.getSelection());
    if (store.getCount() > 0) {
      sm.select(0);
    }
  }

});